{"version":3,"file":"detailBlock.js","sources":["../../../Framework/Templates/detailBlock.ts"],"sourcesContent":["// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { computed, defineComponent, PropType, ref, watch } from \"vue\";\r\nimport Panel from \"@Obsidian/Controls/panel\";\r\nimport Modal from \"@Obsidian/Controls/modal\";\r\nimport { Guid } from \"@Obsidian/Types\";\r\nimport { PanelAction } from \"@Obsidian/Types/Controls/panelAction\";\r\nimport { DetailPanelMode } from \"@Obsidian/Enums/Controls/detailPanelMode\";\r\nimport { isPromise, PromiseCompletionSource } from \"@Obsidian/Utility/promiseUtils\";\r\nimport { FollowingGetFollowingOptionsBag } from \"@Obsidian/ViewModels/Rest/Controls/followingGetFollowingOptionsBag\";\r\nimport { FollowingGetFollowingResponseBag } from \"@Obsidian/ViewModels/Rest/Controls/followingGetFollowingResponseBag\";\r\nimport { FollowingSetFollowingOptionsBag } from \"@Obsidian/ViewModels/Rest/Controls/followingSetFollowingOptionsBag\";\r\nimport AuditDetail from \"@Obsidian/Controls/auditDetail\";\r\nimport BadgeList from \"@Obsidian/Controls/badgeList\";\r\nimport EntityTagList from \"@Obsidian/Controls/entityTagList\";\r\nimport RockButton from \"@Obsidian/Controls/rockButton\";\r\nimport RockForm from \"@Obsidian/Controls/rockForm\";\r\nimport RockSuspense from \"@Obsidian/Controls/rockSuspense\";\r\nimport { useVModelPassthrough } from \"@Obsidian/Utility/component\";\r\nimport { alert, confirmDelete } from \"@Obsidian/Utility/dialogs\";\r\nimport { useHttp } from \"@Obsidian/Utility/http\";\r\nimport { makeUrlRedirectSafe } from \"@Obsidian/Utility/url\";\r\nimport { asBooleanOrNull } from \"@Obsidian/Utility/booleanUtils\";\r\n\r\n// Define jQuery and Rock for showing security modal.\r\ndeclare function $(value: unknown): unknown;\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/naming-convention\r\ndeclare const Rock: any;\r\n\r\n/** Provides a pattern for entity detail blocks. */\r\nexport default defineComponent({\r\n    name: \"DetailBlock\",\r\n\r\n    components: {\r\n        AuditDetail,\r\n        EntityTagList,\r\n        Modal,\r\n        Panel,\r\n        RockButton,\r\n        RockForm,\r\n        RockSuspense,\r\n        BadgeList\r\n    },\r\n\r\n    props: {\r\n        /** The name of the entity. This will be used to construct the panel title. */\r\n        name: {\r\n            type: String as PropType<string>,\r\n            required: false\r\n        },\r\n\r\n        /**\r\n         * The full title to use for the panel. This will override the default\r\n         * logic for setting the title.\r\n         */\r\n        title: {\r\n            type: String as PropType<string>,\r\n            required: false\r\n        },\r\n\r\n        /** The unique identifier of the entity type that this detail block represents. */\r\n        entityTypeGuid: {\r\n            type: String as PropType<Guid>,\r\n            required: true\r\n        },\r\n\r\n        /** The friendly name of the entity type that this block represents. */\r\n        entityTypeName: {\r\n            type: String as PropType<string>,\r\n            required: true\r\n        },\r\n\r\n        /** The identifier key of the entity being displayed by this block. */\r\n        entityKey: {\r\n            type: String as PropType<string | null>,\r\n            required: false\r\n        },\r\n\r\n        /** If true then entity tags will be displayed in view mode. */\r\n        isTagsVisible: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        /** If true then the following action will be displayed in view mode. */\r\n        isFollowVisible: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        /** If true then badges for the entity will be displayed in view mode. */\r\n        isBadgesVisible: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        /** If true then the entity audit information will not be available. */\r\n        isAuditHidden: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        /** If true then the entity security button will not be visible. */\r\n        isSecurityHidden: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        /** If true then the individual will be able to enter edit mode. */\r\n        isEditVisible: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        /**\r\n         * If true then the delete button will be visible and emit the delete\r\n         * event when clicked.\r\n         */\r\n        isDeleteVisible: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        /** The current display mode for the detail panel. */\r\n        mode: {\r\n            type: Number as PropType<DetailPanelMode>,\r\n            default: DetailPanelMode.View\r\n        },\r\n\r\n        /** Additional actions that should be displayed in the panel header. */\r\n        headerActions: {\r\n            type: Array as PropType<PanelAction[]>,\r\n            required: false\r\n        },\r\n\r\n        /**\r\n         * Additional actions that should be displayed in the secondary\r\n         * panel header zone. These are currently placed inside the ellipsis.\r\n         */\r\n        headerSecondaryActions: {\r\n            type: Array as PropType<PanelAction[]>,\r\n            required: false\r\n        },\r\n\r\n        /**\r\n         * Custom labels to display that will provide additional context\r\n         * information about the entity. These are only shown in view mode.\r\n         */\r\n        labels: {\r\n            type: Array as PropType<PanelAction[]>,\r\n            required: false\r\n        },\r\n\r\n        /**\r\n         * Additional actions to display in the footer of the panel. These are\r\n         * currently displayed as full buttons on the left of the footer.\r\n         */\r\n        footerActions: {\r\n            type: Array as PropType<PanelAction[]>,\r\n            required: false\r\n        },\r\n\r\n        /**\r\n         * Additional secondary actions to display in the footer of the panel.\r\n         * These are currently displayed as icon buttons in the right of the footer.\r\n         */\r\n        footerSecondaryActions: {\r\n            type: Array as PropType<PanelAction[]>,\r\n            required: false\r\n        },\r\n\r\n        /**\r\n         * A function to be called when the individual clicks the Cancel button\r\n         * while in edit mode. If provided, the function must return true to\r\n         * allow the panel to switch back to view mode. If it returns false then\r\n         * the panel will stay in edit mode. If it returns a string then the\r\n         * person will be redirected to that URL.\r\n         */\r\n        onCancelEdit: {\r\n            type: Function as PropType<() => boolean | string | PromiseLike<boolean | string>>,\r\n            required: false\r\n        },\r\n\r\n        /**\r\n         * A function to be called when the individual clicks the Edit button\r\n         * while in view mode. If provided, the function must return true to\r\n         * allow the panel to switch into edit mode. If it returns false then the\r\n         * panel will stay in view mode.\r\n         */\r\n        onEdit: {\r\n            type: Function as PropType<() => boolean | PromiseLike<boolean>>,\r\n            required: false\r\n        },\r\n\r\n        /**\r\n         * A function to be called when the individual clicks the Save button\r\n         * while in edit mode. If provided, the function must return true to\r\n         * allow the panel to switch back to view mode. If it returns false then\r\n         * the panel will stay in edit mode. Return a string to redirect the\r\n         * person to the URL contained in the string. Your logic to save the\r\n         * entity to the server should be placed in this function.\r\n         */\r\n        onSave: {\r\n            type: Function as PropType<() => boolean | string | PromiseLike<boolean | string>>,\r\n            required: false\r\n        },\r\n\r\n        /**\r\n         * A function to be called when the individual clicks the Delete button\r\n         * while in view mode. Your logic to delete the entity should be placed\r\n         * in this function. If the person should be redirected to another page\r\n         * then return the URL. If the delete was aborted, return false.\r\n         */\r\n        onDelete: {\r\n            type: Function as PropType<() => false | string | PromiseLike<false | string>>,\r\n            required: false\r\n        }\r\n    },\r\n\r\n    emits: {\r\n        \"update:mode\": (_value: DetailPanelMode) => true\r\n    },\r\n\r\n    setup(props, { emit }) {\r\n        // #region Values\r\n\r\n        const http = useHttp();\r\n        const internalMode = useVModelPassthrough(props, \"mode\", emit);\r\n        const isFormSubmitting = ref(false);\r\n        const isEditModeLoading = ref(false);\r\n        const isEntityFollowed = ref<boolean | null>(null);\r\n        const showAuditDetailsModal = ref(false);\r\n        const isPanelVisible = ref(true);\r\n\r\n        let formSubmissionSource: PromiseCompletionSource | null = null;\r\n        let editModeReadyCompletionSource: PromiseCompletionSource | null = null;\r\n\r\n        // AutoEditMode means we go directly into edit mode and, usually, have a\r\n        // custom return URL to use when leaving edit mode. This can be used\r\n        // in cases where it doesn't make sense for the detail block to show\r\n        // a read-only view.\r\n        const params = new URLSearchParams(window.location.search);\r\n        const isAutoEditMode = ref(asBooleanOrNull(params.get(\"autoEdit\")) ?? false);\r\n        const autoEditReturnUrl = params.get(\"returnUrl\");\r\n\r\n        // #endregion\r\n\r\n        // #region Computed Values\r\n\r\n        /**\r\n         * Contains the title to be displayed in the panel depending on the\r\n         * property values and the current state of the panel.\r\n         */\r\n        const panelTitle = computed((): string => {\r\n            if (props.title) {\r\n                return props.title;\r\n            }\r\n\r\n            switch (internalMode.value) {\r\n                // If we are in view mode then display either the entity name or\r\n                // the entity type name.\r\n                case DetailPanelMode.View:\r\n                    return props.name ?? props.entityTypeName;\r\n\r\n                // If we are in edit or add mode then display just the entity type\r\n                // name. An icon will be shown before the text.\r\n                case DetailPanelMode.Edit:\r\n                case DetailPanelMode.Add:\r\n                default:\r\n                    return props.entityTypeName;\r\n            }\r\n        });\r\n\r\n        /** The CSS icon to display before the text in the panel header. */\r\n        const panelTitleIconCssClass = computed((): string => {\r\n            switch (internalMode.value) {\r\n                // If we are in edit mode show an icon to indicate that to the individual.\r\n                case DetailPanelMode.Edit:\r\n                    return \"fa fa-pencil\";\r\n\r\n                // If we are in add mode show an icon to indicate that to the individual.\r\n                case DetailPanelMode.Add:\r\n                    return \"fa fa-plus\";\r\n\r\n                case DetailPanelMode.View:\r\n                default:\r\n                    return \"\";\r\n            }\r\n        });\r\n\r\n        /** The secondary actions to show in the ellipsis of the panel header. */\r\n        const internalHeaderSecondaryActions = computed((): PanelAction[] => {\r\n            const actions: PanelAction[] = [];\r\n\r\n            if (!props.isAuditHidden) {\r\n                actions.push({\r\n                    type: \"default\",\r\n                    title: \"Audit Details\",\r\n                    handler: onAuditClick\r\n                });\r\n            }\r\n\r\n            // If the block has their own actions, add them in.\r\n            if (props.headerSecondaryActions) {\r\n                for (const action of props.headerSecondaryActions) {\r\n                    actions.push(action);\r\n                }\r\n            }\r\n\r\n            return actions;\r\n        });\r\n\r\n        /** The secondary footer actions to show in the block. */\r\n        const internalFooterSecondaryActions = computed((): PanelAction[] => {\r\n            const actions: PanelAction[] = [];\r\n\r\n            // If the security button should be visible, we are in view mode and\r\n            // we have a valid entity then show it.\r\n            if (!props.isSecurityHidden && isViewMode.value && props.entityKey) {\r\n                actions.push({\r\n                    iconCssClass: \"fa fa-lock\",\r\n                    title: \"Edit Security\",\r\n                    type: \"default\",\r\n                    handler: onSecurityClick\r\n                });\r\n            }\r\n\r\n            // If the block has their own actions, add them in.\r\n            if (props.footerSecondaryActions) {\r\n                for (const action of props.footerSecondaryActions) {\r\n                    actions.push(action);\r\n                }\r\n            }\r\n\r\n            return actions;\r\n        });\r\n\r\n        /** True when we are in view mode. */\r\n        const isViewMode = computed((): boolean => {\r\n            return internalMode.value === DetailPanelMode.View && !isAutoEditMode.value;\r\n        });\r\n\r\n        /** True when we are in one of the edit modes (edit or add). */\r\n        const isEditMode = computed((): boolean => {\r\n            return internalMode.value === DetailPanelMode.Edit || internalMode.value === DetailPanelMode.Add;\r\n        });\r\n\r\n        /** True when the edit button should be visible. */\r\n        const isEditModeVisible = computed((): boolean => {\r\n            return isEditMode.value || isEditModeLoading.value;\r\n        });\r\n\r\n        /** True if the panel should be shown on screen or False if it should be in the DOM but hidden. */\r\n        const isPanelShown = computed((): boolean => {\r\n            return !isAutoEditMode.value || isEditMode.value;\r\n        });\r\n\r\n        /** True if we have any labels to display. */\r\n        const hasLabels = computed((): boolean => {\r\n            return !!props.labels && props.labels.length > 0;\r\n        });\r\n\r\n        /** The header actions that should be displayed in the panel title area. */\r\n        const headerActions = computed((): PanelAction[] => {\r\n            const actions = [...props.headerActions ?? []];\r\n\r\n            // Add in the follow action if we are in view mode and it has been requested.\r\n            if (props.isFollowVisible && isViewMode.value) {\r\n                actions.push({\r\n                    type: isEntityFollowed.value ? \"primary\" : \"default\",\r\n                    iconCssClass: isEntityFollowed.value ? \"fa fa-star\" : \"fa fa-star-o\",\r\n                    handler: onFollowClick,\r\n                    title: isEntityFollowed.value ? `You are currently following ${props.name}.` : `Click to follow ${props.name}.`\r\n                });\r\n            }\r\n\r\n            return actions;\r\n        });\r\n\r\n        // #endregion\r\n\r\n        // #region Functions\r\n\r\n        /**\r\n         * Gets the CSS class to use for an action when it is displayed\r\n         * as a plain icon.\r\n         *\r\n         * @param action The action to be displayed.\r\n         *\r\n         * @returns A string that contains the CSS classes to apply to the DOM element.\r\n         */\r\n        const getClassForIconAction = (action: PanelAction): string => {\r\n            let cssClass = action.handler ? \"action clickable\" : \"action\";\r\n\r\n            if (action.type !== \"default\" && action.type !== \"link\") {\r\n                cssClass += ` text-${action.type}`;\r\n            }\r\n\r\n            return cssClass;\r\n        };\r\n\r\n        /**\r\n         * Gets the CSS class to use for an action when it is displayed\r\n         * as a label.\r\n         *\r\n         * @param action The action to be displayed.\r\n         *\r\n         * @returns A string that contains the CSS classes to apply to the DOM element.\r\n         */\r\n        const getClassForLabelAction = (action: PanelAction): string => {\r\n            let cssClass = action.handler ? \"label clickable\" : \"label\";\r\n\r\n            if (action.type === \"link\") {\r\n                cssClass += \" label-default\";\r\n            }\r\n            else {\r\n                cssClass += ` label-${action.type}`;\r\n            }\r\n\r\n            return cssClass;\r\n        };\r\n\r\n        /**\r\n         * Get the icon CSS class to use for the action when it is displayed\r\n         * as a plain icon.\r\n         *\r\n         * @param action The action to be displayed.\r\n         *\r\n         * @returns A string that contains the CSS classes to apply to the DOM element.\r\n         */\r\n        const getActionIconCssClass = (action: PanelAction): string => {\r\n            // Provide a default value if they didn't give us one.\r\n            return action.iconCssClass || \"fa fa-square\";\r\n        };\r\n\r\n        /**\r\n         * Get the current followed state for the entity we are displaying in\r\n         * this detail block.\r\n         */\r\n        const getEntityFollowedState = async (): Promise<void> => {\r\n            // If we don't have an entity then mark the state as \"unknown\".\r\n            if (!props.entityTypeGuid || !props.entityKey) {\r\n                isEntityFollowed.value = null;\r\n                return;\r\n            }\r\n\r\n            const data: FollowingGetFollowingOptionsBag = {\r\n                entityTypeGuid: props.entityTypeGuid,\r\n                entityKey: props.entityKey\r\n            };\r\n\r\n            const response = await http.post<FollowingGetFollowingResponseBag>(\"/api/v2/Controls/FollowingGetFollowing\", undefined, data);\r\n\r\n            isEntityFollowed.value = response.isSuccess && response.data && response.data.isFollowing;\r\n        };\r\n\r\n        // #endregion\r\n\r\n        // #region Event Handlers\r\n\r\n        /**\r\n         * Called when the security button has been clicked.\r\n         * Shows the edit security modal.\r\n         *\r\n         * @param event The event that triggered this handler.\r\n         */\r\n        const onSecurityClick = (event: Event): void => {\r\n            Rock.controls.modal.show($(event.target), `/Secure/${props.entityTypeGuid}/${props.entityKey}?t=Secure ${props.entityTypeName}&pb=&sb=Done`);\r\n        };\r\n\r\n        /**\r\n         * Called when the cancel button has been clicked while in edit mode.\r\n         * Check with the block if we should return to view mode or stay\r\n         * in edit mode.\r\n         */\r\n        const onEditCancelClick = async (): Promise<void> => {\r\n            if (props.onCancelEdit) {\r\n                let result = props.onCancelEdit();\r\n\r\n                if (isPromise(result)) {\r\n                    result = await result;\r\n                }\r\n\r\n                if (result === false) {\r\n                    return;\r\n                }\r\n\r\n                if (isAutoEditMode.value) {\r\n                    isAutoEditMode.value = false;\r\n\r\n                    if (autoEditReturnUrl) {\r\n                        window.location.href = makeUrlRedirectSafe(autoEditReturnUrl);\r\n\r\n                        // Don't switch back to view mode.\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                if (typeof result === \"string\") {\r\n                    window.location.href = makeUrlRedirectSafe(result);\r\n\r\n                    // Don't switch back to view mode.\r\n                    return;\r\n                }\r\n            }\r\n\r\n            internalMode.value = DetailPanelMode.View;\r\n        };\r\n\r\n        /**\r\n         * Called when the edit button has been clicked. Check with the block\r\n         * if we should switch to edit mode or stay in view mode.\r\n         */\r\n        const onEditClick = async (): Promise<boolean> => {\r\n            if (props.onEdit) {\r\n                let result = props.onEdit();\r\n\r\n                if (isPromise(result)) {\r\n                    result = await result;\r\n                }\r\n\r\n                if (result !== true) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            // If we are in auto edit mode, the panel is currently hidden. Show it.\r\n            if (isAutoEditMode.value) {\r\n                isPanelVisible.value = true;\r\n            }\r\n\r\n            // Block has given go ahead for edit mode, note that we are currently\r\n            // switching to edit mode and waiting for the view to load.\r\n            isEditModeLoading.value = true;\r\n\r\n            // Wait for the RockSuspense control to indicate that the view is\r\n            // fully loaded and ready to display.\r\n            editModeReadyCompletionSource = new PromiseCompletionSource();\r\n            await editModeReadyCompletionSource.promise;\r\n\r\n            // Perform the final switch into edit mode.\r\n            internalMode.value = props.entityKey ? DetailPanelMode.Edit : DetailPanelMode.Add;\r\n            isEditModeLoading.value = false;\r\n            editModeReadyCompletionSource = null;\r\n\r\n            return true;\r\n        };\r\n\r\n        /**\r\n         * Called when the RockSuspense control for the Edit panel has detected\r\n         * that it is fully loaded and ready to display.\r\n         */\r\n        const onEditSuspenseReady = (): void => {\r\n            editModeReadyCompletionSource?.resolve();\r\n        };\r\n\r\n        /**\r\n         * Called when the Save button has been clicked. Trigger the submit\r\n         * operation on the form to perform validation.\r\n         */\r\n        const onSaveClick = async (): Promise<void> => {\r\n            // Trigger the form to begin processing and then wait for it to\r\n            // fully complete. This makes sure the Save button stays disabled\r\n            // until the action is complete so they can't double click.\r\n            formSubmissionSource = new PromiseCompletionSource();\r\n            isFormSubmitting.value = true;\r\n            await formSubmissionSource.promise;\r\n        };\r\n\r\n        /**\r\n         * Called when the form submission has been validated and the entity\r\n         * should now be saved. Allow the block a chance to save the data and\r\n         * then switch back to edit mode if we are allowed to do so.\r\n         */\r\n        const onSaveSubmit = async (): Promise<void> => {\r\n            // Do everything in a try-finally block in case the block code\r\n            // throws an exception. That way we don't get stuck in a state\r\n            // where the Save button is forever disabled.\r\n            try {\r\n                // Give the block a chance to perform the actual save as well\r\n                // as abort the operation so we stay in edit mode.\r\n                if (props.onSave) {\r\n                    let result = props.onSave();\r\n\r\n                    if (isPromise(result)) {\r\n                        result = await result;\r\n                    }\r\n\r\n                    if (result === false) {\r\n                        return;\r\n                    }\r\n\r\n                    if (isAutoEditMode.value) {\r\n                        isAutoEditMode.value = false;\r\n\r\n                        if (autoEditReturnUrl) {\r\n                            window.location.href = makeUrlRedirectSafe(autoEditReturnUrl);\r\n\r\n                            // Don't switch back to view mode.\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    if (typeof result === \"string\") {\r\n                        window.location.href = makeUrlRedirectSafe(result);\r\n\r\n                        // Don't switch back to view mode.\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                internalMode.value = DetailPanelMode.View;\r\n            }\r\n            finally {\r\n                if (formSubmissionSource !== null) {\r\n                    formSubmissionSource.resolve();\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Called when the delete button has been clicked. Give the block\r\n         * a chance to perform the deletion and redirect.\r\n         */\r\n        const onDeleteClick = async (): Promise<void> => {\r\n            if (props.onDelete) {\r\n                if (!await confirmDelete(props.entityTypeName)) {\r\n                    return;\r\n                }\r\n\r\n                let result = props.onDelete();\r\n\r\n                if (isPromise(result)) {\r\n                    result = await result;\r\n                }\r\n\r\n                if (result === false) {\r\n                    return;\r\n                }\r\n\r\n                if (typeof result === \"string\") {\r\n                    window.location.href = makeUrlRedirectSafe(result);\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Called when any of the panel actions have been clicked. If there is\r\n         * an event handler attached then trigger the handler.\r\n         *\r\n         * @param action The action that was clicked.\r\n         * @param event The DOM event that triggered the click.\r\n         */\r\n        const onActionClick = (action: PanelAction, event: Event): void => {\r\n            if (action.handler && !action.disabled) {\r\n                action.handler(event);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Called when the follow panel action has been clicked. Attempt to\r\n         * toggle the followed state of the entity.\r\n         */\r\n        const onFollowClick = async (): Promise<void> => {\r\n            // Shouldn't really happen, but just make sure we have everything.\r\n            if (isEntityFollowed.value === null || !props.entityTypeGuid || !props.entityKey) {\r\n                return;\r\n            }\r\n\r\n            const data: FollowingSetFollowingOptionsBag = {\r\n                entityTypeGuid: props.entityTypeGuid,\r\n                entityKey: props.entityKey,\r\n                isFollowing: !isEntityFollowed.value\r\n            };\r\n\r\n            const response = await http.post(\"/api/v2/Controls/FollowingSetFollowing\", undefined, data);\r\n\r\n            // If we got a 200 OK response then we can toggle our internal state.\r\n            if (response.isSuccess) {\r\n                isEntityFollowed.value = !isEntityFollowed.value;\r\n            }\r\n            else {\r\n                await alert(\"Unable to update followed state.\");\r\n            }\r\n        };\r\n\r\n        const onAuditClick = async (): Promise<void> => {\r\n            showAuditDetailsModal.value = true;\r\n        };\r\n\r\n        // #endregion\r\n\r\n        // Watch for the RockForm component to toggle the isFormSubmitting value\r\n        // back off. This indicates it has finished submitting the form.\r\n        watch(isFormSubmitting, () => {\r\n            if (isFormSubmitting.value === false && formSubmissionSource !== null) {\r\n                formSubmissionSource.resolve();\r\n            }\r\n        });\r\n\r\n        // Watch for the isFollowVisible value to change, and if we haven't loaded\r\n        // the initial followed state yet then begin loading it.\r\n        watch(() => props.isFollowVisible, () => {\r\n            if (props.isFollowVisible && isEntityFollowed.value === null) {\r\n                getEntityFollowedState();\r\n            }\r\n        });\r\n\r\n        // If the following icon is visible then immediately get the followed state.\r\n        if (props.isFollowVisible) {\r\n            getEntityFollowedState();\r\n        }\r\n\r\n        if (isAutoEditMode.value) {\r\n            isPanelVisible.value = false;\r\n\r\n            onEditClick();\r\n        }\r\n\r\n        return {\r\n            hasLabels,\r\n            internalFooterSecondaryActions,\r\n            internalHeaderSecondaryActions,\r\n            panelTitle,\r\n            panelTitleIconCssClass,\r\n            getActionIconCssClass,\r\n            getClassForIconAction,\r\n            getClassForLabelAction,\r\n            headerActions,\r\n            isEditMode,\r\n            isEditModeVisible,\r\n            isFormSubmitting,\r\n            isPanelShown,\r\n            isPanelVisible,\r\n            isViewMode,\r\n            onActionClick,\r\n            onDeleteClick,\r\n            onEditCancelClick,\r\n            onEditClick,\r\n            onEditSuspenseReady,\r\n            onSaveClick,\r\n            onSaveSubmit,\r\n            showAuditDetailsModal\r\n        };\r\n    },\r\n\r\n    template: `\r\n<Panel v-if=\"isPanelVisible\"\r\n    v-show=\"isPanelShown\"\r\n    type=\"block\"\r\n    :title=\"panelTitle\"\r\n    :titleIconCssClass=\"panelTitleIconCssClass\"\r\n    :hasFullscreen=\"true\"\r\n    :headerSecondaryActions=\"internalHeaderSecondaryActions\">\r\n\r\n    <template #headerActions>\r\n        <span v-for=\"action in headerActions\" :class=\"getClassForIconAction(action)\" :title=\"action.title\" @click=\"onActionClick(action, $event)\">\r\n            <i :class=\"getActionIconCssClass(action)\"></i>\r\n        </span>\r\n    </template>\r\n\r\n    <template v-if=\"!isEditMode && (hasLabels || isTagsVisible)\" #subheaderLeft>\r\n        <div class=\"d-flex\">\r\n            <div v-if=\"hasLabels\" class=\"label-group\">\r\n                <span v-for=\"action in labels\" :class=\"getClassForLabelAction(action)\" @click=\"onActionClick(action, $event)\">\r\n                    <template v-if=\"action.title\">{{ action.title }}</template>\r\n                    <i v-else :class=\"action.iconCssClass\"></i>\r\n                </span>\r\n            </div>\r\n\r\n            <div v-if=\"isTagsVisible && hasLabels\" style=\"width: 2px; background-color: #eaedf0; margin: 0px 12px;\"></div>\r\n\r\n            <div v-if=\"isTagsVisible\" class=\"flex-grow-1\">\r\n                <EntityTagList :entityTypeGuid=\"entityTypeGuid\" :entityKey=\"entityKey\" />\r\n            </div>\r\n        </div>\r\n    </template>\r\n\r\n    <template v-if=\"!isEditMode && isBadgesVisible\" #subheaderRight>\r\n        <BadgeList :entityTypeGuid=\"entityTypeGuid\" :entityKey=\"entityKey\" />\r\n    </template>\r\n\r\n    <template v-if=\"$slots.helpContent\" #helpContent>\r\n        <slot name=\"helpContent\" />\r\n    </template>\r\n\r\n    <template #footerActions>\r\n        <template v-if=\"isEditMode\">\r\n            <RockButton btnType=\"primary\" autoDisable @click=\"onSaveClick\">Save</RockButton>\r\n            <RockButton btnType=\"link\" @click=\"onEditCancelClick\">Cancel</RockButton>\r\n        </template>\r\n\r\n        <template v-else>\r\n            <RockButton v-if=\"isEditVisible\" btnType=\"primary\" @click=\"onEditClick\" autoDisable>Edit</RockButton>\r\n            <RockButton v-if=\"isDeleteVisible\" btnType=\"link\" @click=\"onDeleteClick\" autoDisable>Delete</RockButton>\r\n        </template>\r\n\r\n        <RockButton v-for=\"action in footerActions\" :btnType=\"action.type\" @click=\"onActionClick(action, $event)\">\r\n            <template v-if=\"action.title\">{{ action.title }}</template>\r\n            <i v-else :class=\"action.iconCssClass\"></i>\r\n        </RockButton>\r\n    </template>\r\n\r\n    <template #footerSecondaryActions>\r\n        <RockButton v-for=\"action in internalFooterSecondaryActions\" :btnType=\"action.type\" btnSize=\"sm\" :title=\"action.title\" @click=\"onActionClick(action, $event)\" :disabled=\"action.disabled\">\r\n            <i :class=\"getActionIconCssClass(action)\"></i>\r\n        </RockButton>\r\n    </template>\r\n\r\n    <template #default>\r\n        <v-style>\r\n            .panel-flex .label-group > .label + * {\r\n                margin-left: 8px;\r\n            }\r\n        </v-style>\r\n\r\n        <RockForm v-if=\"isEditModeVisible\" v-show=\"isEditMode\" @submit=\"onSaveSubmit\" v-model:submit=\"isFormSubmitting\">\r\n            <RockSuspense @ready=\"onEditSuspenseReady\">\r\n                <slot name=\"edit\" />\r\n            </RockSuspense>\r\n        </RockForm>\r\n\r\n        <slot v-if=\"isViewMode\" name=\"view\" />\r\n    </template>\r\n</Panel>\r\n\r\n<Modal v-model=\"showAuditDetailsModal\" title=\"Audit Details\">\r\n    <AuditDetail :entityTypeGuid=\"entityTypeGuid\" :entityKey=\"entityKey\" />\r\n</Modal>\r\n`\r\n});\r\n"],"names":["defineComponent","name","components","AuditDetail","EntityTagList","Modal","Panel","RockButton","RockForm","RockSuspense","BadgeList","props","type","String","required","title","entityTypeGuid","entityTypeName","entityKey","isTagsVisible","Boolean","default","isFollowVisible","isBadgesVisible","isAuditHidden","isSecurityHidden","isEditVisible","isDeleteVisible","mode","Number","DetailPanelMode","View","headerActions","Array","headerSecondaryActions","labels","footerActions","footerSecondaryActions","onCancelEdit","Function","onEdit","onSave","onDelete","emits","_value","setup","_ref","_asBooleanOrNull","emit","http","useHttp","internalMode","useVModelPassthrough","isFormSubmitting","ref","isEditModeLoading","isEntityFollowed","showAuditDetailsModal","isPanelVisible","formSubmissionSource","editModeReadyCompletionSource","params","URLSearchParams","window","location","search","isAutoEditMode","asBooleanOrNull","get","autoEditReturnUrl","panelTitle","computed","_props$name","value","Edit","Add","panelTitleIconCssClass","internalHeaderSecondaryActions","actions","push","handler","onAuditClick","_iterator","_createForOfIteratorHelper","_step","s","n","done","action","err","e","f","internalFooterSecondaryActions","isViewMode","iconCssClass","onSecurityClick","_iterator2","_step2","isEditMode","isEditModeVisible","isPanelShown","hasLabels","length","_props$headerActions","onFollowClick","concat","getClassForIconAction","cssClass","getClassForLabelAction","getActionIconCssClass","getEntityFollowedState","_ref2","_asyncToGenerator","data","response","post","undefined","isSuccess","isFollowing","apply","arguments","event","Rock","controls","modal","show","$","target","onEditCancelClick","_ref3","result","isPromise","href","makeUrlRedirectSafe","onEditClick","_ref4","PromiseCompletionSource","promise","onEditSuspenseReady","_editModeReadyComplet","resolve","onSaveClick","_ref5","onSaveSubmit","_ref6","onDeleteClick","_ref7","confirmDelete","onActionClick","disabled","_ref8","alert","_ref9","watch","template"],"mappings":"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"}