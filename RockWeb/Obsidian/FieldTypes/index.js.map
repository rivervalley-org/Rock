{"version":3,"file":"index.js","sources":["../../../Framework/FieldTypes/addressField.partial.ts","../../../Framework/FieldTypes/booleanField.partial.ts","../../../Framework/FieldTypes/campusField.partial.ts","../../../Framework/FieldTypes/campusesField.partial.ts","../../../Framework/FieldTypes/colorField.partial.ts","../../../Framework/FieldTypes/currencyField.partial.ts","../../../Framework/FieldTypes/dateField.partial.ts","../../../Framework/FieldTypes/dateRangeField.partial.ts","../../../Framework/FieldTypes/dateTimeField.partial.ts","../../../Framework/FieldTypes/dayOfWeekField.partial.ts","../../../Framework/FieldTypes/daysOfWeekField.partial.ts","../../../Framework/FieldTypes/decimalField.partial.ts","../../../Framework/FieldTypes/decimalRangeField.partial.ts","../../../Framework/FieldTypes/definedValueField.partial.ts","../../../Framework/FieldTypes/definedValueRangeField.partial.ts","../../../Framework/FieldTypes/emailField.partial.ts","../../../Framework/FieldTypes/fileField.partial.ts","../../../Framework/FieldTypes/genderField.partial.ts","../../../Framework/FieldTypes/imageField.partial.ts","../../../Framework/FieldTypes/integerField.partial.ts","../../../Framework/FieldTypes/integerRangeField.partial.ts","../../../Framework/FieldTypes/keyValueListField.partial.ts","../../../Framework/FieldTypes/memoField.partial.ts","../../../Framework/FieldTypes/monthDayField.partial.ts","../../../Framework/FieldTypes/multiSelectField.partial.ts","../../../Framework/FieldTypes/phoneNumberField.partial.ts","../../../Framework/FieldTypes/ratingField.partial.ts","../../../Framework/FieldTypes/reminderTypeField.partial.ts","../../../Framework/FieldTypes/reminderTypesField.partial.ts","../../../Framework/FieldTypes/singleSelectField.partial.ts","../../../Framework/FieldTypes/ssnField.partial.ts","../../../Framework/FieldTypes/textField.partial.ts","../../../Framework/FieldTypes/timeField.partial.ts","../../../Framework/FieldTypes/urlLinkField.partial.ts","../../../Framework/FieldTypes/valueListField.partial.ts","../../../Framework/FieldTypes/index.ts"],"sourcesContent":["// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\n\r\nexport type AddressFieldValue = {\r\n    street1?: string;\r\n    street2?: string;\r\n    city?: string;\r\n    state?: string;\r\n    postalCode?: string;\r\n    country?: string;\r\n};\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./addressFieldComponents\")).EditComponent;\r\n});\r\n\r\n// The configuration component can be quite large, so load it only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./addressFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Address field.\r\n */\r\nexport class AddressFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, _configurationValues: Record<string, string>): string {\r\n        try {\r\n            const addressValue = JSON.parse(value || \"{}\") as AddressFieldValue;\r\n            let textValue = `${addressValue.street1 ?? \"\"} ${addressValue.street2 ?? \"\"} ${addressValue.city ?? \"\"}, ${addressValue.state ?? \"\"} ${addressValue.postalCode ?? \"\"}`;\r\n\r\n            textValue = textValue.replace(/  +/, \" \");\r\n            textValue = textValue.replace(/^ +/, \"\");\r\n            textValue = textValue.replace(/ +$/, \"\");\r\n\r\n            return textValue === \",\" ? \"\" : textValue;\r\n        }\r\n        catch {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override isFilterable(): boolean {\r\n        return false;\r\n    }\r\n}\r\n","ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { ComparisonType } from \"@Obsidian/Enums/Reporting/comparisonType\";\r\nimport { asBooleanOrNull } from \"@Obsidian/Utility/booleanUtils\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\nimport { getStandardFilterComponent } from \"./utils\";\r\n\r\nexport const enum ConfigurationValueKey {\r\n    BooleanControlType = \"BooleanControlType\",\r\n    FalseText = \"falsetext\",\r\n    TrueText = \"truetext\"\r\n}\r\n\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./booleanFieldComponents\")).EditComponent;\r\n});\r\n\r\n// The configuration component can be quite large, so load it only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./booleanFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n// Only load the filter component as needed.\r\nconst filterComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./booleanFieldComponents\")).FilterComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Boolean field.\r\n */\r\nexport class BooleanFieldType extends FieldTypeBase {\r\n    public override getCondensedTextValue(value: string, _configurationValues: Record<string, string>): string {\r\n        const boolValue = asBooleanOrNull(value);\r\n\r\n        if (boolValue === null) {\r\n            return \"\";\r\n        }\r\n        else if (boolValue === true) {\r\n            return \"Y\";\r\n        }\r\n        else {\r\n            return \"N\";\r\n        }\r\n    }\r\n\r\n    public override getTextValue(value: string, configurationValues: Record<string, string>): string {\r\n        const boolValue = asBooleanOrNull(value);\r\n\r\n        if (boolValue === null) {\r\n            return \"\";\r\n        }\r\n        else if (boolValue === true) {\r\n            return configurationValues[ConfigurationValueKey.TrueText] || \"Yes\";\r\n        }\r\n        else {\r\n            return configurationValues[ConfigurationValueKey.FalseText] || \"No\";\r\n        }\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override getSupportedComparisonTypes(): ComparisonType {\r\n        return ComparisonType.EqualTo | ComparisonType.NotEqualTo;\r\n    }\r\n\r\n    public override getFilterComponent(): Component {\r\n        return getStandardFilterComponent(this.getSupportedComparisonTypes(), filterComponent);\r\n    }\r\n}\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { ComparisonType } from \"@Obsidian/Enums/Reporting/comparisonType\";\r\nimport { ComparisonValue } from \"@Obsidian/Types/Reporting/comparisonValue\";\r\nimport { areEqual } from \"@Obsidian/Utility/guid\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\nimport { getStandardFilterComponent } from \"./utils\";\r\n\r\nexport const enum ConfigurationValueKey {\r\n    Values = \"values\",\r\n    IncludeInactive = \"includeInactive\",\r\n    FilterCampusTypes = \"filterCampusTypes\",\r\n    FilterCampusStatus = \"filterCampusStatus\",\r\n    SelectableCampuses = \"selectableCampuses\"\r\n}\r\n\r\nexport const enum ConfigurationPropertyKey {\r\n    Campuses = \"campuses\",\r\n    CampusTypes = \"campusTypes\",\r\n    CampusStatuses = \"campusStatuses\"\r\n}\r\n\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./campusFieldComponents\")).EditComponent;\r\n});\r\n\r\n// Load the filter component only as needed.\r\nconst filterComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./campusFieldComponents\")).FilterComponent;\r\n});\r\n\r\n// Load the configuration component only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./campusFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Campus field.\r\n */\r\nexport class CampusFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, configurationValues: Record<string, string>): string {\r\n        if (value === undefined || value === null || value === \"\") {\r\n            return \"\";\r\n        }\r\n\r\n        try {\r\n            const values = JSON.parse(configurationValues[ConfigurationValueKey.Values] ?? \"[]\") as ListItemBag[];\r\n            const selectedValues = values.filter(o => o.value === value);\r\n\r\n            return selectedValues.map(o => o.text).join(\", \");\r\n        }\r\n        catch {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override getSupportedComparisonTypes(): ComparisonType {\r\n        return ComparisonType.None;\r\n    }\r\n\r\n    public override getFilterValueText(value: ComparisonValue, configurationValues: Record<string, string>): string {\r\n        if (!value.value) {\r\n            return \"\";\r\n        }\r\n\r\n        try {\r\n            const rawValues = value.value.split(\",\");\r\n            const values = JSON.parse(configurationValues?.[ConfigurationValueKey.Values] ?? \"[]\") as ListItemBag[];\r\n            const selectedValues = values.filter(o => rawValues.filter(v => areEqual(v, o.value)).length > 0);\r\n\r\n            return `'${selectedValues.map(o => o.text).join(\"' OR '\")}'`;\r\n        }\r\n        catch {\r\n            return `'${value.value}'`;\r\n        }\r\n    }\r\n\r\n    public override getFilterComponent(): Component {\r\n        return getStandardFilterComponent(\"Is\", filterComponent);\r\n    }\r\n\r\n    public override doesValueMatchFilter(value: string, filterValue: ComparisonValue, _configurationValues: Record<string, string>): boolean {\r\n        const selectedValues = (filterValue.value ?? \"\").split(\",\").filter(v => v !== \"\").map(v => v.toLowerCase());\r\n        let comparisonType = filterValue.comparisonType;\r\n\r\n        if (comparisonType === ComparisonType.EqualTo) {\r\n            // Treat EqualTo as if it were Contains.\r\n            comparisonType = ComparisonType.Contains;\r\n        }\r\n        else if (comparisonType === ComparisonType.NotEqualTo) {\r\n            // Treat NotEqualTo as if it were DoesNotContain.\r\n            comparisonType = ComparisonType.DoesNotContain;\r\n        }\r\n\r\n        if (comparisonType === ComparisonType.IsBlank) {\r\n            return value === \"\";\r\n        }\r\n        else if (comparisonType === ComparisonType.IsNotBlank) {\r\n            return value !== \"\";\r\n        }\r\n\r\n        if (selectedValues.length > 0) {\r\n            let matched = selectedValues.includes((value ?? \"\").toLowerCase());\r\n\r\n            if (comparisonType === ComparisonType.DoesNotContain) {\r\n                matched = !matched;\r\n            }\r\n\r\n            return matched;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\nimport { ComparisonValue } from \"@Obsidian/Types/Reporting/comparisonValue\";\r\nimport { ComparisonType } from \"@Obsidian/Enums/Reporting/comparisonType\";\r\n\r\nexport const enum ConfigurationValueKey {\r\n    Values = \"values\",\r\n    EnhancedSelection = \"enhancedselection\",\r\n    RepeatColumns = \"repeatColumns\",\r\n    IncludeInactive = \"includeInactive\",\r\n    FilterCampusTypes = \"filterCampusTypes\",\r\n    FilterCampusStatus = \"filterCampusStatus\",\r\n    SelectableCampuses = \"selectableCampuses\"\r\n}\r\n\r\nexport const enum ConfigurationPropertyKey {\r\n    Campuses = \"campuses\",\r\n    CampusTypes = \"campusTypes\",\r\n    CampusStatuses = \"campusStatuses\"\r\n}\r\n\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./campusesFieldComponents\")).EditComponent;\r\n});\r\n\r\n// Load the configuration component only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./campusesFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Campuses field.\r\n */\r\nexport class CampusesFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, configurationValues: Record<string, string>): string {\r\n        if (value === undefined || value === null || value === \"\") {\r\n            return \"\";\r\n        }\r\n\r\n        try {\r\n            const values = JSON.parse(configurationValues[ConfigurationValueKey.Values] ?? \"[]\") as ListItemBag[];\r\n            const userValues = value.split(\",\");\r\n            const selectedValues = values.filter(o => userValues.includes(o.value ?? \"\"));\r\n\r\n            return selectedValues.map(o => o.text).join(\", \");\r\n        }\r\n        catch {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override doesValueMatchFilter(value: string, filterValue: ComparisonValue, _configurationValues: Record<string, string>): boolean {\r\n        const selectedValues = (filterValue.value ?? \"\").split(\",\").filter(v => v !== \"\").map(v => v.toLowerCase());\r\n        let comparisonType = filterValue.comparisonType;\r\n\r\n        if (comparisonType === ComparisonType.EqualTo) {\r\n            // Treat EqualTo as if it were Contains.\r\n            comparisonType = ComparisonType.Contains;\r\n        }\r\n        else if (comparisonType === ComparisonType.NotEqualTo) {\r\n            // Treat NotEqualTo as if it were DoesNotContain.\r\n            comparisonType = ComparisonType.DoesNotContain;\r\n        }\r\n\r\n        if (comparisonType === ComparisonType.IsBlank) {\r\n            return value === \"\";\r\n        }\r\n        else if (comparisonType === ComparisonType.IsNotBlank) {\r\n            return value !== \"\";\r\n        }\r\n\r\n        if (selectedValues.length > 0) {\r\n            let matched = selectedValues.includes(value.toLowerCase());\r\n\r\n            if (comparisonType === ComparisonType.DoesNotContain) {\r\n                matched = !matched;\r\n            }\r\n\r\n            return matched;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./colorFieldComponents\")).EditComponent;\r\n});\r\n\r\n// The configuration component can be quite large, so load it only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./colorFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Color field.\r\n */\r\nexport class ColorFieldType extends FieldTypeBase {\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n}\r\n","ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { ComparisonType } from \"@Obsidian/Enums/Reporting/comparisonType\";\r\nimport { numericComparisonTypes } from \"@Obsidian/Core/Reporting/comparisonType\";\r\nimport { toCurrencyOrNull } from \"@Obsidian/Utility/numberUtils\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\n\r\n// The components can be quite large, so load only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./currencyFieldComponents\")).EditComponent;\r\n});\r\n\r\n// The configuration component can be quite large, so load it only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./currencyFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Currency field.\r\n */\r\nexport class CurrencyFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, _configurationValues: Record<string, string>): string {\r\n        return toCurrencyOrNull(value) ?? \"\";\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    override getSupportedComparisonTypes(): ComparisonType {\r\n        return numericComparisonTypes;\r\n    }\r\n}\r\n","ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { ComparisonType } from \"@Obsidian/Enums/Reporting/comparisonType\";\r\nimport { dateComparisonTypes } from \"@Obsidian/Core/Reporting/comparisonType\";\r\nimport { ComparisonValue } from \"@Obsidian/Types/Reporting/comparisonValue\";\r\nimport { asBoolean } from \"@Obsidian/Utility/booleanUtils\";\r\nimport { toNumber } from \"@Obsidian/Utility/numberUtils\";\r\nimport { calculateSlidingDateRange, getRangeTypeText, getTimeUnitText, parseSlidingDateRangeString, RangeType, TimeUnit } from \"@Obsidian/Utility/slidingDateRange\";\r\nimport { RockDateTime } from \"@Obsidian/Utility/rockDateTime\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\nimport { getStandardFilterComponent } from \"./utils\";\r\n\r\nexport const enum ConfigurationValueKey {\r\n    Format = \"format\",\r\n    DisplayDiff = \"displayDiff\",\r\n    DisplayCurrentOption = \"displayCurrentOption\",\r\n    DatePickerControlType = \"datePickerControlType\",\r\n    FutureYearCount = \"futureYearCount\"\r\n}\r\n\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./dateFieldComponents\")).EditComponent;\r\n});\r\n\r\n// The configuration component can be quite large, so load it only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./dateFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n// Load the filter component as needed.\r\nconst filterComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./dateFieldComponents\")).FilterComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Date field.\r\n */\r\nexport class DateFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, configurationValues: Record<string, string>): string {\r\n        if (this.isCurrentDateValue(value)) {\r\n            return this.getCurrentDateText(value);\r\n        }\r\n        else if (value) {\r\n            const dateValue = RockDateTime.parseISO(value);\r\n            const dateFormatTemplate = configurationValues[ConfigurationValueKey.Format] || \"MM/dd/yyy\";\r\n\r\n            if (dateValue !== null) {\r\n                let textValue = dateValue.toASPString(dateFormatTemplate);\r\n\r\n                const displayDiff = asBoolean(configurationValues[ConfigurationValueKey.DisplayDiff]);\r\n\r\n                if (displayDiff === true) {\r\n                    textValue = `${textValue} ${dateValue.toElapsedString()}`;\r\n                }\r\n\r\n                return textValue;\r\n            }\r\n            else {\r\n                return \"\";\r\n            }\r\n        }\r\n        else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override getSupportedComparisonTypes(): ComparisonType {\r\n        return dateComparisonTypes;\r\n    }\r\n\r\n    public override getFilterComponent(): Component {\r\n        return getStandardFilterComponent(this.getSupportedComparisonTypes(), filterComponent, {\r\n            updateComparisonTypeNames: (options) => {\r\n                options.filter(o => o.value === ComparisonType.Between.toString())\r\n                    .forEach(o => o.text = \"Range\");\r\n            }\r\n        });\r\n    }\r\n\r\n    public override getFilterValueDescription(value: ComparisonValue, configurationValues: Record<string, string>): string {\r\n        if (value.comparisonType === ComparisonType.Between) {\r\n            return `During '${this.getFilterValueText(value, configurationValues)}'`;\r\n        }\r\n\r\n        return super.getFilterValueDescription(value, configurationValues);\r\n    }\r\n\r\n    public override getFilterValueText(value: ComparisonValue, _configurationValues: Record<string, string>): string {\r\n        const filterValues = value.value.split(\"\\t\");\r\n\r\n        // If the comparison type is Between, then we need to use the second\r\n        // value that was specified.\r\n        if (value.comparisonType === ComparisonType.Between && filterValues.length > 1) {\r\n            const range = parseSlidingDateRangeString(filterValues[1]);\r\n\r\n            // If we couldn't parse the range information then just return\r\n            // the raw value, which should be an empty string, but would give\r\n            // some indication that something is wrong if it isn't.\r\n            if (range === null) {\r\n                return filterValues[1];\r\n            }\r\n\r\n            // Get the calculated values from the SlidingDateRange.\r\n            const rangeTypeText = getRangeTypeText(range.rangeType);\r\n            const timeUnitValue = range.timeValue ?? 1;\r\n            const timeUnitText = getTimeUnitText(range.timeUnit ?? TimeUnit.Hour) + (timeUnitValue !== 1 ? \"s\" : \"\");\r\n\r\n            // Format the text depending on the range type.\r\n            if (range.rangeType === RangeType.Current) {\r\n                return `${rangeTypeText} ${timeUnitText}`;\r\n            }\r\n            else if (([RangeType.Last, RangeType.Previous, RangeType.Next, RangeType.Upcoming] as number[]).includes(range.rangeType)) {\r\n                return `${rangeTypeText} ${timeUnitValue} ${timeUnitText}`;\r\n            }\r\n            else {\r\n                if (range.lowerDate && range.upperDate) {\r\n                    return `${range.lowerDate} to ${range.upperDate}`;\r\n                }\r\n                else if (range.lowerDate) {\r\n                    return `from ${range.lowerDate}`;\r\n                }\r\n                else if (range.upperDate) {\r\n                    return `through ${range.upperDate}`;\r\n                }\r\n                else {\r\n                    return \"\";\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // If it's not a between, check if it's a \"Current Date\" value.\r\n            if (this.isCurrentDateValue(filterValues[0])) {\r\n                return `'${this.getCurrentDateText(filterValues[0])}'`;\r\n            }\r\n\r\n            // Nope, just use the date value specified.\r\n            return filterValues[0] ? `'${filterValues[0]}'` : \"\";\r\n        }\r\n    }\r\n\r\n    public override doesValueMatchFilter(value: string, filterValue: ComparisonValue, configurationValues: Record<string, string>): boolean {\r\n        if (!filterValue.comparisonType) {\r\n            return false;\r\n        }\r\n\r\n        const filterValueValues = filterValue.value.split(\"\\t\");\r\n\r\n        // Try to parse the value as a date. If it can't be parsed then check\r\n        // it against the Is Blank and Is Not Blank comparison types.\r\n        const valueDate = RockDateTime.parseISO(value ?? \"\");\r\n\r\n        if (filterValue.comparisonType === ComparisonType.IsBlank) {\r\n            return valueDate === null;\r\n        }\r\n        else if (filterValue.comparisonType === ComparisonType.IsNotBlank) {\r\n            return valueDate !== null;\r\n        }\r\n        else if (valueDate === null) {\r\n            return false;\r\n        }\r\n\r\n        if (filterValue.comparisonType === ComparisonType.Between && filterValueValues.length > 1) {\r\n            const slidingRange = parseSlidingDateRangeString(filterValueValues[1]);\r\n\r\n            if (!slidingRange) {\r\n                return false;\r\n            }\r\n\r\n            const dateRange = calculateSlidingDateRange(slidingRange);\r\n\r\n            // check if the date range was not valid or the value is before the\r\n            // start date and time.\r\n            if (!dateRange.start || valueDate.toMilliseconds() < dateRange.start.toMilliseconds()) {\r\n                return false;\r\n            }\r\n\r\n            if (dateRange.end && valueDate.toMilliseconds() >= dateRange.end.toMilliseconds()) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        // Try to parse the filter date. If it can't be parsed then no match.\r\n        const filterDate = this.getRelativeOrAbsoluteDate(filterValueValues[0]);\r\n\r\n        if (filterDate === null) {\r\n            return false;\r\n        }\r\n\r\n        // Convert the two dates into a format that we can do numeric comparison on.\r\n        const newFilterValue: ComparisonValue = {\r\n            comparisonType: filterValue.comparisonType,\r\n            value: filterDate.toASPString(\"yyyyMMdd\")\r\n        };\r\n\r\n        return super.doesValueMatchFilter(valueDate.toASPString(\"yyyyMMdd\"), newFilterValue, configurationValues);\r\n    }\r\n\r\n    /**\r\n     * Determines if the value is a \"current date\" value, which would then\r\n     * specify the number of days +/- to adjust.\r\n     *\r\n     * @param value The value to be checked.\r\n     *\r\n     * @returns true if the value represents a \"current date\" value; otherwise false.\r\n     */\r\n    private isCurrentDateValue(value: string): boolean {\r\n        return value.indexOf(\"CURRENT\") === 0;\r\n    }\r\n\r\n    /**\r\n     * Get the text that describes the \"current date\" value specified.\r\n     *\r\n     * @param value The value that contains the \"current date\" value.\r\n     *\r\n     * @returns A human friendly description of the \"current date\" value.\r\n     */\r\n    private getCurrentDateText(value: string): string {\r\n        const parts = (value ?? \"\").split(\":\");\r\n        const diff = parts.length === 2 ? toNumber(parts[1]) : 0;\r\n\r\n        if (diff === 1) {\r\n            return \"Current Date plus 1 day\";\r\n        }\r\n        else if (diff > 0) {\r\n            return `Current Date plus ${diff} days`;\r\n        }\r\n        else if (diff === -1) {\r\n            return \"Current Date minus 1 day\";\r\n        }\r\n        else if (diff < 0) {\r\n            return `Current Date minus ${Math.abs(diff)} days`;\r\n        }\r\n        else {\r\n            return \"Current Date\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the relatative date if available otherwise the absolute date.\r\n     *\r\n     * @param value The string value to be parsed as relative or absolute.\r\n     *\r\n     * @returns A new RockDateTime instance that represents the value or null if it couldn't be determined.\r\n     */\r\n    private getRelativeOrAbsoluteDate(value: string): RockDateTime | null {\r\n        if (!this.isCurrentDateValue(value)) {\r\n            return RockDateTime.parseISO(value);\r\n        }\r\n\r\n        const today = RockDateTime.now().date;\r\n        const valueParts = value.split(\":\");\r\n\r\n        if (valueParts.length > 1) {\r\n            return today.addDays(toNumber(valueParts[1]));\r\n        }\r\n\r\n        return today;\r\n    }\r\n}\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { toNumber } from \"@Obsidian/Utility/numberUtils\";\r\nimport { DateTimeFormat, RockDateTime } from \"@Obsidian/Utility/rockDateTime\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\n\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./dateRangeFieldComponents\")).EditComponent;\r\n});\r\n\r\n// The configuration component can be quite large, so load it only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./dateRangeFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Date Range field.\r\n */\r\nexport class DateRangeFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, _configurationValues: Record<string, string>): string {\r\n        const dateParts = (value ?? \"\").split(\",\");\r\n\r\n        if (dateParts.length !== 2) {\r\n            return \"\";\r\n        }\r\n\r\n        const lowerDateParts = /^(\\d+)-(\\d+)-(\\d+)/.exec(dateParts[0]);\r\n        const upperDateParts = /^(\\d+)-(\\d+)-(\\d+)/.exec(dateParts[1]);\r\n\r\n        const lowerDate = lowerDateParts !== null ? RockDateTime.fromParts(toNumber(lowerDateParts[1]), toNumber(lowerDateParts[2]), toNumber(lowerDateParts[3])) : null;\r\n        const upperDate = upperDateParts !== null ? RockDateTime.fromParts(toNumber(upperDateParts[1]), toNumber(upperDateParts[2]), toNumber(upperDateParts[3])) : null;\r\n\r\n        if (lowerDate !== null && upperDate !== null) {\r\n            return `${lowerDate.toLocaleString(DateTimeFormat.DateShort)} to ${upperDate.toLocaleString(DateTimeFormat.DateShort)}`;\r\n        }\r\n        else if (lowerDate !== null) {\r\n            return `from ${lowerDate.toLocaleString(DateTimeFormat.DateShort)}`;\r\n        }\r\n        else if (upperDate !== null) {\r\n            return `through ${upperDate.toLocaleString(DateTimeFormat.DateShort)}`;\r\n        }\r\n        else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override isFilterable(): boolean {\r\n        return false;\r\n    }\r\n}\r\n","ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { ComparisonType } from \"@Obsidian/Enums/Reporting/comparisonType\";\r\nimport { dateComparisonTypes } from \"@Obsidian/Core/Reporting/comparisonType\";\r\nimport { ComparisonValue } from \"@Obsidian/Types/Reporting/comparisonValue\";\r\nimport { asBoolean } from \"@Obsidian/Utility/booleanUtils\";\r\nimport { toNumber } from \"@Obsidian/Utility/numberUtils\";\r\nimport { getRangeTypeText, getTimeUnitText, parseSlidingDateRangeString, RangeType, TimeUnit } from \"@Obsidian/Utility/slidingDateRange\";\r\nimport { RockDateTime } from \"@Obsidian/Utility/rockDateTime\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\nimport { getStandardFilterComponent } from \"./utils\";\r\n\r\nexport const enum ConfigurationValueKey {\r\n    Format = \"format\",\r\n    DisplayAsElapsedTime = \"displayDiff\",\r\n    DisplayCurrentOption = \"displayCurrentOption\"\r\n}\r\n\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./dateTimeFieldComponents\")).EditComponent;\r\n});\r\n\r\n// The configuration component can be quite large, so load it only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./dateTimeFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n// Load the filter component as needed.\r\nconst filterComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./dateTimeFieldComponents\")).FilterComponent;\r\n});\r\n\r\n\r\n/**\r\n * The field type handler for the Date Time field.\r\n */\r\nexport class DateTimeFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, configurationValues: Record<string, string>): string {\r\n        if (this.isCurrentDateValue(value)) {\r\n            return this.getCurrentDateText(value);\r\n        }\r\n        else if (value) {\r\n            const dateValue = RockDateTime.parseISO(value);\r\n            const dateFormatTemplate = configurationValues[ConfigurationValueKey.Format] || \"MM/dd/yyy\";\r\n\r\n            if (dateValue !== null) {\r\n                let textValue = dateValue.toASPString(dateFormatTemplate);\r\n\r\n                const displayDiff = asBoolean(configurationValues[ConfigurationValueKey.DisplayAsElapsedTime]);\r\n\r\n                if (displayDiff === true) {\r\n                    textValue = `${textValue} ${dateValue.toElapsedString()}`;\r\n                }\r\n\r\n                return textValue;\r\n            }\r\n            else {\r\n                return \"\";\r\n            }\r\n        }\r\n        else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override getSupportedComparisonTypes(): ComparisonType {\r\n        return dateComparisonTypes;\r\n    }\r\n\r\n    public override getFilterComponent(): Component {\r\n        return getStandardFilterComponent(this.getSupportedComparisonTypes(), filterComponent, {\r\n            updateComparisonTypeNames: (options) => {\r\n                options.filter(o => o.value === ComparisonType.Between.toString())\r\n                    .forEach(o => o.text = \"Range\");\r\n            }\r\n        });\r\n    }\r\n\r\n    public override getFilterValueDescription(value: ComparisonValue, configurationValues: Record<string, string>): string {\r\n        if (value.comparisonType === ComparisonType.Between) {\r\n            return `During '${this.getFilterValueText(value, configurationValues)}'`;\r\n        }\r\n\r\n        return super.getFilterValueDescription(value, configurationValues);\r\n    }\r\n\r\n    public override getFilterValueText(value: ComparisonValue, _configurationValues: Record<string, string>): string {\r\n        const filterValues = value.value.split(\"\\t\");\r\n\r\n        // If the comparison type is Between, then we need to use the second\r\n        // value that was specified.\r\n        if (value.comparisonType === ComparisonType.Between && filterValues.length > 1) {\r\n            const range = parseSlidingDateRangeString(filterValues[1]);\r\n\r\n            // If we couldn't parse the range information then just return\r\n            // the raw value, which should be an empty string, but would give\r\n            // some indication that something is wrong if it isn't.\r\n            if (range === null) {\r\n                return filterValues[1];\r\n            }\r\n\r\n            // Get the calculated values from the SlidingDateRange.\r\n            const rangeTypeText = getRangeTypeText(range.rangeType);\r\n            const timeUnitValue = range.timeValue ?? 1;\r\n            const timeUnitText = getTimeUnitText(range.timeUnit ?? TimeUnit.Hour) + (timeUnitValue !== 1 ? \"s\" : \"\");\r\n\r\n            // Format the text depending on the range type.\r\n            if (range.rangeType === RangeType.Current) {\r\n                return `${rangeTypeText} ${timeUnitText}`;\r\n            }\r\n            else if (([RangeType.Last, RangeType.Previous, RangeType.Next, RangeType.Upcoming] as number[]).includes(range.rangeType)) {\r\n                return `${rangeTypeText} ${timeUnitValue} ${timeUnitText}`;\r\n            }\r\n            else {\r\n                if (range.lowerDate && range.upperDate) {\r\n                    return `${range.lowerDate} to ${range.upperDate}`;\r\n                }\r\n                else if (range.lowerDate) {\r\n                    return `from ${range.lowerDate}`;\r\n                }\r\n                else if (range.upperDate) {\r\n                    return `through ${range.upperDate}`;\r\n                }\r\n                else {\r\n                    return \"\";\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // If it's not a between, check if it's a \"Current Date\" value.\r\n            if (this.isCurrentDateValue(filterValues[0])) {\r\n                return `'${this.getCurrentDateText(filterValues[0])}'`;\r\n            }\r\n\r\n            // Nope, just use the date value specified.\r\n            return filterValues[0] ? `'${filterValues[0]}'` : \"\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determines if the value is a \"current date\" value, which would then\r\n     * specify the number of minutes +/- to adjust.\r\n     *\r\n     * @param value The value to be checked.\r\n     *\r\n     * @returns true if the value represents a \"current date\" value; otherwise false.\r\n     */\r\n    private isCurrentDateValue(value: string): boolean {\r\n        return value.indexOf(\"CURRENT\") === 0;\r\n    }\r\n\r\n    /**\r\n     * Get the text that describes the \"current date\" value specified.\r\n     *\r\n     * @param value The value that contains the \"current date\" value.\r\n     *\r\n     * @returns A human friendly description of the \"current date\" value.\r\n     */\r\n    private getCurrentDateText(value: string): string {\r\n        const parts = value.split(\":\");\r\n        const diff = parts.length === 2 ? toNumber(parts[1]) : 0;\r\n\r\n        if (diff === 1) {\r\n            return \"Current Time plus 1 minute\";\r\n        }\r\n        else if (diff > 0) {\r\n            return `Current Time plus ${diff} minutes`;\r\n        }\r\n        else if (diff === -1) {\r\n            return \"Current Time minus 1 minute\";\r\n        }\r\n        else if (diff < 0) {\r\n            return `Current Time minus ${Math.abs(diff)} minutes`;\r\n        }\r\n        else {\r\n            return \"Current Time\";\r\n        }\r\n    }\r\n}\r\n","ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { toNumberOrNull } from \"@Obsidian/Utility/numberUtils\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\nimport { getStandardFilterComponent } from \"./utils\";\r\nimport { DayOfWeek } from \"@Obsidian/Enums/Controls/dayOfWeek\";\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./dayOfWeekFieldComponents\")).EditComponent;\r\n});\r\n\r\n// The filter component can be quite large, so load it only as needed.\r\nconst filterComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./dayOfWeekFieldComponents\")).FilterComponent;\r\n});\r\n\r\n// The configuration component can be quite large, so load it only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./dayOfWeekFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the DayOfWeek field.\r\n */\r\nexport class DayOfWeekFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, _configurationValues: Record<string, string>): string {\r\n        const dayValue = toNumberOrNull(value);\r\n\r\n        if (dayValue === null) {\r\n            return \"\";\r\n        }\r\n        else {\r\n            switch (dayValue) {\r\n                case DayOfWeek.Sunday:\r\n                    return \"Sunday\";\r\n\r\n                case DayOfWeek.Monday:\r\n                    return \"Monday\";\r\n\r\n                case DayOfWeek.Tuesday:\r\n                    return \"Tuesday\";\r\n\r\n                case DayOfWeek.Wednesday:\r\n                    return \"Wednesday\";\r\n\r\n                case DayOfWeek.Thursday:\r\n                    return \"Thursday\";\r\n\r\n                case DayOfWeek.Friday:\r\n                    return \"Friday\";\r\n\r\n                case DayOfWeek.Saturday:\r\n                    return \"Saturday\";\r\n\r\n                default:\r\n                    return \"\";\r\n            }\r\n        }\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override getFilterComponent(): Component {\r\n        return getStandardFilterComponent(\"Is\", filterComponent);\r\n    }\r\n}\r\n","ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { ComparisonType } from \"@Obsidian/Enums/Reporting/comparisonType\";\r\nimport { containsComparisonTypes } from \"@Obsidian/Core/Reporting/comparisonType\";\r\nimport { toNumberOrNull } from \"@Obsidian/Utility/numberUtils\";\r\nimport { DayOfWeek } from \"@Obsidian/Enums/Controls/dayOfWeek\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\n\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./daysOfWeekFieldComponents\")).EditComponent;\r\n});\r\n\r\n// The configuration component can be quite large, so load it only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./daysOfWeekFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the DaysOfWeek field.\r\n */\r\nexport class DaysOfWeekFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, _configurationValues: Record<string, string>): string {\r\n        if (value === null || value === undefined || value === \"\") {\r\n            return \"\";\r\n        }\r\n\r\n        return value.split(\",\")\r\n            .map(v => {\r\n                const dayValue = toNumberOrNull(v);\r\n\r\n                if (dayValue === null) {\r\n                    return \"\";\r\n                }\r\n                else {\r\n                    switch (dayValue) {\r\n                        case DayOfWeek.Sunday:\r\n                            return \"Sunday\";\r\n\r\n                        case DayOfWeek.Monday:\r\n                            return \"Monday\";\r\n\r\n                        case DayOfWeek.Tuesday:\r\n                            return \"Tuesday\";\r\n\r\n                        case DayOfWeek.Wednesday:\r\n                            return \"Wednesday\";\r\n\r\n                        case DayOfWeek.Thursday:\r\n                            return \"Thursday\";\r\n\r\n                        case DayOfWeek.Friday:\r\n                            return \"Friday\";\r\n\r\n                        case DayOfWeek.Saturday:\r\n                            return \"Saturday\";\r\n\r\n                        default:\r\n                            return \"\";\r\n                    }\r\n                }\r\n            })\r\n            .filter(v => v != \"\")\r\n            .join(\", \");\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override getSupportedComparisonTypes(): ComparisonType {\r\n        return containsComparisonTypes;\r\n    }\r\n}\r\n","ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { ComparisonType } from \"@Obsidian/Enums/Reporting/comparisonType\";\r\nimport { numericComparisonTypes } from \"@Obsidian/Core/Reporting/comparisonType\";\r\nimport { toNumberOrNull } from \"@Obsidian/Utility/numberUtils\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\n\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./decimalFieldComponents\")).EditComponent;\r\n});\r\n\r\n// The configuration component can be quite large, so load it only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./decimalFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Decimal field.\r\n */\r\nexport class DecimalFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, _configurationValues: Record<string, string>): string {\r\n        return toNumberOrNull(value)?.toString() ?? \"\";\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override getSupportedComparisonTypes(): ComparisonType {\r\n        return numericComparisonTypes;\r\n    }\r\n}\r\n","ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { toNumberOrNull } from \"@Obsidian/Utility/numberUtils\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\n\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./decimalRangeFieldComponents\")).EditComponent;\r\n});\r\n\r\n// The configuration component can be quite large, so load it only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./decimalRangeFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Decimal Range field.\r\n */\r\nexport class DecimalRangeFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, _configurationValues: Record<string, string>): string {\r\n        if (value === null || value === undefined || value === \"\" || value === \",\") {\r\n            return \"\";\r\n        }\r\n\r\n        const numbers = value.split(\",\").map(v => toNumberOrNull(v));\r\n\r\n        // If there are not two components then it's not valid, or if both\r\n        // components are not numbers then it's not valid.\r\n        if (numbers.length !== 2 || (numbers[0] === null && numbers[1] === null)) {\r\n            return \"\";\r\n        }\r\n\r\n        if (numbers[0] === null) {\r\n            return `through ${numbers[1]}`;\r\n        }\r\n        else if (numbers[1] === null) {\r\n            return `from ${numbers[0]}`;\r\n        }\r\n        else {\r\n            return `${numbers[0]} to ${numbers[1]}`;\r\n        }\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override isFilterable(): boolean {\r\n        return false;\r\n    }\r\n}\r\n","ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { ComparisonType } from \"@Obsidian/Enums/Reporting/comparisonType\";\r\nimport { containsComparisonTypes } from \"@Obsidian/Core/Reporting/comparisonType\";\r\nimport { ComparisonValue } from \"@Obsidian/Types/Reporting/comparisonValue\";\r\nimport { asBoolean } from \"@Obsidian/Utility/booleanUtils\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\nimport { getStandardFilterComponent } from \"./utils\";\r\n\r\n/**\r\n * The key names for the configuration properties available when editing the\r\n * configuration of a DefinedValue field type.\r\n */\r\nexport const enum ConfigurationPropertyKey {\r\n    /** The defined types available to be picked. */\r\n    DefinedTypes = \"definedTypes\",\r\n\r\n    /** The defined values available to be picked. */\r\n    DefinedValues = \"definedValues\"\r\n}\r\n\r\n/**\r\n * The configuration value keys used by the configuraiton and edit controls.\r\n */\r\nexport const enum ConfigurationValueKey {\r\n    /** The unique identifier of the defined type currently selected. */\r\n    DefinedType = \"definedtype\",\r\n\r\n    /**\r\n     * The unique identifiers of the defined values that can be selected\r\n     * during editing.\r\n     */\r\n    Values = \"values\",\r\n\r\n    /**\r\n     * Contains \"True\" if the edit control should be rendered to allow\r\n     * selecting multiple values.\r\n     */\r\n    AllowMultiple = \"allowmultiple\",\r\n\r\n    /**\r\n     * Contains \"True\" if the edit control should display descriptions instead\r\n     * of values.\r\n     */\r\n    DisplayDescription = \"displaydescription\",\r\n\r\n    /**\r\n     * Contains \"True\" if the edit control should use enhanced selection.\r\n     */\r\n    EnhancedSelection = \"enhancedselection\",\r\n\r\n    /** Contains \"True\" if in-active values should be included. */\r\n    IncludeInactive = \"includeInactive\",\r\n\r\n    /** A comma separated list of selectable value identifiers. */\r\n    SelectableValues = \"selectableValues\",\r\n\r\n    /** Contains \"True\" if adding new values is permitted. */\r\n    AllowAddingNewValues = \"AllowAddingNewValues\",\r\n\r\n    /** The number of columns to use when multiple selection is allowed. */\r\n    RepeatColumns = \"RepeatColumns\"\r\n}\r\n\r\nexport type ValueItem = {\r\n    value: string,\r\n    text: string,\r\n    description: string\r\n};\r\n\r\nexport type ClientValue = {\r\n    value: string,\r\n    text: string,\r\n    description: string\r\n};\r\n\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./definedValueFieldComponents\")).EditComponent;\r\n});\r\n\r\n// The configuration component can be quite large, so load it only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./definedValueFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n// Load the filter component only as needed.\r\nconst filterComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./definedValueFieldComponents\")).FilterComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Defined Value field.\r\n */\r\nexport class DefinedValueFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, configurationValues: Record<string, string>): string {\r\n        try {\r\n            const clientValue = JSON.parse(value ?? \"\") as ClientValue;\r\n\r\n            try {\r\n                const values = JSON.parse(configurationValues[ConfigurationValueKey.Values] ?? \"[]\") as ValueItem[];\r\n                const displayDescription = asBoolean(configurationValues[ConfigurationValueKey.DisplayDescription]);\r\n                const rawValues = clientValue.value.split(\",\");\r\n\r\n                return values.filter(v => rawValues.includes(v.value))\r\n                    .map(v => displayDescription && v.description ? v.description : v.text)\r\n                    .join(\", \");\r\n            }\r\n            catch {\r\n                return clientValue.value;\r\n            }\r\n        }\r\n        catch {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override getSupportedComparisonTypes(): ComparisonType {\r\n        return containsComparisonTypes;\r\n    }\r\n\r\n    public override getFilterValueText(value: ComparisonValue, configurationValues: Record<string, string>): string {\r\n        try {\r\n            const clientValue = JSON.parse(value.value ?? \"\") as ClientValue;\r\n\r\n            const values = JSON.parse(configurationValues?.[ConfigurationValueKey.Values] ?? \"[]\") as ValueItem[];\r\n            const useDescription = asBoolean(configurationValues?.[ConfigurationValueKey.DisplayDescription]);\r\n            const rawValues = clientValue.value.split(\",\");\r\n\r\n            const text = values.filter(v => rawValues.includes(v.value))\r\n                .map(v => useDescription ? v.description : v.text)\r\n                .join(\"' OR '\");\r\n\r\n            return text ? `'${text}'` : \"\";\r\n        }\r\n        catch {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    public override getFilterComponent(): Component {\r\n        return getStandardFilterComponent(this.getSupportedComparisonTypes(), filterComponent);\r\n    }\r\n\r\n    public override doesValueMatchFilter(value: string, filterValue: ComparisonValue, _configurationValues: Record<string, string>): boolean {\r\n        const clientValue = JSON.parse(value || \"{}\") as ClientValue;\r\n        const selectedValues = (filterValue.value ?? \"\").split(\",\").filter(v => v !== \"\").map(v => v.toLowerCase());\r\n        let comparisonType = filterValue.comparisonType;\r\n\r\n        if (comparisonType === ComparisonType.EqualTo) {\r\n            // Treat EqualTo as if it were Contains.\r\n            comparisonType = ComparisonType.Contains;\r\n        }\r\n        else if (comparisonType === ComparisonType.NotEqualTo) {\r\n            // Treat NotEqualTo as if it were DoesNotContain.\r\n            comparisonType = ComparisonType.DoesNotContain;\r\n        }\r\n\r\n        if (comparisonType === ComparisonType.IsBlank) {\r\n            return (clientValue.value ?? \"\") === \"\";\r\n        }\r\n        else if (comparisonType === ComparisonType.IsNotBlank) {\r\n            return (clientValue.value ?? \"\") !== \"\";\r\n        }\r\n\r\n        if (selectedValues.length > 0) {\r\n            const userValues = (clientValue.value ?? \"\").toLowerCase().split(\",\").filter(v => v !== \"\");\r\n\r\n            if (comparisonType === ComparisonType.Contains) {\r\n                let matchedCount = 0;\r\n\r\n                for (const userValue of userValues) {\r\n                    if (selectedValues.includes(userValue)) {\r\n                        matchedCount += 1;\r\n                    }\r\n                }\r\n\r\n                return matchedCount > 0;\r\n            }\r\n            else {\r\n                let matchedCount = 0;\r\n\r\n                for (const userValue of userValues) {\r\n                    if (selectedValues.includes(userValue)) {\r\n                        matchedCount += 1;\r\n                    }\r\n                }\r\n\r\n                return matchedCount !== selectedValues.length;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { asBoolean } from \"@Obsidian/Utility/booleanUtils\";\r\nimport { List } from \"@Obsidian/Utility/linq\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\n\r\nexport const enum ConfigurationValueKey {\r\n    Values = \"values\",\r\n    DisplayDescription = \"displaydescription\"\r\n}\r\n\r\nexport type ValueItem = {\r\n    value: string,\r\n    text: string,\r\n    description: string\r\n};\r\n\r\nexport type ClientValue = {\r\n    value?: string;\r\n    text?: string;\r\n    description?: string;\r\n};\r\n\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./definedValueRangeFieldComponents\")).EditComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Defined Value Range field.\r\n */\r\nexport class DefinedValueRangeFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, configurationValues: Record<string, string>): string {\r\n        try {\r\n            const clientValue = JSON.parse(value) as ClientValue;\r\n\r\n            try {\r\n                const values = new List(JSON.parse(configurationValues[ConfigurationValueKey.Values] ?? \"[]\") as ValueItem[]);\r\n                const displayDescription = asBoolean(configurationValues[ConfigurationValueKey.DisplayDescription]);\r\n                const rawValues = (clientValue.value ?? \"\").split(\",\");\r\n\r\n                if (rawValues.length !== 2) {\r\n                    return value;\r\n                }\r\n\r\n                const lowerValue = values.firstOrUndefined(v => v?.value === rawValues[0]);\r\n                const upperValue = values.firstOrUndefined(v => v?.value === rawValues[1]);\r\n\r\n                if (lowerValue === undefined && upperValue === undefined) {\r\n                    return \"\";\r\n                }\r\n\r\n                if (displayDescription) {\r\n                    return `${lowerValue?.description ?? \"\"} to ${upperValue?.description ?? \"\"}`;\r\n                }\r\n                else {\r\n                    return `${lowerValue?.text ?? \"\"} to ${upperValue?.text ?? \"\"}`;\r\n                }\r\n            }\r\n            catch {\r\n                return clientValue.value ?? \"\";\r\n            }\r\n        }\r\n        catch {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    public override getCondensedTextValue(value: string, _configurationValues: Record<string, string>): string {\r\n        try {\r\n            const clientValue = JSON.parse(value ?? \"\") as ClientValue;\r\n\r\n            return clientValue.text ?? \"\";\r\n        }\r\n        catch {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override isFilterable(): boolean {\r\n        return false;\r\n    }\r\n}\r\n","ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { ComparisonType } from \"@Obsidian/Enums/Reporting/comparisonType\";\r\nimport { stringComparisonTypes } from \"@Obsidian/Core/Reporting/comparisonType\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\nimport { getStandardFilterComponent } from \"./utils\";\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./emailFieldComponents\")).EditComponent;\r\n});\r\n\r\n// The filter component can be quite large, so load it only as needed.\r\nconst filterComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./emailFieldComponents\")).FilterComponent;\r\n});\r\n\r\n// The configuration component can be quite large, so load it only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./emailFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Email field.\r\n */\r\nexport class EmailFieldType extends FieldTypeBase {\r\n    public override getHtmlValue(value: string, configurationValues: Record<string, string>): string {\r\n        const textValue = this.getTextValue(value, configurationValues);\r\n\r\n        return textValue ? `<a href=\"mailto:${textValue}\">${textValue}</a>` : \"\";\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override getFilterComponent(): Component {\r\n        return getStandardFilterComponent(this.getSupportedComparisonTypes(), filterComponent);\r\n    }\r\n\r\n    public override getSupportedComparisonTypes(): ComparisonType {\r\n        return stringComparisonTypes;\r\n    }\r\n}\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { ComparisonType } from \"@Obsidian/Enums/Reporting/comparisonType\";\r\nimport { escapeHtml } from \"@Obsidian/Utility/stringUtils\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\n\r\n/**\r\n * The key names for the configuration properties available when editing the\r\n * configuration of a File field type.\r\n */\r\nexport const enum ConfigurationPropertyKey {\r\n    /** The binary file types available to pick from. */\r\n    BinaryFileTypes = \"binaryFileTypes\"\r\n}\r\n\r\n/**\r\n * The configuration value keys used by the configuraiton and edit controls.\r\n */\r\nexport const enum ConfigurationValueKey {\r\n    /** The unique identifier of the BinaryFileType to use for uploads. */\r\n    BinaryFileType = \"binaryFileType\",\r\n}\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./fileFieldComponents\")).EditComponent;\r\n});\r\n\r\n// The configuration component can be quite large, so load it only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./fileFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the File field.\r\n */\r\nexport class FileFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, configurationValues: Record<string, string>): string {\r\n        try {\r\n            const realValue = JSON.parse(value) as ListItemBag;\r\n\r\n            return realValue.text ?? \"\";\r\n        }\r\n        catch {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    public override getHtmlValue(value: string, _configurationValues: Record<string, string>): string {\r\n        try {\r\n            const realValue = JSON.parse(value ?? \"\") as ListItemBag;\r\n\r\n            return `<a href=\"/GetFile.ashx?guid=${realValue.value}\" title=\"${escapeHtml(realValue.text ?? \"\")}\" class=\"btn btn-xs btn-default\">View</a>`;\r\n        }\r\n        catch {\r\n            return value ?? \"\";\r\n        }\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override getSupportedComparisonTypes(): ComparisonType {\r\n        return ComparisonType.IsBlank | ComparisonType.IsNotBlank;\r\n    }\r\n}\r\n","ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { toNumberOrNull } from \"@Obsidian/Utility/numberUtils\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./genderFieldComponents\")).EditComponent;\r\n});\r\n\r\n// The configuration component can be quite large, so load it only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./genderFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Gender field.\r\n */\r\nexport class GenderFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, _configurationValues: Record<string, string>): string {\r\n        const numberValue = toNumberOrNull(value);\r\n\r\n        if (numberValue === 0) {\r\n            return \"Unknown\";\r\n        }\r\n        else if (numberValue === 1) {\r\n            return \"Male\";\r\n        }\r\n        else if (numberValue === 2) {\r\n            return \"Female\";\r\n        }\r\n        else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n}\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { ComparisonType } from \"@Obsidian/Enums/Reporting/comparisonType\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\n\r\n/**\r\n * The key names for the configuration properties available when editing the\r\n * configuration of an Image field type.\r\n */\r\nexport const enum ConfigurationPropertyKey {\r\n    /** The binary file types available to pick from. */\r\n    BinaryFileTypes = \"binaryFileTypes\"\r\n}\r\n\r\n/**\r\n * The configuration value keys used by the configuraiton and edit controls.\r\n */\r\nexport const enum ConfigurationValueKey {\r\n    /** The unique identifier of the BinaryFileType to use for uploads. */\r\n    BinaryFileType = \"binaryFileType\",\r\n\r\n    /** Determines if the rendered HTML should be clickable. */\r\n    FormatAsLink = \"formatAsLink\"\r\n}\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./imageFieldComponents\")).EditComponent;\r\n});\r\n\r\n// The configuration component can be quite large, so load it only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./imageFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Image field.\r\n */\r\nexport class ImageFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, _configurationValues: Record<string, string>): string {\r\n        try {\r\n            const realValue = JSON.parse(value ?? \"\") as ListItemBag;\r\n\r\n            if (!realValue.value) {\r\n                return \"\";\r\n            }\r\n\r\n            return realValue.text ?? \"\";\r\n        }\r\n        catch {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    public override getHtmlValue(value: string, _configurationValues: Record<string, string>): string {\r\n        try {\r\n            const realValue = JSON.parse(value ?? \"\") as ListItemBag;\r\n\r\n            if (!realValue.value) {\r\n                return \"\";\r\n            }\r\n\r\n            return `<img src=\"/GetImage.ashx?guid=${realValue.value}\" class=\"img-responsive\" />`;\r\n        }\r\n        catch {\r\n            return value ?? \"\";\r\n        }\r\n    }\r\n\r\n    public override getCondensedHtmlValue(value: string, _configurationValues: Record<string, string>): string {\r\n        try {\r\n            const realValue = JSON.parse(value ?? \"\") as ListItemBag;\r\n\r\n            if (!realValue.value) {\r\n                return \"\";\r\n            }\r\n\r\n            return `<img src=\"/GetImage.ashx?guid=${realValue.value}&width=120\" class=\"img-responsive\" />`;\r\n        }\r\n        catch {\r\n            return value ?? \"\";\r\n        }\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override getSupportedComparisonTypes(): ComparisonType {\r\n        return ComparisonType.IsBlank | ComparisonType.IsNotBlank;\r\n    }\r\n}\r\n","ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { ComparisonType } from \"@Obsidian/Enums/Reporting/comparisonType\";\r\nimport { numericComparisonTypes } from \"@Obsidian/Core/Reporting/comparisonType\";\r\nimport { toNumberOrNull } from \"@Obsidian/Utility/numberUtils\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\n\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./integerFieldComponents\")).EditComponent;\r\n});\r\n\r\n// The configuration component can be quite large, so load it only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./integerFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Integer field.\r\n */\r\nexport class IntegerFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, _configurationValues: Record<string, string>): string {\r\n        return toNumberOrNull(value)?.toString() ?? \"\";\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override getSupportedComparisonTypes(): ComparisonType {\r\n        return numericComparisonTypes;\r\n    }\r\n}\r\n","ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { toNumberOrNull } from \"@Obsidian/Utility/numberUtils\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\n\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./integerRangeFieldComponents\")).EditComponent;\r\n});\r\n\r\n// The configuration component can be quite large, so load it only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./integerRangeFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Integer Range field.\r\n */\r\nexport class IntegerRangeFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, _configurationValues: Record<string, string>): string {\r\n        if (value === \"\" || value === \",\") {\r\n            return \"\";\r\n        }\r\n\r\n        const numbers = value.split(\",\").map(v => toNumberOrNull(v));\r\n\r\n        // If there are not two components then it's not valid, or if both\r\n        // components are not numbers then it's not valid.\r\n        if (numbers.length !== 2 || (numbers[0] === null && numbers[1] === null)) {\r\n            return \"\";\r\n        }\r\n\r\n        if (numbers[0] === null) {\r\n            return `through ${numbers[1]}`;\r\n        }\r\n        else if (numbers[1] === null) {\r\n            return `from ${numbers[0]}`;\r\n        }\r\n        else {\r\n            return `${numbers[0]} to ${numbers[1]}`;\r\n        }\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override isFilterable(): boolean {\r\n        return false;\r\n    }\r\n}\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { List } from \"@Obsidian/Utility/linq\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\n\r\nexport const enum ConfigurationValueKey {\r\n    Values = \"values\",\r\n    KeyPrompt = \"keyprompt\",\r\n    ValuePrompt = \"valueprompt\",\r\n    DisplayValueFirst = \"displayvaluefirst\",\r\n    AllowHtml = \"allowhtml\",\r\n\r\n    // Only used during editing of the field type configuration.\r\n    CustomValues = \"customvalues\",\r\n    DefinedType = \"definedtype\"\r\n}\r\n\r\nexport const enum ConfigurationPropertyKey {\r\n    DefinedTypes = \"definedTypes\"\r\n}\r\n\r\nexport type ValueItem = {\r\n    value: string,\r\n    text: string\r\n};\r\n\r\nexport type ClientValue = {\r\n    key: string,\r\n    value: string\r\n};\r\n\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./keyValueListFieldComponents\")).EditComponent;\r\n});\r\n\r\n// Load the configuration component as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./keyValueListFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Key Value List field.\r\n */\r\nexport class KeyValueListFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, configurationValues: Record<string, string>): string {\r\n        try {\r\n            const clientValues = JSON.parse(value ?? \"[]\") as ClientValue[];\r\n            const configuredValues = new List(JSON.parse(configurationValues[ConfigurationValueKey.Values] ?? \"[]\") as ValueItem[]);\r\n            const values: string[] = [];\r\n\r\n            for (const clientValue of clientValues) {\r\n                const configuredValue = configuredValues.firstOrUndefined(v => v.value === clientValue.value);\r\n\r\n                if (configuredValue !== undefined) {\r\n                    values.push(`${clientValue.key}: ${configuredValue.text}`);\r\n                }\r\n                else {\r\n                    values.push(`${clientValue.key}: ${clientValue.value}`);\r\n                }\r\n            }\r\n\r\n            return values.join(\", \");\r\n        }\r\n        catch {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override isFilterable(): boolean {\r\n        return false;\r\n    }\r\n}\r\n","ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { ComparisonType } from \"@Obsidian/Enums/Reporting/comparisonType\";\r\nimport { stringComparisonTypes } from \"@Obsidian/Core/Reporting/comparisonType\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\nimport { getStandardFilterComponent } from \"./utils\";\r\n\r\nexport const enum ConfigurationValueKey {\r\n    NumberOfRows = \"numberofrows\",\r\n    AllowHtml = \"allowhtml\",\r\n    MaxCharacters = \"maxcharacters\",\r\n    ShowCountDown = \"showcountdown\"\r\n}\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./memoFieldComponents\")).EditComponent;\r\n});\r\n\r\n// The filter component can be quite large, so load it only as needed.\r\nconst filterComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./memoFieldComponents\")).FilterComponent;\r\n});\r\n\r\n// The configuration component can be quite large, so load it only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./memoFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Memo field.\r\n */\r\nexport class MemoFieldType extends FieldTypeBase {\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override getSupportedComparisonTypes(): ComparisonType {\r\n        return stringComparisonTypes;\r\n    }\r\n\r\n    public override getFilterComponent(): Component {\r\n        return getStandardFilterComponent(this.getSupportedComparisonTypes(), filterComponent);\r\n    }\r\n}\r\n","ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { toNumber } from \"@Obsidian/Utility/numberUtils\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./monthDayFieldComponents\")).EditComponent;\r\n});\r\n\r\n// The configuration component can be quite large, so load it only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./monthDayFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the MonthDay field.\r\n */\r\nexport class MonthDayFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, _configurationValues: Record<string, string>): string {\r\n        const components = (value).split(\"/\");\r\n\r\n        if (components.length !== 2) {\r\n            return \"\";\r\n        }\r\n\r\n        const month = toNumber(components[0]);\r\n        const day = toNumber(components[1]);\r\n\r\n        if (month >= 1 && day >= 1 && month <= 12 && day <= 31) {\r\n            const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n\r\n            return `${months[month-1]} ${day}`;\r\n        }\r\n        else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n}\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { ComparisonType } from \"@Obsidian/Enums/Reporting/comparisonType\";\r\nimport { containsComparisonTypes } from \"@Obsidian/Core/Reporting/comparisonType\";\r\nimport { ComparisonValue } from \"@Obsidian/Types/Reporting/comparisonValue\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\nimport { getStandardFilterComponent } from \"./utils\";\r\n\r\nexport const enum ConfigurationValueKey {\r\n    Values = \"values\",\r\n    RepeatColumns = \"repeatColumns\",\r\n    RepeatDirection = \"repeatDirection\",\r\n    EnhancedSelection = \"enhancedselection\",\r\n\r\n    /** Only used during editing of the field type configuration. */\r\n    CustomValues = \"customValues\"\r\n}\r\n\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./multiSelectFieldComponents\")).EditComponent;\r\n});\r\n\r\n// Load the filter component only as needed.\r\nconst filterComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./multiSelectFieldComponents\")).FilterComponent;\r\n});\r\n\r\n// Load the configuration component only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./multiSelectFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the MultiSelect field.\r\n */\r\nexport class MultiSelectFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, configurationValues: Record<string, string>): string {\r\n        if (value === \"\") {\r\n            return \"\";\r\n        }\r\n\r\n        try {\r\n            const values = JSON.parse(configurationValues[ConfigurationValueKey.Values] ?? \"[]\") as ListItemBag[];\r\n            const userValues = value.split(\",\");\r\n            const selectedValues = values.filter(v => userValues.includes(v.value ?? \"\"));\r\n\r\n            return selectedValues.map(v => v.text).join(\", \");\r\n        }\r\n        catch {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override getSupportedComparisonTypes(): ComparisonType {\r\n        return containsComparisonTypes;\r\n    }\r\n\r\n    public override getFilterComponent(): Component {\r\n        return getStandardFilterComponent(this.getSupportedComparisonTypes(), filterComponent);\r\n    }\r\n\r\n    public override getFilterValueText(value: ComparisonValue, configurationValues: Record<string, string>): string {\r\n        if (value.value === \"\") {\r\n            return \"\";\r\n        }\r\n\r\n        try {\r\n            const rawValues = value.value.split(\",\");\r\n            const values = JSON.parse(configurationValues?.[ConfigurationValueKey.Values] ?? \"[]\") as ListItemBag[];\r\n            const selectedValues = values.filter(v => rawValues.includes(v.value ?? \"\"));\r\n\r\n            if (selectedValues.length >= 1) {\r\n                return `'${selectedValues.map(v => v.value).join(\"' OR '\")}'`;\r\n            }\r\n            else {\r\n                return \"\";\r\n            }\r\n        }\r\n        catch {\r\n            return value.value;\r\n        }\r\n    }\r\n\r\n    public override doesValueMatchFilter(value: string, filterValue: ComparisonValue, _configurationValues: Record<string, string>): boolean {\r\n        const selectedValues = (filterValue.value ?? \"\").split(\",\").filter(v => v !== \"\").map(v => v.toLowerCase());\r\n        let comparisonType = filterValue.comparisonType;\r\n\r\n        if (comparisonType === ComparisonType.EqualTo) {\r\n            // Treat EqualTo as if it were Contains.\r\n            comparisonType = ComparisonType.Contains;\r\n        }\r\n        else if (comparisonType === ComparisonType.NotEqualTo) {\r\n            // Treat NotEqualTo as if it were DoesNotContain.\r\n            comparisonType = ComparisonType.DoesNotContain;\r\n        }\r\n\r\n        if (comparisonType === ComparisonType.IsBlank) {\r\n            return value === \"\";\r\n        }\r\n        else if (comparisonType === ComparisonType.IsNotBlank) {\r\n            return value !== \"\";\r\n        }\r\n\r\n        if (selectedValues.length > 0) {\r\n            const userValues = value?.split(\",\").filter(v => v !== \"\").map(v => v.toLowerCase()) ?? [];\r\n\r\n            if (comparisonType === ComparisonType.Contains) {\r\n                let matchedCount = 0;\r\n\r\n                for (const userValue of userValues) {\r\n                    if (selectedValues.includes(userValue)) {\r\n                        matchedCount += 1;\r\n                    }\r\n                }\r\n\r\n                return matchedCount > 0;\r\n            }\r\n            else {\r\n                let matchedCount = 0;\r\n\r\n                for (const userValue of userValues) {\r\n                    if (selectedValues.includes(userValue)) {\r\n                        matchedCount += 1;\r\n                    }\r\n                }\r\n\r\n                return matchedCount !== selectedValues.length;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\nimport { formatPhoneNumber } from \"@Obsidian/Utility/phone\";\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./phoneNumberFieldComponents\")).EditComponent;\r\n});\r\n\r\n// The configuration component can be quite large, so load it only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./phoneNumberFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Phone Number field.\r\n */\r\nexport class PhoneNumberFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, _configurationValues: Record<string, string>): string {\r\n        return formatPhoneNumber(value || \"\");\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n}\r\n","ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component, } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { ComparisonType } from \"@Obsidian/Enums/Reporting/comparisonType\";\r\nimport { numericComparisonTypes } from \"@Obsidian/Core/Reporting/comparisonType\";\r\nimport { toNumberOrNull } from \"@Obsidian/Utility/numberUtils\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\nimport { ComparisonValue } from \"@Obsidian/Types/Reporting/comparisonValue\";\r\n\r\nexport const enum ConfigurationValueKey {\r\n    MaxRating = \"max\"\r\n}\r\n\r\nexport type RatingValue = {\r\n    value?: number;\r\n\r\n    maxValue?: number;\r\n};\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./ratingFieldComponents\")).EditComponent;\r\n});\r\n\r\n// The configuration component can be quite large, so load it only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./ratingFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Rating field.\r\n */\r\nexport class RatingFieldType extends FieldTypeBase {\r\n    public override getHtmlValue(value: string, configurationValues: Record<string, string>): string {\r\n        let ratingValue: RatingValue | null;\r\n\r\n        try {\r\n            ratingValue = JSON.parse(value ?? \"\") as RatingValue;\r\n        }\r\n        catch {\r\n            ratingValue = null;\r\n        }\r\n\r\n        const rating = ratingValue?.value ?? 0;\r\n        const maxRating = toNumberOrNull(configurationValues[ConfigurationValueKey.MaxRating]) ?? 5;\r\n        let html = \"\";\r\n\r\n        for (let i = 0; i < rating && i < maxRating; i++) {\r\n            html += `<i class=\"fa fa-rating-selected\"></i>`;\r\n        }\r\n\r\n        for (let i = rating; i < maxRating; i++) {\r\n            html += `<i class=\"fa fa-rating-unselected\"></i>`;\r\n        }\r\n\r\n        return html;\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override getSupportedComparisonTypes(): ComparisonType {\r\n        return numericComparisonTypes;\r\n    }\r\n\r\n    public override doesValueMatchFilter(value: string, filterValue: ComparisonValue, configurationValues: Record<string, string>): boolean {\r\n        let ratingValue: RatingValue | null;\r\n\r\n        try {\r\n            ratingValue = JSON.parse(value) as RatingValue;\r\n        }\r\n        catch {\r\n            ratingValue = null;\r\n        }\r\n\r\n        const rating = ratingValue?.value ?? 0;\r\n\r\n        if (filterValue.comparisonType === ComparisonType.IsBlank) {\r\n            return rating === 0;\r\n        }\r\n        else if (filterValue.comparisonType === ComparisonType.IsNotBlank) {\r\n            return rating !== 0;\r\n        }\r\n        else {\r\n            return super.doesValueMatchFilter(rating.toString(), filterValue, configurationValues);\r\n        }\r\n    }\r\n}\r\n","ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\nimport { Guid } from \"@Obsidian/Types\";\r\n\r\nexport const enum ConfigurationValueKey {\r\n    Values = \"values\"\r\n}\r\n\r\nexport type ReminderTypeFieldItem = {\r\n    guid: Guid\r\n    name: string,\r\n    entityTypeName: string\r\n};\r\n\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./reminderTypeFieldComponents\")).EditComponent;\r\n});\r\n\r\n// The configuration component can be quite large, so load it only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./reminderTypeFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Reminder Type field.\r\n */\r\nexport class ReminderTypeFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, configurationValues: Record<string, string>): string {\r\n        if (value === undefined || value === null || value === \"\") {\r\n            return \"\";\r\n        }\r\n\r\n        try {\r\n            const values = JSON.parse(configurationValues[ConfigurationValueKey.Values] ?? \"[]\") as ReminderTypeFieldItem[];\r\n            const selectedValues = values.filter(o => o.guid.toLowerCase() === value.toLowerCase());\r\n\r\n            return selectedValues[0].name;\r\n        }\r\n        catch {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n}\r\n","ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport { ComparisonType } from \"@Obsidian/Enums/Reporting/comparisonType\";\r\nimport { binaryComparisonTypes, containsComparisonTypes } from \"@Obsidian/Core/Reporting/comparisonType\";\r\nimport { toNumberOrNull } from \"@Obsidian/Utility/numberUtils\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\n\r\nexport const enum ConfigurationValueKey {\r\n    Values = \"values\",\r\n    EnhancedSelection = \"enhancedselection\",\r\n    RepeatColumns = \"repeatColumns\",\r\n}\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./reminderTypesFieldComponents\")).EditComponent;\r\n});\r\n\r\n// The configuration component can be quite large, so load it only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./reminderTypesFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Reminder Types field.\r\n */\r\nexport class ReminderTypesFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, configurationValues: Record<string, string>): string {\r\n        if (value === undefined || value === null || value === \"\") {\r\n            return \"\";\r\n        }\r\n\r\n        try {\r\n            const values = JSON.parse(configurationValues[ConfigurationValueKey.Values] ?? \"[]\") as ListItemBag[];\r\n            const userValues = value.split(\",\");\r\n            const selectedValues = values.filter(o => userValues.includes(o.value ?? \"\"));\r\n\r\n            return selectedValues.map(o => o.text).join(\", \");\r\n        }\r\n        catch {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override getSupportedComparisonTypes(): ComparisonType {\r\n        return binaryComparisonTypes | containsComparisonTypes;\r\n    }\r\n}\r\n","ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { ComparisonValue } from \"@Obsidian/Types/Reporting/comparisonValue\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\nimport { getStandardFilterComponent } from \"./utils\";\r\nimport { ComparisonType } from \"@Obsidian/Enums/Reporting/comparisonType\";\r\n\r\nexport const enum ConfigurationValueKey {\r\n    Values = \"values\",\r\n    FieldType = \"fieldtype\",\r\n    RepeatColumns = \"repeatColumns\",\r\n\r\n    /** Only used during editing of the field type configuration. */\r\n    CustomValues = \"customValues\"\r\n}\r\n\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./singleSelectFieldComponents\")).EditComponent;\r\n});\r\n\r\n// Load the filter component only as needed.\r\nconst filterComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./singleSelectFieldComponents\")).FilterComponent;\r\n});\r\n\r\n// Load the configuration component only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./singleSelectFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the SingleSelect field.\r\n */\r\nexport class SingleSelectFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, configurationValues: Record<string, string>): string {\r\n        if (value === \"\") {\r\n            return \"\";\r\n        }\r\n\r\n        try {\r\n            const values = JSON.parse(configurationValues[ConfigurationValueKey.Values] ?? \"[]\") as ListItemBag[];\r\n            const selectedValues = values.filter(v => v.value === value);\r\n\r\n            if (selectedValues.length >= 1) {\r\n                return selectedValues[0].text ?? \"\";\r\n            }\r\n            else {\r\n                return \"\";\r\n            }\r\n        }\r\n        catch {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override getFilterComponent(): Component {\r\n        return getStandardFilterComponent(\"Is\", filterComponent);\r\n    }\r\n\r\n    public override getFilterValueText(value: ComparisonValue, configurationValues: Record<string, string>): string {\r\n        if (value.value === \"\") {\r\n            return \"\";\r\n        }\r\n\r\n        try {\r\n            const rawValues = value.value.split(\",\");\r\n            const values = JSON.parse(configurationValues?.[ConfigurationValueKey.Values] ?? \"[]\") as ListItemBag[];\r\n            const selectedValues = values.filter(v => rawValues.includes(v.value ?? \"\"));\r\n\r\n            if (selectedValues.length >= 1) {\r\n                return `'${selectedValues.map(v => v.value).join(\"' OR '\")}'`;\r\n            }\r\n            else {\r\n                return \"\";\r\n            }\r\n        }\r\n        catch {\r\n            return value.value;\r\n        }\r\n    }\r\n\r\n    public override doesValueMatchFilter(value: string, filterValue: ComparisonValue, _configurationValues: Record<string, string>): boolean {\r\n        const selectedValues = (filterValue.value ?? \"\").split(\",\").filter(v => v !== \"\").map(v => v.toLowerCase());\r\n        let comparisonType = filterValue.comparisonType;\r\n\r\n        if (comparisonType === ComparisonType.EqualTo) {\r\n            // Treat EqualTo as if it were Contains.\r\n            comparisonType = ComparisonType.Contains;\r\n        }\r\n        else if (comparisonType === ComparisonType.NotEqualTo) {\r\n            // Treat NotEqualTo as if it were DoesNotContain.\r\n            comparisonType = ComparisonType.DoesNotContain;\r\n        }\r\n\r\n        if (comparisonType === ComparisonType.IsBlank) {\r\n            return value === \"\";\r\n        }\r\n        else if (comparisonType === ComparisonType.IsNotBlank) {\r\n            return value !== \"\";\r\n        }\r\n\r\n        if (selectedValues.length > 0) {\r\n            let matched = selectedValues.includes(value.toLowerCase());\r\n\r\n            if (comparisonType === ComparisonType.DoesNotContain) {\r\n                matched = !matched;\r\n            }\r\n\r\n            return matched;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./ssnFieldComponents\")).EditComponent;\r\n});\r\n\r\n// The configuration component can be quite large, so load it only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./ssnFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\nexport class SSNFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, _configurationValues: Record<string, string>): string {\r\n        const strippedValue = value.replace(/[^0-9]/g, \"\");\r\n\r\n        if (strippedValue.length !== 9) {\r\n            return \"\";\r\n        }\r\n\r\n        return `xxx-xx-${value.substr(5, 4)}`;\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override isFilterable(): boolean {\r\n        return false;\r\n    }\r\n}\r\n","ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { ComparisonType } from \"@Obsidian/Enums/Reporting/comparisonType\";\r\nimport { stringComparisonTypes } from \"@Obsidian/Core/Reporting/comparisonType\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\n\r\nexport const enum ConfigurationValueKey {\r\n    /** Contains \"True\" if the text field is designed for password entry. */\r\n    IsPassword = \"ispassword\",\r\n\r\n    /** The maximum number of characters allowed in the text entry field. */\r\n    MaxCharacters = \"maxcharacters\",\r\n\r\n    /** Contains \"True\" if the text field should show the character countdown. */\r\n    ShowCountdown = \"showcountdown\"\r\n}\r\n\r\n// The configuration component can be quite large, so load it only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./textFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\nexport class TextFieldType extends FieldTypeBase {\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override getSupportedComparisonTypes(): ComparisonType {\r\n        return stringComparisonTypes;\r\n    }\r\n}\r\n","ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { ComparisonType } from \"@Obsidian/Enums/Reporting/comparisonType\";\r\nimport { dateComparisonTypes } from \"@Obsidian/Core/Reporting/comparisonType\";\r\nimport { toNumber } from \"@Obsidian/Utility/numberUtils\";\r\nimport { padLeft } from \"@Obsidian/Utility/stringUtils\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./timeFieldComponents\")).EditComponent;\r\n});\r\n\r\n// The configuration component can be quite large, so load it only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./timeFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Time field.\r\n */\r\nexport class TimeFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, _configurationValues: Record<string, string>): string {\r\n        const values = /^(\\d+):(\\d+)/.exec(value ?? \"\");\r\n\r\n        if (values === null || values.length < 3) {\r\n            return \"\";\r\n        }\r\n\r\n        let hour = toNumber(values[1]);\r\n        const minute = toNumber(values[2]);\r\n        const meridiem = hour >= 12 ? \"PM\" : \"AM\";\r\n\r\n        if (hour > 12) {\r\n            hour -= 12;\r\n        }\r\n\r\n        return `${hour}:${padLeft(minute.toString(), 2, \"0\")} ${meridiem}`;\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override getSupportedComparisonTypes(): ComparisonType {\r\n        return dateComparisonTypes;\r\n    }\r\n}\r\n","ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { ComparisonType } from \"@Obsidian/Enums/Reporting/comparisonType\";\r\nimport { stringComparisonTypes } from \"@Obsidian/Core/Reporting/comparisonType\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\n\r\nexport const enum ConfigurationValueKey {\r\n    ShouldRequireTrailingForwardSlash = \"ShouldRequireTrailingForwardSlash\",\r\n    ShouldAlwaysShowCondensed = \"ShouldAlwaysShowCondensed\"\r\n}\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./urlLinkFieldComponents\")).EditComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Email field.\r\n */\r\nexport class UrlLinkFieldType extends FieldTypeBase {\r\n    public override getHtmlValue(value: string, configurationValues: Record<string, string>): string {\r\n        const textValue = this.getTextValue(value, configurationValues);\r\n\r\n        return textValue ? `<a href=\"${textValue}\">${textValue}</a>` : \"\";\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getSupportedComparisonTypes(): ComparisonType {\r\n        return stringComparisonTypes;\r\n    }\r\n}\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\n\r\nexport const enum ConfigurationValueKey {\r\n    Values = \"values\",\r\n    ValuePrompt = \"valueprompt\",\r\n    AllowHtml = \"allowhtml\",\r\n\r\n    // Only used during editing of the field type configuration.\r\n    CustomValues = \"customvalues\",\r\n    DefinedType = \"definedtype\"\r\n}\r\n\r\nexport const enum ConfigurationPropertyKey {\r\n    DefinedTypes = \"definedTypes\"\r\n}\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./valueListFieldComponents\")).EditComponent;\r\n});\r\n\r\n// Load the configuration component as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./valueListFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Value List field.\r\n */\r\nexport class ValueListFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, configurationValues: Record<string, string>): string {\r\n        try {\r\n            const clientValues = JSON.parse(value ?? \"[]\") as string[];\r\n            const configuredValues = JSON.parse(configurationValues[ConfigurationValueKey.Values] ?? \"[]\") as ListItemBag[];\r\n            const values: string[] = [];\r\n\r\n            for (const clientValue of clientValues) {\r\n                if (configuredValues.length > 0) {\r\n                    const configuredValue = configuredValues.find(v => v.value === clientValue);\r\n\r\n                    if (configuredValue) {\r\n                        values.push(configuredValue.text ?? \"\");\r\n                    }\r\n                }\r\n                else {\r\n                    values.push(clientValue);\r\n                }\r\n            }\r\n\r\n            return values.join(\", \");\r\n        }\r\n        catch {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override isFilterable(): boolean {\r\n        return false;\r\n    }\r\n}\r\n","ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { FieldType as FieldTypeGuids } from \"@Obsidian/SystemGuids/fieldType\";\r\nimport { registerFieldType } from \"@Obsidian/Utility/fieldTypes\";\r\n\r\nexport { ConfigurationValues, getFieldEditorProps } from \"./utils\";\r\n\r\n/*\r\n * Define the standard field types in Rock.\r\n */\r\n\r\nimport { AddressFieldType } from \"./addressField.partial\";\r\nregisterFieldType(FieldTypeGuids.Address, new AddressFieldType());\r\n\r\nimport { BooleanFieldType } from \"./booleanField.partial\";\r\nregisterFieldType(FieldTypeGuids.Boolean, new BooleanFieldType());\r\n\r\nimport { CampusFieldType } from \"./campusField.partial\";\r\nregisterFieldType(FieldTypeGuids.Campus, new CampusFieldType());\r\n\r\nimport { CampusesFieldType } from \"./campusesField.partial\";\r\nregisterFieldType(FieldTypeGuids.Campuses, new CampusesFieldType());\r\n\r\nimport { ColorFieldType } from \"./colorField.partial\";\r\nregisterFieldType(FieldTypeGuids.Color, new ColorFieldType());\r\n\r\nimport { CurrencyFieldType } from \"./currencyField.partial\";\r\nregisterFieldType(FieldTypeGuids.Currency, new CurrencyFieldType());\r\n\r\nimport { DateFieldType } from \"./dateField.partial\";\r\nregisterFieldType(FieldTypeGuids.Date, new DateFieldType());\r\n\r\nimport { DateRangeFieldType } from \"./dateRangeField.partial\";\r\nregisterFieldType(FieldTypeGuids.DateRange, new DateRangeFieldType());\r\n\r\nimport { DateTimeFieldType } from \"./dateTimeField.partial\";\r\nregisterFieldType(FieldTypeGuids.DateTime, new DateTimeFieldType());\r\n\r\nimport { DayOfWeekFieldType } from \"./dayOfWeekField.partial\";\r\nregisterFieldType(FieldTypeGuids.DayOfWeek, new DayOfWeekFieldType());\r\n\r\nimport { DaysOfWeekFieldType } from \"./daysOfWeekField.partial\";\r\nregisterFieldType(FieldTypeGuids.DaysOfWeek, new DaysOfWeekFieldType());\r\n\r\nimport { DecimalFieldType } from \"./decimalField.partial\";\r\nregisterFieldType(FieldTypeGuids.Decimal, new DecimalFieldType());\r\n\r\nimport { DecimalRangeFieldType } from \"./decimalRangeField.partial\";\r\nregisterFieldType(FieldTypeGuids.DecimalRange, new DecimalRangeFieldType());\r\n\r\nimport { DefinedValueFieldType } from \"./definedValueField.partial\";\r\nregisterFieldType(FieldTypeGuids.DefinedValue, new DefinedValueFieldType());\r\n\r\nimport { DefinedValueRangeFieldType } from \"./definedValueRangeField.partial\";\r\nregisterFieldType(FieldTypeGuids.DefinedValueRange, new DefinedValueRangeFieldType());\r\n\r\nimport { EmailFieldType } from \"./emailField.partial\";\r\nregisterFieldType(FieldTypeGuids.Email, new EmailFieldType());\r\n\r\nimport { FileFieldType } from \"./fileField.partial\";\r\nregisterFieldType(FieldTypeGuids.File, new FileFieldType());\r\n\r\nimport { GenderFieldType } from \"./genderField.partial\";\r\nregisterFieldType(FieldTypeGuids.Gender, new GenderFieldType());\r\n\r\nimport { ImageFieldType } from \"./imageField.partial\";\r\nregisterFieldType(FieldTypeGuids.Image, new ImageFieldType());\r\n\r\nimport { IntegerFieldType } from \"./integerField.partial\";\r\nregisterFieldType(FieldTypeGuids.Integer, new IntegerFieldType());\r\n\r\nimport { IntegerRangeFieldType } from \"./integerRangeField.partial\";\r\nregisterFieldType(FieldTypeGuids.IntegerRange, new IntegerRangeFieldType());\r\n\r\nimport { KeyValueListFieldType } from \"./keyValueListField.partial\";\r\nregisterFieldType(FieldTypeGuids.KeyValueList, new KeyValueListFieldType());\r\n\r\nimport { MemoFieldType } from \"./memoField.partial\";\r\nregisterFieldType(FieldTypeGuids.Memo, new MemoFieldType());\r\n\r\nimport { MonthDayFieldType } from \"./monthDayField.partial\";\r\nregisterFieldType(FieldTypeGuids.MonthDay, new MonthDayFieldType());\r\n\r\nimport { MultiSelectFieldType } from \"./multiSelectField.partial\";\r\nregisterFieldType(FieldTypeGuids.MultiSelect, new MultiSelectFieldType());\r\n\r\nimport { PhoneNumberFieldType } from \"./phoneNumberField.partial\";\r\nregisterFieldType(FieldTypeGuids.PhoneNumber, new PhoneNumberFieldType());\r\n\r\nimport { RatingFieldType } from \"./ratingField.partial\";\r\nregisterFieldType(FieldTypeGuids.Rating, new RatingFieldType());\r\n\r\nimport { ReminderTypeFieldType } from \"./reminderTypeField.partial\";\r\nregisterFieldType(FieldTypeGuids.ReminderType, new ReminderTypeFieldType());\r\n\r\nimport { ReminderTypesFieldType } from \"./reminderTypesField.partial\";\r\nregisterFieldType(FieldTypeGuids.ReminderTypes, new ReminderTypesFieldType());\r\n\r\nimport { SingleSelectFieldType } from \"./singleSelectField.partial\";\r\nregisterFieldType(FieldTypeGuids.SingleSelect, new SingleSelectFieldType());\r\n\r\nimport { SSNFieldType } from \"./ssnField.partial\";\r\nregisterFieldType(FieldTypeGuids.Ssn, new SSNFieldType());\r\n\r\nimport { TextFieldType } from \"./textField.partial\";\r\nregisterFieldType(FieldTypeGuids.Text, new TextFieldType());\r\n\r\nimport { TimeFieldType } from \"./timeField.partial\";\r\nregisterFieldType(FieldTypeGuids.Time, new TimeFieldType());\r\n\r\nimport { UrlLinkFieldType } from \"./urlLinkField.partial\";\r\nregisterFieldType(FieldTypeGuids.UrlLink, new UrlLinkFieldType());\r\n\r\nimport { ValueListFieldType } from \"./valueListField.partial\";\r\nregisterFieldType(FieldTypeGuids.ValueList, new ValueListFieldType());\r\n"],"names":["editComponent","defineAsyncComponent","_asyncToGenerator","EditComponent","configurationComponent","ConfigurationComponent","AddressFieldType","FieldTypeBase","getTextValue","value","_configurationValues","_addressValue$street","_addressValue$street2","_addressValue$city","_addressValue$state","_addressValue$postalC","addressValue","JSON","parse","textValue","concat","street1","street2","city","state","postalCode","replace","_unused","getEditComponent","getConfigurationComponent","isFilterable","ConfigurationValueKey","filterComponent","FilterComponent","BooleanFieldType","getCondensedTextValue","boolValue","asBooleanOrNull","configurationValues","TrueText","FalseText","getSupportedComparisonTypes","ComparisonType","EqualTo","NotEqualTo","getFilterComponent","getStandardFilterComponent","ConfigurationPropertyKey","CampusFieldType","undefined","_configurationValues$","values","Values","selectedValues","filter","o","map","text","join","None","getFilterValueText","_configurationValues$2","rawValues","split","v","areEqual","length","_unused2","doesValueMatchFilter","filterValue","_filterValue$value","toLowerCase","comparisonType","Contains","DoesNotContain","IsBlank","IsNotBlank","matched","includes","CampusesFieldType","userValues","_o$value","ColorFieldType","CurrencyFieldType","_toCurrencyOrNull","toCurrencyOrNull","numericComparisonTypes","DateFieldType","isCurrentDateValue","getCurrentDateText","dateValue","RockDateTime","parseISO","dateFormatTemplate","Format","toASPString","displayDiff","asBoolean","DisplayDiff","toElapsedString","dateComparisonTypes","updateComparisonTypeNames","options","Between","toString","forEach","getFilterValueDescription","filterValues","_range$timeValue","_range$timeUnit","range","parseSlidingDateRangeString","rangeTypeText","getRangeTypeText","rangeType","timeUnitValue","timeValue","timeUnitText","getTimeUnitText","timeUnit","TimeUnit","Hour","RangeType","Current","Last","Previous","Next","Upcoming","lowerDate","upperDate","filterValueValues","valueDate","slidingRange","dateRange","calculateSlidingDateRange","start","toMilliseconds","end","filterDate","getRelativeOrAbsoluteDate","newFilterValue","indexOf","parts","diff","toNumber","Math","abs","today","now","date","valueParts","addDays","DateRangeFieldType","dateParts","lowerDateParts","exec","upperDateParts","fromParts","toLocaleString","DateTimeFormat","DateShort","DateTimeFieldType","DisplayAsElapsedTime","DayOfWeekFieldType","dayValue","toNumberOrNull","DayOfWeek","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","DaysOfWeekFieldType","containsComparisonTypes","DecimalFieldType","_toNumberOrNull$toStr","_toNumberOrNull","DecimalRangeFieldType","numbers","DefinedValueFieldType","clientValue","displayDescription","DisplayDescription","description","_value$value","useDescription","_unused3","_clientValue$value","_clientValue$value2","_clientValue$value3","matchedCount","_iterator","_createForOfIteratorHelper","_step","s","n","done","userValue","err","e","f","_iterator2","_step2","DefinedValueRangeFieldType","List","lowerValue","firstOrUndefined","upperValue","_lowerValue$descripti","_upperValue$descripti","_lowerValue$text","_upperValue$text","_clientValue$text","EmailFieldType","getHtmlValue","stringComparisonTypes","FileFieldType","_realValue$text","realValue","_realValue$text2","escapeHtml","GenderFieldType","numberValue","ImageFieldType","getCondensedHtmlValue","IntegerFieldType","IntegerRangeFieldType","KeyValueListFieldType","clientValues","configuredValues","_loop","configuredValue","push","key","MemoFieldType","MonthDayFieldType","components","month","day","months","MultiSelectFieldType","_v$value","_v$value2","_value$split$filter$m","PhoneNumberFieldType","formatPhoneNumber","RatingFieldType","_ratingValue$value","_ratingValue","ratingValue","rating","maxRating","MaxRating","html","i","_ratingValue$value2","_ratingValue2","ReminderTypeFieldType","guid","name","ReminderTypesFieldType","binaryComparisonTypes","SingleSelectFieldType","_selectedValues$0$tex","SSNFieldType","strippedValue","substr","TextFieldType","TimeFieldType","hour","minute","meridiem","padLeft","UrlLinkFieldType","ValueListFieldType","find","_configuredValue$text","registerFieldType","FieldTypeGuids","Address","Boolean","Campus","Campuses","Color","Currency","Date","DateRange","DateTime","DaysOfWeek","Decimal","DecimalRange","DefinedValue","DefinedValueRange","Email","File","Gender","Image","Integer","IntegerRange","KeyValueList","Memo","MonthDay","MultiSelect","PhoneNumber","Rating","ReminderType","ReminderTypes","SingleSelect","Ssn","Text","Time","UrlLink","ValueList"],"mappings":"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"}