{"version":3,"file":"multiSelectFieldComponents.js","sources":["../../../Framework/FieldTypes/multiSelectField.partial.ts","../../../Framework/FieldTypes/multiSelectFieldComponents.ts"],"sourcesContent":["// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { ComparisonType } from \"@Obsidian/Enums/Reporting/comparisonType\";\r\nimport { containsComparisonTypes } from \"@Obsidian/Core/Reporting/comparisonType\";\r\nimport { ComparisonValue } from \"@Obsidian/Types/Reporting/comparisonValue\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\nimport { getStandardFilterComponent } from \"./utils\";\r\n\r\nexport const enum ConfigurationValueKey {\r\n    Values = \"values\",\r\n    RepeatColumns = \"repeatColumns\",\r\n    RepeatDirection = \"repeatDirection\",\r\n    EnhancedSelection = \"enhancedselection\",\r\n\r\n    /** Only used during editing of the field type configuration. */\r\n    CustomValues = \"customValues\"\r\n}\r\n\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./multiSelectFieldComponents\")).EditComponent;\r\n});\r\n\r\n// Load the filter component only as needed.\r\nconst filterComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./multiSelectFieldComponents\")).FilterComponent;\r\n});\r\n\r\n// Load the configuration component only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./multiSelectFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the MultiSelect field.\r\n */\r\nexport class MultiSelectFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, configurationValues: Record<string, string>): string {\r\n        if (value === \"\") {\r\n            return \"\";\r\n        }\r\n\r\n        try {\r\n            const values = JSON.parse(configurationValues[ConfigurationValueKey.Values] ?? \"[]\") as ListItemBag[];\r\n            const userValues = value.split(\",\");\r\n            const selectedValues = values.filter(v => userValues.includes(v.value ?? \"\"));\r\n\r\n            return selectedValues.map(v => v.text).join(\", \");\r\n        }\r\n        catch {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override getSupportedComparisonTypes(): ComparisonType {\r\n        return containsComparisonTypes;\r\n    }\r\n\r\n    public override getFilterComponent(): Component {\r\n        return getStandardFilterComponent(this.getSupportedComparisonTypes(), filterComponent);\r\n    }\r\n\r\n    public override getFilterValueText(value: ComparisonValue, configurationValues: Record<string, string>): string {\r\n        if (value.value === \"\") {\r\n            return \"\";\r\n        }\r\n\r\n        try {\r\n            const rawValues = value.value.split(\",\");\r\n            const values = JSON.parse(configurationValues?.[ConfigurationValueKey.Values] ?? \"[]\") as ListItemBag[];\r\n            const selectedValues = values.filter(v => rawValues.includes(v.value ?? \"\"));\r\n\r\n            if (selectedValues.length >= 1) {\r\n                return `'${selectedValues.map(v => v.value).join(\"' OR '\")}'`;\r\n            }\r\n            else {\r\n                return \"\";\r\n            }\r\n        }\r\n        catch {\r\n            return value.value;\r\n        }\r\n    }\r\n\r\n    public override doesValueMatchFilter(value: string, filterValue: ComparisonValue, _configurationValues: Record<string, string>): boolean {\r\n        const selectedValues = (filterValue.value ?? \"\").split(\",\").filter(v => v !== \"\").map(v => v.toLowerCase());\r\n        let comparisonType = filterValue.comparisonType;\r\n\r\n        if (comparisonType === ComparisonType.EqualTo) {\r\n            // Treat EqualTo as if it were Contains.\r\n            comparisonType = ComparisonType.Contains;\r\n        }\r\n        else if (comparisonType === ComparisonType.NotEqualTo) {\r\n            // Treat NotEqualTo as if it were DoesNotContain.\r\n            comparisonType = ComparisonType.DoesNotContain;\r\n        }\r\n\r\n        if (comparisonType === ComparisonType.IsBlank) {\r\n            return value === \"\";\r\n        }\r\n        else if (comparisonType === ComparisonType.IsNotBlank) {\r\n            return value !== \"\";\r\n        }\r\n\r\n        if (selectedValues.length > 0) {\r\n            const userValues = value?.split(\",\").filter(v => v !== \"\").map(v => v.toLowerCase()) ?? [];\r\n\r\n            if (comparisonType === ComparisonType.Contains) {\r\n                let matchedCount = 0;\r\n\r\n                for (const userValue of userValues) {\r\n                    if (selectedValues.includes(userValue)) {\r\n                        matchedCount += 1;\r\n                    }\r\n                }\r\n\r\n                return matchedCount > 0;\r\n            }\r\n            else {\r\n                let matchedCount = 0;\r\n\r\n                for (const userValue of userValues) {\r\n                    if (selectedValues.includes(userValue)) {\r\n                        matchedCount += 1;\r\n                    }\r\n                }\r\n\r\n                return matchedCount !== selectedValues.length;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { computed, defineComponent, inject, ref, watch } from \"vue\";\r\nimport CheckBoxList from \"@Obsidian/Controls/checkBoxList\";\r\nimport DropDownList from \"@Obsidian/Controls/dropDownList\";\r\nimport ListBox from \"@Obsidian/Controls/listBox\";\r\nimport NumberBox from \"@Obsidian/Controls/numberBox\";\r\nimport TextBox from \"@Obsidian/Controls/textBox\";\r\nimport { asBoolean, asBooleanOrNull, asTrueFalseOrNull } from \"@Obsidian/Utility/booleanUtils\";\r\nimport { toNumberOrNull } from \"@Obsidian/Utility/numberUtils\";\r\nimport { updateRefValue } from \"@Obsidian/Utility/component\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport { ConfigurationValueKey } from \"./multiSelectField.partial\";\r\nimport { getFieldConfigurationProps, getFieldEditorProps } from \"./utils\";\r\n\r\nexport const EditComponent = defineComponent({\r\n    name: \"MultiSelectField.Edit\",\r\n\r\n    components: {\r\n        ListBox,\r\n        CheckBoxList\r\n    },\r\n\r\n    props: getFieldEditorProps(),\r\n\r\n    setup() {\r\n        return {\r\n            isRequired: inject(\"isRequired\") as boolean\r\n        };\r\n    },\r\n\r\n    data() {\r\n        return {\r\n            internalValue: [] as string[]\r\n        };\r\n    },\r\n\r\n    computed: {\r\n        /** The options to choose from */\r\n        options(): ListItemBag[] {\r\n            try {\r\n                const valuesConfig = JSON.parse(this.configurationValues[ConfigurationValueKey.Values] ?? \"[]\") as ListItemBag[];\r\n\r\n                return valuesConfig.map(v => {\r\n                    return {\r\n                        text: v.text,\r\n                        value: v.value\r\n                    } as ListItemBag;\r\n                });\r\n            }\r\n            catch {\r\n                return [];\r\n            }\r\n        },\r\n\r\n        /** Any additional attributes that will be assigned to the list box control */\r\n        listBoxConfigAttributes(): Record<string, number | boolean> {\r\n            const attributes: Record<string, number | boolean> = {};\r\n            const enhancedSelection = this.configurationValues[ConfigurationValueKey.EnhancedSelection];\r\n\r\n            if (asBoolean(enhancedSelection)) {\r\n                attributes.enhanceForLongLists = true;\r\n            }\r\n\r\n            return attributes;\r\n        },\r\n\r\n        /** Any additional attributes that will be assigned to the check box list control */\r\n        checkBoxListConfigAttributes(): Record<string, number | boolean> {\r\n            const attributes: Record<string, number | boolean> = {};\r\n            const repeatColumnsConfig = this.configurationValues[ConfigurationValueKey.RepeatColumns];\r\n            const repeatDirection = this.configurationValues[ConfigurationValueKey.RepeatDirection];\r\n\r\n            if (repeatColumnsConfig) {\r\n                attributes[\"repeatColumns\"] = toNumberOrNull(repeatColumnsConfig) || 0;\r\n            }\r\n\r\n            if (repeatDirection !== \"1\") {\r\n                attributes[\"horizontal\"] = true;\r\n            }\r\n\r\n            return attributes;\r\n        },\r\n\r\n        /** Is the control going to be list box? */\r\n        isListBox(): boolean {\r\n            const enhancedSelection = this.configurationValues[ConfigurationValueKey.EnhancedSelection];\r\n\r\n            return asBoolean(enhancedSelection);\r\n        }\r\n    },\r\n\r\n    watch: {\r\n        internalValue() {\r\n            this.$emit(\"update:modelValue\", this.internalValue.join(\",\"));\r\n        },\r\n\r\n        modelValue: {\r\n            immediate: true,\r\n            handler() {\r\n                const value = this.modelValue || \"\";\r\n\r\n                this.internalValue = value !== \"\" ? value.split(\",\") : [];\r\n            }\r\n        }\r\n    },\r\n\r\n    template: `\r\n<ListBox v-if=\"isListBox\" v-model=\"internalValue\" v-bind=\"listBoxConfigAttributes\" :items=\"options\" />\r\n<CheckBoxList v-else v-model=\"internalValue\" v-bind=\"checkBoxListConfigAttributes\" :items=\"options\" />\r\n`\r\n});\r\n\r\nexport const FilterComponent = defineComponent({\r\n    name: \"MultiSelectField.Filter\",\r\n\r\n    components: {\r\n        CheckBoxList\r\n    },\r\n\r\n    props: getFieldEditorProps(),\r\n\r\n    setup(props, { emit }) {\r\n        const internalValue = ref(props.modelValue.split(\",\").filter(v => v !== \"\"));\r\n\r\n        const options = computed((): ListItemBag[] => {\r\n            try {\r\n                const providedOptions = JSON.parse(props.configurationValues[ConfigurationValueKey.Values] ?? \"[]\") as ListItemBag[];\r\n\r\n                return providedOptions;\r\n            }\r\n            catch {\r\n                return [];\r\n            }\r\n        });\r\n\r\n        watch(() => props.modelValue, () => {\r\n            updateRefValue(internalValue, props.modelValue.split(\",\").filter(v => v !== \"\"));\r\n        });\r\n\r\n        watch(internalValue, () => {\r\n            emit(\"update:modelValue\", internalValue.value.join(\",\"));\r\n        });\r\n\r\n        return {\r\n            internalValue,\r\n            options\r\n        };\r\n    },\r\n\r\n    template: `\r\n<CheckBoxList v-model=\"internalValue\" :items=\"options\" horizontal />\r\n`\r\n});\r\n\r\nconst repeatDirectionOptions: ListItemBag[] = [\r\n    {\r\n        value: \"0\",\r\n        text: \"Horizontal\"\r\n    },\r\n    {\r\n        value: \"1\",\r\n        text: \"Vertical\"\r\n    }\r\n];\r\n\r\nexport const ConfigurationComponent = defineComponent({\r\n    name: \"MultiSelectField.Configuration\",\r\n\r\n    components: {\r\n        DropDownList,\r\n        TextBox,\r\n        NumberBox\r\n    },\r\n\r\n    props: getFieldConfigurationProps(),\r\n\r\n    emits: [\r\n        \"update:modelValue\",\r\n        \"updateConfiguration\",\r\n        \"updateConfigurationValue\"\r\n    ],\r\n\r\n    setup(props, { emit }) {\r\n        // Define the properties that will hold the current selections.\r\n        const rawValues = ref(\"\");\r\n        const internalRawValues = ref(\"\");\r\n        const enhanceForLongLists = ref(false);\r\n        const repeatColumns = ref<number | null>(null);\r\n        const repeatDirection = ref(\"\");\r\n\r\n        const onBlur = (): void => {\r\n            internalRawValues.value = rawValues.value;\r\n        };\r\n\r\n        /**\r\n         * Update the modelValue property if any value of the dictionary has\r\n         * actually changed. This helps prevent unwanted postbacks if the value\r\n         * didn't really change - which can happen if multiple values get updated\r\n         * at the same time.\r\n         *\r\n         * @returns true if a new modelValue was emitted to the parent component.\r\n         */\r\n        const maybeUpdateModelValue = (): boolean => {\r\n            const newValue: Record<string, string> = {...props.modelValue};\r\n\r\n            // Construct the new value that will be emitted if it is different\r\n            // than the current value.\r\n            newValue[ConfigurationValueKey.CustomValues] = internalRawValues.value ?? \"\";\r\n            newValue[ConfigurationValueKey.EnhancedSelection] = asTrueFalseOrNull(enhanceForLongLists.value) ?? \"False\";\r\n            newValue[ConfigurationValueKey.RepeatColumns] = repeatColumns.value?.toString() ?? \"\";\r\n            newValue[ConfigurationValueKey.RepeatDirection] = repeatDirection.value ?? \"0\";\r\n\r\n            // Compare the new value and the old value.\r\n            const anyValueChanged = newValue[ConfigurationValueKey.CustomValues] !== (props.modelValue[ConfigurationValueKey.CustomValues] ?? \"\")\r\n                || newValue[ConfigurationValueKey.EnhancedSelection] !== (props.modelValue[ConfigurationValueKey.EnhancedSelection] ?? \"False\")\r\n                || newValue[ConfigurationValueKey.RepeatColumns] !== (props.modelValue[ConfigurationValueKey.RepeatColumns] ?? \"\")\r\n                || newValue[ConfigurationValueKey.RepeatDirection] !== (props.modelValue[ConfigurationValueKey.RepeatDirection] ?? \"0\");\r\n\r\n\r\n            // If any value changed then emit the new model value.\r\n            if (anyValueChanged) {\r\n                emit(\"update:modelValue\", newValue);\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Emits the updateConfigurationValue if the value has actually changed.\r\n         * \r\n         * @param key The key that was possibly modified.\r\n         * @param value The new value.\r\n         */\r\n        const maybeUpdateConfiguration = (key: string, value: string): void => {\r\n            if (maybeUpdateModelValue()) {\r\n                emit(\"updateConfigurationValue\", key, value);\r\n            }\r\n        };\r\n\r\n        // Watch for changes coming in from the parent component and update our\r\n        // data to match the new information.\r\n        watch(() => [props.modelValue, props.configurationProperties], () => {\r\n            rawValues.value = props.modelValue[ConfigurationValueKey.CustomValues] ?? \"\";\r\n            internalRawValues.value = rawValues.value;\r\n            enhanceForLongLists.value = asBooleanOrNull(props.modelValue[ConfigurationValueKey.EnhancedSelection]) ?? false;\r\n            repeatColumns.value = toNumberOrNull(props.modelValue[ConfigurationValueKey.RepeatColumns]);\r\n            repeatDirection.value = props.modelValue[ConfigurationValueKey.RepeatDirection] ?? \"0\";\r\n        }, {\r\n            immediate: true\r\n        });\r\n\r\n        // Watch for changes in properties that require new configuration\r\n        // properties to be retrieved from the server.\r\n        watch([internalRawValues], () => {\r\n            if (maybeUpdateModelValue()) {\r\n                emit(\"updateConfiguration\");\r\n            }\r\n        });\r\n\r\n        // Watch for changes in properties that only require a local UI update.\r\n        watch(enhanceForLongLists, () => maybeUpdateConfiguration(ConfigurationValueKey.EnhancedSelection, asTrueFalseOrNull(enhanceForLongLists.value) ?? \"False\"));\r\n        watch(repeatColumns, () => maybeUpdateConfiguration(ConfigurationValueKey.RepeatColumns, repeatColumns.value?.toString() ?? \"\"));\r\n        watch(repeatDirection, () => maybeUpdateConfiguration(ConfigurationValueKey.RepeatDirection, repeatDirection.value ?? \"0\"));\r\n\r\n        return {\r\n            enhanceForLongLists,\r\n            onBlur,\r\n            rawValues,\r\n            repeatColumns,\r\n            repeatDirection,\r\n            repeatDirectionOptions\r\n        };\r\n    },\r\n\r\n    template: `\r\n<div>\r\n    <TextBox v-model=\"rawValues\"\r\n        label=\"Values\"\r\n        help=\"The source of the values to display in a list. Format is either 'value1,value2,value3,...', 'value1^text1,value2^text2,value3^text3,...', or a SQL Select statement that returns a result set with a 'Value' and 'Text' column <span class='tip tip-lava'></span>.\"\r\n        textMode=\"multiline\"\r\n        @blur=\"onBlur\" />\r\n\r\n    <CheckBox v-model=\"enhanceForLongLists\"\r\n        label=\"Enhance For Long Lists\"\r\n        help=\"When set, will render a searchable selection of options.\" />\r\n\r\n    <NumberBox\r\n        v-model=\"repeatColumns\"\r\n        label=\"Columns\"\r\n        help=\"Select how many columns the list should use before going to the next row. If blank or 0 then 4 columns will be displayed. There is no enforced upper limit however the block this control is used in might add contraints due to available space.\" />\r\n\r\n    <DropDownList v-model=\"repeatDirection\"\r\n        label=\"Repeat Direction\"\r\n        help=\"The direction that the list options will be displayed.\"\r\n        :items=\"repeatDirectionOptions\"\r\n        :showBlankItem=\"false\" />\r\n</div>\r\n`\r\n});\r\n"],"names":["ConfigurationValueKey","defineAsyncComponent","_asyncToGenerator","EditComponent","FilterComponent","ConfigurationComponent","defineComponent","name","components","ListBox","CheckBoxList","props","getFieldEditorProps","setup","isRequired","inject","data","internalValue","computed","options","_this$configurationVa","valuesConfig","JSON","parse","configurationValues","Values","map","v","text","value","_unused","listBoxConfigAttributes","attributes","enhancedSelection","EnhancedSelection","asBoolean","enhanceForLongLists","checkBoxListConfigAttributes","repeatColumnsConfig","RepeatColumns","repeatDirection","RepeatDirection","toNumberOrNull","isListBox","watch","$emit","join","modelValue","immediate","handler","split","template","_ref","emit","ref","filter","_props$configurationV","providedOptions","_unused2","updateRefValue","repeatDirectionOptions","DropDownList","TextBox","NumberBox","getFieldConfigurationProps","emits","_ref2","rawValues","internalRawValues","repeatColumns","onBlur","maybeUpdateModelValue","_internalRawValues$va","_asTrueFalseOrNull","_repeatColumns$value$","_repeatColumns$value","_repeatDirection$valu","_props$modelValue$Con","_props$modelValue$Con2","_props$modelValue$Con3","_props$modelValue$Con4","newValue","_objectSpread","CustomValues","asTrueFalseOrNull","toString","anyValueChanged","maybeUpdateConfiguration","key","configurationProperties","_props$modelValue$Con5","_asBooleanOrNull","_props$modelValue$Con6","asBooleanOrNull","_asTrueFalseOrNull2","_repeatColumns$value$2","_repeatColumns$value2","_repeatDirection$valu2"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAyBkBA,IAAAA,qBAAqB,aAArBA,qBAAqB,EAAA;QAArBA,qBAAqB,CAAA,QAAA,CAAA,GAAA,QAAA,CAAA;QAArBA,qBAAqB,CAAA,eAAA,CAAA,GAAA,eAAA,CAAA;QAArBA,qBAAqB,CAAA,iBAAA,CAAA,GAAA,iBAAA,CAAA;QAArBA,qBAAqB,CAAA,mBAAA,CAAA,GAAA,mBAAA,CAAA;QAArBA,qBAAqB,CAAA,cAAA,CAAA,GAAA,cAAA,CAAA;MAAA,EAAA,OAArBA,qBAAqB,CAAA;MAAA,CAAA,CAAA,EAAA,CAAA,CAAA;MAYjBC,oBAAoB,CAAAC,iBAAA,CAAC,aAAY;MACnD,EAAA,OAAO,OAAO,cAAO,8BAA8B,CAAC,EAAEC,aAAa,CAAA;MACvE,CAAC,CAAC,EAAA;MAGsBF,oBAAoB,CAAAC,iBAAA,CAAC,aAAY;MACrD,EAAA,OAAO,OAAO,cAAO,8BAA8B,CAAC,EAAEE,eAAe,CAAA;MACzE,CAAC,CAAC,EAAA;MAG6BH,oBAAoB,CAAAC,iBAAA,CAAC,aAAY;MAC5D,EAAA,OAAO,OAAO,cAAO,8BAA8B,CAAC,EAAEG,sBAAsB,CAAA;MAChF,CAAC,CAAC;;ACpBWF,UAAAA,aAAa,4BAAGG,eAAe,CAAC;MACzCC,EAAAA,IAAI,EAAE,uBAAuB;MAE7BC,EAAAA,UAAU,EAAE;UACRC,OAAO;MACPC,IAAAA,YAAAA;SACH;QAEDC,KAAK,EAAEC,mBAAmB,EAAE;MAE5BC,EAAAA,KAAKA,GAAG;UACJ,OAAO;YACHC,UAAU,EAAEC,MAAM,CAAC,YAAY,CAAA;WAClC,CAAA;SACJ;MAEDC,EAAAA,IAAIA,GAAG;UACH,OAAO;MACHC,MAAAA,aAAa,EAAE,EAAA;WAClB,CAAA;SACJ;MAEDC,EAAAA,QAAQ,EAAE;MAENC,IAAAA,OAAOA,GAAkB;YACrB,IAAI;MAAA,QAAA,IAAAC,qBAAA,CAAA;cACA,IAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAAAH,CAAAA,qBAAA,GAAC,IAAI,CAACI,mBAAmB,CAACxB,qBAAqB,CAACyB,MAAM,CAAC,MAAA,IAAA,IAAAL,qBAAA,KAAAA,KAAAA,CAAAA,GAAAA,qBAAA,GAAI,IAAI,CAAkB,CAAA;MAEhH,QAAA,OAAOC,YAAY,CAACK,GAAG,CAACC,CAAC,IAAI;gBACzB,OAAO;kBACHC,IAAI,EAAED,CAAC,CAACC,IAAI;kBACZC,KAAK,EAAEF,CAAC,CAACE,KAAAA;iBACZ,CAAA;MACL,SAAC,CAAC,CAAA;aACL,CACD,OAAAC,OAAA,EAAM;MACF,QAAA,OAAO,EAAE,CAAA;MACb,OAAA;WACH;MAGDC,IAAAA,uBAAuBA,GAAqC;YACxD,IAAMC,UAA4C,GAAG,EAAE,CAAA;YACvD,IAAMC,iBAAiB,GAAG,IAAI,CAACT,mBAAmB,CAACxB,qBAAqB,CAACkC,iBAAiB,CAAC,CAAA;MAE3F,MAAA,IAAIC,SAAS,CAACF,iBAAiB,CAAC,EAAE;cAC9BD,UAAU,CAACI,mBAAmB,GAAG,IAAI,CAAA;MACzC,OAAA;MAEA,MAAA,OAAOJ,UAAU,CAAA;WACpB;MAGDK,IAAAA,4BAA4BA,GAAqC;YAC7D,IAAML,UAA4C,GAAG,EAAE,CAAA;YACvD,IAAMM,mBAAmB,GAAG,IAAI,CAACd,mBAAmB,CAACxB,qBAAqB,CAACuC,aAAa,CAAC,CAAA;YACzF,IAAMC,eAAe,GAAG,IAAI,CAAChB,mBAAmB,CAACxB,qBAAqB,CAACyC,eAAe,CAAC,CAAA;MAEvF,MAAA,IAAIH,mBAAmB,EAAE;cACrBN,UAAU,CAAC,eAAe,CAAC,GAAGU,cAAc,CAACJ,mBAAmB,CAAC,IAAI,CAAC,CAAA;MAC1E,OAAA;YAEA,IAAIE,eAAe,KAAK,GAAG,EAAE;MACzBR,QAAAA,UAAU,CAAC,YAAY,CAAC,GAAG,IAAI,CAAA;MACnC,OAAA;MAEA,MAAA,OAAOA,UAAU,CAAA;WACpB;MAGDW,IAAAA,SAASA,GAAY;YACjB,IAAMV,iBAAiB,GAAG,IAAI,CAACT,mBAAmB,CAACxB,qBAAqB,CAACkC,iBAAiB,CAAC,CAAA;YAE3F,OAAOC,SAAS,CAACF,iBAAiB,CAAC,CAAA;MACvC,KAAA;SACH;MAEDW,EAAAA,KAAK,EAAE;MACH3B,IAAAA,aAAaA,GAAG;MACZ,MAAA,IAAI,CAAC4B,KAAK,CAAC,mBAAmB,EAAE,IAAI,CAAC5B,aAAa,CAAC6B,IAAI,CAAC,GAAG,CAAC,CAAC,CAAA;WAChE;MAEDC,IAAAA,UAAU,EAAE;MACRC,MAAAA,SAAS,EAAE,IAAI;MACfC,MAAAA,OAAOA,GAAG;MACN,QAAA,IAAMpB,KAAK,GAAG,IAAI,CAACkB,UAAU,IAAI,EAAE,CAAA;MAEnC,QAAA,IAAI,CAAC9B,aAAa,GAAGY,KAAK,KAAK,EAAE,GAAGA,KAAK,CAACqB,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,CAAA;MAC7D,OAAA;MACJ,KAAA;SACH;QAEDC,QAAQ,EAAA,kOAAA;MAIZ,CAAC,GAAC;AAEW/C,UAAAA,eAAe,8BAAGE,eAAe,CAAC;MAC3CC,EAAAA,IAAI,EAAE,yBAAyB;MAE/BC,EAAAA,UAAU,EAAE;MACRE,IAAAA,YAAAA;SACH;QAEDC,KAAK,EAAEC,mBAAmB,EAAE;MAE5BC,EAAAA,KAAKA,CAACF,KAAK,EAAAyC,IAAA,EAAY;MAAA,IAAA,IAARC,IAAI,GAAAD,IAAA,CAAJC,IAAI,CAAA;UACf,IAAMpC,aAAa,GAAGqC,GAAG,CAAC3C,KAAK,CAACoC,UAAU,CAACG,KAAK,CAAC,GAAG,CAAC,CAACK,MAAM,CAAC5B,CAAC,IAAIA,CAAC,KAAK,EAAE,CAAC,CAAC,CAAA;MAE5E,IAAA,IAAMR,OAAO,GAAGD,QAAQ,CAAC,MAAqB;YAC1C,IAAI;MAAA,QAAA,IAAAsC,qBAAA,CAAA;cACA,IAAMC,eAAe,GAAGnC,IAAI,CAACC,KAAK,CAAAiC,CAAAA,qBAAA,GAAC7C,KAAK,CAACa,mBAAmB,CAACxB,qBAAqB,CAACyB,MAAM,CAAC,MAAA,IAAA,IAAA+B,qBAAA,KAAAA,KAAAA,CAAAA,GAAAA,qBAAA,GAAI,IAAI,CAAkB,CAAA;MAEpH,QAAA,OAAOC,eAAe,CAAA;aACzB,CACD,OAAAC,QAAA,EAAM;MACF,QAAA,OAAO,EAAE,CAAA;MACb,OAAA;MACJ,KAAC,CAAC,CAAA;MAEFd,IAAAA,KAAK,CAAC,MAAMjC,KAAK,CAACoC,UAAU,EAAE,MAAM;YAChCY,cAAc,CAAC1C,aAAa,EAAEN,KAAK,CAACoC,UAAU,CAACG,KAAK,CAAC,GAAG,CAAC,CAACK,MAAM,CAAC5B,CAAC,IAAIA,CAAC,KAAK,EAAE,CAAC,CAAC,CAAA;MACpF,KAAC,CAAC,CAAA;UAEFiB,KAAK,CAAC3B,aAAa,EAAE,MAAM;YACvBoC,IAAI,CAAC,mBAAmB,EAAEpC,aAAa,CAACY,KAAK,CAACiB,IAAI,CAAC,GAAG,CAAC,CAAC,CAAA;MAC5D,KAAC,CAAC,CAAA;UAEF,OAAO;YACH7B,aAAa;MACbE,MAAAA,OAAAA;WACH,CAAA;SACJ;QAEDgC,QAAQ,EAAA,8EAAA;MAGZ,CAAC,GAAC;MAEF,IAAMS,sBAAqC,GAAG,CAC1C;MACI/B,EAAAA,KAAK,EAAE,GAAG;MACVD,EAAAA,IAAI,EAAE,YAAA;MACV,CAAC,EACD;MACIC,EAAAA,KAAK,EAAE,GAAG;MACVD,EAAAA,IAAI,EAAE,UAAA;MACV,CAAC,CACJ,CAAA;AAEYvB,UAAAA,sBAAsB,qCAAGC,eAAe,CAAC;MAClDC,EAAAA,IAAI,EAAE,gCAAgC;MAEtCC,EAAAA,UAAU,EAAE;UACRqD,YAAY;UACZC,OAAO;MACPC,IAAAA,SAAAA;SACH;QAEDpD,KAAK,EAAEqD,0BAA0B,EAAE;MAEnCC,EAAAA,KAAK,EAAE,CACH,mBAAmB,EACnB,qBAAqB,EACrB,0BAA0B,CAC7B;MAEDpD,EAAAA,KAAKA,CAACF,KAAK,EAAAuD,KAAA,EAAY;MAAA,IAAA,IAARb,IAAI,GAAAa,KAAA,CAAJb,IAAI,CAAA;MAEf,IAAA,IAAMc,SAAS,GAAGb,GAAG,CAAC,EAAE,CAAC,CAAA;MACzB,IAAA,IAAMc,iBAAiB,GAAGd,GAAG,CAAC,EAAE,CAAC,CAAA;MACjC,IAAA,IAAMlB,mBAAmB,GAAGkB,GAAG,CAAC,KAAK,CAAC,CAAA;MACtC,IAAA,IAAMe,aAAa,GAAGf,GAAG,CAAgB,IAAI,CAAC,CAAA;MAC9C,IAAA,IAAMd,eAAe,GAAGc,GAAG,CAAC,EAAE,CAAC,CAAA;UAE/B,IAAMgB,MAAM,GAAGA,MAAY;MACvBF,MAAAA,iBAAiB,CAACvC,KAAK,GAAGsC,SAAS,CAACtC,KAAK,CAAA;WAC5C,CAAA;UAUD,IAAM0C,qBAAqB,GAAGA,MAAe;MAAA,MAAA,IAAAC,qBAAA,EAAAC,kBAAA,EAAAC,qBAAA,EAAAC,oBAAA,EAAAC,qBAAA,EAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,CAAA;MACzC,MAAA,IAAMC,QAAgC,GAAAC,cAAA,KAAOvE,KAAK,CAACoC,UAAU,CAAC,CAAA;MAI9DkC,MAAAA,QAAQ,CAACjF,qBAAqB,CAACmF,YAAY,CAAC,IAAAX,qBAAA,GAAGJ,iBAAiB,CAACvC,KAAK,MAAA2C,IAAAA,IAAAA,qBAAA,KAAAA,KAAAA,CAAAA,GAAAA,qBAAA,GAAI,EAAE,CAAA;MAC5ES,MAAAA,QAAQ,CAACjF,qBAAqB,CAACkC,iBAAiB,CAAC,GAAA,CAAAuC,kBAAA,GAAGW,iBAAiB,CAAChD,mBAAmB,CAACP,KAAK,CAAC,MAAA,IAAA,IAAA4C,kBAAA,KAAAA,KAAAA,CAAAA,GAAAA,kBAAA,GAAI,OAAO,CAAA;YAC3GQ,QAAQ,CAACjF,qBAAqB,CAACuC,aAAa,CAAC,IAAAmC,qBAAA,GAAA,CAAAC,oBAAA,GAAGN,aAAa,CAACxC,KAAK,MAAA8C,IAAAA,IAAAA,oBAAA,KAAnBA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,oBAAA,CAAqBU,QAAQ,EAAE,MAAA,IAAA,IAAAX,qBAAA,KAAA,KAAA,CAAA,GAAAA,qBAAA,GAAI,EAAE,CAAA;MACrFO,MAAAA,QAAQ,CAACjF,qBAAqB,CAACyC,eAAe,CAAC,IAAAmC,qBAAA,GAAGpC,eAAe,CAACX,KAAK,MAAA+C,IAAAA,IAAAA,qBAAA,KAAAA,KAAAA,CAAAA,GAAAA,qBAAA,GAAI,GAAG,CAAA;YAG9E,IAAMU,eAAe,GAAGL,QAAQ,CAACjF,qBAAqB,CAACmF,YAAY,CAAC,MAAA,CAAAN,qBAAA,GAAMlE,KAAK,CAACoC,UAAU,CAAC/C,qBAAqB,CAACmF,YAAY,CAAC,MAAA,IAAA,IAAAN,qBAAA,KAAA,KAAA,CAAA,GAAAA,qBAAA,GAAI,EAAE,CAAC,IAC9HI,QAAQ,CAACjF,qBAAqB,CAACkC,iBAAiB,CAAC,MAAA4C,CAAAA,sBAAA,GAAMnE,KAAK,CAACoC,UAAU,CAAC/C,qBAAqB,CAACkC,iBAAiB,CAAC,MAAA4C,IAAAA,IAAAA,sBAAA,KAAAA,KAAAA,CAAAA,GAAAA,sBAAA,GAAI,OAAO,CAAC,IAC5HG,QAAQ,CAACjF,qBAAqB,CAACuC,aAAa,CAAC,MAAA,CAAAwC,sBAAA,GAAMpE,KAAK,CAACoC,UAAU,CAAC/C,qBAAqB,CAACuC,aAAa,CAAC,cAAAwC,sBAAA,KAAA,KAAA,CAAA,GAAAA,sBAAA,GAAI,EAAE,CAAC,IAC/GE,QAAQ,CAACjF,qBAAqB,CAACyC,eAAe,CAAC,MAAAuC,CAAAA,sBAAA,GAAMrE,KAAK,CAACoC,UAAU,CAAC/C,qBAAqB,CAACyC,eAAe,CAAC,MAAA,IAAA,IAAAuC,sBAAA,KAAAA,KAAAA,CAAAA,GAAAA,sBAAA,GAAI,GAAG,CAAC,CAAA;MAI3H,MAAA,IAAIM,eAAe,EAAE;MACjBjC,QAAAA,IAAI,CAAC,mBAAmB,EAAE4B,QAAQ,CAAC,CAAA;MACnC,QAAA,OAAO,IAAI,CAAA;MACf,OAAC,MACI;MACD,QAAA,OAAO,KAAK,CAAA;MAChB,OAAA;WACH,CAAA;MAQD,IAAA,IAAMM,wBAAwB,GAAGA,CAACC,GAAW,EAAE3D,KAAa,KAAW;YACnE,IAAI0C,qBAAqB,EAAE,EAAE;MACzBlB,QAAAA,IAAI,CAAC,0BAA0B,EAAEmC,GAAG,EAAE3D,KAAK,CAAC,CAAA;MAChD,OAAA;WACH,CAAA;MAIDe,IAAAA,KAAK,CAAC,MAAM,CAACjC,KAAK,CAACoC,UAAU,EAAEpC,KAAK,CAAC8E,uBAAuB,CAAC,EAAE,MAAM;MAAA,MAAA,IAAAC,sBAAA,EAAAC,gBAAA,EAAAC,sBAAA,CAAA;MACjEzB,MAAAA,SAAS,CAACtC,KAAK,GAAA,CAAA6D,sBAAA,GAAG/E,KAAK,CAACoC,UAAU,CAAC/C,qBAAqB,CAACmF,YAAY,CAAC,MAAA,IAAA,IAAAO,sBAAA,KAAAA,KAAAA,CAAAA,GAAAA,sBAAA,GAAI,EAAE,CAAA;MAC5EtB,MAAAA,iBAAiB,CAACvC,KAAK,GAAGsC,SAAS,CAACtC,KAAK,CAAA;YACzCO,mBAAmB,CAACP,KAAK,GAAA8D,CAAAA,gBAAA,GAAGE,eAAe,CAAClF,KAAK,CAACoC,UAAU,CAAC/C,qBAAqB,CAACkC,iBAAiB,CAAC,CAAC,cAAAyD,gBAAA,KAAA,KAAA,CAAA,GAAAA,gBAAA,GAAI,KAAK,CAAA;MAC/GtB,MAAAA,aAAa,CAACxC,KAAK,GAAGa,cAAc,CAAC/B,KAAK,CAACoC,UAAU,CAAC/C,qBAAqB,CAACuC,aAAa,CAAC,CAAC,CAAA;MAC3FC,MAAAA,eAAe,CAACX,KAAK,GAAA,CAAA+D,sBAAA,GAAGjF,KAAK,CAACoC,UAAU,CAAC/C,qBAAqB,CAACyC,eAAe,CAAC,MAAA,IAAA,IAAAmD,sBAAA,KAAAA,KAAAA,CAAAA,GAAAA,sBAAA,GAAI,GAAG,CAAA;MAC1F,KAAC,EAAE;MACC5C,MAAAA,SAAS,EAAE,IAAA;MACf,KAAC,CAAC,CAAA;MAIFJ,IAAAA,KAAK,CAAC,CAACwB,iBAAiB,CAAC,EAAE,MAAM;YAC7B,IAAIG,qBAAqB,EAAE,EAAE;cACzBlB,IAAI,CAAC,qBAAqB,CAAC,CAAA;MAC/B,OAAA;MACJ,KAAC,CAAC,CAAA;UAGFT,KAAK,CAACR,mBAAmB,EAAE,MAAA;MAAA,MAAA,IAAA0D,mBAAA,CAAA;YAAA,OAAMP,wBAAwB,CAACvF,qBAAqB,CAACkC,iBAAiB,EAAA4D,CAAAA,mBAAA,GAAEV,iBAAiB,CAAChD,mBAAmB,CAACP,KAAK,CAAC,MAAAiE,IAAAA,IAAAA,mBAAA,cAAAA,mBAAA,GAAI,OAAO,CAAC,CAAA;WAAC,CAAA,CAAA;UAC5JlD,KAAK,CAACyB,aAAa,EAAE,MAAA;YAAA,IAAA0B,sBAAA,EAAAC,qBAAA,CAAA;YAAA,OAAMT,wBAAwB,CAACvF,qBAAqB,CAACuC,aAAa,EAAAwD,CAAAA,sBAAA,GAAAC,CAAAA,qBAAA,GAAE3B,aAAa,CAACxC,KAAK,cAAAmE,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAnBA,qBAAA,CAAqBX,QAAQ,EAAE,MAAAU,IAAAA,IAAAA,sBAAA,KAAAA,KAAAA,CAAAA,GAAAA,sBAAA,GAAI,EAAE,CAAC,CAAA;WAAC,CAAA,CAAA;UAChInD,KAAK,CAACJ,eAAe,EAAE,MAAA;MAAA,MAAA,IAAAyD,sBAAA,CAAA;MAAA,MAAA,OAAMV,wBAAwB,CAACvF,qBAAqB,CAACyC,eAAe,GAAAwD,sBAAA,GAAEzD,eAAe,CAACX,KAAK,MAAAoE,IAAAA,IAAAA,sBAAA,cAAAA,sBAAA,GAAI,GAAG,CAAC,CAAA;WAAC,CAAA,CAAA;UAE3H,OAAO;YACH7D,mBAAmB;YACnBkC,MAAM;YACNH,SAAS;YACTE,aAAa;YACb7B,eAAe;MACfoB,MAAAA,sBAAAA;WACH,CAAA;SACJ;QAEDT,QAAQ,EAAA,ipCAAA;MAwBZ,CAAC;;;;;;;;"}