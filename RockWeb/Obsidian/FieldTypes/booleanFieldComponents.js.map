{"version":3,"file":"booleanFieldComponents.js","sources":["../../../Framework/FieldTypes/booleanField.partial.ts","../../../Framework/FieldTypes/booleanFieldComponents.ts"],"sourcesContent":["ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { ComparisonType } from \"@Obsidian/Enums/Reporting/comparisonType\";\r\nimport { asBooleanOrNull } from \"@Obsidian/Utility/booleanUtils\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\nimport { getStandardFilterComponent } from \"./utils\";\r\n\r\nexport const enum ConfigurationValueKey {\r\n    BooleanControlType = \"BooleanControlType\",\r\n    FalseText = \"falsetext\",\r\n    TrueText = \"truetext\"\r\n}\r\n\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./booleanFieldComponents\")).EditComponent;\r\n});\r\n\r\n// The configuration component can be quite large, so load it only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./booleanFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n// Only load the filter component as needed.\r\nconst filterComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./booleanFieldComponents\")).FilterComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Boolean field.\r\n */\r\nexport class BooleanFieldType extends FieldTypeBase {\r\n    public override getCondensedTextValue(value: string, _configurationValues: Record<string, string>): string {\r\n        const boolValue = asBooleanOrNull(value);\r\n\r\n        if (boolValue === null) {\r\n            return \"\";\r\n        }\r\n        else if (boolValue === true) {\r\n            return \"Y\";\r\n        }\r\n        else {\r\n            return \"N\";\r\n        }\r\n    }\r\n\r\n    public override getTextValue(value: string, configurationValues: Record<string, string>): string {\r\n        const boolValue = asBooleanOrNull(value);\r\n\r\n        if (boolValue === null) {\r\n            return \"\";\r\n        }\r\n        else if (boolValue === true) {\r\n            return configurationValues[ConfigurationValueKey.TrueText] || \"Yes\";\r\n        }\r\n        else {\r\n            return configurationValues[ConfigurationValueKey.FalseText] || \"No\";\r\n        }\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override getSupportedComparisonTypes(): ComparisonType {\r\n        return ComparisonType.EqualTo | ComparisonType.NotEqualTo;\r\n    }\r\n\r\n    public override getFilterComponent(): Component {\r\n        return getStandardFilterComponent(this.getSupportedComparisonTypes(), filterComponent);\r\n    }\r\n}\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { defineComponent, ref, computed, watch } from \"vue\";\r\nimport { getFieldConfigurationProps, getFieldEditorProps } from \"./utils\";\r\nimport { asTrueFalseOrNull, asBoolean } from \"@Obsidian/Utility/booleanUtils\";\r\nimport { ConfigurationValueKey } from \"./booleanField.partial\";\r\nimport DropDownList from \"@Obsidian/Controls/dropDownList\";\r\nimport Toggle from \"@Obsidian/Controls/toggle\";\r\nimport CheckBox from \"@Obsidian/Controls/checkBox\";\r\nimport TextBox from \"@Obsidian/Controls/textBox\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport { toNumberOrNull } from \"@Obsidian/Utility/numberUtils\";\r\n\r\nenum BooleanControlType {\r\n    DropDown,\r\n    Checkbox,\r\n    Toggle\r\n}\r\n\r\nexport const EditComponent = defineComponent({\r\n    name: \"BooleanField.Edit\",\r\n    components: {\r\n        DropDownList,\r\n        Toggle,\r\n        CheckBox\r\n    },\r\n    props: getFieldEditorProps(),\r\n\r\n    emits: [\"update:modelValue\"],\r\n\r\n    setup(props, { emit }) {\r\n        // Internal values\r\n        const internalBooleanValue = ref(asBoolean(props.modelValue));\r\n        const internalValue = ref(asTrueFalseOrNull(props.modelValue) || \"\");\r\n\r\n        // Which control type should be used for value selection\r\n        const booleanControlType = computed((): BooleanControlType => {\r\n            const controlType = props.configurationValues[ConfigurationValueKey.BooleanControlType];\r\n\r\n            switch (controlType) {\r\n                case \"1\":\r\n                    return BooleanControlType.Checkbox;\r\n                case \"2\":\r\n                    return BooleanControlType.Toggle;\r\n                default:\r\n                    return BooleanControlType.DropDown;\r\n            }\r\n        });\r\n\r\n        // Helpers to determine control type in the template\r\n        const isToggle = computed((): boolean => booleanControlType.value === BooleanControlType.Toggle);\r\n        const isCheckBox = computed((): boolean => booleanControlType.value === BooleanControlType.Checkbox);\r\n\r\n        // What labels does the user see for the true/false values\r\n        const trueText = computed((): string => {\r\n            let trueText = \"Yes\";\r\n            const trueConfig = props.configurationValues[ConfigurationValueKey.TrueText];\r\n\r\n            if (trueConfig) {\r\n                trueText = trueConfig;\r\n            }\r\n\r\n            return trueText || \"Yes\";\r\n        });\r\n\r\n        const falseText = computed((): string => {\r\n            let falseText = \"No\";\r\n            const falseConfig = props.configurationValues[ConfigurationValueKey.FalseText];\r\n\r\n            if (falseConfig) {\r\n                falseText = falseConfig;\r\n            }\r\n\r\n            return falseText || \"No\";\r\n        });\r\n        \r\n        // configuration for a toggle button\r\n        const toggleOptions = computed((): Record<string, unknown> => ({\r\n                trueText: trueText.value,\r\n                falseText: falseText.value\r\n        }));\r\n\r\n        // configuration for a dropdown control\r\n        const dropDownListOptions = computed((): ListItemBag[] => {\r\n            const trueVal = asTrueFalseOrNull(true);\r\n            const falseVal = asTrueFalseOrNull(false);\r\n\r\n            return [\r\n                { text: falseText.value, value: falseVal },\r\n                { text: trueText.value, value: trueVal }\r\n            ] as ListItemBag[];\r\n        });\r\n\r\n        // Sync internal values and modelValue\r\n        watch(internalValue, () => {\r\n            if (booleanControlType.value === BooleanControlType.DropDown) {\r\n                emit(\"update:modelValue\", internalValue.value);\r\n            }\r\n        });\r\n\r\n        watch(internalBooleanValue, () => {\r\n            if (booleanControlType.value !== BooleanControlType.DropDown) {\r\n                emit(\"update:modelValue\", asTrueFalseOrNull(internalBooleanValue.value) || \"\");\r\n            }\r\n        });\r\n\r\n        watch(() => props.modelValue, () => {\r\n            internalValue.value = asTrueFalseOrNull(props.modelValue) || \"\";\r\n            internalBooleanValue.value = asBoolean(props.modelValue);\r\n        });\r\n\r\n        return {\r\n            internalBooleanValue,\r\n            internalValue,\r\n            booleanControlType,\r\n            isToggle,\r\n            isCheckBox,\r\n            toggleOptions,\r\n            dropDownListOptions\r\n        };\r\n    },\r\n    template: `\r\n<Toggle v-if=\"isToggle\" v-model=\"internalBooleanValue\" v-bind=\"toggleOptions\" />\r\n<CheckBox v-else-if=\"isCheckBox\" v-model=\"internalBooleanValue\" />\r\n<DropDownList v-else v-model=\"internalValue\" :items=\"dropDownListOptions\" />\r\n`\r\n});\r\n\r\nexport const FilterComponent = defineComponent({\r\n    name: \"BooleanField.Filter\",\r\n    components: {\r\n        DropDownList\r\n    },\r\n    props: getFieldEditorProps(),\r\n\r\n    emits: [\r\n        \"update:modelValue\"\r\n    ],\r\n\r\n    setup(props, { emit }) {\r\n        // Internal values\r\n        const internalValue = ref(asTrueFalseOrNull(props.modelValue) || \"\");\r\n\r\n        // Sync internal values and modelValue\r\n        watch(internalValue, () => {\r\n            emit(\"update:modelValue\", internalValue.value);\r\n        });\r\n\r\n        watch(() => props.modelValue, () => {\r\n            internalValue.value = asTrueFalseOrNull(props.modelValue) || \"\";\r\n        });\r\n\r\n        // What labels does the user see for the true/false values\r\n        const trueText = computed((): string => {\r\n            const trueConfig = props.configurationValues[ConfigurationValueKey.TrueText];\r\n\r\n            return trueConfig || \"Yes\";\r\n        });\r\n\r\n        const falseText = computed((): string => {\r\n            const falseConfig = props.configurationValues[ConfigurationValueKey.FalseText];\r\n\r\n            return falseConfig || \"No\";\r\n        });\r\n\r\n        // configuration for a dropdown control\r\n        const dropDownListOptions = computed((): ListItemBag[] => {\r\n            const trueVal = asTrueFalseOrNull(true);\r\n            const falseVal = asTrueFalseOrNull(false);\r\n\r\n            return [\r\n                { text: falseText.value, value: falseVal },\r\n                { text: trueText.value, value: trueVal }\r\n            ] as ListItemBag[];\r\n        });\r\n\r\n        return {\r\n            internalValue,\r\n            dropDownListOptions\r\n        };\r\n    },\r\n    template: `\r\n<DropDownList v-model=\"internalValue\" :items=\"dropDownListOptions\" />\r\n`\r\n});\r\n\r\nexport const ConfigurationComponent = defineComponent({\r\n    name: \"BooleanField.Configuration\",\r\n\r\n    components: { TextBox, DropDownList },\r\n\r\n    props: getFieldConfigurationProps(),\r\n\r\n    emits: [\"update:modelValue\", \"updateConfiguration\", \"updateConfigurationValue\"],\r\n\r\n    setup(props, { emit }) {\r\n        const trueText = ref(\"Yes\");\r\n        const falseText = ref(\"No\");\r\n        const controlType = ref<BooleanControlType>(BooleanControlType.DropDown);\r\n\r\n        /**\r\n         * Update the modelValue property if any value of the dictionary has\r\n         * actually changed. This helps prevent unwanted postbacks if the value\r\n         * didn't really change - which can happen if multiple values get updated\r\n         * at the same time.\r\n         *\r\n         * @returns true if a new modelValue was emitted to the parent component.\r\n         */\r\n        const maybeUpdateModelValue = (): boolean => {\r\n            const newValue: Record<string, string> = {};\r\n\r\n            // Construct the new value that will be emitted if it is different\r\n            // than the current value.\r\n            newValue[ConfigurationValueKey.TrueText] = trueText.value ?? \"Yes\";\r\n            newValue[ConfigurationValueKey.FalseText] = falseText.value ?? \"No\";\r\n            newValue[ConfigurationValueKey.BooleanControlType] = controlType.value?.toString() ?? BooleanControlType.DropDown.toString();\r\n\r\n            // Compare the new value and the old value.\r\n            const anyValueChanged = newValue[ConfigurationValueKey.TrueText] !== (props.modelValue[ConfigurationValueKey.TrueText] ?? \"Yes\")\r\n                || newValue[ConfigurationValueKey.FalseText] !== (props.modelValue[ConfigurationValueKey.FalseText] ?? \"No\")\r\n                || newValue[ConfigurationValueKey.BooleanControlType] !== (props.modelValue[ConfigurationValueKey.BooleanControlType] ?? BooleanControlType.DropDown);\r\n\r\n            // If any value changed then emit the new model value.\r\n            if (anyValueChanged) {\r\n                emit(\"update:modelValue\", newValue);\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Emits the updateConfigurationValue if the value has actually changed.\r\n         * \r\n         * @param key The key that was possibly modified.\r\n         * @param value The new value.\r\n         */\r\n        const maybeUpdateConfiguration = (key: string, value: string): void => {\r\n            if (maybeUpdateModelValue()) {\r\n                emit(\"updateConfigurationValue\", key, value);\r\n            }\r\n        };\r\n\r\n        // Watch for changes coming in from the parent component and update our\r\n        // data to match the new information.\r\n        watch(() => [props.modelValue, props.configurationProperties], () => {\r\n            trueText.value = props.modelValue[ConfigurationValueKey.TrueText] ?? \"Yes\";\r\n            falseText.value = props.modelValue[ConfigurationValueKey.FalseText] ?? \"No\";\r\n            controlType.value = toNumberOrNull(props.modelValue[ConfigurationValueKey.BooleanControlType]) ?? 0;\r\n        }, {\r\n            immediate: true\r\n        });\r\n\r\n        // Watch for changes in properties that require new configuration\r\n        // properties to be retrieved from the server.\r\n        watch([], () => {\r\n            if (maybeUpdateModelValue()) {\r\n                emit(\"updateConfiguration\");\r\n            }\r\n        });\r\n\r\n        // Watch for changes in properties that only require a local UI update.\r\n        watch(trueText, () => maybeUpdateConfiguration(ConfigurationValueKey.TrueText, trueText.value ?? \"Yes\"));\r\n        watch(falseText, () => maybeUpdateConfiguration(ConfigurationValueKey.FalseText, falseText.value ?? \"No\"));\r\n        watch(controlType, () => maybeUpdateConfiguration(ConfigurationValueKey.BooleanControlType, controlType.value?.toString() ?? \"0\"));\r\n\r\n        const controlTypeOptions = [\r\n            { text: \"Drop Down\", value: BooleanControlType.DropDown },\r\n            { text: \"Checkbox\", value: BooleanControlType.Checkbox },\r\n            { text: \"Toggle\", value: BooleanControlType.Toggle }\r\n        ];\r\n\r\n        return { controlTypeOptions, trueText, falseText, controlType };\r\n    },\r\n\r\n    template: `\r\n<div>\r\n    <TextBox v-model=\"trueText\" label=\"True Text\" help=\"The text to display when value is true\" />\r\n    <TextBox v-model=\"falseText\" label=\"False Text\" help=\"The text to display when value is false\" />\r\n    <DropDownList v-model=\"controlType\" label=\"Control Type\" help=\"The type of control to use when editing the value\" :items=\"controlTypeOptions\" :show-blank-item=\"false\" />\r\n</div>\r\n`\r\n});\r\n"],"names":["ConfigurationValueKey","defineAsyncComponent","_asyncToGenerator","EditComponent","ConfigurationComponent","FilterComponent","BooleanControlType","defineComponent","name","components","DropDownList","Toggle","CheckBox","props","getFieldEditorProps","emits","setup","_ref","emit","internalBooleanValue","ref","asBoolean","modelValue","internalValue","asTrueFalseOrNull","booleanControlType","computed","controlType","configurationValues","Checkbox","DropDown","isToggle","value","isCheckBox","trueText","trueConfig","TrueText","falseText","falseConfig","FalseText","toggleOptions","dropDownListOptions","trueVal","falseVal","text","watch","template","_ref2","TextBox","getFieldConfigurationProps","_ref3","maybeUpdateModelValue","_trueText$value","_falseText$value","_controlType$value$to","_controlType$value","_props$modelValue$Con","_props$modelValue$Con2","_props$modelValue$Con3","newValue","toString","anyValueChanged","maybeUpdateConfiguration","key","configurationProperties","_props$modelValue$Con4","_props$modelValue$Con5","_toNumberOrNull","toNumberOrNull","immediate","_trueText$value2","_falseText$value2","_controlType$value$to2","_controlType$value2","controlTypeOptions"],"mappings":"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"}