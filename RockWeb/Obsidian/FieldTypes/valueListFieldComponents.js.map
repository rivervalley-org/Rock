{"version":3,"file":"valueListFieldComponents.js","sources":["../../../Framework/FieldTypes/valueListField.partial.ts","../../../Framework/FieldTypes/valueListFieldComponents.ts"],"sourcesContent":["// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\n\r\nexport const enum ConfigurationValueKey {\r\n    Values = \"values\",\r\n    ValuePrompt = \"valueprompt\",\r\n    AllowHtml = \"allowhtml\",\r\n\r\n    // Only used during editing of the field type configuration.\r\n    CustomValues = \"customvalues\",\r\n    DefinedType = \"definedtype\"\r\n}\r\n\r\nexport const enum ConfigurationPropertyKey {\r\n    DefinedTypes = \"definedTypes\"\r\n}\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./valueListFieldComponents\")).EditComponent;\r\n});\r\n\r\n// Load the configuration component as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./valueListFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Value List field.\r\n */\r\nexport class ValueListFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, configurationValues: Record<string, string>): string {\r\n        try {\r\n            const clientValues = JSON.parse(value ?? \"[]\") as string[];\r\n            const configuredValues = JSON.parse(configurationValues[ConfigurationValueKey.Values] ?? \"[]\") as ListItemBag[];\r\n            const values: string[] = [];\r\n\r\n            for (const clientValue of clientValues) {\r\n                if (configuredValues.length > 0) {\r\n                    const configuredValue = configuredValues.find(v => v.value === clientValue);\r\n\r\n                    if (configuredValue) {\r\n                        values.push(configuredValue.text ?? \"\");\r\n                    }\r\n                }\r\n                else {\r\n                    values.push(clientValue);\r\n                }\r\n            }\r\n\r\n            return values.join(\", \");\r\n        }\r\n        catch {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override isFilterable(): boolean {\r\n        return false;\r\n    }\r\n}\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { computed, defineComponent, ref, watch } from \"vue\";\r\nimport CheckBox from \"@Obsidian/Controls/checkBox\";\r\nimport DropDownList from \"@Obsidian/Controls/dropDownList\";\r\nimport RockFormField from \"@Obsidian/Controls/rockFormField\";\r\nimport TextBox from \"@Obsidian/Controls/textBox\";\r\nimport { asBooleanOrNull, asTrueFalseOrNull } from \"@Obsidian/Utility/booleanUtils\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport { ConfigurationPropertyKey, ConfigurationValueKey } from \"./valueListField.partial\";\r\nimport { getFieldConfigurationProps, getFieldEditorProps } from \"./utils\";\r\n\r\nfunction parseModelValue(modelValue: string | undefined): { value: string }[] {\r\n    try {\r\n        return (JSON.parse(modelValue ?? \"[]\") as string[]).map(s => ({ value: s }));\r\n    }\r\n    catch {\r\n        return [];\r\n    }\r\n}\r\n\r\nexport const EditComponent = defineComponent({\r\n    name: \"ValueListField.Edit\",\r\n\r\n    components: {\r\n        RockFormField,\r\n        DropDownList,\r\n        TextBox\r\n    },\r\n\r\n    props: getFieldEditorProps(),\r\n\r\n    setup(props, { emit }) {\r\n        const internalValues = ref(parseModelValue(props.modelValue));\r\n\r\n        const valueOptions = computed((): ListItemBag[] => {\r\n            try {\r\n                return JSON.parse(props.configurationValues[ConfigurationValueKey.Values] ?? \"[]\") as ListItemBag[];\r\n            }\r\n            catch {\r\n                return [];\r\n            }\r\n        });\r\n\r\n        /** The options to choose from in the drop down list */\r\n        const options = computed((): ListItemBag[] => {\r\n            const providedOptions: ListItemBag[] = valueOptions.value.map(v => {\r\n                return {\r\n                    text: v.text,\r\n                    value: v.value\r\n                };\r\n            });\r\n\r\n            return providedOptions;\r\n        });\r\n\r\n        const hasValues = computed((): boolean => valueOptions.value !== null && valueOptions.value.length > 0);\r\n\r\n        const valuePlaceholder = computed((): string => {\r\n            return props.configurationValues[ConfigurationValueKey.ValuePrompt] ?? \"\";\r\n        });\r\n\r\n        watch(() => props.modelValue, () => {\r\n            internalValues.value = parseModelValue(props.modelValue);\r\n        });\r\n\r\n        watch(() => internalValues.value, () => {\r\n            emit(\"update:modelValue\", JSON.stringify(internalValues.value.map(v => v.value)));\r\n        }, {\r\n            deep: true\r\n        });\r\n\r\n        const onAddClick = (): void => {\r\n            let defaultValue = \"\";\r\n\r\n            if (hasValues.value) {\r\n                defaultValue = valueOptions.value[0].value ?? \"\";\r\n            }\r\n\r\n            internalValues.value.push({ value: defaultValue });\r\n        };\r\n\r\n        const onRemoveClick = (index: number): void => {\r\n            internalValues.value.splice(index, 1);\r\n        };\r\n\r\n        return {\r\n            internalValues,\r\n            hasValues,\r\n            options,\r\n            valuePlaceholder,\r\n            onAddClick,\r\n            onRemoveClick\r\n        };\r\n    },\r\n\r\n    template: `\r\n<RockFormField\r\n    :modelValue=\"internalValues\"\r\n    formGroupClasses=\"value-list\"\r\n    name=\"value-list\">\r\n    <template #default=\"{uniqueId}\">\r\n        <div class=\"control-wrapper\">\r\n            <span :id=\"uniqueId\" class=\"value-list\">\r\n                <span class=\"value-list-rows\">\r\n                    <div v-for=\"(value, valueIndex) in internalValues\" class=\"controls controls-row form-control-group\">\r\n                        <select v-if=\"hasValues\" v-model=\"value.value\" class=\"form-control input-width-lg\">\r\n                            <option v-for=\"option in options\" :value=\"option.value\" :key=\"option.value\">{{ option.text }}</option>\r\n                        </select>\r\n                        <input v-else v-model=\"value.value\" class=\"key-value-value form-control input-width-lg\" type=\"text\" :placeholder=\"valuePlaceholder\">\r\n\r\n                        <a href=\"#\" @click.prevent=\"onRemoveClick(valueIndex)\" class=\"btn btn-sm btn-danger\"><i class=\"fa fa-times\"></i></a>\r\n                    </div>\r\n                </span>\r\n\r\n                <div class=\"control-actions\">\r\n                    <a class=\"btn btn-action btn-square btn-xs\" href=\"#\" @click.prevent=\"onAddClick\"><i class=\"fa fa-plus-circle\"></i></a>\r\n                </div>\r\n            </span>\r\n        </div>\r\n    </template>\r\n</RockFormField>\r\n`\r\n});\r\n\r\nexport const ConfigurationComponent = defineComponent({\r\n    name: \"ValueListField.Configuration\",\r\n\r\n    components: {\r\n        CheckBox,\r\n        DropDownList,\r\n        TextBox\r\n    },\r\n\r\n    props: getFieldConfigurationProps(),\r\n\r\n    emits: [\r\n        \"update:modelValue\",\r\n        \"updateConfiguration\",\r\n        \"updateConfigurationValue\"\r\n    ],\r\n\r\n    setup(props, { emit }) {\r\n        // Define the properties that will hold the current selections.\r\n        const customValues = ref(\"\");\r\n        const internalCustomValues = ref(\"\");\r\n        const labelPrompt = ref(\"\");\r\n        const definedType = ref(\"\");\r\n        const allowHtml = ref(false);\r\n\r\n        const definedTypeOptions = computed((): ListItemBag[] => {\r\n            try {\r\n                return JSON.parse(props.configurationProperties[ConfigurationPropertyKey.DefinedTypes] ?? \"[]\") as ListItemBag[];\r\n            }\r\n            catch {\r\n                return [];\r\n            }\r\n        });\r\n\r\n        const onBlur = (): void => {\r\n            internalCustomValues.value = customValues.value;\r\n        };\r\n\r\n        /**\r\n         * Update the modelValue property if any value of the dictionary has\r\n         * actually changed. This helps prevent unwanted postbacks if the value\r\n         * didn't really change - which can happen if multiple values get updated\r\n         * at the same time.\r\n         *\r\n         * @returns true if a new modelValue was emitted to the parent component.\r\n         */\r\n        const maybeUpdateModelValue = (): boolean => {\r\n            const newValue: Record<string, string> = {};\r\n\r\n            // Construct the new value that will be emitted if it is different\r\n            // than the current value.\r\n            newValue[ConfigurationValueKey.ValuePrompt] = labelPrompt.value ?? \"\";\r\n            newValue[ConfigurationValueKey.DefinedType] = definedType.value ?? \"\";\r\n            newValue[ConfigurationValueKey.CustomValues] = internalCustomValues.value ?? \"\";\r\n            newValue[ConfigurationValueKey.AllowHtml] = asTrueFalseOrNull(allowHtml.value) ?? \"False\";\r\n\r\n            // Compare the new value and the old value.\r\n            const anyValueChanged = newValue[ConfigurationValueKey.ValuePrompt] !== (props.modelValue[ConfigurationValueKey.ValuePrompt] ?? \"\")\r\n                || newValue[ConfigurationValueKey.DefinedType] !== (props.modelValue[ConfigurationValueKey.DefinedType] ?? \"\")\r\n                || newValue[ConfigurationValueKey.CustomValues] !== (props.modelValue[ConfigurationValueKey.CustomValues] ?? \"\")\r\n                || newValue[ConfigurationValueKey.AllowHtml] !== (props.modelValue[ConfigurationValueKey.AllowHtml] ?? \"False\");\r\n\r\n            // If any value changed then emit the new model value.\r\n            if (anyValueChanged) {\r\n                emit(\"update:modelValue\", newValue);\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Emits the updateConfigurationValue if the value has actually changed.\r\n         *\r\n         * @param key The key that was possibly modified.\r\n         * @param value The new value.\r\n         */\r\n        const maybeUpdateConfiguration = (key: string, value: string): void => {\r\n            if (maybeUpdateModelValue()) {\r\n                emit(\"updateConfigurationValue\", key, value);\r\n            }\r\n        };\r\n\r\n        // Watch for changes coming in from the parent component and update our\r\n        // data to match the new information.\r\n        watch(() => [props.modelValue, props.configurationProperties], () => {\r\n            labelPrompt.value = props.modelValue[ConfigurationValueKey.ValuePrompt] ?? \"\";\r\n            definedType.value = props.modelValue[ConfigurationValueKey.DefinedType] ?? \"\";\r\n            customValues.value = props.modelValue[ConfigurationValueKey.CustomValues] ?? \"\";\r\n            internalCustomValues.value = customValues.value;\r\n            allowHtml.value = asBooleanOrNull(props.modelValue[ConfigurationValueKey.AllowHtml]) ?? false;\r\n        }, {\r\n            immediate: true\r\n        });\r\n\r\n        // Watch for changes in properties that require new configuration\r\n        // properties to be retrieved from the server.\r\n        watch([definedType, internalCustomValues], () => {\r\n            if (maybeUpdateModelValue()) {\r\n                emit(\"updateConfiguration\");\r\n            }\r\n        });\r\n\r\n        // Watch for changes in properties that only require a local UI update.\r\n        watch(labelPrompt, () => maybeUpdateConfiguration(ConfigurationValueKey.ValuePrompt, labelPrompt.value ?? \"\"));\r\n        watch(allowHtml, () => maybeUpdateConfiguration(ConfigurationValueKey.AllowHtml, asTrueFalseOrNull(allowHtml.value) ?? \"False\"));\r\n\r\n        return {\r\n            allowHtml,\r\n            definedType,\r\n            definedTypeOptions,\r\n            labelPrompt,\r\n            onBlur,\r\n            customValues\r\n        };\r\n    },\r\n\r\n    template: `\r\n<div>\r\n    <TextBox v-model=\"labelPrompt\"\r\n        label=\"Label Prompt\"\r\n        help=\"The text to display as a prompt in the label textbox.\" />\r\n\r\n    <DropDownList v-model=\"definedType\"\r\n        label=\"Defined Type\"\r\n        help=\"Optional Defined Type to select values from, otherwise values will be free-form text fields.\"\r\n        :items=\"definedTypeOptions\" />\r\n\r\n    <TextBox v-model=\"customValues\"\r\n        label=\"Custom Values\"\r\n        help=\"Optional list of options to use for the values.  Format is either 'value1,value2,value3,...', or 'value1^text1,value2^text2,value3^text3,...'.\"\r\n        textMode=\"multiline\"\r\n        @blur=\"onBlur\" />\r\n\r\n    <CheckBox v-model=\"allowHtml\"\r\n        label=\"Allow HTML\"\r\n        help=\"Allow HTML content in values.\" />\r\n</div>\r\n`\r\n});\r\n"],"names":["ConfigurationValueKey","ConfigurationPropertyKey","defineAsyncComponent","_asyncToGenerator","EditComponent","ConfigurationComponent","parseModelValue","modelValue","JSON","parse","map","s","value","_unused","defineComponent","name","components","RockFormField","DropDownList","TextBox","props","getFieldEditorProps","setup","_ref","emit","internalValues","ref","valueOptions","computed","_props$configurationV","configurationValues","Values","_unused2","options","providedOptions","v","text","hasValues","length","valuePlaceholder","_props$configurationV2","ValuePrompt","watch","stringify","deep","onAddClick","defaultValue","_valueOptions$value$","push","onRemoveClick","index","splice","template","CheckBox","getFieldConfigurationProps","emits","_ref2","customValues","internalCustomValues","labelPrompt","definedType","allowHtml","definedTypeOptions","_props$configurationP","configurationProperties","DefinedTypes","_unused3","onBlur","maybeUpdateModelValue","_labelPrompt$value","_definedType$value","_internalCustomValues","_asTrueFalseOrNull","_props$modelValue$Con","_props$modelValue$Con2","_props$modelValue$Con3","_props$modelValue$Con4","newValue","DefinedType","CustomValues","AllowHtml","asTrueFalseOrNull","anyValueChanged","maybeUpdateConfiguration","key","_props$modelValue$Con5","_props$modelValue$Con6","_props$modelValue$Con7","_asBooleanOrNull","asBooleanOrNull","immediate","_labelPrompt$value2","_asTrueFalseOrNull2"],"mappings":"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"}