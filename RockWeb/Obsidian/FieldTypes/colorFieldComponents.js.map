{"version":3,"file":"colorFieldComponents.js","sources":["../../../Framework/FieldTypes/colorFieldComponents.ts"],"sourcesContent":["// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { computed, defineComponent, ref, watch } from \"vue\";\r\nimport DropDownList from \"@Obsidian/Controls/dropDownList\";\r\nimport ColorPicker from \"@Obsidian/Controls/colorPicker\";\r\nimport { getFieldConfigurationProps, getFieldEditorProps } from \"./utils\";\r\nimport { useVModelPassthrough } from \"@Obsidian/Utility/component\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\n\r\nenum ConfigurationValueKey {\r\n    ColorControlType = \"selectiontype\",\r\n    ColorPicker = \"Color Picker\",\r\n    NamedColor = \"Named Color\"\r\n}\r\n\r\nconst namedColors: string[] = [\r\n    \"Transparent\", \"AliceBlue\", \"AntiqueWhite\", \"Aqua\", \"Aquamarine\",\r\n    \"Azure\", \"Beige\", \"Bisque\", \"Black\", \"BlanchedAlmond\",\r\n    \"Blue\", \"BlueViolet\", \"Brown\", \"BurlyWood\", \"CadetBlue\",\r\n    \"Chartreuse\", \"Chocolate\", \"Coral\", \"CornflowerBlue\", \"Cornsilk\",\r\n    \"Crimson\", \"Cyan\", \"DarkBlue\", \"DarkCyan\", \"DarkGoldenrod\",\r\n    \"DarkGray\", \"DarkGreen\", \"DarkKhaki\", \"DarkMagenta\", \"DarkOliveGreen\",\r\n    \"DarkOrange\", \"DarkOrchid\", \"DarkRed\", \"DarkSalmon\", \"DarkSeaGreen\",\r\n    \"DarkSlateBlue\", \"DarkSlateGray\", \"DarkTurquoise\", \"DarkViolet\", \"DeepPink\",\r\n    \"DeepSkyBlue\", \"DimGray\", \"DodgerBlue\", \"Firebrick\", \"FloralWhite\",\r\n    \"ForestGreen\", \"Fuchsia\", \"Gainsboro\", \"GhostWhite\", \"Gold\",\r\n    \"Goldenrod\", \"Gray\", \"Green\", \"GreenYellow\", \"Honeydew\",\r\n    \"HotPink\", \"IndianRed\", \"Indigo\", \"Ivory\", \"Khaki\",\r\n    \"Lavender\", \"LavenderBlush\", \"LawnGreen\", \"LemonChiffon\", \"LightBlue\",\r\n    \"LightCoral\", \"LightCyan\", \"LightGoldenrodYellow\", \"LightGreen\", \"LightGray\",\r\n    \"LightPink\", \"LightSalmon\", \"LightSeaGreen\", \"LightSkyBlue\", \"LightSlateGray\",\r\n    \"LightSteelBlue\", \"LightYellow\", \"Lime\", \"LimeGreen\", \"Linen\",\r\n    \"Magenta\", \"Maroon\", \"MediumAquamarine\", \"MediumBlue\", \"MediumOrchid\",\r\n    \"MediumPurple\", \"MediumSeaGreen\", \"MediumSlateBlue\", \"MediumSpringGreen\", \"MediumTurquoise\",\r\n    \"MediumVioletRed\", \"MidnightBlue\", \"MintCream\", \"MistyRose\", \"Moccasin\",\r\n    \"NavajoWhite\", \"Navy\", \"OldLace\", \"Olive\", \"OliveDrab\",\r\n    \"Orange\", \"OrangeRed\", \"Orchid\", \"PaleGoldenrod\", \"PaleGreen\",\r\n    \"PaleTurquoise\", \"PaleVioletRed\", \"PapayaWhip\", \"PeachPuff\", \"Peru\",\r\n    \"Pink\", \"Plum\", \"PowderBlue\", \"Purple\", \"Red\",\r\n    \"RosyBrown\", \"RoyalBlue\", \"SaddleBrown\", \"Salmon\", \"SandyBrown\",\r\n    \"SeaGreen\", \"SeaShell\", \"Sienna\", \"Silver\", \"SkyBlue\",\r\n    \"SlateBlue\", \"SlateGray\", \"Snow\", \"SpringGreen\", \"SteelBlue\",\r\n    \"Tan\", \"Teal\", \"Thistle\", \"Tomato\", \"Turquoise\",\r\n    \"Violet\", \"Wheat\", \"White\", \"WhiteSmoke\", \"Yellow\",\r\n    \"YellowGreen\"\r\n];\r\n\r\nexport const EditComponent = defineComponent({\r\n    name: \"ColorField.Edit\",\r\n    components: {\r\n        DropDownList,\r\n        ColorPicker\r\n    },\r\n    props: getFieldEditorProps(),\r\n    emits: [\r\n        \"update:modelValue\"\r\n    ],\r\n    setup(props, { emit }) {\r\n        const internalValue = useVModelPassthrough(props, \"modelValue\", emit);\r\n\r\n        const dropDownListOptions = namedColors.map(v => {\r\n            return { text: v, value: v } as ListItemBag;\r\n        });\r\n\r\n        const isNamedPicker = computed((): boolean => {\r\n            return props.configurationValues[ConfigurationValueKey.ColorControlType] === ConfigurationValueKey.NamedColor;\r\n        });\r\n\r\n        return {\r\n            internalValue,\r\n            dropDownListOptions,\r\n            isNamedPicker\r\n        };\r\n    },\r\n    template: `\r\n<DropDownList v-if=\"isNamedPicker\" v-model=\"internalValue\" :items=\"dropDownListOptions\" />\r\n<ColorPicker v-else v-model=\"internalValue\" />\r\n`\r\n});\r\n\r\nexport const ConfigurationComponent = defineComponent({\r\n    name: \"ColorField.Configuration\",\r\n\r\n    components: {\r\n        DropDownList\r\n    },\r\n\r\n    props: getFieldConfigurationProps(),\r\n\r\n    emits: [\"update:modelValue\", \"updateConfiguration\", \"updateConfigurationValue\"],\r\n\r\n    setup(props, { emit }) {\r\n        // Define the properties that will hold the current selections.\r\n        const colorControlType = ref(\"\");\r\n        const typeList = [\r\n            { text: ConfigurationValueKey.ColorPicker, value: ConfigurationValueKey.ColorPicker },\r\n            { text: ConfigurationValueKey.NamedColor, value: ConfigurationValueKey.NamedColor }\r\n        ];\r\n\r\n        /**\r\n         * Update the modelValue property if any value of the dictionary has\r\n         * actually changed. This helps prevent unwanted postbacks if the value\r\n         * didn't really change - which can happen if multiple values get updated\r\n         * at the same time.\r\n         *\r\n         * @returns true if a new modelValue was emitted to the parent component.\r\n         */\r\n        const maybeUpdateModelValue = (): boolean => {\r\n            const newValue: Record<string, string> = {};\r\n\r\n            // Construct the new value that will be emitted if it is different\r\n            // than the current value.\r\n            newValue[ConfigurationValueKey.ColorControlType] = colorControlType.value ?? ConfigurationValueKey.ColorPicker;\r\n\r\n            // Compare the new value and the old value.\r\n            const anyValueChanged = newValue[ConfigurationValueKey.ColorControlType] !== (props.modelValue[ConfigurationValueKey.ColorControlType] ?? ConfigurationValueKey.ColorPicker);\r\n\r\n            // If any value changed then emit the new model value.\r\n            if (anyValueChanged) {\r\n                emit(\"update:modelValue\", newValue);\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Emits the updateConfigurationValue if the value has actually changed.\r\n         * \r\n         * @param key The key that was possibly modified.\r\n         * @param value The new value.\r\n         */\r\n        const maybeUpdateConfiguration = (key: string, value: string): void => {\r\n            if (maybeUpdateModelValue()) {\r\n                emit(\"updateConfigurationValue\", key, value);\r\n            }\r\n        };\r\n\r\n        // Watch for changes coming in from the parent component and update our\r\n        // data to match the new information.\r\n        watch(() => [props.modelValue, props.configurationProperties], () => {\r\n            colorControlType.value = props.modelValue[ConfigurationValueKey.ColorControlType] ?? ConfigurationValueKey.ColorPicker;\r\n        }, {\r\n            immediate: true\r\n        });\r\n\r\n        // Watch for changes in properties that require new configuration\r\n        // properties to be retrieved from the server.\r\n        // THIS IS JUST A PLACEHOLDER FOR COPYING TO NEW FIELDS THAT MIGHT NEED IT.\r\n        // THIS FIELD DOES NOT NEED THIS\r\n        watch([], () => {\r\n            if (maybeUpdateModelValue()) {\r\n                emit(\"updateConfiguration\");\r\n            }\r\n        });\r\n\r\n        // Watch for changes in properties that only require a local UI update.\r\n        watch(colorControlType, () => maybeUpdateConfiguration(ConfigurationValueKey.ColorControlType, colorControlType.value || ConfigurationValueKey.ColorPicker));\r\n\r\n        return {\r\n            colorControlType,\r\n            typeList\r\n        };\r\n    },\r\n\r\n    template: `\r\n<div>\r\n    <DropDownList v-model=\"colorControlType\" :items=\"typeList\" :show-blank-item=\"false\" label=\"Selection Type\" help=\"The type of control to select color\" />\r\n</div>\r\n`\r\n});\r\n"],"names":["ConfigurationValueKey","namedColors","EditComponent","defineComponent","name","components","DropDownList","ColorPicker","props","getFieldEditorProps","emits","setup","_ref","emit","internalValue","useVModelPassthrough","dropDownListOptions","map","v","text","value","isNamedPicker","computed","configurationValues","ColorControlType","NamedColor","template","ConfigurationComponent","getFieldConfigurationProps","_ref2","colorControlType","ref","typeList","maybeUpdateModelValue","_colorControlType$val","_props$modelValue$Con","newValue","anyValueChanged","modelValue","maybeUpdateConfiguration","key","watch","configurationProperties","_props$modelValue$Con2","immediate"],"mappings":";;;;;;;;;;;;;;;;;;;;;YAoBmE,IAG9DA,qBAAqB,aAArBA,qBAAqB,EAAA;cAArBA,qBAAqB,CAAA,kBAAA,CAAA,GAAA,eAAA,CAAA;cAArBA,qBAAqB,CAAA,aAAA,CAAA,GAAA,cAAA,CAAA;cAArBA,qBAAqB,CAAA,YAAA,CAAA,GAAA,aAAA,CAAA;YAAA,EAAA,OAArBA,qBAAqB,CAAA;YAAA,CAAA,CAArBA,qBAAqB,IAAA,EAAA,CAAA,CAAA;YAM1B,IAAMC,WAAqB,GAAG,CAC1B,aAAa,EAAE,WAAW,EAAE,cAAc,EAAE,MAAM,EAAE,YAAY,EAChE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,gBAAgB,EACrD,MAAM,EAAE,YAAY,EAAE,OAAO,EAAE,WAAW,EAAE,WAAW,EACvD,YAAY,EAAE,WAAW,EAAE,OAAO,EAAE,gBAAgB,EAAE,UAAU,EAChE,SAAS,EAAE,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,eAAe,EAC1D,UAAU,EAAE,WAAW,EAAE,WAAW,EAAE,aAAa,EAAE,gBAAgB,EACrE,YAAY,EAAE,YAAY,EAAE,SAAS,EAAE,YAAY,EAAE,cAAc,EACnE,eAAe,EAAE,eAAe,EAAE,eAAe,EAAE,YAAY,EAAE,UAAU,EAC3E,aAAa,EAAE,SAAS,EAAE,YAAY,EAAE,WAAW,EAAE,aAAa,EAClE,aAAa,EAAE,SAAS,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,EAC3D,WAAW,EAAE,MAAM,EAAE,OAAO,EAAE,aAAa,EAAE,UAAU,EACvD,SAAS,EAAE,WAAW,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAClD,UAAU,EAAE,eAAe,EAAE,WAAW,EAAE,cAAc,EAAE,WAAW,EACrE,YAAY,EAAE,WAAW,EAAE,sBAAsB,EAAE,YAAY,EAAE,WAAW,EAC5E,WAAW,EAAE,aAAa,EAAE,eAAe,EAAE,cAAc,EAAE,gBAAgB,EAC7E,gBAAgB,EAAE,aAAa,EAAE,MAAM,EAAE,WAAW,EAAE,OAAO,EAC7D,SAAS,EAAE,QAAQ,EAAE,kBAAkB,EAAE,YAAY,EAAE,cAAc,EACrE,cAAc,EAAE,gBAAgB,EAAE,iBAAiB,EAAE,mBAAmB,EAAE,iBAAiB,EAC3F,iBAAiB,EAAE,cAAc,EAAE,WAAW,EAAE,WAAW,EAAE,UAAU,EACvE,aAAa,EAAE,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,WAAW,EACtD,QAAQ,EAAE,WAAW,EAAE,QAAQ,EAAE,eAAe,EAAE,WAAW,EAC7D,eAAe,EAAE,eAAe,EAAE,YAAY,EAAE,WAAW,EAAE,MAAM,EACnE,MAAM,EAAE,MAAM,EAAE,YAAY,EAAE,QAAQ,EAAE,KAAK,EAC7C,WAAW,EAAE,WAAW,EAAE,aAAa,EAAE,QAAQ,EAAE,YAAY,EAC/D,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EACrD,WAAW,EAAE,WAAW,EAAE,MAAM,EAAE,aAAa,EAAE,WAAW,EAC5D,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,EAC/C,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,YAAY,EAAE,QAAQ,EAClD,aAAa,CAChB,CAAA;AAEYC,gBAAAA,aAAa,4BAAGC,eAAe,CAAC;YACzCC,EAAAA,IAAI,EAAE,iBAAiB;YACvBC,EAAAA,UAAU,EAAE;gBACRC,YAAY;YACZC,IAAAA,WAAAA;eACH;cACDC,KAAK,EAAEC,mBAAmB,EAAE;cAC5BC,KAAK,EAAE,CACH,mBAAmB,CACtB;YACDC,EAAAA,KAAKA,CAACH,KAAK,EAAAI,IAAA,EAAY;YAAA,IAAA,IAARC,IAAI,GAAAD,IAAA,CAAJC,IAAI,CAAA;gBACf,IAAMC,aAAa,GAAGC,oBAAoB,CAACP,KAAK,EAAE,YAAY,EAAEK,IAAI,CAAC,CAAA;YAErE,IAAA,IAAMG,mBAAmB,GAAGf,WAAW,CAACgB,GAAG,CAACC,CAAC,IAAI;kBAC7C,OAAO;YAAEC,QAAAA,IAAI,EAAED,CAAC;YAAEE,QAAAA,KAAK,EAAEF,CAAAA;mBAAG,CAAA;YAChC,KAAC,CAAC,CAAA;YAEF,IAAA,IAAMG,aAAa,GAAGC,QAAQ,CAAC,MAAe;kBAC1C,OAAOd,KAAK,CAACe,mBAAmB,CAACvB,qBAAqB,CAACwB,gBAAgB,CAAC,KAAKxB,qBAAqB,CAACyB,UAAU,CAAA;YACjH,KAAC,CAAC,CAAA;gBAEF,OAAO;kBACHX,aAAa;kBACbE,mBAAmB;YACnBK,MAAAA,aAAAA;iBACH,CAAA;eACJ;cACDK,QAAQ,EAAA,wJAAA;YAIZ,CAAC,GAAC;AAEWC,gBAAAA,sBAAsB,qCAAGxB,eAAe,CAAC;YAClDC,EAAAA,IAAI,EAAE,0BAA0B;YAEhCC,EAAAA,UAAU,EAAE;YACRC,IAAAA,YAAAA;eACH;cAEDE,KAAK,EAAEoB,0BAA0B,EAAE;YAEnClB,EAAAA,KAAK,EAAE,CAAC,mBAAmB,EAAE,qBAAqB,EAAE,0BAA0B,CAAC;YAE/EC,EAAAA,KAAKA,CAACH,KAAK,EAAAqB,KAAA,EAAY;YAAA,IAAA,IAARhB,IAAI,GAAAgB,KAAA,CAAJhB,IAAI,CAAA;YAEf,IAAA,IAAMiB,gBAAgB,GAAGC,GAAG,CAAC,EAAE,CAAC,CAAA;gBAChC,IAAMC,QAAQ,GAAG,CACb;kBAAEb,IAAI,EAAEnB,qBAAqB,CAACO,WAAW;kBAAEa,KAAK,EAAEpB,qBAAqB,CAACO,WAAAA;YAAY,KAAC,EACrF;kBAAEY,IAAI,EAAEnB,qBAAqB,CAACyB,UAAU;kBAAEL,KAAK,EAAEpB,qBAAqB,CAACyB,UAAAA;YAAW,KAAC,CACtF,CAAA;gBAUD,IAAMQ,qBAAqB,GAAGA,MAAe;kBAAA,IAAAC,qBAAA,EAAAC,qBAAA,CAAA;kBACzC,IAAMC,QAAgC,GAAG,EAAE,CAAA;YAI3CA,MAAAA,QAAQ,CAACpC,qBAAqB,CAACwB,gBAAgB,CAAC,GAAA,CAAAU,qBAAA,GAAGJ,gBAAgB,CAACV,KAAK,cAAAc,qBAAA,KAAA,KAAA,CAAA,GAAAA,qBAAA,GAAIlC,qBAAqB,CAACO,WAAW,CAAA;kBAG9G,IAAM8B,eAAe,GAAGD,QAAQ,CAACpC,qBAAqB,CAACwB,gBAAgB,CAAC,MAAA,CAAAW,qBAAA,GAAM3B,KAAK,CAAC8B,UAAU,CAACtC,qBAAqB,CAACwB,gBAAgB,CAAC,MAAAW,IAAAA,IAAAA,qBAAA,KAAAA,KAAAA,CAAAA,GAAAA,qBAAA,GAAInC,qBAAqB,CAACO,WAAW,CAAC,CAAA;YAG5K,MAAA,IAAI8B,eAAe,EAAE;YACjBxB,QAAAA,IAAI,CAAC,mBAAmB,EAAEuB,QAAQ,CAAC,CAAA;YACnC,QAAA,OAAO,IAAI,CAAA;YACf,OAAC,MACI;YACD,QAAA,OAAO,KAAK,CAAA;YAChB,OAAA;iBACH,CAAA;YAQD,IAAA,IAAMG,wBAAwB,GAAGA,CAACC,GAAW,EAAEpB,KAAa,KAAW;kBACnE,IAAIa,qBAAqB,EAAE,EAAE;YACzBpB,QAAAA,IAAI,CAAC,0BAA0B,EAAE2B,GAAG,EAAEpB,KAAK,CAAC,CAAA;YAChD,OAAA;iBACH,CAAA;YAIDqB,IAAAA,KAAK,CAAC,MAAM,CAACjC,KAAK,CAAC8B,UAAU,EAAE9B,KAAK,CAACkC,uBAAuB,CAAC,EAAE,MAAM;YAAA,MAAA,IAAAC,sBAAA,CAAA;kBACjEb,gBAAgB,CAACV,KAAK,GAAAuB,CAAAA,sBAAA,GAAGnC,KAAK,CAAC8B,UAAU,CAACtC,qBAAqB,CAACwB,gBAAgB,CAAC,cAAAmB,sBAAA,KAAA,KAAA,CAAA,GAAAA,sBAAA,GAAI3C,qBAAqB,CAACO,WAAW,CAAA;YAC1H,KAAC,EAAE;YACCqC,MAAAA,SAAS,EAAE,IAAA;YACf,KAAC,CAAC,CAAA;gBAMFH,KAAK,CAAC,EAAE,EAAE,MAAM;kBACZ,IAAIR,qBAAqB,EAAE,EAAE;oBACzBpB,IAAI,CAAC,qBAAqB,CAAC,CAAA;YAC/B,OAAA;YACJ,KAAC,CAAC,CAAA;YAGF4B,IAAAA,KAAK,CAACX,gBAAgB,EAAE,MAAMS,wBAAwB,CAACvC,qBAAqB,CAACwB,gBAAgB,EAAEM,gBAAgB,CAACV,KAAK,IAAIpB,qBAAqB,CAACO,WAAW,CAAC,CAAC,CAAA;gBAE5J,OAAO;kBACHuB,gBAAgB;YAChBE,MAAAA,QAAAA;iBACH,CAAA;eACJ;cAEDN,QAAQ,EAAA,2LAAA;YAKZ,CAAC;;;;;;;;"}