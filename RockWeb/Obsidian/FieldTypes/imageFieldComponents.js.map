{"version":3,"file":"imageFieldComponents.js","sources":["../../../Framework/FieldTypes/imageField.partial.ts","../../../Framework/FieldTypes/imageFieldComponents.ts"],"sourcesContent":["// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { ComparisonType } from \"@Obsidian/Enums/Reporting/comparisonType\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\n\r\n/**\r\n * The key names for the configuration properties available when editing the\r\n * configuration of an Image field type.\r\n */\r\nexport const enum ConfigurationPropertyKey {\r\n    /** The binary file types available to pick from. */\r\n    BinaryFileTypes = \"binaryFileTypes\"\r\n}\r\n\r\n/**\r\n * The configuration value keys used by the configuraiton and edit controls.\r\n */\r\nexport const enum ConfigurationValueKey {\r\n    /** The unique identifier of the BinaryFileType to use for uploads. */\r\n    BinaryFileType = \"binaryFileType\",\r\n\r\n    /** Determines if the rendered HTML should be clickable. */\r\n    FormatAsLink = \"formatAsLink\"\r\n}\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./imageFieldComponents\")).EditComponent;\r\n});\r\n\r\n// The configuration component can be quite large, so load it only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./imageFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Image field.\r\n */\r\nexport class ImageFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, _configurationValues: Record<string, string>): string {\r\n        try {\r\n            const realValue = JSON.parse(value ?? \"\") as ListItemBag;\r\n\r\n            if (!realValue.value) {\r\n                return \"\";\r\n            }\r\n\r\n            return realValue.text ?? \"\";\r\n        }\r\n        catch {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    public override getHtmlValue(value: string, _configurationValues: Record<string, string>): string {\r\n        try {\r\n            const realValue = JSON.parse(value ?? \"\") as ListItemBag;\r\n\r\n            if (!realValue.value) {\r\n                return \"\";\r\n            }\r\n\r\n            return `<img src=\"/GetImage.ashx?guid=${realValue.value}\" class=\"img-responsive\" />`;\r\n        }\r\n        catch {\r\n            return value ?? \"\";\r\n        }\r\n    }\r\n\r\n    public override getCondensedHtmlValue(value: string, _configurationValues: Record<string, string>): string {\r\n        try {\r\n            const realValue = JSON.parse(value ?? \"\") as ListItemBag;\r\n\r\n            if (!realValue.value) {\r\n                return \"\";\r\n            }\r\n\r\n            return `<img src=\"/GetImage.ashx?guid=${realValue.value}&width=120\" class=\"img-responsive\" />`;\r\n        }\r\n        catch {\r\n            return value ?? \"\";\r\n        }\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override getSupportedComparisonTypes(): ComparisonType {\r\n        return ComparisonType.IsBlank | ComparisonType.IsNotBlank;\r\n    }\r\n}\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { computed, defineComponent, ref, watch } from \"vue\";\r\nimport { getFieldConfigurationProps, getFieldEditorProps } from \"./utils\";\r\nimport CheckBox from \"@Obsidian/Controls/checkBox\";\r\nimport DropDownList from \"@Obsidian/Controls/dropDownList\";\r\nimport ImageUploader from \"@Obsidian/Controls/imageUploader\";\r\nimport { ConfigurationValueKey, ConfigurationPropertyKey } from \"./imageField.partial\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport { updateRefValue } from \"@Obsidian/Utility/component\";\r\nimport { asBooleanOrNull, asTrueFalseOrNull } from \"@Obsidian/Utility/booleanUtils\";\r\n\r\nexport const EditComponent = defineComponent({\r\n    name: \"ImageField.Edit\",\r\n\r\n    components: {\r\n        ImageUploader\r\n    },\r\n\r\n    props: getFieldEditorProps(),\r\n\r\n    setup(props, { emit }) {\r\n        // The internal value used by the text editor.\r\n        const internalValue = ref<ListItemBag | null>(null);\r\n\r\n        // Configuration attributes passed to the edit control.\r\n        const binaryFileType = computed((): string => {\r\n            return props.configurationValues[ConfigurationValueKey.BinaryFileType] ?? \"\";\r\n        });\r\n\r\n        // Watch for changes from the parent component and update the text editor.\r\n        watch(() => props.modelValue, () => {\r\n            try {\r\n                updateRefValue(internalValue, JSON.parse(props.modelValue ?? \"\") as ListItemBag);\r\n            }\r\n            catch {\r\n                internalValue.value = null;\r\n            }\r\n        }, {\r\n            immediate: true\r\n        });\r\n\r\n        // Watch for changes from the text editor and update the parent component.\r\n        watch(internalValue, () => {\r\n            emit(\"update:modelValue\", internalValue.value ? JSON.stringify(internalValue.value) : \"\");\r\n        });\r\n\r\n        return {\r\n            binaryFileType,\r\n            internalValue\r\n        };\r\n    },\r\n\r\n    template: `\r\n<ImageUploader v-model=\"internalValue\" :binaryFileTypeGuid=\"binaryFileType\" uploadAsTemporary />\r\n`\r\n});\r\n\r\nexport const ConfigurationComponent = defineComponent({\r\n    name: \"ImageField.Configuration\",\r\n\r\n    components: {\r\n        CheckBox,\r\n        DropDownList\r\n    },\r\n\r\n    props: getFieldConfigurationProps(),\r\n\r\n    emits: [\r\n        \"update:modelValue\",\r\n        \"updateConfiguration\",\r\n        \"updateConfigurationValue\"\r\n    ],\r\n\r\n    setup(props, { emit }) {\r\n        // Define the properties that will hold the current selections.\r\n        const fileType = ref(\"\");\r\n        const formatAsLink = ref(false);\r\n\r\n        /** The binary file types the individual can select from. */\r\n        const fileTypeOptions = computed((): ListItemBag[] => {\r\n            try {\r\n                return JSON.parse(props.configurationProperties[ConfigurationPropertyKey.BinaryFileTypes] ?? \"[]\") as ListItemBag[];\r\n            }\r\n            catch {\r\n                return [];\r\n            }\r\n        });\r\n\r\n        /**\r\n         * Update the modelValue property if any value of the dictionary has\r\n         * actually changed. This helps prevent unwanted postbacks if the value\r\n         * didn't really change - which can happen if multiple values get updated\r\n         * at the same time.\r\n         *\r\n         * @returns true if a new modelValue was emitted to the parent component.\r\n         */\r\n        const maybeUpdateModelValue = (): boolean => {\r\n            const newValue: Record<string, string> = {};\r\n\r\n            // Construct the new value that will be emitted if it is different\r\n            // than the current value.\r\n            newValue[ConfigurationValueKey.BinaryFileType] = fileType.value ?? \"\";\r\n            newValue[ConfigurationValueKey.FormatAsLink] = asTrueFalseOrNull(formatAsLink.value) ?? \"False\";\r\n\r\n            // Compare the new value and the old value.\r\n            const anyValueChanged = newValue[ConfigurationValueKey.BinaryFileType] !== (props.modelValue[ConfigurationValueKey.BinaryFileType] ?? \"\")\r\n                || newValue[ConfigurationValueKey.FormatAsLink] !== (props.modelValue[ConfigurationValueKey.FormatAsLink] ?? \"False\");\r\n\r\n            // If any value changed then emit the new model value.\r\n            if (anyValueChanged) {\r\n                emit(\"update:modelValue\", newValue);\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Emits the updateConfigurationValue if the value has actually changed.\r\n         * \r\n         * @param key The key that was possibly modified.\r\n         * @param value The new value.\r\n         */\r\n        const maybeUpdateConfiguration = (key: string, value: string): void => {\r\n            if (maybeUpdateModelValue()) {\r\n                emit(\"updateConfigurationValue\", key, value);\r\n            }\r\n        };\r\n\r\n        // Watch for changes coming in from the parent component and update our\r\n        // data to match the new information.\r\n        watch(() => [props.modelValue, props.configurationProperties], () => {\r\n            fileType.value = props.modelValue[ConfigurationValueKey.BinaryFileType];\r\n            formatAsLink.value = asBooleanOrNull(props.modelValue[ConfigurationValueKey.FormatAsLink]) ?? false;\r\n        }, {\r\n            immediate: true\r\n        });\r\n\r\n        // Watch for changes in properties that require new configuration\r\n        // properties to be retrieved from the server.\r\n        // THIS IS JUST A PLACEHOLDER FOR COPYING TO NEW FIELDS THAT MIGHT NEED IT.\r\n        // THIS FIELD DOES NOT NEED THIS\r\n        watch([], () => {\r\n            if (maybeUpdateModelValue()) {\r\n                emit(\"updateConfiguration\");\r\n            }\r\n        });\r\n\r\n        // Watch for changes in properties that only require a local UI update.\r\n        watch(fileType, () => maybeUpdateConfiguration(ConfigurationValueKey.BinaryFileType, fileType.value ?? \"\"));\r\n        watch(formatAsLink, () => maybeUpdateConfiguration(ConfigurationValueKey.FormatAsLink, asTrueFalseOrNull(formatAsLink.value) ?? \"False\"));\r\n\r\n        return {\r\n            fileType,\r\n            fileTypeOptions,\r\n            formatAsLink\r\n        };\r\n    },\r\n\r\n    template: `\r\n<div>\r\n    <DropDownList v-model=\"fileType\"\r\n        label=\"File Type\"\r\n        help=\"File type to use to store and retrieve the file. New file types can be configured under 'Admins Tools &gt; General Settings &gt; File Types'.\"\r\n        :items=\"fileTypeOptions\" />\r\n\r\n    <CheckBox v-model=\"formatAsLink\"\r\n        label=\"Format as Link\"\r\n        help=\"Enable this to navigate to a full size image when the image is clicked.\" />\r\n</div>\r\n`\r\n});\r\n"],"names":["ConfigurationPropertyKey","ConfigurationValueKey","defineAsyncComponent","_asyncToGenerator","EditComponent","ConfigurationComponent","defineComponent","name","components","ImageUploader","props","getFieldEditorProps","setup","_ref","emit","internalValue","ref","binaryFileType","computed","_props$configurationV","configurationValues","BinaryFileType","watch","modelValue","_props$modelValue","updateRefValue","JSON","parse","_unused","value","immediate","stringify","template","CheckBox","DropDownList","getFieldConfigurationProps","emits","_ref2","fileType","formatAsLink","fileTypeOptions","_props$configurationP","configurationProperties","BinaryFileTypes","_unused2","maybeUpdateModelValue","_fileType$value","_asTrueFalseOrNull","_props$modelValue$Con","_props$modelValue$Con2","newValue","FormatAsLink","asTrueFalseOrNull","anyValueChanged","maybeUpdateConfiguration","key","_asBooleanOrNull","asBooleanOrNull","_fileType$value2","_asTrueFalseOrNull2"],"mappings":"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"}