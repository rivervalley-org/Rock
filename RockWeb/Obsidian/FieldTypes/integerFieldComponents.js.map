{"version":3,"file":"integerFieldComponents.js","sources":["../../../Framework/FieldTypes/integerFieldComponents.ts"],"sourcesContent":["// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { defineComponent } from \"vue\";\r\nimport { getFieldEditorProps } from \"./utils\";\r\nimport { toNumberOrNull } from \"@Obsidian/Utility/numberUtils\";\r\nimport NumberBox from \"@Obsidian/Controls/numberBox\";\r\n\r\nexport const EditComponent = defineComponent({\r\n    name: \"IntegerField.Edit\",\r\n\r\n    components: {\r\n        NumberBox\r\n    },\r\n\r\n    props: getFieldEditorProps(),\r\n\r\n    data() {\r\n        return {\r\n            /** The user input value as a number of null if it isn't valid. */\r\n            internalValue: null as number | null\r\n        };\r\n    },\r\n\r\n    watch: {\r\n        /**\r\n         * Watch for changes to internalValue and emit the new value out to\r\n         * the consuming component.\r\n         */\r\n        internalValue(): void {\r\n            this.$emit(\"update:modelValue\", this.internalValue !== null ? this.internalValue.toString() : \"\");\r\n        },\r\n\r\n        /**\r\n         * Watch for changes to modelValue which indicate the component\r\n         * using us has given us a new value to work with.\r\n         */\r\n        modelValue: {\r\n            immediate: true,\r\n            handler(): void {\r\n                this.internalValue = toNumberOrNull(this.modelValue || \"\");\r\n            }\r\n        }\r\n    },\r\n\r\n    template: `\r\n<NumberBox v-model=\"internalValue\" rules=\"integer\" :decimal-count=\"0\" />\r\n`\r\n});\r\n\r\nexport const ConfigurationComponent = defineComponent({\r\n    name: \"IntegerField.Configuration\",\r\n\r\n    template: ``\r\n});\r\n\r\n"],"names":["EditComponent","defineComponent","name","components","NumberBox","props","getFieldEditorProps","data","internalValue","watch","$emit","toString","modelValue","immediate","handler","toNumberOrNull","template","ConfigurationComponent"],"mappings":";;;;;;;;;;;;;;;AAqBaA,gBAAAA,aAAa,4BAAGC,eAAe,CAAC;YACzCC,EAAAA,IAAI,EAAE,mBAAmB;YAEzBC,EAAAA,UAAU,EAAE;YACRC,IAAAA,SAAAA;eACH;cAEDC,KAAK,EAAEC,mBAAmB,EAAE;YAE5BC,EAAAA,IAAIA,GAAG;gBACH,OAAO;YAEHC,MAAAA,aAAa,EAAE,IAAA;iBAClB,CAAA;eACJ;YAEDC,EAAAA,KAAK,EAAE;YAKHD,IAAAA,aAAaA,GAAS;YAClB,MAAA,IAAI,CAACE,KAAK,CAAC,mBAAmB,EAAE,IAAI,CAACF,aAAa,KAAK,IAAI,GAAG,IAAI,CAACA,aAAa,CAACG,QAAQ,EAAE,GAAG,EAAE,CAAC,CAAA;iBACpG;YAMDC,IAAAA,UAAU,EAAE;YACRC,MAAAA,SAAS,EAAE,IAAI;YACfC,MAAAA,OAAOA,GAAS;oBACZ,IAAI,CAACN,aAAa,GAAGO,cAAc,CAAC,IAAI,CAACH,UAAU,IAAI,EAAE,CAAC,CAAA;YAC9D,OAAA;YACJ,KAAA;eACH;cAEDI,QAAQ,EAAA,oFAAA;YAGZ,CAAC,GAAC;AAEWC,gBAAAA,sBAAsB,qCAAGhB,eAAe,CAAC;YAClDC,EAAAA,IAAI,EAAE,4BAA4B;cAElCc,QAAQ,EAAA,EAAA;YACZ,CAAC;;;;;;;;"}