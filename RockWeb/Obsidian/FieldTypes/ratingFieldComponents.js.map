{"version":3,"file":"ratingFieldComponents.js","sources":["../../../Framework/FieldTypes/ratingField.partial.ts","../../../Framework/FieldTypes/ratingFieldComponents.ts"],"sourcesContent":["ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component, } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { ComparisonType } from \"@Obsidian/Enums/Reporting/comparisonType\";\r\nimport { numericComparisonTypes } from \"@Obsidian/Core/Reporting/comparisonType\";\r\nimport { toNumberOrNull } from \"@Obsidian/Utility/numberUtils\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\nimport { ComparisonValue } from \"@Obsidian/Types/Reporting/comparisonValue\";\r\n\r\nexport const enum ConfigurationValueKey {\r\n    MaxRating = \"max\"\r\n}\r\n\r\nexport type RatingValue = {\r\n    value?: number;\r\n\r\n    maxValue?: number;\r\n};\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./ratingFieldComponents\")).EditComponent;\r\n});\r\n\r\n// The configuration component can be quite large, so load it only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./ratingFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Rating field.\r\n */\r\nexport class RatingFieldType extends FieldTypeBase {\r\n    public override getHtmlValue(value: string, configurationValues: Record<string, string>): string {\r\n        let ratingValue: RatingValue | null;\r\n\r\n        try {\r\n            ratingValue = JSON.parse(value ?? \"\") as RatingValue;\r\n        }\r\n        catch {\r\n            ratingValue = null;\r\n        }\r\n\r\n        const rating = ratingValue?.value ?? 0;\r\n        const maxRating = toNumberOrNull(configurationValues[ConfigurationValueKey.MaxRating]) ?? 5;\r\n        let html = \"\";\r\n\r\n        for (let i = 0; i < rating && i < maxRating; i++) {\r\n            html += `<i class=\"fa fa-rating-selected\"></i>`;\r\n        }\r\n\r\n        for (let i = rating; i < maxRating; i++) {\r\n            html += `<i class=\"fa fa-rating-unselected\"></i>`;\r\n        }\r\n\r\n        return html;\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override getSupportedComparisonTypes(): ComparisonType {\r\n        return numericComparisonTypes;\r\n    }\r\n\r\n    public override doesValueMatchFilter(value: string, filterValue: ComparisonValue, configurationValues: Record<string, string>): boolean {\r\n        let ratingValue: RatingValue | null;\r\n\r\n        try {\r\n            ratingValue = JSON.parse(value) as RatingValue;\r\n        }\r\n        catch {\r\n            ratingValue = null;\r\n        }\r\n\r\n        const rating = ratingValue?.value ?? 0;\r\n\r\n        if (filterValue.comparisonType === ComparisonType.IsBlank) {\r\n            return rating === 0;\r\n        }\r\n        else if (filterValue.comparisonType === ComparisonType.IsNotBlank) {\r\n            return rating !== 0;\r\n        }\r\n        else {\r\n            return super.doesValueMatchFilter(rating.toString(), filterValue, configurationValues);\r\n        }\r\n    }\r\n}\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { defineComponent, ref, watch } from \"vue\";\r\nimport { getFieldEditorProps, getFieldConfigurationProps } from \"./utils\";\r\nimport { toNumberOrNull } from \"@Obsidian/Utility/numberUtils\";\r\nimport Rating from \"@Obsidian/Controls/rating\";\r\nimport NumberBox from \"@Obsidian/Controls/numberBox\";\r\nimport { ConfigurationValueKey, RatingValue } from \"./ratingField.partial\";\r\n\r\nexport const EditComponent = defineComponent({\r\n    name: \"RatingField.Edit\",\r\n\r\n    components: {\r\n        Rating\r\n    },\r\n\r\n    props: getFieldEditorProps(),\r\n\r\n    data() {\r\n        return {\r\n            /** The current rating value. */\r\n            internalValue: 0\r\n        };\r\n    },\r\n\r\n    computed: {\r\n        maxRating(): number {\r\n            const maxRatingConfig = this.configurationValues[ConfigurationValueKey.MaxRating];\r\n\r\n            return toNumberOrNull(maxRatingConfig) || 5;\r\n        },\r\n\r\n    },\r\n\r\n    watch: {\r\n        /**\r\n         * Watch for changes to internalValue and emit the new value out to\r\n         * the consuming component.\r\n         */\r\n        internalValue(): void {\r\n            const ratingValue: RatingValue = {\r\n                value: this.internalValue,\r\n                maxValue: this.maxRating\r\n            };\r\n\r\n            this.$emit(\"update:modelValue\", JSON.stringify(ratingValue));\r\n        },\r\n\r\n        /**\r\n         * Watch for changes to modelValue which indicate the component\r\n         * using us has given us a new value to work with.\r\n         */\r\n        modelValue: {\r\n            immediate: true,\r\n            handler(): void {\r\n                try {\r\n                    const ratingValue = JSON.parse(this.modelValue ?? \"\") as RatingValue;\r\n                    this.internalValue = ratingValue.value ?? 0;\r\n                }\r\n                catch {\r\n                    this.internalValue = 0;\r\n                }\r\n            }\r\n        }\r\n    },\r\n    template: `\r\n<Rating v-model=\"internalValue\" :maxRating=\"maxRating\" />\r\n`\r\n});\r\n\r\nexport const ConfigurationComponent = defineComponent({\r\n    name: \"TextField.Configuration\",\r\n\r\n    components: {\r\n        NumberBox\r\n    },\r\n\r\n    props: getFieldConfigurationProps(),\r\n\r\n    emits: [\r\n        \"update:modelValue\",\r\n        \"updateConfiguration\",\r\n        \"updateConfigurationValue\"\r\n    ],\r\n\r\n    setup(props, { emit }) {\r\n        // Define the properties that will hold the current selections.\r\n        const maxRating = ref<number | null>(null);\r\n\r\n        /**\r\n         * Update the modelValue property if any value of the dictionary has\r\n         * actually changed. This helps prevent unwanted postbacks if the value\r\n         * didn't really change - which can happen if multiple values get updated\r\n         * at the same time.\r\n         *\r\n         * @returns true if a new modelValue was emitted to the parent component.\r\n         */\r\n        const maybeUpdateModelValue = (): boolean => {\r\n            const newValue: Record<string, string> = {};\r\n\r\n            // Construct the new value that will be emitted if it is different\r\n            // than the current value.\r\n            newValue[ConfigurationValueKey.MaxRating] = maxRating.value?.toString() ?? \"\";\r\n\r\n            // Compare the new value and the old value.\r\n            const anyValueChanged = newValue[ConfigurationValueKey.MaxRating] !== (props.modelValue[ConfigurationValueKey.MaxRating] ?? \"\");\r\n\r\n            // If any value changed then emit the new model value.\r\n            if (anyValueChanged) {\r\n                emit(\"update:modelValue\", newValue);\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Emits the updateConfigurationValue if the value has actually changed.\r\n         * \r\n         * @param key The key that was possibly modified.\r\n         * @param value The new value.\r\n         */\r\n        const maybeUpdateConfiguration = (key: string, value: string): void => {\r\n            if (maybeUpdateModelValue()) {\r\n                emit(\"updateConfigurationValue\", key, value);\r\n            }\r\n        };\r\n\r\n        // Watch for changes coming in from the parent component and update our\r\n        // data to match the new information.\r\n        watch(() => [props.modelValue, props.configurationProperties], () => {\r\n            maxRating.value = toNumberOrNull(props.modelValue[ConfigurationValueKey.MaxRating]);\r\n        }, {\r\n            immediate: true\r\n        });\r\n\r\n        // Watch for changes in properties that require new configuration\r\n        // properties to be retrieved from the server.\r\n        // THIS IS JUST A PLACEHOLDER FOR COPYING TO NEW FIELDS THAT MIGHT NEED IT.\r\n        // THIS FIELD DOES NOT NEED THIS\r\n        watch([], () => {\r\n            if (maybeUpdateModelValue()) {\r\n                emit(\"updateConfiguration\");\r\n            }\r\n        });\r\n\r\n        // Watch for changes in properties that only require a local UI update.\r\n        watch(maxRating, () => maybeUpdateConfiguration(ConfigurationValueKey.MaxRating, maxRating.value?.toString() ?? \"\"));\r\n\r\n        return {\r\n            maxRating\r\n        };\r\n    },\r\n\r\n    template: `\r\n<div>\r\n    <NumberBox v-model=\"maxRating\" label=\"Max Rating\" help=\"The number of stars (max rating) that should be displayed\" />\r\n</div>\r\n`\r\n});\r\n"],"names":["ConfigurationValueKey","defineAsyncComponent","_asyncToGenerator","EditComponent","ConfigurationComponent","defineComponent","name","components","Rating","props","getFieldEditorProps","data","internalValue","computed","maxRating","maxRatingConfig","configurationValues","MaxRating","toNumberOrNull","watch","ratingValue","value","maxValue","$emit","JSON","stringify","modelValue","immediate","handler","_this$modelValue","_ratingValue$value","parse","_unused","template","NumberBox","getFieldConfigurationProps","emits","setup","_ref","emit","ref","maybeUpdateModelValue","_maxRating$value$toSt","_maxRating$value","_props$modelValue$Con","newValue","toString","anyValueChanged","maybeUpdateConfiguration","key","configurationProperties","_maxRating$value$toSt2","_maxRating$value2"],"mappings":"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"}