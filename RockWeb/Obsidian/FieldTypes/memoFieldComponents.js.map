{"version":3,"file":"memoFieldComponents.js","sources":["../../../Framework/FieldTypes/memoField.partial.ts","../../../Framework/FieldTypes/memoFieldComponents.ts"],"sourcesContent":["ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { ComparisonType } from \"@Obsidian/Enums/Reporting/comparisonType\";\r\nimport { stringComparisonTypes } from \"@Obsidian/Core/Reporting/comparisonType\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\nimport { getStandardFilterComponent } from \"./utils\";\r\n\r\nexport const enum ConfigurationValueKey {\r\n    NumberOfRows = \"numberofrows\",\r\n    AllowHtml = \"allowhtml\",\r\n    MaxCharacters = \"maxcharacters\",\r\n    ShowCountDown = \"showcountdown\"\r\n}\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./memoFieldComponents\")).EditComponent;\r\n});\r\n\r\n// The filter component can be quite large, so load it only as needed.\r\nconst filterComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./memoFieldComponents\")).FilterComponent;\r\n});\r\n\r\n// The configuration component can be quite large, so load it only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./memoFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Memo field.\r\n */\r\nexport class MemoFieldType extends FieldTypeBase {\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override getSupportedComparisonTypes(): ComparisonType {\r\n        return stringComparisonTypes;\r\n    }\r\n\r\n    public override getFilterComponent(): Component {\r\n        return getStandardFilterComponent(this.getSupportedComparisonTypes(), filterComponent);\r\n    }\r\n}\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { defineComponent, ref, computed, watch } from \"vue\";\r\nimport { getFieldEditorProps, getFieldConfigurationProps } from \"./utils\";\r\nimport TextBox from \"@Obsidian/Controls/textBox\";\r\nimport NumberBox from \"@Obsidian/Controls/numberBox\";\r\nimport CheckBox from \"@Obsidian/Controls/checkBox\";\r\nimport { asBoolean, asBooleanOrNull, asTrueFalseOrNull } from \"@Obsidian/Utility/booleanUtils\";\r\nimport { toNumberOrNull } from \"@Obsidian/Utility/numberUtils\";\r\nimport { toNumber } from \"@Obsidian/Utility/numberUtils\";\r\nimport { ConfigurationValueKey } from \"./memoField.partial\";\r\nimport { useVModelPassthrough } from \"@Obsidian/Utility/component\";\r\n\r\nexport const EditComponent = defineComponent({\r\n    name: \"MemoField.Edit\",\r\n\r\n    components: {\r\n        TextBox\r\n    },\r\n\r\n    props: getFieldEditorProps(),\r\n\r\n    emits: [\r\n        \"update:modelValue\"\r\n    ],\r\n\r\n    setup(props, { emit }) {\r\n        const internalValue = useVModelPassthrough(props, \"modelValue\", emit);\r\n\r\n        const configAttributes = computed((): Record<string, number | boolean> => {\r\n            const attributes: Record<string, number | boolean> = {};\r\n\r\n            const maxCharsConfig = props.configurationValues[ConfigurationValueKey.MaxCharacters];\r\n            const maxCharsValue = toNumber(maxCharsConfig);\r\n\r\n            if (maxCharsValue) {\r\n                attributes.maxLength = maxCharsValue;\r\n            }\r\n\r\n            const showCountDownConfig = props.configurationValues[ConfigurationValueKey.ShowCountDown];\r\n            const showCountDownValue = asBooleanOrNull(showCountDownConfig) || false;\r\n\r\n            if (showCountDownValue) {\r\n                attributes.showCountDown = showCountDownValue;\r\n            }\r\n\r\n            const rowsConfig = props.configurationValues[ConfigurationValueKey.NumberOfRows];\r\n            const rows = toNumber(rowsConfig || null) || 3;\r\n\r\n            if (rows > 0) {\r\n                attributes.rows = rows;\r\n            }\r\n\r\n            return attributes;\r\n        });\r\n\r\n        return {\r\n            internalValue,\r\n            configAttributes\r\n        };\r\n    },\r\n\r\n    template: `\r\n<TextBox v-model=\"internalValue\" v-bind=\"configAttributes\" textMode=\"MultiLine\" />\r\n`\r\n});\r\n\r\nexport const FilterComponent = defineComponent({\r\n    name: \"MemoField.Filter\",\r\n\r\n    components: {\r\n        TextBox\r\n    },\r\n\r\n    props: getFieldEditorProps(),\r\n\r\n    emits: [\r\n        \"update:modelValue\"\r\n    ],\r\n\r\n    setup(props, { emit }) {\r\n        const internalValue = useVModelPassthrough(props, \"modelValue\", emit);\r\n\r\n        return {\r\n            internalValue\r\n        };\r\n    },\r\n\r\n    template: `\r\n<TextBox v-model=\"internalValue\" />\r\n`\r\n});\r\n\r\nexport const ConfigurationComponent = defineComponent({\r\n    name: \"MemoField.Configuration\",\r\n\r\n    components: {\r\n        CheckBox,\r\n        NumberBox\r\n    },\r\n\r\n    props: getFieldConfigurationProps(),\r\n\r\n    emits: [\r\n        \"update:modelValue\",\r\n        \"updateConfiguration\",\r\n        \"updateConfigurationValue\"\r\n    ],\r\n\r\n    setup(props, { emit }) {\r\n        // Define the properties that will hold the current selections.\r\n        const numberOfRows = ref<number | null>(null);\r\n        const allowHtml = ref(false);\r\n        const maxCharacters = ref<number | null>(null);\r\n        const showCountdown = ref(false);\r\n\r\n        /**\r\n         * Update the modelValue property if any value of the dictionary has\r\n         * actually changed. This helps prevent unwanted postbacks if the value\r\n         * didn't really change - which can happen if multiple values get updated\r\n         * at the same time.\r\n         *\r\n         * @returns true if a new modelValue was emitted to the parent component.\r\n         */\r\n        const maybeUpdateModelValue = (): boolean => {\r\n            const newValue: Record<string, string> = {};\r\n\r\n            // Construct the new value that will be emitted if it is different\r\n            // than the current value.\r\n            newValue[ConfigurationValueKey.NumberOfRows] = numberOfRows.value?.toString() ?? \"\";\r\n            newValue[ConfigurationValueKey.AllowHtml] = asTrueFalseOrNull(allowHtml.value) ?? \"False\";\r\n            newValue[ConfigurationValueKey.MaxCharacters] = maxCharacters.value?.toString() ?? \"\";\r\n            newValue[ConfigurationValueKey.ShowCountDown] = asTrueFalseOrNull(showCountdown.value) ?? \"False\";\r\n\r\n            // Compare the new value and the old value.\r\n            const anyValueChanged = newValue[ConfigurationValueKey.NumberOfRows] !== (props.modelValue[ConfigurationValueKey.NumberOfRows] ?? \"\")\r\n                || newValue[ConfigurationValueKey.AllowHtml] !== (props.modelValue[ConfigurationValueKey.AllowHtml] ?? \"False\")\r\n                || newValue[ConfigurationValueKey.MaxCharacters] !== (props.modelValue[ConfigurationValueKey.MaxCharacters] ?? \"\")\r\n                || newValue[ConfigurationValueKey.ShowCountDown] !== (props.modelValue[ConfigurationValueKey.ShowCountDown] ?? \"False\");\r\n\r\n            // If any value changed then emit the new model value.\r\n            if (anyValueChanged) {\r\n                emit(\"update:modelValue\", newValue);\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Emits the updateConfigurationValue if the value has actually changed.\r\n         * \r\n         * @param key The key that was possibly modified.\r\n         * @param value The new value.\r\n         */\r\n        const maybeUpdateConfiguration = (key: string, value: string): void => {\r\n            if (maybeUpdateModelValue()) {\r\n                emit(\"updateConfigurationValue\", key, value);\r\n            }\r\n        };\r\n\r\n        // Watch for changes coming in from the parent component and update our\r\n        // data to match the new information.\r\n        watch(() => [props.modelValue, props.configurationProperties], () => {\r\n            numberOfRows.value = toNumberOrNull(props.modelValue[ConfigurationValueKey.NumberOfRows]);\r\n            allowHtml.value = asBoolean(props.modelValue[ConfigurationValueKey.AllowHtml]);\r\n            maxCharacters.value = toNumberOrNull(props.modelValue[ConfigurationValueKey.MaxCharacters]);\r\n            showCountdown.value = asBoolean(props.modelValue[ConfigurationValueKey.ShowCountDown]);\r\n        }, {\r\n            immediate: true\r\n        });\r\n\r\n        // Watch for changes in properties that require new configuration\r\n        // properties to be retrieved from the server.\r\n        // THIS IS JUST A PLACEHOLDER FOR COPYING TO NEW FIELDS THAT MIGHT NEED IT.\r\n        // THIS FIELD DOES NOT NEED THIS\r\n        watch([], () => {\r\n            if (maybeUpdateModelValue()) {\r\n                emit(\"updateConfiguration\");\r\n            }\r\n        });\r\n\r\n        // Watch for changes in properties that only require a local UI update.\r\n        watch(numberOfRows, val => maybeUpdateConfiguration(ConfigurationValueKey.NumberOfRows, val?.toString() ?? \"\"));\r\n        watch(allowHtml, val => maybeUpdateConfiguration(ConfigurationValueKey.AllowHtml, asTrueFalseOrNull(val) ?? \"False\"));\r\n        watch(maxCharacters, val => maybeUpdateConfiguration(ConfigurationValueKey.MaxCharacters, val?.toString() ?? \"\"));\r\n        watch(showCountdown, val => maybeUpdateConfiguration(ConfigurationValueKey.ShowCountDown, asTrueFalseOrNull(val) ?? \"False\"));\r\n\r\n        return {\r\n            numberOfRows,\r\n            maxCharacters,\r\n            allowHtml,\r\n            showCountdown\r\n        };\r\n    },\r\n\r\n    template: `\r\n<div>\r\n    <NumberBox v-model=\"numberOfRows\" label=\"Rows\" help=\"The number of rows to display (default is 3)\" />\r\n    <CheckBox v-model=\"allowHtml\" label=\"Allow HTML\" text=\"Yes\" help=\"Controls whether server should prevent HTML from being entered in this field or not\" />\r\n    <NumberBox v-model=\"maxCharacters\" label=\"Max Characters\" help=\"The maximum number of characters to allow. Leave this field empty to allow for an unlimited amount of text\" />\r\n    <CheckBox v-model=\"showCountdown\" label=\"Show Character Limit Countdown\" text=\"Yes\" help=\"When set, displays a countdown showing how many characters remain (for the Max Characters setting)\" />\r\n</div>\r\n`\r\n});\r\n"],"names":["ConfigurationValueKey","defineAsyncComponent","_asyncToGenerator","EditComponent","FilterComponent","ConfigurationComponent","defineComponent","name","components","TextBox","props","getFieldEditorProps","emits","setup","_ref","emit","internalValue","useVModelPassthrough","configAttributes","computed","attributes","maxCharsConfig","configurationValues","MaxCharacters","maxCharsValue","toNumber","maxLength","showCountDownConfig","ShowCountDown","showCountDownValue","asBooleanOrNull","showCountDown","rowsConfig","NumberOfRows","rows","template","_ref2","CheckBox","NumberBox","getFieldConfigurationProps","_ref3","numberOfRows","ref","allowHtml","maxCharacters","showCountdown","maybeUpdateModelValue","_numberOfRows$value$t","_numberOfRows$value","_asTrueFalseOrNull","_maxCharacters$value$","_maxCharacters$value","_asTrueFalseOrNull2","_props$modelValue$Con","_props$modelValue$Con2","_props$modelValue$Con3","_props$modelValue$Con4","newValue","value","toString","AllowHtml","asTrueFalseOrNull","anyValueChanged","modelValue","maybeUpdateConfiguration","key","watch","configurationProperties","toNumberOrNull","asBoolean","immediate","val","_val$toString","_asTrueFalseOrNull3","_val$toString2","_asTrueFalseOrNull4"],"mappings":"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"}