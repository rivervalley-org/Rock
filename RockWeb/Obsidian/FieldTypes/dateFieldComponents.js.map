{"version":3,"file":"dateFieldComponents.js","sources":["../../../Framework/FieldTypes/dateField.partial.ts","../../../Framework/FieldTypes/dateFieldComponents.ts"],"sourcesContent":["ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { ComparisonType } from \"@Obsidian/Enums/Reporting/comparisonType\";\r\nimport { dateComparisonTypes } from \"@Obsidian/Core/Reporting/comparisonType\";\r\nimport { ComparisonValue } from \"@Obsidian/Types/Reporting/comparisonValue\";\r\nimport { asBoolean } from \"@Obsidian/Utility/booleanUtils\";\r\nimport { toNumber } from \"@Obsidian/Utility/numberUtils\";\r\nimport { calculateSlidingDateRange, getRangeTypeText, getTimeUnitText, parseSlidingDateRangeString, RangeType, TimeUnit } from \"@Obsidian/Utility/slidingDateRange\";\r\nimport { RockDateTime } from \"@Obsidian/Utility/rockDateTime\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\nimport { getStandardFilterComponent } from \"./utils\";\r\n\r\nexport const enum ConfigurationValueKey {\r\n    Format = \"format\",\r\n    DisplayDiff = \"displayDiff\",\r\n    DisplayCurrentOption = \"displayCurrentOption\",\r\n    DatePickerControlType = \"datePickerControlType\",\r\n    FutureYearCount = \"futureYearCount\"\r\n}\r\n\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./dateFieldComponents\")).EditComponent;\r\n});\r\n\r\n// The configuration component can be quite large, so load it only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./dateFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n// Load the filter component as needed.\r\nconst filterComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./dateFieldComponents\")).FilterComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Date field.\r\n */\r\nexport class DateFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, configurationValues: Record<string, string>): string {\r\n        if (this.isCurrentDateValue(value)) {\r\n            return this.getCurrentDateText(value);\r\n        }\r\n        else if (value) {\r\n            const dateValue = RockDateTime.parseISO(value);\r\n            const dateFormatTemplate = configurationValues[ConfigurationValueKey.Format] || \"MM/dd/yyy\";\r\n\r\n            if (dateValue !== null) {\r\n                let textValue = dateValue.toASPString(dateFormatTemplate);\r\n\r\n                const displayDiff = asBoolean(configurationValues[ConfigurationValueKey.DisplayDiff]);\r\n\r\n                if (displayDiff === true) {\r\n                    textValue = `${textValue} ${dateValue.toElapsedString()}`;\r\n                }\r\n\r\n                return textValue;\r\n            }\r\n            else {\r\n                return \"\";\r\n            }\r\n        }\r\n        else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override getSupportedComparisonTypes(): ComparisonType {\r\n        return dateComparisonTypes;\r\n    }\r\n\r\n    public override getFilterComponent(): Component {\r\n        return getStandardFilterComponent(this.getSupportedComparisonTypes(), filterComponent, {\r\n            updateComparisonTypeNames: (options) => {\r\n                options.filter(o => o.value === ComparisonType.Between.toString())\r\n                    .forEach(o => o.text = \"Range\");\r\n            }\r\n        });\r\n    }\r\n\r\n    public override getFilterValueDescription(value: ComparisonValue, configurationValues: Record<string, string>): string {\r\n        if (value.comparisonType === ComparisonType.Between) {\r\n            return `During '${this.getFilterValueText(value, configurationValues)}'`;\r\n        }\r\n\r\n        return super.getFilterValueDescription(value, configurationValues);\r\n    }\r\n\r\n    public override getFilterValueText(value: ComparisonValue, _configurationValues: Record<string, string>): string {\r\n        const filterValues = value.value.split(\"\\t\");\r\n\r\n        // If the comparison type is Between, then we need to use the second\r\n        // value that was specified.\r\n        if (value.comparisonType === ComparisonType.Between && filterValues.length > 1) {\r\n            const range = parseSlidingDateRangeString(filterValues[1]);\r\n\r\n            // If we couldn't parse the range information then just return\r\n            // the raw value, which should be an empty string, but would give\r\n            // some indication that something is wrong if it isn't.\r\n            if (range === null) {\r\n                return filterValues[1];\r\n            }\r\n\r\n            // Get the calculated values from the SlidingDateRange.\r\n            const rangeTypeText = getRangeTypeText(range.rangeType);\r\n            const timeUnitValue = range.timeValue ?? 1;\r\n            const timeUnitText = getTimeUnitText(range.timeUnit ?? TimeUnit.Hour) + (timeUnitValue !== 1 ? \"s\" : \"\");\r\n\r\n            // Format the text depending on the range type.\r\n            if (range.rangeType === RangeType.Current) {\r\n                return `${rangeTypeText} ${timeUnitText}`;\r\n            }\r\n            else if (([RangeType.Last, RangeType.Previous, RangeType.Next, RangeType.Upcoming] as number[]).includes(range.rangeType)) {\r\n                return `${rangeTypeText} ${timeUnitValue} ${timeUnitText}`;\r\n            }\r\n            else {\r\n                if (range.lowerDate && range.upperDate) {\r\n                    return `${range.lowerDate} to ${range.upperDate}`;\r\n                }\r\n                else if (range.lowerDate) {\r\n                    return `from ${range.lowerDate}`;\r\n                }\r\n                else if (range.upperDate) {\r\n                    return `through ${range.upperDate}`;\r\n                }\r\n                else {\r\n                    return \"\";\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // If it's not a between, check if it's a \"Current Date\" value.\r\n            if (this.isCurrentDateValue(filterValues[0])) {\r\n                return `'${this.getCurrentDateText(filterValues[0])}'`;\r\n            }\r\n\r\n            // Nope, just use the date value specified.\r\n            return filterValues[0] ? `'${filterValues[0]}'` : \"\";\r\n        }\r\n    }\r\n\r\n    public override doesValueMatchFilter(value: string, filterValue: ComparisonValue, configurationValues: Record<string, string>): boolean {\r\n        if (!filterValue.comparisonType) {\r\n            return false;\r\n        }\r\n\r\n        const filterValueValues = filterValue.value.split(\"\\t\");\r\n\r\n        // Try to parse the value as a date. If it can't be parsed then check\r\n        // it against the Is Blank and Is Not Blank comparison types.\r\n        const valueDate = RockDateTime.parseISO(value ?? \"\");\r\n\r\n        if (filterValue.comparisonType === ComparisonType.IsBlank) {\r\n            return valueDate === null;\r\n        }\r\n        else if (filterValue.comparisonType === ComparisonType.IsNotBlank) {\r\n            return valueDate !== null;\r\n        }\r\n        else if (valueDate === null) {\r\n            return false;\r\n        }\r\n\r\n        if (filterValue.comparisonType === ComparisonType.Between && filterValueValues.length > 1) {\r\n            const slidingRange = parseSlidingDateRangeString(filterValueValues[1]);\r\n\r\n            if (!slidingRange) {\r\n                return false;\r\n            }\r\n\r\n            const dateRange = calculateSlidingDateRange(slidingRange);\r\n\r\n            // check if the date range was not valid or the value is before the\r\n            // start date and time.\r\n            if (!dateRange.start || valueDate.toMilliseconds() < dateRange.start.toMilliseconds()) {\r\n                return false;\r\n            }\r\n\r\n            if (dateRange.end && valueDate.toMilliseconds() >= dateRange.end.toMilliseconds()) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        // Try to parse the filter date. If it can't be parsed then no match.\r\n        const filterDate = this.getRelativeOrAbsoluteDate(filterValueValues[0]);\r\n\r\n        if (filterDate === null) {\r\n            return false;\r\n        }\r\n\r\n        // Convert the two dates into a format that we can do numeric comparison on.\r\n        const newFilterValue: ComparisonValue = {\r\n            comparisonType: filterValue.comparisonType,\r\n            value: filterDate.toASPString(\"yyyyMMdd\")\r\n        };\r\n\r\n        return super.doesValueMatchFilter(valueDate.toASPString(\"yyyyMMdd\"), newFilterValue, configurationValues);\r\n    }\r\n\r\n    /**\r\n     * Determines if the value is a \"current date\" value, which would then\r\n     * specify the number of days +/- to adjust.\r\n     *\r\n     * @param value The value to be checked.\r\n     *\r\n     * @returns true if the value represents a \"current date\" value; otherwise false.\r\n     */\r\n    private isCurrentDateValue(value: string): boolean {\r\n        return value.indexOf(\"CURRENT\") === 0;\r\n    }\r\n\r\n    /**\r\n     * Get the text that describes the \"current date\" value specified.\r\n     *\r\n     * @param value The value that contains the \"current date\" value.\r\n     *\r\n     * @returns A human friendly description of the \"current date\" value.\r\n     */\r\n    private getCurrentDateText(value: string): string {\r\n        const parts = (value ?? \"\").split(\":\");\r\n        const diff = parts.length === 2 ? toNumber(parts[1]) : 0;\r\n\r\n        if (diff === 1) {\r\n            return \"Current Date plus 1 day\";\r\n        }\r\n        else if (diff > 0) {\r\n            return `Current Date plus ${diff} days`;\r\n        }\r\n        else if (diff === -1) {\r\n            return \"Current Date minus 1 day\";\r\n        }\r\n        else if (diff < 0) {\r\n            return `Current Date minus ${Math.abs(diff)} days`;\r\n        }\r\n        else {\r\n            return \"Current Date\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the relatative date if available otherwise the absolute date.\r\n     *\r\n     * @param value The string value to be parsed as relative or absolute.\r\n     *\r\n     * @returns A new RockDateTime instance that represents the value or null if it couldn't be determined.\r\n     */\r\n    private getRelativeOrAbsoluteDate(value: string): RockDateTime | null {\r\n        if (!this.isCurrentDateValue(value)) {\r\n            return RockDateTime.parseISO(value);\r\n        }\r\n\r\n        const today = RockDateTime.now().date;\r\n        const valueParts = value.split(\":\");\r\n\r\n        if (valueParts.length > 1) {\r\n            return today.addDays(toNumber(valueParts[1]));\r\n        }\r\n\r\n        return today;\r\n    }\r\n}\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { computed, defineComponent, ref, watch } from \"vue\";\r\nimport { getFieldEditorProps, getFieldConfigurationProps } from \"./utils\";\r\nimport { asBoolean, asTrueFalseOrNull } from \"@Obsidian/Utility/booleanUtils\";\r\nimport { toNumberOrNull } from \"@Obsidian/Utility/numberUtils\";\r\nimport { toNumber } from \"@Obsidian/Utility/numberUtils\";\r\nimport { ConfigurationValueKey } from \"./dateField.partial\";\r\nimport { RockDateTime } from \"@Obsidian/Utility/rockDateTime\";\r\nimport SlidingDateRangePicker from \"@Obsidian/Controls/slidingDateRangePicker.obs\";\r\nimport DatePicker from \"@Obsidian/Controls/datePicker.obs\";\r\nimport DatePartsPicker, { getDefaultDatePartsPickerModel } from \"@Obsidian/Controls/datePartsPicker\";\r\nimport DropDownList from \"@Obsidian/Controls/dropDownList\";\r\nimport TextBox from \"@Obsidian/Controls/textBox\";\r\nimport NumberBox from \"@Obsidian/Controls/numberBox\";\r\nimport CheckBox from \"@Obsidian/Controls/checkBox\";\r\nimport { PropType } from \"vue\";\r\nimport { ComparisonType } from \"@Obsidian/Enums/Reporting/comparisonType\";\r\nimport { parseSlidingDateRangeString, slidingDateRangeToString } from \"@Obsidian/Utility/slidingDateRange\";\r\nimport { updateRefValue } from \"@Obsidian/Utility/component\";\r\n\r\nexport const EditComponent = defineComponent({\r\n    name: \"DateField.Edit\",\r\n\r\n    components: {\r\n        DatePicker,\r\n        DatePartsPicker\r\n    },\r\n\r\n    props: getFieldEditorProps(),\r\n\r\n    data() {\r\n        return {\r\n            internalValue: \"\",\r\n            internalDateParts: getDefaultDatePartsPickerModel(),\r\n            formattedString: \"\"\r\n        };\r\n    },\r\n\r\n    setup() {\r\n        return {\r\n        };\r\n    },\r\n\r\n    computed: {\r\n        datePartsAsDate(): RockDateTime | null {\r\n            if (!this.internalDateParts?.day || !this.internalDateParts.month || !this.internalDateParts.year) {\r\n                return null;\r\n            }\r\n\r\n            return RockDateTime.fromParts(this.internalDateParts.year, this.internalDateParts.month, this.internalDateParts.day) || null;\r\n        },\r\n\r\n        isDatePartsPicker(): boolean {\r\n            const config = this.configurationValues[ConfigurationValueKey.DatePickerControlType];\r\n            return config?.toLowerCase() === \"date parts picker\";\r\n        },\r\n\r\n        configAttributes(): Record<string, number | boolean> {\r\n            const attributes: Record<string, number | boolean> = {};\r\n\r\n            const displayCurrentConfig = this.configurationValues[ConfigurationValueKey.DisplayCurrentOption];\r\n            const displayCurrent = asBoolean(displayCurrentConfig);\r\n            attributes.displayCurrentOption = displayCurrent;\r\n            attributes.isCurrentDateOffset = displayCurrent;\r\n\r\n            const futureYearConfig = this.configurationValues[ConfigurationValueKey.FutureYearCount];\r\n            const futureYears = toNumber(futureYearConfig);\r\n\r\n            if (futureYears > 0) {\r\n                attributes.futureYearCount = futureYears;\r\n            }\r\n\r\n            return attributes;\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        syncModelValue(): void {\r\n            this.internalValue = this.modelValue ?? \"\";\r\n            const dateParts = /^(\\d{4})-(\\d{1,2})-(\\d{1,2})/.exec(this.modelValue ?? \"\");\r\n\r\n            if (dateParts != null) {\r\n                this.internalDateParts.year = toNumber(dateParts[1]);\r\n                this.internalDateParts.month = toNumber(dateParts[2]);\r\n                this.internalDateParts.day = toNumber(dateParts[3]);\r\n            }\r\n            else {\r\n                this.internalDateParts.year = 0;\r\n                this.internalDateParts.month = 0;\r\n                this.internalDateParts.day = 0;\r\n            }\r\n        }\r\n    },\r\n\r\n    watch: {\r\n        datePartsAsDate(): void {\r\n            if (this.isDatePartsPicker) {\r\n                const d1 = this.datePartsAsDate;\r\n                const d2 = RockDateTime.parseISO(this.modelValue ?? \"\");\r\n\r\n                if (d1 === null || d2 === null || !d1.isEqualTo(d2)) {\r\n                    this.$emit(\"update:modelValue\", d1 !== null ? d1.toISOString().split(\"T\")[0] : \"\");\r\n                }\r\n            }\r\n        },\r\n\r\n        internalValue(): void {\r\n            if (!this.isDatePartsPicker) {\r\n                const d1 = RockDateTime.parseISO(this.internalValue);\r\n                const d2 = RockDateTime.parseISO(this.modelValue ?? \"\");\r\n\r\n                if (d1 === null || d2 === null || !d1.isEqualTo(d2)) {\r\n                    this.$emit(\"update:modelValue\", this.internalValue);\r\n                }\r\n            }\r\n        },\r\n\r\n        modelValue: {\r\n            immediate: true,\r\n            async handler(): Promise<void> {\r\n                await this.syncModelValue();\r\n            }\r\n        }\r\n    },\r\n\r\n    template: `\r\n<DatePartsPicker v-if=\"isDatePartsPicker\" v-model=\"internalDateParts\" v-bind=\"configAttributes\" />\r\n<DatePicker v-else v-model=\"internalValue\" v-bind=\"configAttributes\" />\r\n`\r\n});\r\n\r\nexport const FilterComponent = defineComponent({\r\n    name: \"DateField.Filter\",\r\n\r\n    components: {\r\n        EditComponent,\r\n        SlidingDateRangePicker\r\n    },\r\n\r\n    props: {\r\n        ...getFieldEditorProps(),\r\n        comparisonType: {\r\n            type: Number as PropType<ComparisonType | null>,\r\n            required: true\r\n        }\r\n    },\r\n\r\n    emits: [\r\n        \"update:modelValue\"\r\n    ],\r\n\r\n    setup(props, { emit }) {\r\n        // The internal values that make up the model value.\r\n        const internalValue = ref(props.modelValue);\r\n        const internalValueSegments = internalValue.value.split(\"\\t\");\r\n        const dateValue = ref(internalValueSegments[0]);\r\n        const rangeValue = ref(parseSlidingDateRangeString(internalValueSegments.length > 1 ? internalValueSegments[1] : \"\"));\r\n\r\n        // Get the configuration values and force the DisplayCurrentOption to True.\r\n        const configurationValues = ref({ ...props.configurationValues });\r\n        configurationValues.value[ConfigurationValueKey.DisplayCurrentOption] = \"True\";\r\n\r\n        /** True if the comparison type is of type Between. */\r\n        const isComparisonTypeBetween = computed((): boolean => props.comparisonType === ComparisonType.Between);\r\n\r\n        // Watch for changes in the configuration values and update our own list.\r\n        watch(() => props.configurationValues, () => {\r\n            configurationValues.value = { ...props.configurationValues };\r\n            configurationValues.value[ConfigurationValueKey.DisplayCurrentOption] = \"True\";\r\n        });\r\n\r\n        // Watch for changes from the standard DatePicker.\r\n        watch(dateValue, () => {\r\n            if (props.comparisonType !== ComparisonType.Between) {\r\n                internalValue.value = `${dateValue.value}\\t`;\r\n            }\r\n        });\r\n\r\n        // Watch for changes from the SlidingDateRangePicker.\r\n        watch(rangeValue, () => {\r\n            if (props.comparisonType === ComparisonType.Between) {\r\n                internalValue.value = `\\t${rangeValue.value ? slidingDateRangeToString(rangeValue.value) : \"\"}`;\r\n            }\r\n        });\r\n\r\n        // Watch for changes to the model value and update our internal values.\r\n        watch(() => props.modelValue, () => {\r\n            internalValue.value = props.modelValue;\r\n            const segments = internalValue.value.split(\"\\t\");\r\n            dateValue.value = segments[0];\r\n            updateRefValue(rangeValue, parseSlidingDateRangeString(segments.length > 1 ? segments[1] : \"\"));\r\n        });\r\n\r\n        // Watch for changes to our internal value and update the model value.\r\n        watch(internalValue, () => {\r\n            emit(\"update:modelValue\", internalValue.value);\r\n        });\r\n\r\n        return {\r\n            configurationValues,\r\n            dateValue,\r\n            isComparisonTypeBetween,\r\n            rangeValue\r\n        };\r\n    },\r\n\r\n    template: `\r\n<SlidingDateRangePicker v-if=\"isComparisonTypeBetween\" v-model=\"rangeValue\" />\r\n<EditComponent v-else v-model=\"dateValue\" :configurationValues=\"configurationValues\" />\r\n`\r\n});\r\n\r\nconst defaults = {\r\n    [ConfigurationValueKey.Format]: \"\",\r\n    [ConfigurationValueKey.DisplayDiff]: \"False\",\r\n    [ConfigurationValueKey.DisplayCurrentOption]: \"False\",\r\n    [ConfigurationValueKey.DatePickerControlType]: \"Date Picker\",\r\n    [ConfigurationValueKey.FutureYearCount]: \"\"\r\n};\r\n\r\nexport const ConfigurationComponent = defineComponent({\r\n    name: \"DateField.Configuration\",\r\n\r\n    components: {\r\n        TextBox,\r\n        CheckBox,\r\n        DropDownList,\r\n        NumberBox\r\n    },\r\n\r\n    props: getFieldConfigurationProps(),\r\n\r\n    emits: [\r\n        \"update:modelValue\",\r\n        \"updateConfiguration\",\r\n        \"updateConfigurationValue\"\r\n    ],\r\n\r\n    setup(props, { emit }) {\r\n        // Define the properties that will hold the current selections.\r\n        const format = ref(\"\");\r\n        const displayDiff = ref(false);\r\n        const displayCurrentOption = ref(false);\r\n        const pickerControlType = ref(\"Date Picker\");\r\n        const futureYears = ref<number | null>(null);\r\n\r\n        const pickerControlTypeOptions = [\r\n            { text: \"Date Picker\", value: \"Date Picker\" },\r\n            { text: \"Date Parts Picker\", value: \"Date Parts Picker\" }\r\n        ];\r\n\r\n        /**\r\n         * Update the modelValue property if any value of the dictionary has\r\n         * actually changed. This helps prevent unwanted postbacks if the value\r\n         * didn't really change - which can happen if multiple values get updated\r\n         * at the same time.\r\n         *\r\n         * @returns true if a new modelValue was emitted to the parent component.\r\n         */\r\n        const maybeUpdateModelValue = (): boolean => {\r\n            const newValue: Record<string, string> = {};\r\n\r\n            // Construct the new value that will be emitted if it is different\r\n            // than the current value.\r\n            newValue[ConfigurationValueKey.Format] = format.value ?? defaults[ConfigurationValueKey.Format];\r\n            newValue[ConfigurationValueKey.DisplayDiff] = asTrueFalseOrNull(displayDiff.value) ?? defaults[ConfigurationValueKey.DisplayDiff];\r\n            newValue[ConfigurationValueKey.DisplayCurrentOption] = asTrueFalseOrNull(displayCurrentOption.value) ?? defaults[ConfigurationValueKey.DisplayCurrentOption];\r\n            newValue[ConfigurationValueKey.DatePickerControlType] = pickerControlType.value ?? defaults[ConfigurationValueKey.DatePickerControlType];\r\n            newValue[ConfigurationValueKey.FutureYearCount] = futureYears.value?.toString() ?? defaults[ConfigurationValueKey.FutureYearCount];\r\n\r\n            // Compare the new value and the old value.\r\n            const anyValueChanged = newValue[ConfigurationValueKey.Format] !== (props.modelValue[ConfigurationValueKey.Format] ?? defaults[ConfigurationValueKey.Format])\r\n                || newValue[ConfigurationValueKey.DisplayDiff] !== (props.modelValue[ConfigurationValueKey.DisplayDiff] ?? defaults[ConfigurationValueKey.DisplayDiff])\r\n                || newValue[ConfigurationValueKey.DisplayCurrentOption] !== (props.modelValue[ConfigurationValueKey.DisplayCurrentOption] ?? defaults[ConfigurationValueKey.DisplayCurrentOption])\r\n                || newValue[ConfigurationValueKey.DatePickerControlType] !== (props.modelValue[ConfigurationValueKey.DatePickerControlType] ?? defaults[ConfigurationValueKey.DatePickerControlType])\r\n                || newValue[ConfigurationValueKey.FutureYearCount] !== (props.modelValue[ConfigurationValueKey.FutureYearCount] ?? defaults[ConfigurationValueKey.FutureYearCount]);\r\n\r\n            // If any value changed then emit the new model value.\r\n            if (anyValueChanged) {\r\n                emit(\"update:modelValue\", newValue);\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Emits the updateConfigurationValue if the value has actually changed.\r\n         *\r\n         * @param key The key that was possibly modified.\r\n         * @param value The new value.\r\n         */\r\n        const maybeUpdateConfiguration = (key: string, value: string): void => {\r\n            if (maybeUpdateModelValue()) {\r\n                emit(\"updateConfigurationValue\", key, value);\r\n            }\r\n        };\r\n\r\n        // Watch for changes coming in from the parent component and update our\r\n        // data to match the new information.\r\n        watch(() => [props.modelValue, props.configurationProperties], () => {\r\n            format.value = props.modelValue[ConfigurationValueKey.Format] ?? \"\";\r\n            displayDiff.value = asBoolean(props.modelValue[ConfigurationValueKey.DisplayDiff]);\r\n            displayCurrentOption.value = asBoolean(props.modelValue[ConfigurationValueKey.DisplayCurrentOption]);\r\n            pickerControlType.value = props.modelValue[ConfigurationValueKey.DatePickerControlType] ?? \"Date Picker\";\r\n            futureYears.value = toNumberOrNull(props.modelValue[ConfigurationValueKey.FutureYearCount]);\r\n        }, {\r\n            immediate: true\r\n        });\r\n\r\n        // Watch for changes in properties that require new configuration\r\n        // properties to be retrieved from the server.\r\n        // THIS IS JUST A PLACEHOLDER FOR COPYING TO NEW FIELDS THAT MIGHT NEED IT.\r\n        // THIS FIELD DOES NOT NEED THIS\r\n        watch([], () => {\r\n            if (maybeUpdateModelValue()) {\r\n                emit(\"updateConfiguration\");\r\n            }\r\n        });\r\n\r\n        // Watch for changes in properties that only require a local UI update.\r\n        watch(format, (val) => maybeUpdateConfiguration(ConfigurationValueKey.Format, val ?? defaults[ConfigurationValueKey.Format]));\r\n        watch(displayDiff, (val) => maybeUpdateConfiguration(ConfigurationValueKey.DisplayDiff, asTrueFalseOrNull(val) ?? defaults[ConfigurationValueKey.DisplayDiff]));\r\n        watch(displayCurrentOption, (val) => maybeUpdateConfiguration(ConfigurationValueKey.DisplayCurrentOption, asTrueFalseOrNull(val) ?? defaults[ConfigurationValueKey.DisplayCurrentOption]));\r\n        watch(pickerControlType, (val) => maybeUpdateConfiguration(ConfigurationValueKey.DatePickerControlType, val || defaults[ConfigurationValueKey.DatePickerControlType]));\r\n        watch(futureYears, (val) => maybeUpdateConfiguration(ConfigurationValueKey.FutureYearCount, val?.toString() ?? defaults[ConfigurationValueKey.FutureYearCount]));\r\n\r\n        return {\r\n            format,\r\n            displayDiff,\r\n            displayCurrentOption,\r\n            pickerControlType,\r\n            futureYears,\r\n            pickerControlTypeOptions\r\n        };\r\n    },\r\n\r\n    template: `\r\n<div>\r\n    <TextBox v-model=\"format\" label=\"Date Format\" help=\"The format string to use for date (default is system short date)\" />\r\n    <CheckBox v-model=\"displayDiff\" label=\"Display as Elapsed Time\" text=\"Yes\" help=\"Display value as an elapsed time\" />\r\n    <DropDownList v-model=\"pickerControlType\" :items=\"pickerControlTypeOptions\" :show-blank-item=\"false\" label=\"Control Type\" help=\"Select 'Date Picker' to use a Date Picker, or 'Date Parts Picker' to select Month, Day, and Year individually\" />\r\n    <CheckBox v-if=\"pickerControlType == 'Date Picker'\" v-model=\"displayCurrentOption\" label=\"Display Current Option\" text=\"Yes\" help=\"Include option to specify value as the current date\" />\r\n    <NumberBox v-else v-model=\"futureYears\"  label=\"Future Years\" help=\"The number of years  in the future to include in the year picker. Set to 0 to limit to current year. Leaving it blank will default to 50.\" />\r\n</div>\r\n`\r\n});\r\n"],"names":["ConfigurationValueKey","defineAsyncComponent","_asyncToGenerator","EditComponent","ConfigurationComponent","FilterComponent","defineComponent","name","components","DatePicker","DatePartsPicker","props","getFieldEditorProps","data","internalValue","internalDateParts","getDefaultDatePartsPickerModel","formattedString","setup","computed","datePartsAsDate","_this$internalDatePar","day","month","year","RockDateTime","fromParts","isDatePartsPicker","config","configurationValues","DatePickerControlType","toLowerCase","configAttributes","attributes","displayCurrentConfig","DisplayCurrentOption","displayCurrent","asBoolean","displayCurrentOption","isCurrentDateOffset","futureYearConfig","FutureYearCount","futureYears","toNumber","futureYearCount","methods","syncModelValue","_this$modelValue","_this$modelValue2","modelValue","dateParts","exec","watch","_this$modelValue3","d1","d2","parseISO","isEqualTo","$emit","toISOString","split","_this$modelValue4","immediate","handler","_this","template","SlidingDateRangePicker","_objectSpread","comparisonType","type","Number","required","emits","_ref","emit","ref","internalValueSegments","value","dateValue","rangeValue","parseSlidingDateRangeString","length","isComparisonTypeBetween","ComparisonType","Between","concat","slidingDateRangeToString","segments","updateRefValue","defaults","Format","DisplayDiff","TextBox","CheckBox","DropDownList","NumberBox","getFieldConfigurationProps","_ref2","format","displayDiff","pickerControlType","pickerControlTypeOptions","text","maybeUpdateModelValue","_format$value","_asTrueFalseOrNull","_asTrueFalseOrNull2","_pickerControlType$va","_futureYears$value$to","_futureYears$value","_props$modelValue$Con","_props$modelValue$Con2","_props$modelValue$Con3","_props$modelValue$Con4","_props$modelValue$Con5","newValue","asTrueFalseOrNull","toString","anyValueChanged","maybeUpdateConfiguration","key","configurationProperties","_props$modelValue$Con6","_props$modelValue$Con7","toNumberOrNull","val","_asTrueFalseOrNull3","_asTrueFalseOrNull4","_val$toString"],"mappings":"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"}