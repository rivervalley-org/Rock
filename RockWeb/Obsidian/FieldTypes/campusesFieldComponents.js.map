{"version":3,"file":"campusesFieldComponents.js","sources":["../../../Framework/FieldTypes/campusesField.partial.ts","../../../Framework/FieldTypes/campusesFieldComponents.ts"],"sourcesContent":["// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\nimport { ComparisonValue } from \"@Obsidian/Types/Reporting/comparisonValue\";\r\nimport { ComparisonType } from \"@Obsidian/Enums/Reporting/comparisonType\";\r\n\r\nexport const enum ConfigurationValueKey {\r\n    Values = \"values\",\r\n    EnhancedSelection = \"enhancedselection\",\r\n    RepeatColumns = \"repeatColumns\",\r\n    IncludeInactive = \"includeInactive\",\r\n    FilterCampusTypes = \"filterCampusTypes\",\r\n    FilterCampusStatus = \"filterCampusStatus\",\r\n    SelectableCampuses = \"selectableCampuses\"\r\n}\r\n\r\nexport const enum ConfigurationPropertyKey {\r\n    Campuses = \"campuses\",\r\n    CampusTypes = \"campusTypes\",\r\n    CampusStatuses = \"campusStatuses\"\r\n}\r\n\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./campusesFieldComponents\")).EditComponent;\r\n});\r\n\r\n// Load the configuration component only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./campusesFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Campuses field.\r\n */\r\nexport class CampusesFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, configurationValues: Record<string, string>): string {\r\n        if (value === undefined || value === null || value === \"\") {\r\n            return \"\";\r\n        }\r\n\r\n        try {\r\n            const values = JSON.parse(configurationValues[ConfigurationValueKey.Values] ?? \"[]\") as ListItemBag[];\r\n            const userValues = value.split(\",\");\r\n            const selectedValues = values.filter(o => userValues.includes(o.value ?? \"\"));\r\n\r\n            return selectedValues.map(o => o.text).join(\", \");\r\n        }\r\n        catch {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override doesValueMatchFilter(value: string, filterValue: ComparisonValue, _configurationValues: Record<string, string>): boolean {\r\n        const selectedValues = (filterValue.value ?? \"\").split(\",\").filter(v => v !== \"\").map(v => v.toLowerCase());\r\n        let comparisonType = filterValue.comparisonType;\r\n\r\n        if (comparisonType === ComparisonType.EqualTo) {\r\n            // Treat EqualTo as if it were Contains.\r\n            comparisonType = ComparisonType.Contains;\r\n        }\r\n        else if (comparisonType === ComparisonType.NotEqualTo) {\r\n            // Treat NotEqualTo as if it were DoesNotContain.\r\n            comparisonType = ComparisonType.DoesNotContain;\r\n        }\r\n\r\n        if (comparisonType === ComparisonType.IsBlank) {\r\n            return value === \"\";\r\n        }\r\n        else if (comparisonType === ComparisonType.IsNotBlank) {\r\n            return value !== \"\";\r\n        }\r\n\r\n        if (selectedValues.length > 0) {\r\n            let matched = selectedValues.includes(value.toLowerCase());\r\n\r\n            if (comparisonType === ComparisonType.DoesNotContain) {\r\n                matched = !matched;\r\n            }\r\n\r\n            return matched;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { Guid } from \"@Obsidian/Types\";\r\nimport { computed, defineComponent, ref, SetupContext, watch } from \"vue\";\r\nimport { getFieldConfigurationProps, getFieldEditorProps } from \"./utils\";\r\nimport CheckBox from \"@Obsidian/Controls/checkBox\";\r\nimport CheckBoxList from \"@Obsidian/Controls/checkBoxList\";\r\nimport NumberBox from \"@Obsidian/Controls/numberBox\";\r\nimport DropDownList from \"@Obsidian/Controls/dropDownList\";\r\nimport { toNumberOrNull } from \"@Obsidian/Utility/numberUtils\";\r\nimport { ConfigurationPropertyKey, ConfigurationValueKey } from \"./campusesField.partial\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport { areEqual } from \"@Obsidian/Utility/guid\";\r\nimport { asBoolean, asTrueFalseOrNull } from \"@Obsidian/Utility/booleanUtils\";\r\nimport { updateRefValue } from \"@Obsidian/Utility/component\";\r\n\r\ntype CampusItem = {\r\n    guid: Guid,\r\n    name: string,\r\n    type?: Guid | null,\r\n    status?: Guid | null,\r\n    isActive: boolean\r\n};\r\n\r\nexport const EditComponent = defineComponent({\r\n    name: \"CampusesField.Edit\",\r\n\r\n    components: {\r\n        CheckBoxList,\r\n        DropDownList\r\n    },\r\n\r\n    props: getFieldEditorProps(),\r\n\r\n    setup(props, context: SetupContext) {\r\n        const internalValue = ref(props.modelValue ? props.modelValue.split(\",\") : []);\r\n\r\n        /** The options to choose from in the drop down list */\r\n        const options = computed((): ListItemBag[] => {\r\n            try {\r\n                return JSON.parse(props.configurationValues[ConfigurationValueKey.Values] ?? \"[]\") as ListItemBag[];\r\n            }\r\n            catch {\r\n                return [];\r\n            }\r\n        });\r\n\r\n        const enhance = computed(() => {\r\n            return props.configurationValues[ConfigurationValueKey.EnhancedSelection] == \"True\";\r\n        });\r\n\r\n        const repeatColumns = computed(() => {\r\n            const repeatColumnsConfig = props.configurationValues[ConfigurationValueKey.RepeatColumns];\r\n\r\n            return toNumberOrNull(repeatColumnsConfig) ?? 4;\r\n        });\r\n\r\n        watch(() => props.modelValue, () => {\r\n            updateRefValue(internalValue, props.modelValue ? props.modelValue.split(\",\") : []);\r\n        });\r\n\r\n        watch(internalValue, () => {\r\n            context.emit(\"update:modelValue\", internalValue.value.join(\",\"));\r\n        });\r\n\r\n        return {\r\n            internalValue,\r\n            options,\r\n            repeatColumns,\r\n            enhance\r\n        };\r\n    },\r\n\r\n    template: `\r\n<DropDownList v-if=\"enhance\" v-model=\"internalValue\" enhanceForLongLists multiple :items=\"options\" />\r\n<CheckBoxList v-else v-model=\"internalValue\" horizontal :items=\"options\" :repeatColumns=\"repeatColumns\" />\r\n`\r\n});\r\n\r\nexport const ConfigurationComponent = defineComponent({\r\n    name: \"CampusesField.Configuration\",\r\n\r\n    components: {\r\n        CheckBox,\r\n        CheckBoxList,\r\n        NumberBox\r\n    },\r\n\r\n    props: getFieldConfigurationProps(),\r\n\r\n    emit: {\r\n        \"update:modelValue\": (_v: Record<string, string>) => true,\r\n        \"updateConfigurationValue\": (_k: string, _v: string) => true,\r\n        \"updateConfiguration\": () => true\r\n    },\r\n\r\n    setup(props, { emit }) {\r\n        // Define the properties that will hold the current selections.\r\n        const enhancedSelection = ref(false);\r\n        const numberOfColumns = ref<number | null>(null);\r\n        const includeInactive = ref(false);\r\n        const filterCampusTypes = ref<string[]>([]);\r\n        const filterCampusStatus = ref<string[]>([]);\r\n        const selectableCampuses = ref<string[]>([]);\r\n\r\n        /** The campus types that are available to be selected from. */\r\n        const campusTypeOptions = ref<ListItemBag[]>([]);\r\n\r\n        /** The campus statuses that are available to be selected from. */\r\n        const campusStatusOptions = ref<ListItemBag[]>([]);\r\n\r\n        /** The campuses that are available to be selected from. */\r\n        const allCampusItems = ref<CampusItem[]>([]);\r\n\r\n        const allCampusOptions = computed((): ListItemBag[] => {\r\n            return allCampusItems.value.map((c): ListItemBag => {\r\n                return {\r\n                    value: c.guid,\r\n                    text: c.name\r\n                };\r\n            });\r\n        });\r\n\r\n        /**\r\n         * The campuses that are available to be selected from, these values\r\n         * get emitted as the options the default value control can pick from.\r\n         */\r\n        const campusOptions = computed((): ListItemBag[] => {\r\n            return allCampusItems.value.filter(c => {\r\n                if (!includeInactive.value && !c.isActive) {\r\n                    return false;\r\n                }\r\n\r\n                if (filterCampusTypes.value.length) {\r\n                    if (filterCampusTypes.value.filter(o => areEqual(o, c.type)).length === 0) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (filterCampusStatus.value.length) {\r\n                    if (filterCampusStatus.value.filter(o => areEqual(o, c.status)).length === 0) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (selectableCampuses.value.length) {\r\n                    if (selectableCampuses.value.filter(o => areEqual(o, c.guid)).length === 0) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            }).map(c => {\r\n                return {\r\n                    value: c.guid,\r\n                    text: c.name\r\n                };\r\n            });\r\n        });\r\n\r\n        /**\r\n         * Update the modelValue property if any value of the dictionary has\r\n         * actually changed. This helps prevent unwanted postbacks if the value\r\n         * didn't really change - which can happen if multiple values get updated\r\n         * at the same time.\r\n         *\r\n         * @returns true if a new modelValue was emitted to the parent component.\r\n         */\r\n        const maybeUpdateModelValue = (): boolean => {\r\n            const newValue: Record<string, string> = {};\r\n\r\n            // Construct the new value that will be emitted if it is different\r\n            // than the current value.\r\n            newValue[ConfigurationValueKey.EnhancedSelection] = asTrueFalseOrNull(enhancedSelection.value) ?? \"False\";\r\n            newValue[ConfigurationValueKey.RepeatColumns] = numberOfColumns.value?.toString() ?? \"\";\r\n            newValue[ConfigurationValueKey.IncludeInactive] = asTrueFalseOrNull(includeInactive.value) ?? \"False\";\r\n            newValue[ConfigurationValueKey.FilterCampusTypes] = filterCampusTypes.value.join(\",\");\r\n            newValue[ConfigurationValueKey.FilterCampusStatus] = filterCampusStatus.value.join(\",\");\r\n            newValue[ConfigurationValueKey.SelectableCampuses] = selectableCampuses.value.join(\",\");\r\n            newValue[ConfigurationValueKey.Values] = JSON.stringify(campusOptions.value);\r\n\r\n            // Compare the new value and the old value.\r\n            const anyValueChanged = newValue[ConfigurationValueKey.EnhancedSelection] !== (props.modelValue[ConfigurationValueKey.EnhancedSelection] ?? \"False\")\r\n                || newValue[ConfigurationValueKey.RepeatColumns] !== (props.modelValue[ConfigurationValueKey.RepeatColumns] ?? \"\")\r\n                || newValue[ConfigurationValueKey.IncludeInactive] !== (props.modelValue[ConfigurationValueKey.IncludeInactive] ?? \"False\")\r\n                || newValue[ConfigurationValueKey.FilterCampusTypes] !== (props.modelValue[ConfigurationValueKey.FilterCampusTypes] ?? \"\")\r\n                || newValue[ConfigurationValueKey.FilterCampusStatus] !== (props.modelValue[ConfigurationValueKey.FilterCampusStatus] ?? \"\")\r\n                || newValue[ConfigurationValueKey.SelectableCampuses] !== (props.modelValue[ConfigurationValueKey.SelectableCampuses] ?? \"\")\r\n                || newValue[ConfigurationValueKey.Values] !== (props.modelValue[ConfigurationValueKey.Values] ?? \"\");\r\n\r\n            // If any value changed then emit the new model value.\r\n            if (anyValueChanged) {\r\n                emit(\"update:modelValue\", newValue);\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Emits the updateConfigurationValue if the value has actually changed.\r\n         *\r\n         * @param key The key that was possibly modified.\r\n         * @param value The new value.\r\n         */\r\n        const maybeUpdateConfiguration = (key: string, value: string): void => {\r\n            if (maybeUpdateModelValue()) {\r\n                emit(\"updateConfigurationValue\", key, value);\r\n            }\r\n        };\r\n\r\n        // Watch for changes coming in from the parent component and update our\r\n        // data to match the new information.\r\n        watch(() => [props.modelValue, props.configurationProperties], () => {\r\n            const campuses = props.configurationProperties[ConfigurationPropertyKey.Campuses];\r\n            const campusTypes = props.configurationProperties[ConfigurationPropertyKey.CampusTypes];\r\n            const campusStatuses = props.configurationProperties[ConfigurationPropertyKey.CampusStatuses];\r\n\r\n            allCampusItems.value = campuses ? JSON.parse(campuses) as CampusItem[] : [];\r\n            campusTypeOptions.value = campusTypes ? JSON.parse(campusTypes) as ListItemBag[] : [];\r\n            campusStatusOptions.value = campusStatuses ? JSON.parse(campusStatuses) as ListItemBag[] : [];\r\n\r\n            enhancedSelection.value = asBoolean(props.modelValue[ConfigurationValueKey.EnhancedSelection]);\r\n            numberOfColumns.value = toNumberOrNull(props.modelValue[ConfigurationValueKey.RepeatColumns]);\r\n            includeInactive.value = asBoolean(props.modelValue[ConfigurationValueKey.IncludeInactive]);\r\n            filterCampusTypes.value = (props.modelValue[ConfigurationValueKey.FilterCampusTypes]?.split(\",\") ?? []).filter(s => s !== \"\");\r\n            filterCampusStatus.value = (props.modelValue[ConfigurationValueKey.FilterCampusStatus]?.split(\",\") ?? []).filter(s => s !== \"\");\r\n            selectableCampuses.value = (props.modelValue[ConfigurationValueKey.SelectableCampuses]?.split(\",\") ?? []).filter(s => s !== \"\");\r\n        }, {\r\n            immediate: true\r\n        });\r\n\r\n        // Watch for changes in properties that require new configuration\r\n        // properties to be retrieved from the server.\r\n        watch([], () => {\r\n            if (maybeUpdateModelValue()) {\r\n                emit(\"updateConfiguration\");\r\n            }\r\n        });\r\n\r\n        // Watch for changes in properties that only require a local UI update.\r\n        watch(enhancedSelection, () => maybeUpdateConfiguration(ConfigurationValueKey.EnhancedSelection, asTrueFalseOrNull(enhancedSelection.value) ?? \"False\"));\r\n        watch(numberOfColumns, () => maybeUpdateConfiguration(ConfigurationValueKey.RepeatColumns, numberOfColumns.value?.toString() ?? \"\"));\r\n        watch(includeInactive, () => maybeUpdateConfiguration(ConfigurationValueKey.IncludeInactive, asTrueFalseOrNull(includeInactive.value) ?? \"False\"));\r\n        watch(filterCampusTypes, () => maybeUpdateConfiguration(ConfigurationValueKey.FilterCampusTypes, filterCampusTypes.value.join(\",\")));\r\n        watch(filterCampusStatus, () => maybeUpdateConfiguration(ConfigurationValueKey.FilterCampusStatus, filterCampusStatus.value.join(\",\")));\r\n        watch(selectableCampuses, () => maybeUpdateConfiguration(ConfigurationValueKey.SelectableCampuses, selectableCampuses.value.join(\",\")));\r\n        watch(campusOptions, () => maybeUpdateConfiguration(ConfigurationValueKey.Values, JSON.stringify(campusOptions.value)));\r\n\r\n        return {\r\n            allCampusOptions,\r\n            campusStatusOptions,\r\n            campusTypeOptions,\r\n            enhancedSelection,\r\n            filterCampusStatus,\r\n            filterCampusTypes,\r\n            includeInactive,\r\n            numberOfColumns,\r\n            selectableCampuses\r\n        };\r\n    },\r\n\r\n    template: `\r\n<div>\r\n    <CheckBox v-model=\"enhancedSelection\"\r\n        label=\"Enhanced For Long Lists\"\r\n        help=\"When set, will render a searchable selection of options.\" />\r\n\r\n    <NumberBox v-if=\"!enhancedSelection\"\r\n        v-model=\"numberOfColumns\"\r\n        label=\"Number of Columns\"\r\n        help=\"Select how many columns the list should use before going to the next row. If blank or 0 then 4 columns will be displayed. There is no upper limit enforced here however the block this is used in might add contraints due to available space.\" />\r\n\r\n    <CheckBox v-model=\"includeInactive\"\r\n        label=\"Include Inactive\"\r\n        help=\"When set, inactive campuses will be included in the list.\" />\r\n\r\n    <CheckBoxList v-model=\"filterCampusTypes\"\r\n        label=\"Filter Campus Types\"\r\n        help=\"When set this will filter the campuses displayed in the list to the selected Types. Setting a filter will cause the campus picker to display even if 0 campuses are in the list.\"\r\n        :items=\"campusTypeOptions\"\r\n        horizontal />\r\n\r\n    <CheckBoxList v-model=\"filterCampusStatus\"\r\n        label=\"Filter Campus Status\"\r\n        help=\"When set this will filter the campuses displayed in the list to the selected Status. Setting a filter will cause the campus picker to display even if 0 campuses are in the list.\"\r\n        :items=\"campusStatusOptions\"\r\n        horizontal />\r\n\r\n    <CheckBoxList v-model=\"selectableCampuses\"\r\n        label=\"Selectable Campuses\"\r\n        :items=\"allCampusOptions\"\r\n        horizontal />\r\n</div>\r\n`\r\n});\r\n"],"names":["ConfigurationValueKey","ConfigurationPropertyKey","defineAsyncComponent","_asyncToGenerator","EditComponent","ConfigurationComponent","defineComponent","name","components","CheckBoxList","DropDownList","props","getFieldEditorProps","setup","context","internalValue","ref","modelValue","split","options","computed","_props$configurationV","JSON","parse","configurationValues","Values","_unused","enhance","EnhancedSelection","repeatColumns","_toNumberOrNull","repeatColumnsConfig","RepeatColumns","toNumberOrNull","watch","updateRefValue","emit","value","join","template","CheckBox","NumberBox","getFieldConfigurationProps","_v","updateConfigurationValue","_k","updateConfiguration","_ref","enhancedSelection","numberOfColumns","includeInactive","filterCampusTypes","filterCampusStatus","selectableCampuses","campusTypeOptions","campusStatusOptions","allCampusItems","allCampusOptions","map","c","guid","text","campusOptions","filter","isActive","length","o","areEqual","type","status","maybeUpdateModelValue","_asTrueFalseOrNull","_numberOfColumns$valu","_numberOfColumns$valu2","_asTrueFalseOrNull2","_props$modelValue$Con","_props$modelValue$Con2","_props$modelValue$Con3","_props$modelValue$Con4","_props$modelValue$Con5","_props$modelValue$Con6","_props$modelValue$Con7","newValue","asTrueFalseOrNull","toString","IncludeInactive","FilterCampusTypes","FilterCampusStatus","SelectableCampuses","stringify","anyValueChanged","maybeUpdateConfiguration","key","configurationProperties","_props$modelValue$Con8","_props$modelValue$Con9","_props$modelValue$Con10","_props$modelValue$Con11","_props$modelValue$Con12","_props$modelValue$Con13","campuses","Campuses","campusTypes","CampusTypes","campusStatuses","CampusStatuses","asBoolean","s","immediate","_asTrueFalseOrNull3","_numberOfColumns$valu3","_numberOfColumns$valu4","_asTrueFalseOrNull4"],"mappings":"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"}