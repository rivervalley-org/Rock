{"version":3,"file":"campusFieldComponents.js","sources":["../../../Framework/FieldTypes/campusField.partial.ts","../../../Framework/FieldTypes/campusFieldComponents.ts"],"sourcesContent":["// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { ComparisonType } from \"@Obsidian/Enums/Reporting/comparisonType\";\r\nimport { ComparisonValue } from \"@Obsidian/Types/Reporting/comparisonValue\";\r\nimport { areEqual } from \"@Obsidian/Utility/guid\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\nimport { getStandardFilterComponent } from \"./utils\";\r\n\r\nexport const enum ConfigurationValueKey {\r\n    Values = \"values\",\r\n    IncludeInactive = \"includeInactive\",\r\n    FilterCampusTypes = \"filterCampusTypes\",\r\n    FilterCampusStatus = \"filterCampusStatus\",\r\n    SelectableCampuses = \"selectableCampuses\"\r\n}\r\n\r\nexport const enum ConfigurationPropertyKey {\r\n    Campuses = \"campuses\",\r\n    CampusTypes = \"campusTypes\",\r\n    CampusStatuses = \"campusStatuses\"\r\n}\r\n\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./campusFieldComponents\")).EditComponent;\r\n});\r\n\r\n// Load the filter component only as needed.\r\nconst filterComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./campusFieldComponents\")).FilterComponent;\r\n});\r\n\r\n// Load the configuration component only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./campusFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Campus field.\r\n */\r\nexport class CampusFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, configurationValues: Record<string, string>): string {\r\n        if (value === undefined || value === null || value === \"\") {\r\n            return \"\";\r\n        }\r\n\r\n        try {\r\n            const values = JSON.parse(configurationValues[ConfigurationValueKey.Values] ?? \"[]\") as ListItemBag[];\r\n            const selectedValues = values.filter(o => o.value === value);\r\n\r\n            return selectedValues.map(o => o.text).join(\", \");\r\n        }\r\n        catch {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override getSupportedComparisonTypes(): ComparisonType {\r\n        return ComparisonType.None;\r\n    }\r\n\r\n    public override getFilterValueText(value: ComparisonValue, configurationValues: Record<string, string>): string {\r\n        if (!value.value) {\r\n            return \"\";\r\n        }\r\n\r\n        try {\r\n            const rawValues = value.value.split(\",\");\r\n            const values = JSON.parse(configurationValues?.[ConfigurationValueKey.Values] ?? \"[]\") as ListItemBag[];\r\n            const selectedValues = values.filter(o => rawValues.filter(v => areEqual(v, o.value)).length > 0);\r\n\r\n            return `'${selectedValues.map(o => o.text).join(\"' OR '\")}'`;\r\n        }\r\n        catch {\r\n            return `'${value.value}'`;\r\n        }\r\n    }\r\n\r\n    public override getFilterComponent(): Component {\r\n        return getStandardFilterComponent(\"Is\", filterComponent);\r\n    }\r\n\r\n    public override doesValueMatchFilter(value: string, filterValue: ComparisonValue, _configurationValues: Record<string, string>): boolean {\r\n        const selectedValues = (filterValue.value ?? \"\").split(\",\").filter(v => v !== \"\").map(v => v.toLowerCase());\r\n        let comparisonType = filterValue.comparisonType;\r\n\r\n        if (comparisonType === ComparisonType.EqualTo) {\r\n            // Treat EqualTo as if it were Contains.\r\n            comparisonType = ComparisonType.Contains;\r\n        }\r\n        else if (comparisonType === ComparisonType.NotEqualTo) {\r\n            // Treat NotEqualTo as if it were DoesNotContain.\r\n            comparisonType = ComparisonType.DoesNotContain;\r\n        }\r\n\r\n        if (comparisonType === ComparisonType.IsBlank) {\r\n            return value === \"\";\r\n        }\r\n        else if (comparisonType === ComparisonType.IsNotBlank) {\r\n            return value !== \"\";\r\n        }\r\n\r\n        if (selectedValues.length > 0) {\r\n            let matched = selectedValues.includes((value ?? \"\").toLowerCase());\r\n\r\n            if (comparisonType === ComparisonType.DoesNotContain) {\r\n                matched = !matched;\r\n            }\r\n\r\n            return matched;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { Guid } from \"@Obsidian/Types\";\r\nimport { computed, defineComponent, ref, watch } from \"vue\";\r\nimport { getFieldConfigurationProps, getFieldEditorProps } from \"./utils\";\r\nimport CheckBox from \"@Obsidian/Controls/checkBox\";\r\nimport CheckBoxList from \"@Obsidian/Controls/checkBoxList\";\r\nimport DropDownList from \"@Obsidian/Controls/dropDownList\";\r\nimport { ConfigurationPropertyKey, ConfigurationValueKey } from \"./campusField.partial\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport { asBoolean, asTrueFalseOrNull } from \"@Obsidian/Utility/booleanUtils\";\r\nimport { areEqual } from \"@Obsidian/Utility/guid\";\r\n\r\ntype CampusItem = {\r\n    guid: Guid,\r\n    name: string,\r\n    type?: Guid | null,\r\n    status?: Guid | null,\r\n    isActive: boolean\r\n};\r\n\r\nexport const EditComponent = defineComponent({\r\n    name: \"CampusField.Edit\",\r\n\r\n    components: {\r\n        DropDownList\r\n    },\r\n\r\n    props: getFieldEditorProps(),\r\n\r\n    setup(props, { emit }) {\r\n        const internalValue = ref(props.modelValue ?? \"\");\r\n\r\n        /** The options to choose from in the drop down list */\r\n        const options = computed((): ListItemBag[] => {\r\n            try {\r\n                return JSON.parse(props.configurationValues[ConfigurationValueKey.Values] ?? \"[]\") as ListItemBag[];\r\n            }\r\n            catch {\r\n                return [];\r\n            }\r\n        });\r\n\r\n        watch(() => props.modelValue, () => internalValue.value = props.modelValue ?? \"\");\r\n\r\n        watch(internalValue, () => emit(\"update:modelValue\", internalValue.value));\r\n\r\n        return {\r\n            internalValue,\r\n            options\r\n        };\r\n    },\r\n\r\n    template: `\r\n<DropDownList v-model=\"internalValue\" :items=\"options\" />\r\n`\r\n});\r\n\r\nexport const FilterComponent = defineComponent({\r\n    name: \"CampusField.Filter\",\r\n\r\n    components: {\r\n        CheckBoxList\r\n    },\r\n\r\n    props: getFieldEditorProps(),\r\n\r\n    setup(props, { emit }) {\r\n        const internalValue = ref(props.modelValue.split(\",\").filter(s => s !== \"\"));\r\n\r\n        /** The options to choose from in the drop down list */\r\n        const options = computed((): ListItemBag[] => {\r\n            try {\r\n                return JSON.parse(props.configurationValues[ConfigurationValueKey.Values] ?? \"[]\") as ListItemBag[];\r\n            }\r\n            catch {\r\n                return [];\r\n            }\r\n        });\r\n\r\n        watch(() => props.modelValue, () => internalValue.value = props.modelValue.split(\",\").filter(s => s !== \"\"));\r\n\r\n        watch(internalValue, () => emit(\"update:modelValue\", internalValue.value.join(\",\")));\r\n\r\n        return {\r\n            internalValue,\r\n            options\r\n        };\r\n    },\r\n\r\n    template: `\r\n<CheckBoxList v-model=\"internalValue\" :items=\"options\" />\r\n`\r\n});\r\n\r\nexport const ConfigurationComponent = defineComponent({\r\n    name: \"CampusField.Configuration\",\r\n\r\n    components: {\r\n        CheckBoxList,\r\n        CheckBox\r\n    },\r\n\r\n    props: getFieldConfigurationProps(),\r\n\r\n    setup(props, { emit }) {\r\n        // Define the properties that will hold the current selections.\r\n        const includeInactive = ref(false);\r\n        const filterCampusTypes = ref<string[]>([]);\r\n        const filterCampusStatus = ref<string[]>([]);\r\n        const selectableCampuses = ref<string[]>([]);\r\n\r\n        /** The campus types that are available to be selected from. */\r\n        const campusTypeOptions = ref<ListItemBag[]>([]);\r\n\r\n        /** The campus statuses that are available to be selected from. */\r\n        const campusStatusOptions = ref<ListItemBag[]>([]);\r\n\r\n        /** The campuses that are available to be selected from. */\r\n        const allCampusItems = ref<CampusItem[]>([]);\r\n\r\n        const allCampusOptions = computed((): ListItemBag[] => {\r\n            return allCampusItems.value.map((c): ListItemBag => {\r\n                return {\r\n                    value: c.guid,\r\n                    text: c.name\r\n                };\r\n            });\r\n        });\r\n\r\n        /**\r\n         * The campuses that are available to be selected from, these values\r\n         * get emitted as the options the default value control can pick from.\r\n         */\r\n        const campusOptions = computed((): ListItemBag[] => {\r\n            return allCampusItems.value.filter(c => {\r\n                if (!includeInactive.value && !c.isActive) {\r\n                    return false;\r\n                }\r\n\r\n                if (filterCampusTypes.value.length) {\r\n                    if (filterCampusTypes.value.filter(o => areEqual(o, c.type)).length === 0) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (filterCampusStatus.value.length) {\r\n                    if (filterCampusStatus.value.filter(o => areEqual(o, c.status)).length === 0) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (selectableCampuses.value.length) {\r\n                    if (selectableCampuses.value.filter(o => areEqual(o, c.guid)).length === 0) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            }).map(c => {\r\n                return {\r\n                    value: c.guid,\r\n                    text: c.name\r\n                };\r\n            });\r\n        });\r\n\r\n        /**\r\n         * Update the modelValue property if any value of the dictionary has\r\n         * actually changed. This helps prevent unwanted postbacks if the value\r\n         * didn't really change - which can happen if multiple values get updated\r\n         * at the same time.\r\n         *\r\n         * @returns true if a new modelValue was emitted to the parent component.\r\n         */\r\n        const maybeUpdateModelValue = (): boolean => {\r\n            const newValue: Record<string, string> = {\r\n                ...props.modelValue\r\n            };\r\n\r\n            // Construct the new value that will be emitted if it is different\r\n            // than the current value.\r\n            newValue[ConfigurationValueKey.IncludeInactive] = asTrueFalseOrNull(includeInactive.value) ?? \"False\";\r\n            newValue[ConfigurationValueKey.FilterCampusTypes] = filterCampusTypes.value.join(\",\");\r\n            newValue[ConfigurationValueKey.FilterCampusStatus] = filterCampusStatus.value.join(\",\");\r\n            newValue[ConfigurationValueKey.SelectableCampuses] = selectableCampuses.value.join(\",\");\r\n            newValue[ConfigurationValueKey.Values] = JSON.stringify(campusOptions.value);\r\n\r\n            // Compare the new value and the old value.\r\n            const anyValueChanged = newValue[ConfigurationValueKey.IncludeInactive] !== (props.modelValue[ConfigurationValueKey.IncludeInactive] ?? \"False\")\r\n                || newValue[ConfigurationValueKey.FilterCampusTypes] !== (props.modelValue[ConfigurationValueKey.FilterCampusTypes] ?? \"\")\r\n                || newValue[ConfigurationValueKey.FilterCampusStatus] !== (props.modelValue[ConfigurationValueKey.FilterCampusStatus] ?? \"\")\r\n                || newValue[ConfigurationValueKey.SelectableCampuses] !== (props.modelValue[ConfigurationValueKey.SelectableCampuses] ?? \"\")\r\n                || newValue[ConfigurationValueKey.Values] !== (props.modelValue[ConfigurationValueKey.Values] ?? \"[]\");\r\n\r\n            // If any value changed then emit the new model value.\r\n            if (anyValueChanged) {\r\n                emit(\"update:modelValue\", newValue);\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Emits the updateConfigurationValue if the value has actually changed.\r\n         * \r\n         * @param key The key that was possibly modified.\r\n         * @param value The new value.\r\n         */\r\n        const maybeUpdateConfiguration = (key: string, value: string): void => {\r\n            if (maybeUpdateModelValue()) {\r\n                emit(\"updateConfigurationValue\", key, value);\r\n            }\r\n        };\r\n\r\n        // Watch for changes coming in from the parent component and update our\r\n        // data to match the new information.\r\n        watch(() => [props.modelValue, props.configurationProperties], () => {\r\n            const campuses = props.configurationProperties[ConfigurationPropertyKey.Campuses];\r\n            const campusTypes = props.configurationProperties[ConfigurationPropertyKey.CampusTypes];\r\n            const campusStatuses = props.configurationProperties[ConfigurationPropertyKey.CampusStatuses];\r\n\r\n            allCampusItems.value = campuses ? JSON.parse(campuses) as CampusItem[] : [];\r\n            campusTypeOptions.value = campusTypes ? JSON.parse(campusTypes) as ListItemBag[] : [];\r\n            campusStatusOptions.value = campusStatuses ? JSON.parse(campusStatuses) as ListItemBag[] : [];\r\n\r\n            includeInactive.value = asBoolean(props.modelValue[ConfigurationValueKey.IncludeInactive]);\r\n            filterCampusTypes.value = (props.modelValue[ConfigurationValueKey.FilterCampusTypes]?.split(\",\") ?? []).filter(s => s !== \"\");\r\n            filterCampusStatus.value = (props.modelValue[ConfigurationValueKey.FilterCampusStatus]?.split(\",\") ?? []).filter(s => s !== \"\");\r\n            selectableCampuses.value = (props.modelValue[ConfigurationValueKey.SelectableCampuses]?.split(\",\") ?? []).filter(s => s !== \"\");\r\n        }, {\r\n            immediate: true\r\n        });\r\n\r\n        // Watch for changes in properties that require new configuration\r\n        // properties to be retrieved from the server.\r\n        watch([], () => {\r\n            if (maybeUpdateModelValue()) {\r\n                emit(\"updateConfiguration\");\r\n            }\r\n        });\r\n\r\n        // Watch for changes in properties that only require a local UI update.\r\n        watch(includeInactive, () => maybeUpdateConfiguration(ConfigurationValueKey.IncludeInactive, asTrueFalseOrNull(includeInactive.value) ?? \"False\"));\r\n        watch(filterCampusTypes, () => maybeUpdateConfiguration(ConfigurationValueKey.FilterCampusTypes, filterCampusTypes.value.join(\",\")));\r\n        watch(filterCampusStatus, () => maybeUpdateConfiguration(ConfigurationValueKey.FilterCampusStatus, filterCampusStatus.value.join(\",\")));\r\n        watch(selectableCampuses, () => maybeUpdateConfiguration(ConfigurationValueKey.SelectableCampuses, selectableCampuses.value.join(\",\")));\r\n        watch(campusOptions, () => emit(\"updateConfigurationValue\", ConfigurationValueKey.Values, JSON.stringify(campusOptions.value)));\r\n\r\n        return {\r\n            allCampusOptions,\r\n            campusStatusOptions,\r\n            campusTypeOptions,\r\n            filterCampusStatus,\r\n            filterCampusTypes,\r\n            includeInactive,\r\n            selectableCampuses\r\n        };\r\n    },\r\n\r\n    template: `\r\n<div>\r\n    <CheckBox v-model=\"includeInactive\"\r\n        label=\"Include Inactive\"\r\n        help=\"When set, inactive campuses will be included in the list.\" />\r\n\r\n    <CheckBoxList v-model=\"filterCampusTypes\"\r\n        label=\"Filter Campus Types\"\r\n        help=\"When set this will filter the campuses displayed in the list to the selected Types. Setting a filter will cause the campus picker to display even if 0 campuses are in the list.\"\r\n        :items=\"campusTypeOptions\"\r\n        horizontal />\r\n\r\n    <CheckBoxList v-model=\"filterCampusStatus\"\r\n        label=\"Filter Campus Status\"\r\n        help=\"When set this will filter the campuses displayed in the list to the selected Status. Setting a filter will cause the campus picker to display even if 0 campuses are in the list.\"\r\n        :items=\"campusStatusOptions\"\r\n        horizontal />\r\n\r\n    <CheckBoxList v-model=\"selectableCampuses\"\r\n        label=\"Selectable Campuses\"\r\n        :items=\"allCampusOptions\"\r\n        horizontal />\r\n</div>\r\n`\r\n});\r\n"],"names":["ConfigurationValueKey","ConfigurationPropertyKey","defineAsyncComponent","_asyncToGenerator","EditComponent","FilterComponent","ConfigurationComponent","defineComponent","name","components","DropDownList","props","getFieldEditorProps","setup","_ref","_props$modelValue","emit","internalValue","ref","modelValue","options","computed","_props$configurationV","JSON","parse","configurationValues","Values","_unused","watch","_props$modelValue2","value","template","CheckBoxList","_ref2","split","filter","s","_props$configurationV2","_unused2","join","CheckBox","getFieldConfigurationProps","_ref3","includeInactive","filterCampusTypes","filterCampusStatus","selectableCampuses","campusTypeOptions","campusStatusOptions","allCampusItems","allCampusOptions","map","c","guid","text","campusOptions","isActive","length","o","areEqual","type","status","maybeUpdateModelValue","_asTrueFalseOrNull","_props$modelValue$Con","_props$modelValue$Con2","_props$modelValue$Con3","_props$modelValue$Con4","_props$modelValue$Con5","newValue","_objectSpread","IncludeInactive","asTrueFalseOrNull","FilterCampusTypes","FilterCampusStatus","SelectableCampuses","stringify","anyValueChanged","maybeUpdateConfiguration","key","configurationProperties","_props$modelValue$Con6","_props$modelValue$Con7","_props$modelValue$Con8","_props$modelValue$Con9","_props$modelValue$Con10","_props$modelValue$Con11","campuses","Campuses","campusTypes","CampusTypes","campusStatuses","CampusStatuses","asBoolean","immediate","_asTrueFalseOrNull2"],"mappings":"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"}