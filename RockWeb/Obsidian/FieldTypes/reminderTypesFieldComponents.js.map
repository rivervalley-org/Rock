{"version":3,"file":"reminderTypesFieldComponents.js","sources":["../../../Framework/FieldTypes/reminderTypesField.partial.ts","../../../Framework/FieldTypes/reminderTypesFieldComponents.ts"],"sourcesContent":["ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport { ComparisonType } from \"@Obsidian/Enums/Reporting/comparisonType\";\r\nimport { binaryComparisonTypes, containsComparisonTypes } from \"@Obsidian/Core/Reporting/comparisonType\";\r\nimport { toNumberOrNull } from \"@Obsidian/Utility/numberUtils\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\n\r\nexport const enum ConfigurationValueKey {\r\n    Values = \"values\",\r\n    EnhancedSelection = \"enhancedselection\",\r\n    RepeatColumns = \"repeatColumns\",\r\n}\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./reminderTypesFieldComponents\")).EditComponent;\r\n});\r\n\r\n// The configuration component can be quite large, so load it only as needed.\r\nconst configurationComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./reminderTypesFieldComponents\")).ConfigurationComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Reminder Types field.\r\n */\r\nexport class ReminderTypesFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, configurationValues: Record<string, string>): string {\r\n        if (value === undefined || value === null || value === \"\") {\r\n            return \"\";\r\n        }\r\n\r\n        try {\r\n            const values = JSON.parse(configurationValues[ConfigurationValueKey.Values] ?? \"[]\") as ListItemBag[];\r\n            const userValues = value.split(\",\");\r\n            const selectedValues = values.filter(o => userValues.includes(o.value ?? \"\"));\r\n\r\n            return selectedValues.map(o => o.text).join(\", \");\r\n        }\r\n        catch {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override getConfigurationComponent(): Component {\r\n        return configurationComponent;\r\n    }\r\n\r\n    public override getSupportedComparisonTypes(): ComparisonType {\r\n        return binaryComparisonTypes | containsComparisonTypes;\r\n    }\r\n}\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Guid } from \"@Obsidian/Types\";\r\nimport { computed, defineComponent, ref, SetupContext, watch } from \"vue\";\r\nimport { getFieldConfigurationProps, getFieldEditorProps } from \"./utils\";\r\nimport CheckBox from \"@Obsidian/Controls/checkBox\";\r\nimport NumberBox from \"@Obsidian/Controls/numberBox\";\r\nimport CheckBoxList from \"@Obsidian/Controls/checkBoxList\";\r\nimport DropDownList from \"@Obsidian/Controls/dropDownList\";\r\nimport { toNumberOrNull } from \"@Obsidian/Utility/numberUtils\";\r\nimport { ConfigurationValueKey } from \"./reminderTypesField.partial\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport { areEqual } from \"@Obsidian/Utility/guid\";\r\nimport { asBoolean, asTrueFalseOrNull } from \"@Obsidian/Utility/booleanUtils\";\r\nimport { updateRefValue } from \"@Obsidian/Utility/component\";\r\n\r\nexport const EditComponent = defineComponent({\r\n    name: \"ReminderTypesField.Edit\",\r\n\r\n    components: {\r\n        CheckBoxList,\r\n        DropDownList\r\n    },\r\n\r\n    props: getFieldEditorProps(),\r\n\r\n    setup(props, context: SetupContext) {\r\n        const internalValue = ref(props.modelValue ? props.modelValue.split(\",\") : []);\r\n\r\n        /** The options to choose from in the drop down list */\r\n        const options = computed((): ListItemBag[] => {\r\n            try {\r\n                return JSON.parse(props.configurationValues[ConfigurationValueKey.Values] ?? \"[]\") as ListItemBag[];\r\n            }\r\n            catch {\r\n                return [];\r\n            }\r\n        });\r\n\r\n        const enhance = computed(() => {\r\n            return props.configurationValues[ConfigurationValueKey.EnhancedSelection] == \"True\";\r\n        });\r\n\r\n        const repeatColumns = computed(() => {\r\n            const repeatColumnsConfig = props.configurationValues[ConfigurationValueKey.RepeatColumns];\r\n\r\n            return toNumberOrNull(repeatColumnsConfig) ?? 4;\r\n        });\r\n\r\n        watch(() => props.modelValue, () => {\r\n            updateRefValue(internalValue, props.modelValue ? props.modelValue.split(\",\") : []);\r\n        });\r\n\r\n        watch(internalValue, () => {\r\n            context.emit(\"update:modelValue\", internalValue.value.join(\",\"));\r\n        });\r\n\r\n        return {\r\n            internalValue,\r\n            options,\r\n            repeatColumns,\r\n            enhance\r\n        };\r\n    },\r\n\r\n    template: `\r\n<DropDownList v-if=\"enhance\" v-model=\"internalValue\" enhanceForLongLists multiple :items=\"options\" />\r\n<CheckBoxList v-else v-model=\"internalValue\" horizontal :items=\"options\" :repeatColumns=\"repeatColumns\" />\r\n`\r\n});\r\n\r\nexport const ConfigurationComponent = defineComponent({\r\n    name: \"ReminderTypesField.Configuration\",\r\n\r\n    components: {\r\n        CheckBox,\r\n        NumberBox\r\n    },\r\n\r\n    props: getFieldConfigurationProps(),\r\n\r\n    emit: {\r\n        \"update:modelValue\": (_v: Record<string, string>) => true,\r\n        \"updateConfigurationValue\": (_k: string, _v: string) => true,\r\n        \"updateConfiguration\": () => true\r\n    },\r\n\r\n    setup(props, { emit }) {\r\n        // Define the properties that will hold the current selections.\r\n        const enhancedSelection = ref(false);\r\n        const numberOfColumns = ref<number | null>(null);\r\n\r\n\r\n\r\n        /**\r\n         * Update the modelValue property if any value of the dictionary has\r\n         * actually changed. This helps prevent unwanted postbacks if the value\r\n         * didn't really change - which can happen if multiple values get updated\r\n         * at the same time.\r\n         *\r\n         * @returns true if a new modelValue was emitted to the parent component.\r\n         */\r\n        const maybeUpdateModelValue = (): boolean => {\r\n            const newValue: Record<string, string> = {};\r\n\r\n            // Construct the new value that will be emitted if it is different\r\n            // than the current value.\r\n            newValue[ConfigurationValueKey.EnhancedSelection] = asTrueFalseOrNull(enhancedSelection.value) ?? \"False\";\r\n            newValue[ConfigurationValueKey.RepeatColumns] = numberOfColumns.value?.toString() ?? \"\";\r\n            newValue[ConfigurationValueKey.Values] = props.modelValue[ConfigurationValueKey.Values] ?? \"\";\r\n\r\n            // Compare the new value and the old value.\r\n            const anyValueChanged = newValue[ConfigurationValueKey.EnhancedSelection] !== (props.modelValue[ConfigurationValueKey.EnhancedSelection] ?? \"False\")\r\n                || newValue[ConfigurationValueKey.RepeatColumns] !== (props.modelValue[ConfigurationValueKey.RepeatColumns] ?? \"\");\r\n\r\n            // If any value changed then emit the new model value.\r\n            if (anyValueChanged) {\r\n                emit(\"update:modelValue\", newValue);\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Emits the updateConfigurationValue if the value has actually changed.\r\n         *\r\n         * @param key The key that was possibly modified.\r\n         * @param value The new value.\r\n         */\r\n        const maybeUpdateConfiguration = (key: string, value: string): void => {\r\n            if (maybeUpdateModelValue()) {\r\n                emit(\"updateConfigurationValue\", key, value);\r\n            }\r\n        };\r\n\r\n        // Watch for changes coming in from the parent component and update our\r\n        // data to match the new information.\r\n        watch(() => [props.modelValue, props.configurationProperties], () => {\r\n            enhancedSelection.value = asBoolean(props.modelValue[ConfigurationValueKey.EnhancedSelection]);\r\n            numberOfColumns.value = toNumberOrNull(props.modelValue[ConfigurationValueKey.RepeatColumns]);\r\n        }, {\r\n            immediate: true\r\n        });\r\n\r\n        // Watch for changes in properties that require new configuration\r\n        // properties to be retrieved from the server.\r\n        watch([], () => {\r\n            if (maybeUpdateModelValue()) {\r\n                emit(\"updateConfiguration\");\r\n            }\r\n        });\r\n\r\n        // Watch for changes in properties that only require a local UI update.\r\n        watch(enhancedSelection, () => maybeUpdateConfiguration(ConfigurationValueKey.EnhancedSelection, asTrueFalseOrNull(enhancedSelection.value) ?? \"False\"));\r\n        watch(numberOfColumns, () => maybeUpdateConfiguration(ConfigurationValueKey.RepeatColumns, numberOfColumns.value?.toString() ?? \"\"));\r\n\r\n        return {\r\n            enhancedSelection,\r\n            numberOfColumns\r\n        };\r\n    },\r\n\r\n    template: `\r\n<div>\r\n    <CheckBox v-model=\"enhancedSelection\"\r\n        label=\"Enhanced For Long Lists\"\r\n        help=\"When set, will render a searchable selection of options.\" />\r\n\r\n    <NumberBox v-if=\"!enhancedSelection\"\r\n        v-model=\"numberOfColumns\"\r\n        label=\"Number of Columns\"\r\n        help=\"Select how many columns the list should use before going to the next row. If blank or 0 then 4 columns will be displayed. There is no upper limit enforced here however the block this is used in might add contraints due to available space.\" />\r\n</div>\r\n`\r\n});\r\n"],"names":["ConfigurationValueKey","defineAsyncComponent","_asyncToGenerator","EditComponent","ConfigurationComponent","defineComponent","name","components","CheckBoxList","DropDownList","props","getFieldEditorProps","setup","context","internalValue","ref","modelValue","split","options","computed","_props$configurationV","JSON","parse","configurationValues","Values","_unused","enhance","EnhancedSelection","repeatColumns","_toNumberOrNull","repeatColumnsConfig","RepeatColumns","toNumberOrNull","watch","updateRefValue","emit","value","join","template","CheckBox","NumberBox","getFieldConfigurationProps","_v","updateConfigurationValue","_k","updateConfiguration","_ref","enhancedSelection","numberOfColumns","maybeUpdateModelValue","_asTrueFalseOrNull","_numberOfColumns$valu","_numberOfColumns$valu2","_props$modelValue$Con","_props$modelValue$Con2","_props$modelValue$Con3","newValue","asTrueFalseOrNull","toString","anyValueChanged","maybeUpdateConfiguration","key","configurationProperties","asBoolean","immediate","_asTrueFalseOrNull2","_numberOfColumns$valu3","_numberOfColumns$valu4"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAwBkBA,IAAAA,qBAAqB,aAArBA,qBAAqB,EAAA;QAArBA,qBAAqB,CAAA,QAAA,CAAA,GAAA,QAAA,CAAA;QAArBA,qBAAqB,CAAA,mBAAA,CAAA,GAAA,mBAAA,CAAA;QAArBA,qBAAqB,CAAA,eAAA,CAAA,GAAA,eAAA,CAAA;MAAA,EAAA,OAArBA,qBAAqB,CAAA;MAAA,CAAA,CAAA,EAAA,CAAA,CAAA;MAOjBC,oBAAoB,CAAAC,iBAAA,CAAC,aAAY;MACnD,EAAA,OAAO,OAAO,cAAO,gCAAgC,CAAC,EAAEC,aAAa,CAAA;MACzE,CAAC,CAAC,EAAA;MAG6BF,oBAAoB,CAAAC,iBAAA,CAAC,aAAY;MAC5D,EAAA,OAAO,OAAO,cAAO,gCAAgC,CAAC,EAAEE,sBAAsB,CAAA;MAClF,CAAC,CAAC;;ACRWD,UAAAA,aAAa,4BAAGE,eAAe,CAAC;MACzCC,EAAAA,IAAI,EAAE,yBAAyB;MAE/BC,EAAAA,UAAU,EAAE;UACRC,YAAY;MACZC,IAAAA,YAAAA;SACH;QAEDC,KAAK,EAAEC,mBAAmB,EAAE;MAE5BC,EAAAA,KAAKA,CAACF,KAAK,EAAEG,OAAqB,EAAE;MAChC,IAAA,IAAMC,aAAa,GAAGC,GAAG,CAACL,KAAK,CAACM,UAAU,GAAGN,KAAK,CAACM,UAAU,CAACC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAA;MAG9E,IAAA,IAAMC,OAAO,GAAGC,QAAQ,CAAC,MAAqB;YAC1C,IAAI;MAAA,QAAA,IAAAC,qBAAA,CAAA;cACA,OAAOC,IAAI,CAACC,KAAK,CAAA,CAAAF,qBAAA,GAACV,KAAK,CAACa,mBAAmB,CAACvB,qBAAqB,CAACwB,MAAM,CAAC,MAAAJ,IAAAA,IAAAA,qBAAA,cAAAA,qBAAA,GAAI,IAAI,CAAC,CAAA;aACrF,CACD,OAAAK,OAAA,EAAM;MACF,QAAA,OAAO,EAAE,CAAA;MACb,OAAA;MACJ,KAAC,CAAC,CAAA;MAEF,IAAA,IAAMC,OAAO,GAAGP,QAAQ,CAAC,MAAM;YAC3B,OAAOT,KAAK,CAACa,mBAAmB,CAACvB,qBAAqB,CAAC2B,iBAAiB,CAAC,IAAI,MAAM,CAAA;MACvF,KAAC,CAAC,CAAA;MAEF,IAAA,IAAMC,aAAa,GAAGT,QAAQ,CAAC,MAAM;MAAA,MAAA,IAAAU,eAAA,CAAA;YACjC,IAAMC,mBAAmB,GAAGpB,KAAK,CAACa,mBAAmB,CAACvB,qBAAqB,CAAC+B,aAAa,CAAC,CAAA;YAE1F,OAAAF,CAAAA,eAAA,GAAOG,cAAc,CAACF,mBAAmB,CAAC,MAAA,IAAA,IAAAD,eAAA,KAAA,KAAA,CAAA,GAAAA,eAAA,GAAI,CAAC,CAAA;MACnD,KAAC,CAAC,CAAA;MAEFI,IAAAA,KAAK,CAAC,MAAMvB,KAAK,CAACM,UAAU,EAAE,MAAM;MAChCkB,MAAAA,cAAc,CAACpB,aAAa,EAAEJ,KAAK,CAACM,UAAU,GAAGN,KAAK,CAACM,UAAU,CAACC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAA;MACtF,KAAC,CAAC,CAAA;UAEFgB,KAAK,CAACnB,aAAa,EAAE,MAAM;MACvBD,MAAAA,OAAO,CAACsB,IAAI,CAAC,mBAAmB,EAAErB,aAAa,CAACsB,KAAK,CAACC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAA;MACpE,KAAC,CAAC,CAAA;UAEF,OAAO;YACHvB,aAAa;YACbI,OAAO;YACPU,aAAa;MACbF,MAAAA,OAAAA;WACH,CAAA;SACJ;QAEDY,QAAQ,EAAA,mOAAA;MAIZ,CAAC,GAAC;AAEWlC,UAAAA,sBAAsB,qCAAGC,eAAe,CAAC;MAClDC,EAAAA,IAAI,EAAE,kCAAkC;MAExCC,EAAAA,UAAU,EAAE;UACRgC,QAAQ;MACRC,IAAAA,SAAAA;SACH;QAED9B,KAAK,EAAE+B,0BAA0B,EAAE;MAEnCN,EAAAA,IAAI,EAAE;UACF,mBAAmB,EAAGO,EAA0B,IAAK,IAAI;MACzD,IAAA,0BAA0B,EAAEC,CAACC,EAAU,EAAEF,EAAU,KAAK,IAAI;UAC5D,qBAAqB,EAAEG,MAAM,IAAA;SAChC;MAEDjC,EAAAA,KAAKA,CAACF,KAAK,EAAAoC,IAAA,EAAY;MAAA,IAAA,IAARX,IAAI,GAAAW,IAAA,CAAJX,IAAI,CAAA;MAEf,IAAA,IAAMY,iBAAiB,GAAGhC,GAAG,CAAC,KAAK,CAAC,CAAA;MACpC,IAAA,IAAMiC,eAAe,GAAGjC,GAAG,CAAgB,IAAI,CAAC,CAAA;UAYhD,IAAMkC,qBAAqB,GAAGA,MAAe;YAAA,IAAAC,kBAAA,EAAAC,qBAAA,EAAAC,sBAAA,EAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA,CAAA;YACzC,IAAMC,QAAgC,GAAG,EAAE,CAAA;MAI3CA,MAAAA,QAAQ,CAACxD,qBAAqB,CAAC2B,iBAAiB,CAAC,GAAA,CAAAuB,kBAAA,GAAGO,iBAAiB,CAACV,iBAAiB,CAACX,KAAK,CAAC,MAAA,IAAA,IAAAc,kBAAA,KAAAA,KAAAA,CAAAA,GAAAA,kBAAA,GAAI,OAAO,CAAA;YACzGM,QAAQ,CAACxD,qBAAqB,CAAC+B,aAAa,CAAC,IAAAoB,qBAAA,GAAA,CAAAC,sBAAA,GAAGJ,eAAe,CAACZ,KAAK,MAAAgB,IAAAA,IAAAA,sBAAA,KAArBA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,sBAAA,CAAuBM,QAAQ,EAAE,MAAA,IAAA,IAAAP,qBAAA,KAAA,KAAA,CAAA,GAAAA,qBAAA,GAAI,EAAE,CAAA;YACvFK,QAAQ,CAACxD,qBAAqB,CAACwB,MAAM,CAAC,GAAA6B,CAAAA,qBAAA,GAAG3C,KAAK,CAACM,UAAU,CAAChB,qBAAqB,CAACwB,MAAM,CAAC,cAAA6B,qBAAA,KAAA,KAAA,CAAA,GAAAA,qBAAA,GAAI,EAAE,CAAA;YAG7F,IAAMM,eAAe,GAAGH,QAAQ,CAACxD,qBAAqB,CAAC2B,iBAAiB,CAAC,MAAA,CAAA2B,sBAAA,GAAM5C,KAAK,CAACM,UAAU,CAAChB,qBAAqB,CAAC2B,iBAAiB,CAAC,MAAA2B,IAAAA,IAAAA,sBAAA,KAAAA,KAAAA,CAAAA,GAAAA,sBAAA,GAAI,OAAO,CAAC,IAC7IE,QAAQ,CAACxD,qBAAqB,CAAC+B,aAAa,CAAC,MAAA,CAAAwB,sBAAA,GAAM7C,KAAK,CAACM,UAAU,CAAChB,qBAAqB,CAAC+B,aAAa,CAAC,MAAA,IAAA,IAAAwB,sBAAA,KAAAA,KAAAA,CAAAA,GAAAA,sBAAA,GAAI,EAAE,CAAC,CAAA;MAGtH,MAAA,IAAII,eAAe,EAAE;MACjBxB,QAAAA,IAAI,CAAC,mBAAmB,EAAEqB,QAAQ,CAAC,CAAA;MACnC,QAAA,OAAO,IAAI,CAAA;MACf,OAAC,MACI;MACD,QAAA,OAAO,KAAK,CAAA;MAChB,OAAA;WACH,CAAA;MAQD,IAAA,IAAMI,wBAAwB,GAAGA,CAACC,GAAW,EAAEzB,KAAa,KAAW;YACnE,IAAIa,qBAAqB,EAAE,EAAE;MACzBd,QAAAA,IAAI,CAAC,0BAA0B,EAAE0B,GAAG,EAAEzB,KAAK,CAAC,CAAA;MAChD,OAAA;WACH,CAAA;MAIDH,IAAAA,KAAK,CAAC,MAAM,CAACvB,KAAK,CAACM,UAAU,EAAEN,KAAK,CAACoD,uBAAuB,CAAC,EAAE,MAAM;MACjEf,MAAAA,iBAAiB,CAACX,KAAK,GAAG2B,SAAS,CAACrD,KAAK,CAACM,UAAU,CAAChB,qBAAqB,CAAC2B,iBAAiB,CAAC,CAAC,CAAA;MAC9FqB,MAAAA,eAAe,CAACZ,KAAK,GAAGJ,cAAc,CAACtB,KAAK,CAACM,UAAU,CAAChB,qBAAqB,CAAC+B,aAAa,CAAC,CAAC,CAAA;MACjG,KAAC,EAAE;MACCiC,MAAAA,SAAS,EAAE,IAAA;MACf,KAAC,CAAC,CAAA;UAIF/B,KAAK,CAAC,EAAE,EAAE,MAAM;YACZ,IAAIgB,qBAAqB,EAAE,EAAE;cACzBd,IAAI,CAAC,qBAAqB,CAAC,CAAA;MAC/B,OAAA;MACJ,KAAC,CAAC,CAAA;UAGFF,KAAK,CAACc,iBAAiB,EAAE,MAAA;MAAA,MAAA,IAAAkB,mBAAA,CAAA;YAAA,OAAML,wBAAwB,CAAC5D,qBAAqB,CAAC2B,iBAAiB,EAAAsC,CAAAA,mBAAA,GAAER,iBAAiB,CAACV,iBAAiB,CAACX,KAAK,CAAC,MAAA6B,IAAAA,IAAAA,mBAAA,cAAAA,mBAAA,GAAI,OAAO,CAAC,CAAA;WAAC,CAAA,CAAA;UACxJhC,KAAK,CAACe,eAAe,EAAE,MAAA;YAAA,IAAAkB,sBAAA,EAAAC,sBAAA,CAAA;YAAA,OAAMP,wBAAwB,CAAC5D,qBAAqB,CAAC+B,aAAa,EAAAmC,CAAAA,sBAAA,GAAAC,CAAAA,sBAAA,GAAEnB,eAAe,CAACZ,KAAK,cAAA+B,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAArBA,sBAAA,CAAuBT,QAAQ,EAAE,MAAAQ,IAAAA,IAAAA,sBAAA,KAAAA,KAAAA,CAAAA,GAAAA,sBAAA,GAAI,EAAE,CAAC,CAAA;WAAC,CAAA,CAAA;UAEpI,OAAO;YACHnB,iBAAiB;MACjBC,MAAAA,eAAAA;WACH,CAAA;SACJ;QAEDV,QAAQ,EAAA,qjBAAA;MAYZ,CAAC;;;;;;;;"}