{"version":3,"file":"definedValueRangeFieldComponents.js","sources":["../../../Framework/FieldTypes/definedValueRangeField.partial.ts","../../../Framework/FieldTypes/definedValueRangeFieldComponents.ts"],"sourcesContent":["// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Component } from \"vue\";\r\nimport { defineAsyncComponent } from \"@Obsidian/Utility/component\";\r\nimport { asBoolean } from \"@Obsidian/Utility/booleanUtils\";\r\nimport { List } from \"@Obsidian/Utility/linq\";\r\nimport { FieldTypeBase } from \"./fieldType\";\r\n\r\nexport const enum ConfigurationValueKey {\r\n    Values = \"values\",\r\n    DisplayDescription = \"displaydescription\"\r\n}\r\n\r\nexport type ValueItem = {\r\n    value: string,\r\n    text: string,\r\n    description: string\r\n};\r\n\r\nexport type ClientValue = {\r\n    value?: string;\r\n    text?: string;\r\n    description?: string;\r\n};\r\n\r\n\r\n// The edit component can be quite large, so load it only as needed.\r\nconst editComponent = defineAsyncComponent(async () => {\r\n    return (await import(\"./definedValueRangeFieldComponents\")).EditComponent;\r\n});\r\n\r\n/**\r\n * The field type handler for the Defined Value Range field.\r\n */\r\nexport class DefinedValueRangeFieldType extends FieldTypeBase {\r\n    public override getTextValue(value: string, configurationValues: Record<string, string>): string {\r\n        try {\r\n            const clientValue = JSON.parse(value) as ClientValue;\r\n\r\n            try {\r\n                const values = new List(JSON.parse(configurationValues[ConfigurationValueKey.Values] ?? \"[]\") as ValueItem[]);\r\n                const displayDescription = asBoolean(configurationValues[ConfigurationValueKey.DisplayDescription]);\r\n                const rawValues = (clientValue.value ?? \"\").split(\",\");\r\n\r\n                if (rawValues.length !== 2) {\r\n                    return value;\r\n                }\r\n\r\n                const lowerValue = values.firstOrUndefined(v => v?.value === rawValues[0]);\r\n                const upperValue = values.firstOrUndefined(v => v?.value === rawValues[1]);\r\n\r\n                if (lowerValue === undefined && upperValue === undefined) {\r\n                    return \"\";\r\n                }\r\n\r\n                if (displayDescription) {\r\n                    return `${lowerValue?.description ?? \"\"} to ${upperValue?.description ?? \"\"}`;\r\n                }\r\n                else {\r\n                    return `${lowerValue?.text ?? \"\"} to ${upperValue?.text ?? \"\"}`;\r\n                }\r\n            }\r\n            catch {\r\n                return clientValue.value ?? \"\";\r\n            }\r\n        }\r\n        catch {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    public override getCondensedTextValue(value: string, _configurationValues: Record<string, string>): string {\r\n        try {\r\n            const clientValue = JSON.parse(value ?? \"\") as ClientValue;\r\n\r\n            return clientValue.text ?? \"\";\r\n        }\r\n        catch {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    public override getEditComponent(): Component {\r\n        return editComponent;\r\n    }\r\n\r\n    public override isFilterable(): boolean {\r\n        return false;\r\n    }\r\n}\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { computed, defineComponent, inject, ref, watch } from \"vue\";\r\nimport { getFieldEditorProps } from \"./utils\";\r\nimport RockFormField from \"@Obsidian/Controls/rockFormField\";\r\nimport { ClientValue, ConfigurationValueKey, ValueItem } from \"./definedValueRangeField.partial\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport { asBoolean } from \"@Obsidian/Utility/booleanUtils\";\r\nimport { List } from \"@Obsidian/Utility/linq\";\r\n\r\nfunction parseModelValue(modelValue: string | undefined): string[] {\r\n    try {\r\n        const clientValue = JSON.parse(modelValue ?? \"\") as ClientValue;\r\n        const splitValue = (clientValue.value ?? \"\").split(\",\");\r\n\r\n        if (splitValue.length === 1) {\r\n            return [splitValue[0], \"\"];\r\n        }\r\n\r\n        return splitValue;\r\n    }\r\n    catch {\r\n        return [\"\", \"\"];\r\n    }\r\n}\r\n\r\nfunction getClientValue(lowerValue: string, upperValue: string, valueOptions: ValueItem[], showDescription: boolean): ClientValue {\r\n    const options = new List(valueOptions);\r\n    const lv = options.firstOrUndefined(v => v.value === lowerValue);\r\n    const uv = options.firstOrUndefined(v => v.value === upperValue);\r\n\r\n    if (!lv && !uv) {\r\n        return {\r\n            value: \"\",\r\n            text: \"\",\r\n            description: \"\"\r\n        };\r\n    }\r\n\r\n    return {\r\n        value: `${lv?.value ?? \"\"},${uv?.value ?? \"\"}`,\r\n        text: `${lv?.text ?? \"\"} to ${uv?.text ?? \"\"}`,\r\n        description: showDescription ? `${lv?.description ?? \"\"} to ${uv?.description ?? \"\"}` : \"\"\r\n    };\r\n}\r\n\r\nexport const EditComponent = defineComponent({\r\n    name: \"DefinedValueRangeField.Edit\",\r\n\r\n    components: {\r\n        RockFormField\r\n    },\r\n\r\n    props: getFieldEditorProps(),\r\n\r\n    setup(props, { emit }) {\r\n        const internalValues = parseModelValue(props.modelValue);\r\n        const internalValue = ref(props.modelValue);\r\n        const lowerValue = ref(internalValues[0]);\r\n        const upperValue = ref(internalValues[1]);\r\n\r\n        const valueOptions = computed((): ValueItem[] => {\r\n            try {\r\n                return JSON.parse(props.configurationValues[ConfigurationValueKey.Values] ?? \"[]\") as ValueItem[];\r\n            }\r\n            catch {\r\n                return [];\r\n            }\r\n        });\r\n\r\n        const showDescription = computed((): boolean => {\r\n            return asBoolean(props.configurationValues[ConfigurationValueKey.DisplayDescription]);\r\n        });\r\n\r\n        /** The options to choose from in the drop down list */\r\n        const options = computed((): ListItemBag[] => {\r\n            const providedOptions: ListItemBag[] = valueOptions.value.map(v => {\r\n                return {\r\n                    text: showDescription.value ? v.description : v.text,\r\n                    value: v.value\r\n                };\r\n            });\r\n\r\n            return providedOptions;\r\n        });\r\n\r\n        watch(() => props.modelValue, () => {\r\n            const internalValues = parseModelValue(props.modelValue);\r\n\r\n            lowerValue.value = internalValues[0];\r\n            upperValue.value = internalValues[1];\r\n        });\r\n\r\n        watch(() => [lowerValue.value, upperValue.value], () => {\r\n            const clientValue = getClientValue(lowerValue.value, upperValue.value, valueOptions.value, showDescription.value);\r\n\r\n            emit(\"update:modelValue\", JSON.stringify(clientValue));\r\n        });\r\n\r\n        return {\r\n            internalValue,\r\n            lowerValue,\r\n            upperValue,\r\n            isRequired: inject(\"isRequired\") as boolean,\r\n            options,\r\n            getKeyForOption(option: ListItemBag): string {\r\n                return option.value ?? \"\";\r\n            },\r\n            getTextForOption(option: ListItemBag): string {\r\n                return option.text ?? \"\";\r\n            }\r\n        };\r\n    },\r\n\r\n    template: `\r\n<RockFormField\r\n    v-model=\"internalValue\"\r\n    formGroupClasses=\"rock-defined-value-range\"\r\n    name=\"definedvaluerange\"\r\n    #default=\"{uniqueId}\"\r\n    :rules=\"computedRules\">\r\n    <div :id=\"uniqueId\" class=\"form-control-group\">\r\n        <select class=\"input-width-md form-control\" v-model=\"lowerValue\">\r\n            <option v-if=\"!isRequired\" value=\"\"></option>\r\n            <option v-for=\"o in options\" :key=\"o.value\" :value=\"o.value\">{{o.text}}</option>\r\n        </select>\r\n        <span class=\"to\"> to </span>\r\n        <select class=\"input-width-md form-control\" v-model=\"upperValue\">\r\n            <option v-if=\"!isRequired\" value=\"\"></option>\r\n            <option v-for=\"o in options\" :key=\"o.value\" :value=\"o.value\">{{o.text}}</option>\r\n        </select>\r\n    </div>\r\n</RockFormField>\r\n`\r\n});\r\n"],"names":["ConfigurationValueKey","defineAsyncComponent","_asyncToGenerator","EditComponent","parseModelValue","modelValue","_clientValue$value","clientValue","JSON","parse","splitValue","value","split","length","_unused","getClientValue","lowerValue","upperValue","valueOptions","showDescription","_lv$value","_uv$value","_lv$text","_uv$text","_lv$description","_uv$description","options","List","lv","firstOrUndefined","v","uv","text","description","concat","defineComponent","name","components","RockFormField","props","getFieldEditorProps","setup","_ref","emit","internalValues","internalValue","ref","computed","_props$configurationV","configurationValues","Values","_unused2","asBoolean","DisplayDescription","providedOptions","map","watch","stringify","isRequired","inject","getKeyForOption","option","_option$value","getTextForOption","_option$text","template"],"mappings":"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"}