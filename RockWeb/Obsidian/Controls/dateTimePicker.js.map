{"version":3,"file":"dateTimePicker.js","sources":["../../../Framework/Controls/dateTimePicker.ts"],"sourcesContent":["ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { defineComponent, PropType } from \"vue\";\r\nimport { toNumber } from \"@Obsidian/Utility/numberUtils\";\r\nimport RockFormField from \"./rockFormField\";\r\nimport TextBox from \"./textBox\";\r\nimport BasicTimePicker from \"./basicTimePicker\";\r\nimport { TimePickerValue } from \"./timePicker\";\r\nimport { padLeft } from \"@Obsidian/Utility/stringUtils\";\r\nimport { RockDateTime } from \"@Obsidian/Utility/rockDateTime\";\r\n\r\ntype Rock = {\r\n    controls: {\r\n        datePicker: {\r\n            initialize: (args: Record<string, unknown>) => void;\r\n        };\r\n    };\r\n};\r\n\r\ndeclare global {\r\n    /* eslint-disable @typescript-eslint/naming-convention */\r\n    interface Window {\r\n        Rock: Rock;\r\n    }\r\n    /* eslint-enable @typescript-eslint/naming-convention */\r\n}\r\n\r\nexport default defineComponent({\r\n    name: \"DateTimePicker\",\r\n\r\n    components: {\r\n        RockFormField,\r\n        BasicTimePicker,\r\n        TextBox\r\n    },\r\n\r\n    props: {\r\n        modelValue: {\r\n            type: String as PropType<string | null>,\r\n            default: null\r\n        },\r\n        displayCurrentOption: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n        isCurrentDateOffset: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        }\r\n    },\r\n\r\n    emits: [\r\n        \"update:modelValue\"\r\n    ],\r\n\r\n    data: function () {\r\n        return {\r\n            internalDateValue: null as string | null,\r\n            internalTimeValue: {} as TimePickerValue,\r\n            isCurrent: false,\r\n            currentDiff: \"0\",\r\n            validationValue: \"\",\r\n            skipEmit: false\r\n        };\r\n    },\r\n\r\n    computed: {\r\n        asRockDateTimeOrNull(): string | null {\r\n            if (this.internalDateValue) {\r\n                const dateMatch = /^(\\d+)\\/(\\d+)\\/(\\d+)/.exec(this.internalDateValue ?? \"\");\r\n\r\n                if (dateMatch === null) {\r\n                    return null;\r\n                }\r\n\r\n                let date = RockDateTime.fromParts(toNumber(dateMatch[3]), toNumber(dateMatch[1]), toNumber(dateMatch[2]));\r\n\r\n                if (date === null) {\r\n                    return null;\r\n                }\r\n\r\n                if (this.internalTimeValue.hour !== undefined && this.internalTimeValue.minute !== undefined) {\r\n                    date = date?.addHours(this.internalTimeValue.hour).addMinutes(this.internalTimeValue.minute);\r\n                }\r\n\r\n                const year = date.year.toString();\r\n                const month = padLeft(date.month.toString(), 2, \"0\");\r\n                const day = padLeft(date.day.toString(), 2, \"0\");\r\n                const hour = padLeft(date.hour.toString(), 2, \"0\");\r\n                const minute = padLeft(date.minute.toString(), 2, \"0\");\r\n                const second = padLeft(date.second.toString(), 2, \"0\");\r\n                const millisecond = padLeft(date.millisecond.toString(), 3, \"0\");\r\n\r\n                // Construct it manually so it doesn't get converted to UTC.\r\n                return `${year}-${month}-${day}T${hour}:${minute}:${second}.${millisecond}`;\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        },\r\n\r\n        asCurrentDateValue(): string {\r\n            const plusMinus = `${toNumber(this.currentDiff)}`;\r\n            return `CURRENT:${plusMinus}`;\r\n        },\r\n\r\n        valueToEmit(): string | string | null {\r\n            if (this.isCurrent) {\r\n                return this.asCurrentDateValue;\r\n            }\r\n\r\n            return this.asRockDateTimeOrNull ?? \"\";\r\n        }\r\n    },\r\n\r\n    watch: {\r\n        isCurrentDateOffset: {\r\n            immediate: true,\r\n            handler(): void {\r\n                if (!this.isCurrentDateOffset) {\r\n                    this.currentDiff = \"0\";\r\n                }\r\n            }\r\n        },\r\n\r\n        valueToEmit(): void {\r\n            if (!this.skipEmit) {\r\n                this.$emit(\"update:modelValue\", this.valueToEmit);\r\n            }\r\n        },\r\n\r\n        modelValue: {\r\n            immediate: true,\r\n            handler(): void {\r\n                if (!this.modelValue) {\r\n                    this.internalDateValue = null;\r\n                    this.internalTimeValue = {};\r\n                    this.isCurrent = false;\r\n                    this.currentDiff = \"0\";\r\n                    return;\r\n                }\r\n\r\n                if (this.modelValue.indexOf(\"CURRENT\") === 0) {\r\n                    const parts = this.modelValue.split(\":\");\r\n\r\n                    if (parts.length === 2) {\r\n                        this.currentDiff = `${toNumber(parts[1])}`;\r\n                    }\r\n\r\n                    this.isCurrent = true;\r\n\r\n                    return;\r\n                }\r\n\r\n                const date = RockDateTime.parseISO(this.modelValue);\r\n\r\n                /*\r\n                 * This is an anti-pattern, but I couldn't find a quick way\r\n                 * around this. Without this, we would set the date and then\r\n                 * emit just the date part before we had a chance to set the\r\n                 * time. There is likely a better way to do this. -dsh.\r\n                 */\r\n                this.skipEmit = true;\r\n                if (date === null) {\r\n                    this.internalDateValue = null;\r\n                    this.internalTimeValue = {};\r\n                }\r\n                else {\r\n                    this.internalDateValue = `${date.month}/${date.day}/${date.year}`;\r\n                    this.internalTimeValue = {\r\n                        hour: date.hour,\r\n                        minute: date.minute\r\n                    };\r\n                }\r\n                this.skipEmit = false;\r\n            }\r\n        },\r\n\r\n        displayCurrentOption() {\r\n            if (!this.displayCurrentOption && this.isCurrent) {\r\n                this.internalDateValue = null;\r\n                this.internalTimeValue = {};\r\n                this.isCurrent = false;\r\n                this.currentDiff = \"0\";\r\n            }\r\n        }\r\n    },\r\n\r\n    mounted() {\r\n        const input = this.$refs[\"input\"] as HTMLInputElement;\r\n        const inputId = input.id;\r\n\r\n        window.Rock.controls.datePicker.initialize({\r\n            id: inputId,\r\n            startView: 0,\r\n            showOnFocus: true,\r\n            format: \"mm/dd/yyyy\",\r\n            todayHighlight: true,\r\n            forceParse: true,\r\n            onChangeScript: () => {\r\n                if (!this.isCurrent) {\r\n                    this.internalDateValue = input.value;\r\n                }\r\n            }\r\n        });\r\n    },\r\n\r\n    template: `\r\n<RockFormField formGroupClasses=\"date-picker\" #default=\"{uniqueId}\" name=\"datepicker\" v-model.lazy=\"internalDateValue\">\r\n    <div class=\"control-wrapper\">\r\n        <div class=\"form-control-group\">\r\n            <div class=\"form-row\">\r\n                <div class=\"input-group input-width-md js-date-picker date\">\r\n                    <input ref=\"input\" type=\"text\" :id=\"uniqueId\" class=\"form-control\" v-model.lazy=\"internalDateValue\" :disabled=\"isCurrent\" />\r\n                    <span class=\"input-group-addon\">\r\n                        <i class=\"fa fa-calendar\"></i>\r\n                    </span>\r\n                </div>\r\n                <BasicTimePicker v-model=\"internalTimeValue\" :disabled=\"isCurrent\" />\r\n                <div v-if=\"displayCurrentOption\" class=\"input-group\">\r\n                    <div class=\"checkbox\">\r\n                        <label title=\"\">\r\n                        <input type=\"checkbox\" v-model=\"isCurrent\" />\r\n                        <span class=\"label-text\">Current Time</span></label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div v-if=\"isCurrent && isCurrentDateOffset\" class=\"form-row\">\r\n                <TextBox label=\"+- Minutes\" v-model=\"currentDiff\" inputClasses=\"input-width-md\" help=\"Enter the number of minutes after the current time to use as the date. Use a negative number to specify minutes before.\" />\r\n            </div>\r\n        </div>\r\n    </div>\r\n</RockFormField>`\r\n});\r\n"],"names":["defineComponent","name","components","RockFormField","BasicTimePicker","TextBox","props","modelValue","type","String","default","displayCurrentOption","Boolean","isCurrentDateOffset","emits","data","internalDateValue","internalTimeValue","isCurrent","currentDiff","validationValue","skipEmit","computed","asRockDateTimeOrNull","_this$internalDateVal","dateMatch","exec","date","RockDateTime","fromParts","toNumber","hour","undefined","minute","_date","addHours","addMinutes","year","toString","month","padLeft","day","second","millisecond","concat","asCurrentDateValue","plusMinus","valueToEmit","_this$asRockDateTimeO","watch","immediate","handler","$emit","indexOf","parts","split","length","parseISO","mounted","input","$refs","inputId","id","window","Rock","controls","datePicker","initialize","startView","showOnFocus","format","todayHighlight","forceParse","onChangeScript","value","template"],"mappings":"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"}