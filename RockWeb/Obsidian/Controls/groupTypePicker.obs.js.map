{"version":3,"file":"groupTypePicker.obs.js","sources":["../../../Framework/Controls/groupTypePicker.obs"],"sourcesContent":["<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <BaseAsyncPicker v-model=\"internalValue\" v-bind=\"standardProps\" :items=\"actualItems\" />\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { Guid } from \"@Obsidian/Types\";\r\n    import { standardAsyncPickerProps, useStandardAsyncPickerProps, useVModelPassthrough } from \"@Obsidian/Utility/component\";\r\n    import { useHttp } from \"@Obsidian/Utility/http\";\r\n    import { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\n    import { computed, PropType, ref, watch } from \"vue\";\r\n    import BaseAsyncPicker from \"./baseAsyncPicker\";\r\n    import { GroupTypePickerGetGroupTypesOptionsBag } from \"@Obsidian/ViewModels/Rest/Controls/groupTypePickerGetGroupTypesOptionsBag\";\r\n\r\n    const props = defineProps({\r\n        /** The currently selected group type value(s). */\r\n        modelValue: {\r\n            type: Object as PropType<ListItemBag | ListItemBag[] | null>,\r\n            required: false\r\n        },\r\n\r\n        /** List of Group Type GUIDs of the Group Types to include in the picker. If null, include all Group Types */\r\n        groupTypes: {\r\n            type: Array as PropType<Guid[] | null>,\r\n            default: []\r\n        },\r\n\r\n        /** Whether to sort by name of the group type. Otherwise sort by order */\r\n        isSortedByName: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        /** Only show the group types flagged to be shown in the group list */\r\n        onlyGroupListItems: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        ...standardAsyncPickerProps\r\n    });\r\n\r\n    const emit = defineEmits<{\r\n        (e: \"update:modelValue\", value: ListItemBag | ListItemBag[] | null): void\r\n    }>();\r\n\r\n    // #region Values\r\n\r\n    const internalValue = useVModelPassthrough(props, \"modelValue\", emit);\r\n    const standardProps = useStandardAsyncPickerProps(props);\r\n    const http = useHttp();\r\n    const loadedItems = ref<ListItemBag[] | null>(null);\r\n\r\n    // #endregion\r\n\r\n    // #region Computed Values\r\n\r\n    /**\r\n     * The actual items to make available to the picker. This allows us to do any\r\n     * post-processing, such as adding additional items, and still be lazy loaded as well.\r\n     */\r\n    const actualItems = computed((): ListItemBag[] | (() => Promise<ListItemBag[]>) => {\r\n        return loadedItems.value || loadOptions;\r\n    });\r\n\r\n    // #endregion\r\n\r\n    // #region Functions\r\n\r\n    /**\r\n     * Loads the items from the server.\r\n     */\r\n    const loadOptions = async (): Promise<ListItemBag[]> => {\r\n        const options: GroupTypePickerGetGroupTypesOptionsBag = {\r\n            groupTypes: props.groupTypes,\r\n            isSortedByName: props.isSortedByName,\r\n            onlyGroupListItems: props.onlyGroupListItems\r\n        };\r\n        const result = await http.post<ListItemBag[]>(\"/api/v2/Controls/GroupTypePickerGetGroupTypes\", undefined, options);\r\n\r\n        if (result.isSuccess && result.data) {\r\n            loadedItems.value = result.data;\r\n            return result.data;\r\n        }\r\n        else {\r\n            console.error(result.errorMessage ?? \"Unknown error while loading data.\");\r\n            loadedItems.value = [];\r\n            return [];\r\n        }\r\n    };\r\n\r\n    // #endregion\r\n\r\n    // #region Watchers\r\n\r\n    // Reload elements when props change\r\n    watch(() => [props.groupTypes, props.isSortedByName], () => {\r\n        loadedItems.value = null;\r\n    });\r\n\r\n        // #endregion\r\n</script>\r\n"],"names":["internalValue","useVModelPassthrough","props","emit","standardProps","useStandardAsyncPickerProps","http","useHttp","loadedItems","ref","actualItems","computed","value","loadOptions","_ref2","_asyncToGenerator","options","groupTypes","isSortedByName","onlyGroupListItems","result","post","undefined","isSuccess","data","_result$errorMessage","console","error","errorMessage","apply","arguments","watch"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAgDI,IAAMA,aAAa,GAAGC,oBAAoB,CAACC,KAAK,EAAE,YAAY,EAAEC,IAAI,CAAC,CAAA;MACrE,IAAA,IAAMC,aAAa,GAAGC,2BAA2B,CAACH,KAAK,CAAC,CAAA;UACxD,IAAMI,IAAI,GAAGC,OAAO,EAAE,CAAA;MACtB,IAAA,IAAMC,WAAW,GAAGC,GAAG,CAAuB,IAAI,CAAC,CAAA;MAUnD,IAAA,IAAMC,WAAW,GAAGC,QAAQ,CAAC,MAAsD;MAC/E,MAAA,OAAOH,WAAW,CAACI,KAAK,IAAIC,WAAW,CAAA;MAC3C,KAAC,CAAC,CAAA;MASF,IAAA,IAAMA,WAAW,GAAA,YAAA;MAAA,MAAA,IAAAC,KAAA,GAAAC,iBAAA,CAAG,aAAoC;MACpD,QAAA,IAAMC,OAA+C,GAAG;gBACpDC,UAAU,EAAEf,KAAK,CAACe,UAAU;gBAC5BC,cAAc,EAAEhB,KAAK,CAACgB,cAAc;gBACpCC,kBAAkB,EAAEjB,KAAK,CAACiB,kBAAAA;eAC7B,CAAA;cACD,IAAMC,MAAM,GAASd,MAAAA,IAAI,CAACe,IAAI,CAAgB,+CAA+C,EAAEC,SAAS,EAAEN,OAAO,CAAC,CAAA;MAElH,QAAA,IAAII,MAAM,CAACG,SAAS,IAAIH,MAAM,CAACI,IAAI,EAAE;MACjChB,UAAAA,WAAW,CAACI,KAAK,GAAGQ,MAAM,CAACI,IAAI,CAAA;gBAC/B,OAAOJ,MAAM,CAACI,IAAI,CAAA;MACtB,SAAC,MACI;MAAA,UAAA,IAAAC,oBAAA,CAAA;MACDC,UAAAA,OAAO,CAACC,KAAK,CAAAF,CAAAA,oBAAA,GAACL,MAAM,CAACQ,YAAY,MAAA,IAAA,IAAAH,oBAAA,KAAA,KAAA,CAAA,GAAAA,oBAAA,GAAI,mCAAmC,CAAC,CAAA;gBACzEjB,WAAW,CAACI,KAAK,GAAG,EAAE,CAAA;MACtB,UAAA,OAAO,EAAE,CAAA;MACb,SAAA;aACH,CAAA,CAAA;MAAA,MAAA,OAAA,SAjBKC,WAAWA,GAAA;MAAA,QAAA,OAAAC,KAAA,CAAAe,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;MAAA,OAAA,CAAA;WAiBhB,EAAA,CAAA;MAODC,IAAAA,KAAK,CAAC,MAAM,CAAC7B,KAAK,CAACe,UAAU,EAAEf,KAAK,CAACgB,cAAc,CAAC,EAAE,MAAM;YACxDV,WAAW,CAACI,KAAK,GAAG,IAAI,CAAA;MAC5B,KAAC,CAAC,CAAA;;;;;;;;;;;;;;;;;;;;"}