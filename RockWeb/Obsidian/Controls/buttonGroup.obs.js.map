{"version":3,"file":"buttonGroup.obs.js","sources":["../../../Framework/Controls/buttonGroup.obs"],"sourcesContent":["<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <RockFormField v-bind=\"standardFieldProps\" name=\"maxAge\" :modelValue=\"internalValue\">\r\n        <div class=\"btn-group\">\r\n            <RockButton v-for=\"(item, index) in items\" @click=\"internalValue = item.value\" :btnSize=\"btnSize\" :btnType=\"itemButtonType(item)\">{{item.text}}</RockButton>\r\n        </div>\r\n    </RockFormField>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { PropType, computed } from \"vue\";\r\n    import RockFormField from \"@Obsidian/Controls/rockFormField\";\r\n    import RockButton from \"@Obsidian/Controls/rockButton\";\r\n    import { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\n    import { BtnType } from \"@Obsidian/Enums/Controls/btnType\";\r\n    import { BtnSize } from \"@Obsidian/Enums/Controls/btnSize\";\r\n    import { standardRockFormFieldProps, useStandardRockFormFieldProps } from \"@Obsidian/Utility/component\";\r\n    import { LiteralUnion } from \"@Obsidian/Types/Utility/support\";\r\n\r\n    // Use ListItemBag, but don't worry about the \"category\" property and make the other properties not null/undefined\r\n    type StandardListItemBag = {\r\n        [P in keyof Pick<ListItemBag, \"text\" | \"value\">]-?: NonNullable<ListItemBag[P]>;\r\n    };\r\n\r\n    const props = defineProps({\r\n        modelValue: {\r\n            type: Object as PropType<string>,\r\n            required: true\r\n        },\r\n\r\n        items: {\r\n            type: Array as PropType<StandardListItemBag[]>,\r\n            default: () => []\r\n        },\r\n\r\n        unselectedBtnType: {\r\n            type: String as PropType<LiteralUnion<BtnType>>,\r\n            default: BtnType.Default\r\n        },\r\n\r\n        selectedBtnType: {\r\n            type: String as PropType<LiteralUnion<BtnType>>,\r\n            default: BtnType.Primary\r\n        },\r\n\r\n        btnSize: {\r\n            type: String as PropType<BtnSize>,\r\n            default: BtnSize.Default\r\n        },\r\n\r\n        ...standardRockFormFieldProps\r\n    });\r\n\r\n    const emit = defineEmits<{\r\n        (e: \"update:modelValue\", _value: string): void\r\n    }>();\r\n\r\n    const internalValue = computed<string>({\r\n        get() {\r\n            return props.modelValue;\r\n        },\r\n        set(newValue) {\r\n            emit(\"update:modelValue\", newValue);\r\n        }\r\n    });\r\n\r\n    function itemButtonType(item: StandardListItemBag): LiteralUnion<BtnType> {\r\n        return item.value == internalValue.value ? props.selectedBtnType : props.unselectedBtnType;\r\n    }\r\n\r\n    const standardFieldProps = useStandardRockFormFieldProps(props);\r\n</script>\r\n"],"names":["internalValue","computed","get","props","modelValue","set","newValue","emit","itemButtonType","item","value","selectedBtnType","unselectedBtnType","standardFieldProps","useStandardRockFormFieldProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAyDI,IAAMA,aAAa,GAAGC,QAAQ,CAAS;MACnCC,MAAAA,GAAGA,GAAG;cACF,OAAOC,KAAK,CAACC,UAAU,CAAA;aAC1B;YACDC,GAAGA,CAACC,QAAQ,EAAE;MACVC,QAAAA,IAAI,CAAC,mBAAmB,EAAED,QAAQ,CAAC,CAAA;MACvC,OAAA;MACJ,KAAC,CAAC,CAAA;UAEF,SAASE,cAAcA,CAACC,IAAyB,EAAyB;MACtE,MAAA,OAAOA,IAAI,CAACC,KAAK,IAAIV,aAAa,CAACU,KAAK,GAAGP,KAAK,CAACQ,eAAe,GAAGR,KAAK,CAACS,iBAAiB,CAAA;MAC9F,KAAA;MAEA,IAAA,IAAMC,kBAAkB,GAAGC,6BAA6B,CAACX,KAAK,CAAC,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}