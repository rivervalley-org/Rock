{"version":3,"file":"reminderTypePicker.obs.js","sources":["../../../Framework/Controls/reminderTypePicker.obs"],"sourcesContent":["<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <BaseAsyncPicker v-model=\"internalValue\"\r\n                     v-bind=\"standardProps\"\r\n                     :displayStyle=\"displayStyle\"\r\n                     :items=\"actualItems\" />\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { Guid } from \"@Obsidian/Types\";\r\n    import { PickerDisplayStyle } from \"@Obsidian/Enums/Controls/pickerDisplayStyle\";\r\n    import { standardAsyncPickerProps, useStandardAsyncPickerProps, useVModelPassthrough } from \"@Obsidian/Utility/component\";\r\n    import { useHttp } from \"@Obsidian/Utility/http\";\r\n    import { ReminderTypePickerGetReminderTypesOptionsBag } from \"@Obsidian/ViewModels/Rest/Controls/reminderTypePickerGetReminderTypesOptionsBag\";\r\n    import { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\n    import { PropType, computed, ref, watch } from \"vue\";\r\n    import BaseAsyncPicker from \"./baseAsyncPicker\";\r\n\r\n    const props = defineProps({\r\n        /** The currently selected value(s). */\r\n        modelValue: {\r\n            type: Object as PropType<ListItemBag | ListItemBag[] | null>,\r\n            required: false\r\n        },\r\n\r\n        /** Filter the resulting reminder types to only be of the given entity type */\r\n        entityTypeGuid: {\r\n            type: String as PropType<Guid>,\r\n            required: false\r\n        },\r\n\r\n        ...standardAsyncPickerProps\r\n    });\r\n\r\n    const emit = defineEmits<{\r\n        (e: \"update:modelValue\", value: ListItemBag | ListItemBag[] | null): void\r\n    }>();\r\n\r\n    // #region Values\r\n\r\n    const internalValue = useVModelPassthrough(props, \"modelValue\", emit);\r\n    const standardProps = useStandardAsyncPickerProps(props);\r\n    const http = useHttp();\r\n    const loadedItems = ref<ListItemBag[] | null>(null);\r\n\r\n    // #endregion\r\n\r\n    // #region Computed Values\r\n\r\n    /**\r\n     * The actual items to make available to the picker. This allows us to do any\r\n     * post-processing, such as adding additional items, and still be lazy loaded as well.\r\n     */\r\n    const actualItems = computed((): ListItemBag[] | (() => Promise<ListItemBag[]>) => {\r\n        return loadedItems.value || loadOptions;\r\n    });\r\n\r\n    const displayStyle = computed((): PickerDisplayStyle => {\r\n        if (standardProps.displayStyle !== PickerDisplayStyle.Auto) {\r\n            return standardProps.displayStyle;\r\n        }\r\n\r\n        return standardProps.multiple ? PickerDisplayStyle.List : PickerDisplayStyle.Auto;\r\n    });\r\n\r\n    // #endregion\r\n\r\n    // #region Functions\r\n\r\n    /**\r\n     * Loads the items from the server.\r\n     */\r\n    async function loadOptions(): Promise<ListItemBag[]> {\r\n        const options: Partial<ReminderTypePickerGetReminderTypesOptionsBag> = {\r\n            entityTypeGuid: props.entityTypeGuid\r\n        };\r\n        const result = await http.post<ListItemBag[]>(\"/api/v2/Controls/ReminderTypePickerGetReminderTypes\", undefined, options);\r\n\r\n        if (result.isSuccess && result.data) {\r\n            loadedItems.value = result.data;\r\n\r\n            return result.data;\r\n        }\r\n        else {\r\n            console.error(result.errorMessage ?? \"Unknown error while loading data.\");\r\n            loadedItems.value = [];\r\n            return [];\r\n        }\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Watchers\r\n\r\n    // Refetch options when entity type guid changes\r\n    watch(() => props.entityTypeGuid, () => loadedItems.value = null);\r\n\r\n            // #endregion\r\n\r\n</script>\r\n"],"names":["internalValue","useVModelPassthrough","props","emit","standardProps","useStandardAsyncPickerProps","http","useHttp","loadedItems","ref","actualItems","computed","value","loadOptions","displayStyle","PickerDisplayStyle","Auto","multiple","List","_loadOptions","apply","arguments","_asyncToGenerator","options","entityTypeGuid","result","post","undefined","isSuccess","data","_result$errorMessage","console","error","errorMessage","watch"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAwCI,IAAMA,aAAa,GAAGC,oBAAoB,CAACC,KAAK,EAAE,YAAY,EAAEC,IAAI,CAAC,CAAA;MACrE,IAAA,IAAMC,aAAa,GAAGC,2BAA2B,CAACH,KAAK,CAAC,CAAA;UACxD,IAAMI,IAAI,GAAGC,OAAO,EAAE,CAAA;MACtB,IAAA,IAAMC,WAAW,GAAGC,GAAG,CAAuB,IAAI,CAAC,CAAA;MAUnD,IAAA,IAAMC,WAAW,GAAGC,QAAQ,CAAC,MAAsD;MAC/E,MAAA,OAAOH,WAAW,CAACI,KAAK,IAAIC,WAAW,CAAA;MAC3C,KAAC,CAAC,CAAA;MAEF,IAAA,IAAMC,YAAY,GAAGH,QAAQ,CAAC,MAA0B;MACpD,MAAA,IAAIP,aAAa,CAACU,YAAY,KAAKC,kBAAkB,CAACC,IAAI,EAAE;cACxD,OAAOZ,aAAa,CAACU,YAAY,CAAA;MACrC,OAAA;YAEA,OAAOV,aAAa,CAACa,QAAQ,GAAGF,kBAAkB,CAACG,IAAI,GAAGH,kBAAkB,CAACC,IAAI,CAAA;MACrF,KAAC,CAAC,CAAA;MAAC,IAAA,SASYH,WAAWA,GAAA;MAAA,MAAA,OAAAM,YAAA,CAAAC,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;MAAA,KAAA;MAAA,IAAA,SAAAF,YAAA,GAAA;YAAAA,YAAA,GAAAG,iBAAA,CAA1B,aAAqD;MACjD,QAAA,IAAMC,OAA8D,GAAG;gBACnEC,cAAc,EAAEtB,KAAK,CAACsB,cAAAA;eACzB,CAAA;cACD,IAAMC,MAAM,GAASnB,MAAAA,IAAI,CAACoB,IAAI,CAAgB,qDAAqD,EAAEC,SAAS,EAAEJ,OAAO,CAAC,CAAA;MAExH,QAAA,IAAIE,MAAM,CAACG,SAAS,IAAIH,MAAM,CAACI,IAAI,EAAE;MACjCrB,UAAAA,WAAW,CAACI,KAAK,GAAGa,MAAM,CAACI,IAAI,CAAA;gBAE/B,OAAOJ,MAAM,CAACI,IAAI,CAAA;MACtB,SAAC,MACI;MAAA,UAAA,IAAAC,oBAAA,CAAA;MACDC,UAAAA,OAAO,CAACC,KAAK,CAAAF,CAAAA,oBAAA,GAACL,MAAM,CAACQ,YAAY,MAAA,IAAA,IAAAH,oBAAA,KAAA,KAAA,CAAA,GAAAA,oBAAA,GAAI,mCAAmC,CAAC,CAAA;gBACzEtB,WAAW,CAACI,KAAK,GAAG,EAAE,CAAA;MACtB,UAAA,OAAO,EAAE,CAAA;MACb,SAAA;aACH,CAAA,CAAA;MAAA,MAAA,OAAAO,YAAA,CAAAC,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;MAAA,KAAA;MAODa,IAAAA,KAAK,CAAC,MAAMhC,KAAK,CAACsB,cAAc,EAAE,MAAMhB,WAAW,CAACI,KAAK,GAAG,IAAI,CAAC,CAAA;;;;;;;;;;;;;;;;;;;;;"}