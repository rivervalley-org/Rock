{"version":3,"file":"electronicSignature.js","sources":["../../../Framework/Controls/electronicSignature.ts"],"sourcesContent":["// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { computed, defineComponent, PropType, ref, watch } from \"vue\";\r\nimport RockButton from \"./rockButton\";\r\nimport TextBox from \"./textBox\";\r\nimport EmailBox from \"./emailBox\";\r\nimport { loadJavaScriptAsync } from \"@Obsidian/Utility/page\";\r\nimport { updateRefValue } from \"@Obsidian/Utility/component\";\r\nimport { ElectronicSignatureValue } from \"@Obsidian/ViewModels/Controls/electronicSignatureValue\";\r\nimport RockForm from \"./rockForm\";\r\nimport { useStore } from \"@Obsidian/PageState\";\r\n\r\n// #region SignaturePad library types.\r\n\r\ninterface ISignaturePadOptions {\r\n    penColor?: string | undefined;\r\n    backgroundColor?: string | undefined;\r\n}\r\n\r\ndeclare class SignaturePad {\r\n    constructor(canvas: HTMLCanvasElement, options?: ISignaturePadOptions);\r\n    clear: () => void;\r\n    toDataURL: (type?: string) => string;\r\n    off: () => void;\r\n    addEventListener: (type: string, listener: EventListenerOrEventListenerObject | null, options?: boolean | AddEventListenerOptions) => void;\r\n    removeEventListener: (type: string, callback: EventListenerOrEventListenerObject | null, options?: boolean | EventListenerOptions) => void;\r\n}\r\n\r\ndeclare global {\r\n    /* eslint-disable-next-line */\r\n    var SignaturePad: SignaturePad | undefined;\r\n}\r\n\r\n// #endregion\r\n\r\n// Start loading the signature pad script so that it is available for us\r\n// to use later when the control becomes visible.\r\nconst signaturePadPromise = loadJavaScriptAsync(\"/Scripts/signature_pad/signature_pad.umd.min.js\", () => !!window.SignaturePad);\r\n\r\nexport default defineComponent({\r\n    name: \"ElectronicSignature\",\r\n\r\n    components: {\r\n        RockButton,\r\n        RockForm,\r\n        TextBox,\r\n        EmailBox\r\n    },\r\n\r\n    props: {\r\n        modelValue: {\r\n            type: Object as PropType<ElectronicSignatureValue>,\r\n            required: false\r\n        },\r\n\r\n        isDrawn: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        documentTerm: {\r\n            type: String as PropType<string>,\r\n            default: \"document\"\r\n        }\r\n    },\r\n\r\n    emits: {\r\n        \"update:modelValue\": (_data: ElectronicSignatureValue) => true,\r\n        \"signed\": () => true\r\n    },\r\n\r\n    setup(props, { emit }) {\r\n        // #region Values\r\n\r\n        const store = useStore();\r\n\r\n        const signatureData = ref(props.modelValue?.signatureData ?? \"\");\r\n        const signedByName = ref(props.modelValue?.signedByName ?? \"\");\r\n        const signedByEmail = ref(props.modelValue?.signedByEmail ?? store.state.currentPerson?.email ?? \"\");\r\n\r\n        const signatureCanvas = ref<HTMLCanvasElement | null>(null);\r\n        const signatureCanvasContainer = ref<HTMLElement | null>(null);\r\n        const isSigning = ref(true);\r\n\r\n        let signaturePad: SignaturePad | null = null;\r\n\r\n        // #endregion\r\n\r\n        // #region Computed Values\r\n\r\n        const signedByEmailLabel = computed((): string => {\r\n            return `Please enter an email address below where we can send a copy of the ${props.documentTerm.toLowerCase()} to.`;\r\n        });\r\n\r\n        // #endregion\r\n\r\n        // #region Functions\r\n\r\n        /**\r\n         * Resize the signature canvas element to be the width of the container.\r\n         * This also handles keeping the signature pad content in sync after\r\n         * the resize operation happens.\r\n         */\r\n        const resizeSignatureCanvas = (): void => {\r\n            if (signaturePad === null || signatureCanvas.value === null || signatureCanvasContainer.value === null) {\r\n                return;\r\n            }\r\n\r\n            // If the window is resized, that'll affect the drawing canvas\r\n            // also, if there is an existing signature, it'll get messed up, so clear it and\r\n            // make them sign it again. See additional details why\r\n            // https://github.com/szimek/signature_pad\r\n            let containerWidth = signatureCanvasContainer.value.clientWidth;\r\n            if (containerWidth === 0) {\r\n                containerWidth = 400;\r\n            }\r\n\r\n            // Note the suggestion  https://github.com/szimek/signature_pad#handling-high-dpi-screens\r\n            // to re-calculate the ratio based on window.devicePixelRatio isn't needed.\r\n            // We can just use the width() of the container and use fixed height of 100.\r\n            const ratio = 1;\r\n            signatureCanvas.value.width = containerWidth * ratio;\r\n            signatureCanvas.value.height = 100 * ratio;\r\n            signatureCanvas.value.getContext(\"2d\")?.scale(ratio, ratio);\r\n\r\n            // Clear the signature content so it isn't all skewed.\r\n            signaturePad.clear();\r\n        };\r\n\r\n        // #endregion\r\n\r\n        // #region Event Handlers\r\n\r\n        /**\r\n         * Event handler for when the individual clicks the clear button.\r\n         */\r\n        const onClearClick = (): void => {\r\n            // Clear the signature contents out of the UI.\r\n            signatureData.value = \"\";\r\n            signaturePad?.clear();\r\n        };\r\n\r\n        /**\r\n         * Event handler for when the form has validated and can be submitted.\r\n         * This is called indirectly in response to the \"sign\" and \"complete\" buttons.\r\n         */\r\n        const onSubmit = (): void => {\r\n            if (isSigning.value) {\r\n                // \"sign\" was clicked, move to the complete stage.\r\n                isSigning.value = false;\r\n\r\n                if (!signedByName.value && store.state.currentPerson) {\r\n                    signedByName.value = store.state.currentPerson.fullName ?? \"\";\r\n                }\r\n            }\r\n            else {\r\n                // \"complete\" was clicked, store the new value and emit events.\r\n                const newValue: ElectronicSignatureValue = {\r\n                    signatureData: signatureData.value,\r\n                    signedByName: signedByName.value,\r\n                    signedByEmail: signedByEmail.value\r\n                };\r\n\r\n                emit(\"update:modelValue\", newValue);\r\n                emit(\"signed\");\r\n            }\r\n        };\r\n\r\n        // #endregion\r\n\r\n        // Watch for changes to the model value and update our internal\r\n        // signature values.\r\n        watch(() => props.modelValue, () => {\r\n            let isChanged = false;\r\n            if (props.modelValue?.signatureData === signatureData.value && props.modelValue?.signedByName === signedByName.value && props.modelValue?.signedByEmail === signedByName.value) {\r\n                return;\r\n            }\r\n\r\n            isChanged ||= updateRefValue(signatureData, props.modelValue?.signatureData ?? \"\");\r\n            isChanged ||= updateRefValue(signedByName, props.modelValue?.signedByName ?? \"\");\r\n            isChanged ||= updateRefValue(signedByEmail, props.modelValue?.signedByEmail ?? \"\");\r\n\r\n            // Reset back to the sign state if anything actually changed.\r\n            if (isChanged) {\r\n                isSigning.value = true;\r\n\r\n                if (signaturePad !== null) {\r\n                    signaturePad.clear();\r\n                }\r\n            }\r\n        });\r\n\r\n        // Watch for the signature canvas to appear or disappear and setup or\r\n        // tear down the signature pad object as needed.\r\n        watch(signatureCanvas, async () => {\r\n            if (signatureCanvas.value !== null) {\r\n                await signaturePadPromise;\r\n\r\n                signaturePad = new SignaturePad(signatureCanvas.value, {\r\n                    backgroundColor: \"white\",\r\n                    penColor: \"black\"\r\n                });\r\n\r\n                signaturePad.addEventListener(\"endStroke\", () => {\r\n                    signatureData.value = signaturePad?.toDataURL(\"image/png\") ?? \"\";\r\n                });\r\n\r\n                resizeSignatureCanvas();\r\n            }\r\n            else {\r\n                signaturePad?.off();\r\n                signaturePad = null;\r\n            }\r\n        });\r\n\r\n        // Listen for window resize events so we can update the canvas size.\r\n        window.addEventListener(\"resize\", () => resizeSignatureCanvas());\r\n\r\n        return {\r\n            isSigning,\r\n            onClearClick,\r\n            onSubmit,\r\n            signatureCanvas,\r\n            signatureCanvasContainer,\r\n            signedByEmail,\r\n            signedByEmailLabel,\r\n            signedByName,\r\n            signatureData,\r\n        };\r\n    },\r\n\r\n    template: `\r\n<div>\r\n    <div v-if=\"isSigning\" class=\"signature-entry\">\r\n        <RockForm @submit=\"onSubmit\">\r\n            <div v-if=\"isDrawn\" class=\"signature-entry-drawn\">\r\n                <div v-show=\"false\">\r\n                    <TextBox :modelValue=\"signatureData\" label=\"Signature\" rules=\"required\" />\r\n                </div>\r\n\r\n                <span class=\"signature-entry-instructions text-muted small\">Use mouse or finger to sign below.</span>\r\n\r\n                <div ref=\"signatureCanvasContainer\" class=\"signature-entry-drawn-container position-relative d-flex align-items-end\">\r\n                    <div class=\"signature-entry-canvas-col\">\r\n                        <canvas ref=\"signatureCanvas\" class=\"e-signature-pad\" style=\"border-bottom: 1px solid #c4c4c4;\"></canvas>\r\n                    </div>\r\n\r\n                    <div class=\"signature-entry-clear-col\">\r\n                        <a class=\"btn btn-link p-1 p-md-2 text-color\" title=\"Clear Signature\" @click.prevent=\"onClearClick\"><i class=\"fa fa-2x fa-undo\"></i></a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div v-else class=\"signature-entry-typed\">\r\n                <TextBox v-model=\"signedByName\"\r\n                    label=\"Type Name\"\r\n                    rules=\"required\" />\r\n            </div>\r\n\r\n            <div class=\"signature-entry-agreement\">\r\n                By clicking the sign button below, I agree to the above document and understand this is a legal representation of my signature.\r\n            </div>\r\n\r\n            <div class=\"text-right\">\r\n                <RockButton type=\"submit\" btnType=\"primary\" btnSize=\"xs\">Sign</RockButton>\r\n            </div>\r\n        </RockForm>\r\n    </div>\r\n\r\n    <div v-else class=\"signature-entry-complete\">\r\n        <RockForm @submit=\"onSubmit\">\r\n            <TextBox v-if=\"isDrawn\"\r\n                v-model=\"signedByName\"\r\n                label=\"Please enter your legal name\"\r\n                rules=\"required\" />\r\n\r\n            <EmailBox v-model=\"signedByEmail\"\r\n                :label=\"signedByEmailLabel\"\r\n                rules=\"required\" />\r\n\r\n            <div class=\"text-right\">\r\n                <RockButton type=\"submit\" btnType=\"primary\" btnSize=\"xs\">Complete</RockButton>\r\n            </div>\r\n        </RockForm>\r\n    </div>\r\n</div>\r\n`\r\n});\r\n\r\n"],"names":["signaturePadPromise","loadJavaScriptAsync","window","SignaturePad","defineComponent","name","components","RockButton","RockForm","TextBox","EmailBox","props","modelValue","type","Object","required","isDrawn","Boolean","default","documentTerm","String","emits","_data","signed","setup","_ref","_props$modelValue$sig","_props$modelValue","_props$modelValue$sig2","_props$modelValue2","_ref2","_props$modelValue$sig3","_props$modelValue3","_store$state$currentP","emit","store","useStore","signatureData","ref","signedByName","signedByEmail","state","currentPerson","email","signatureCanvas","signatureCanvasContainer","isSigning","signaturePad","signedByEmailLabel","computed","concat","toLowerCase","resizeSignatureCanvas","_signatureCanvas$valu","value","containerWidth","clientWidth","ratio","width","height","getContext","scale","clear","onClearClick","_signaturePad","onSubmit","_store$state$currentP2","fullName","newValue","watch","_props$modelValue4","_props$modelValue5","_props$modelValue6","_props$modelValue$sig4","_props$modelValue7","_props$modelValue$sig5","_props$modelValue8","_props$modelValue$sig6","_props$modelValue9","isChanged","updateRefValue","_asyncToGenerator","backgroundColor","penColor","addEventListener","_signaturePad$toDataU","_signaturePad2","toDataURL","_signaturePad3","off","template"],"mappings":"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"}