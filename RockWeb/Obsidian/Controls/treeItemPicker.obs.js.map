{"version":3,"file":"treeItemPicker.obs.js","sources":["../../../Framework/Controls/treeItemPicker.obs"],"sourcesContent":["<template>\r\n    <ContentDropDownPicker\r\n                           @primaryButtonClicked=\"onSelect\"\r\n                           @secondaryButtonClicked=\"onCancel\"\r\n                           @clearButtonClicked=\"onClear\"\r\n                           :iconCssClass=\"pickerIconClass\"\r\n                           :showClear=\"showClear\"\r\n                           :modelValue=\"internalValues\"\r\n                           :fullWidth=\"fullWidth\">\r\n\r\n        <TreeList v-model=\"internalValues\" :multiple=\"multiple\" :items=\"items\" :provider=\"provider\" @update:items=\"onUpdateItems\" :disableFolderSelection=\"disableFolderSelection\" :autoExpand=\"autoExpand\" />\r\n\r\n        <template #innerLabel><span class=\"selected-names\">{{ selectedNames }}</span></template>\r\n\r\n        <template #pickerContentSuperHeader v-if=\"$slots.pickerContentSuperHeader\">\r\n            <slot name=\"pickerContentSuperHeader\" />\r\n        </template>\r\n        <template #pickerContentHeader v-if=\"$slots.pickerContentHeader\">\r\n            <slot name=\"pickerContentHeader\" />\r\n        </template>\r\n        <template #pickerContentHeading v-if=\"$slots.pickerContentHeading\">\r\n            <slot name=\"pickerContentHeading\" />\r\n        </template>\r\n        <template #mainPickerActions v-if=\"$slots.mainPickerActions\">\r\n            <slot name=\"mainPickerActions\" />\r\n        </template>\r\n        <template #primaryButtonLabel v-if=\"$slots.primaryButtonLabel\">\r\n            <slot name=\"primaryButtonLabel\" />\r\n        </template>\r\n        <template #secondaryButtonLabel v-if=\"$slots.secondaryButtonLabel\">\r\n            <slot name=\"secondaryButtonLabel\" />\r\n        </template>\r\n        <template #customPickerActions v-if=\"$slots.customPickerActions\">\r\n            <slot name=\"customPickerActions\" />\r\n        </template>\r\n        <template #prepend=\"{ isInputGroupSupported }\" v-if=\"$slots.prepend\">\r\n            <slot name=\"prepend\" :isInputGroupSupported=\"isInputGroupSupported\" />\r\n        </template>\r\n        <template #inputGroupPrepend=\"{ isInputGroupSupported }\" v-if=\"$slots.inputGroupPrepend\">\r\n            <slot name=\"inputGroupPrepend\" :isInputGroupSupported=\"isInputGroupSupported\" />\r\n        </template>\r\n        <template #append=\"{ isInputGroupSupported }\" v-if=\"$slots.append\">\r\n            <slot name=\"append\" :isInputGroupSupported=\"isInputGroupSupported\" />\r\n        </template>\r\n    </ContentDropDownPicker>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { computed, PropType, ref, watch } from \"vue\";\r\n    import { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\n    import { ITreeItemProvider } from \"@Obsidian/Utility/treeItemProviders\";\r\n    import { TreeItemBag } from \"@Obsidian/ViewModels/Utility/treeItemBag\";\r\n    import TreeList from \"./treeList\";\r\n    import { updateRefValue } from \"@Obsidian/Utility/component\";\r\n    import ContentDropDownPicker from \"./contentDropDownPicker.obs\";\r\n\r\n    const props = defineProps({\r\n        modelValue: {\r\n            type: Object as PropType<ListItemBag | ListItemBag[] | null>,\r\n            required: false\r\n        },\r\n\r\n        multiple: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        items: {\r\n            type: Array as PropType<TreeItemBag[]>\r\n        },\r\n\r\n        provider: {\r\n            type: Object as PropType<ITreeItemProvider>\r\n        },\r\n\r\n        iconCssClass: {\r\n            type: String as PropType<string>,\r\n            default: \"fa fa-folder-open\"\r\n        },\r\n\r\n        disableFolderSelection: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        /**\r\n         * Automatically expand parents who have (sub)children that are selected\r\n         */\r\n        autoExpand: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        /**\r\n         * When true the picker will take the full width available rather than\r\n         * limiting itself to a standard width.\r\n         */\r\n        fullWidth: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        }\r\n    });\r\n\r\n    const emit = defineEmits<{\r\n        (_e: \"update:modelValue\", _value: ListItemBag | ListItemBag[] | null): void,\r\n        (_e: \"valueSelected\"): void\r\n    }>();\r\n\r\n\r\n    /**\r\n     * Our internal list of selected values. This must be kept seperate\r\n     * because we don't actually emit the new values until the user clicks\r\n     * the select button.\r\n     */\r\n    const internalValues = ref(forceToArray(props.modelValue, props.multiple).map(v => v.value ?? \"\"));\r\n\r\n    /**\r\n     * A flat array of items from the tree. This is used to quickly filter\r\n     * to just the selected items.\r\n     */\r\n    const flatItems = ref<TreeItemBag[]>(flatten(props.items ?? [], i => i.children ?? []));\r\n\r\n    /** Will contain the value true if the popup tree list should be shown. */\r\n    const showPopup = ref(false);\r\n\r\n    /** Determines if the clear button should be shown. */\r\n    const showClear = computed((): boolean => {\r\n        // Use modelValue since internalValues is used for the in-process\r\n        // popup, not the actual stored value.\r\n        return forceToArray(props.modelValue, props.multiple).length > 0;\r\n    });\r\n\r\n    /**\r\n     * Determines the names of the currently selected items. This shows the\r\n     * names of the \"save safe\" items, meaning it is updated after the user\r\n     * clicks the select button. It does not update on the fly as they are\r\n     * selecting items.\r\n     */\r\n    const selectedNames = computed((): string => {\r\n        return forceToArray(props.modelValue, true).map(v => v.text).join(\", \");\r\n    });\r\n\r\n    /** The CSS class to use for the picker icon. */\r\n    const pickerIconClass = computed((): string => `${props.iconCssClass} fa-fw`);\r\n\r\n    /** Updates the model value from our internal value. */\r\n    const updateModelValue = (): void => {\r\n        // Create a new set of selected items to emit.\r\n        const newModelValue = forceToArray(props.modelValue, true)\r\n            .filter(v => internalValues.value.includes(v.value ?? \"\"));\r\n\r\n        // Helpful list of the values already in the new model value.\r\n        const knownValues = newModelValue.map(v => v.value);\r\n\r\n        // Determine which values need to be added from the tree list.\r\n        const additionalValues = internalValues.value\r\n            .filter(v => !knownValues.includes(v));\r\n\r\n        // Go through each additional value and find it in the tree list\r\n        // and add it to the new model value.\r\n        for (const v of additionalValues) {\r\n            const items = flatItems.value.filter(i => i.value === v);\r\n\r\n            if (items.length > 0 && items[0].value && items[0].text) {\r\n                newModelValue.push({\r\n                    value: items[0].value,\r\n                    text: items[0].text\r\n                });\r\n            }\r\n        }\r\n\r\n        // Emit the new value and close the popup.\r\n        if (props.multiple) {\r\n            emit(\"update:modelValue\", newModelValue);\r\n        }\r\n        else {\r\n            emit(\"update:modelValue\", newModelValue.length > 0 ? newModelValue[0] : null);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Event handler for when the list of items in the tree list has been\r\n     * updated.\r\n     *\r\n     * @param newItems The new root items being used by the tree list.\r\n     */\r\n    const onUpdateItems = (newItems: TreeItemBag[]): void => {\r\n        // Update our flatItems array with the list of new items.\r\n        flatItems.value = flatten(newItems ?? [], i => i.children ?? []);\r\n    };\r\n\r\n    /**\r\n     * Event handler for when the clear button is clicked by the user.\r\n     */\r\n    const onClear = (): void => {\r\n        emit(\"update:modelValue\", props.multiple ? [] : null);\r\n    };\r\n\r\n    /**\r\n     * Event handler for when the user clicks the cancel button. Hide the\r\n     * popup.\r\n     */\r\n    const onCancel = (): void => {\r\n        showPopup.value = false;\r\n    };\r\n\r\n    /**\r\n     * Event handler for when the user clicks the select button. Save the\r\n     * current selection and close the popup.\r\n     */\r\n    const onSelect = (): void => {\r\n        updateModelValue();\r\n        showPopup.value = false;\r\n        emit(\"valueSelected\"); // inform that a value was selected, even if it didn't change\r\n    };\r\n\r\n    // Watch for changes to the selected values from the parent control and\r\n    // update our internal values to match.\r\n    watch([() => props.modelValue, () => props.multiple], (oldValues, newValues) => {\r\n        updateRefValue(internalValues, forceToArray(props.modelValue, props.multiple).map(v => v.value ?? \"\"));\r\n\r\n        // If the \"multiple\" property changed, force update the model value.\r\n        if (newValues[1] !== oldValues[1]) {\r\n            updateModelValue();\r\n        }\r\n    });\r\n\r\n\r\n    /**\r\n     * Helper function to flatten an array of items that contains child items\r\n     * of the same type.\r\n     *\r\n     * @param source The source array of items to the flattened.\r\n     * @param childrenSource A callback function that retrieves the child items.\r\n     *\r\n     * @returns An array of all items and descendants.\r\n     */\r\n    function flatten<T>(source: T[], childrenSource: (value: T) => T[]): T[] {\r\n        let stack = [...source];\r\n        const flatArray: T[] = [];\r\n\r\n        for (let i = 0; i < stack.length; i++) {\r\n            const item = stack[i];\r\n\r\n            flatArray.push(item);\r\n\r\n            stack = stack.concat(childrenSource(item));\r\n        }\r\n\r\n        return flatArray;\r\n    }\r\n\r\n    /**\r\n     * Convert a single item to an array of one item. If the value is already an\r\n     * array then it is just returned as is.\r\n     *\r\n     * @param value The value from the parent component.\r\n     *\r\n     * @returns The value trimmed down to just the actual selection value.\r\n     */\r\n    function forceToArray(value: ListItemBag | ListItemBag[] | undefined | null, multiple: boolean): ListItemBag[] {\r\n        if (value === undefined || value === null) {\r\n            return [];\r\n        }\r\n        else if (Array.isArray(value)) {\r\n            if (!multiple && value.length > 1) {\r\n                return [value[0]];\r\n            }\r\n            else {\r\n                return value;\r\n            }\r\n        }\r\n        else {\r\n            return [value];\r\n        }\r\n    }\r\n</script>"],"names":["internalValues","ref","forceToArray","props","modelValue","multiple","map","v","_v$value","value","flatItems","flatten","_props$items","items","i","_i$children","children","showPopup","showClear","computed","length","selectedNames","text","join","pickerIconClass","concat","iconCssClass","updateModelValue","newModelValue","filter","_v$value2","includes","knownValues","additionalValues","_iterator","_createForOfIteratorHelper","_step","_loop","push","s","n","done","err","e","f","emit","onUpdateItems","newItems","_i$children2","onClear","onCancel","onSelect","watch","oldValues","newValues","updateRefValue","_v$value3","source","childrenSource","stack","flatArray","item","undefined","Array","isArray"],"mappings":"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"}