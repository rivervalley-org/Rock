{"version":3,"file":"categorizedValuePickerDropDownLevel.obs.js","sources":["../../../Framework/Controls/categorizedValuePickerDropDownLevel.obs"],"sourcesContent":["<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <DropDownList v-if=\"hasCategories\" v-bind=\"formFieldProps\" :label=\"internalRoot?.text + ' Category'\" v-model=\"selectedCategory\" :items=\"categoryOptions\" :showBlankItem=\"!hasValues\" :multiple=\"false\" :key=\"'cats-of-' + (internalRoot?.value || internalRoot?.text)\" />\r\n    <DropDownList v-if=\"showValues\" v-bind=\"formFieldProps\" :label=\"definedTypeName\" v-model=\"selectedValue\" :items=\"internalRoot?.childValues ?? []\" showBlankItem :multiple=\"false\" :key=\"'vals-of-' + (internalRoot?.value || internalRoot?.text)\" />\r\n    <CategorizedValuePickerDropDownLevel v-if=\"showNextLevel\" v-bind=\"formFieldProps\" v-model=\"internalValue\" :root=\"fullSelectedCategory\" :definedTypeName=\"definedTypeName\" :key=\"fullSelectedCategory?.value ?? newGuid()\" />\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\n    import { computed, nextTick, PropType, ref, watch } from \"vue\";\r\n    import { CategorizedValuePickerNodeBag } from \"@Obsidian/ViewModels/Rest/Controls/categorizedValuePickerNodeBag\";\r\n    import { standardRockFormFieldProps, useStandardRockFormFieldProps, updateRefValue } from \"@Obsidian/Utility/component\";\r\n    import DropDownList from \"./dropDownList\";\r\n    import { emptyGuid, newGuid } from \"@Obsidian/Utility/guid\";\r\n\r\n    const props = defineProps({\r\n        modelValue: {\r\n            type: String as PropType<ListItemBag | null>,\r\n            default: \"\"\r\n        },\r\n\r\n        root: {\r\n            type: Object as PropType<CategorizedValuePickerNodeBag | null>,\r\n            required: true\r\n        },\r\n\r\n        definedTypeName: {\r\n            type: String,\r\n            required: true\r\n        },\r\n\r\n        ...standardRockFormFieldProps\r\n    });\r\n\r\n    const emit = defineEmits<{\r\n        (e: \"update:modelValue\", value: ListItemBag | null): void\r\n    }>();\r\n\r\n    // #region Values\r\n\r\n    const internalValue = ref(props.modelValue);\r\n    const selectedCategory = ref<string>(\"\");\r\n    const selectedValue = ref<string>(internalValue.value?.value ?? \"\");\r\n    const formFieldProps = useStandardRockFormFieldProps(props);\r\n    let willSkipWatchTriggers = false;\r\n\r\n    // #endregion\r\n\r\n    // #region Computed Values\r\n\r\n    const internalRoot = computed(() => {\r\n        let root = props.root;\r\n\r\n        if (!root) {\r\n            return null;\r\n        }\r\n\r\n        // Collapse empty categories:\r\n        // If this category has no values and only has one categories, make that category\r\n        // the current base and keep doing that until we have a category with values\r\n        while (root && root.childCategories?.length == 1 && (!root.childValues || root.childValues.length == 0)) {\r\n            root = root.childCategories[0];\r\n        }\r\n\r\n        return root;\r\n    });\r\n\r\n    const hasCategories = computed(() => {\r\n        return (internalRoot.value?.childCategories && internalRoot.value.childCategories.length > 0) ?? false;\r\n    });\r\n\r\n    const hasValues = computed(() => {\r\n        return (internalRoot.value?.childValues && internalRoot.value.childValues.length > 0) ?? false;\r\n    });\r\n\r\n    const categoryOptions = computed<ListItemBag[]>(() => {\r\n        if (hasValues.value) {\r\n            return [\r\n                {\r\n                    text: \"All Categories\",\r\n                    value: emptyGuid\r\n                },\r\n                ...internalRoot.value?.childCategories ?? []\r\n            ];\r\n        }\r\n        else {\r\n            return internalRoot.value?.childCategories ?? [];\r\n        }\r\n    });\r\n\r\n    const fullSelectedCategory = computed(() => {\r\n        if (selectedCategory.value == \"\" || selectedCategory.value == emptyGuid) {\r\n            return null;\r\n        }\r\n        else {\r\n            return internalRoot.value?.childCategories?.find(cat => cat.value == selectedCategory.value) ?? null;\r\n        }\r\n    });\r\n\r\n    const showValues = computed(() => {\r\n        return hasValues.value && (selectedCategory.value == emptyGuid || !hasCategories.value);\r\n    });\r\n\r\n    const showNextLevel = computed(() => {\r\n        return fullSelectedCategory.value !== null;\r\n    });\r\n\r\n    // #endregion\r\n\r\n    // #region Watchers\r\n\r\n    watch(selectedCategory, () => {\r\n        if (willSkipWatchTriggers) {\r\n            return;\r\n        }\r\n\r\n        // If internalValue was set to a value in a child level and then we change category here,\r\n        // we need to make sure that internalValue gets reset, because setting selectedValue to an\r\n        // empty string won't cause any changes since it already equals an empty string.\r\n        if (selectedValue.value == \"\" && internalValue.value != null) {\r\n            internalValue.value = null;\r\n        }\r\n\r\n        selectedValue.value = \"\";\r\n    });\r\n\r\n    watch(selectedValue, () => {\r\n        if (willSkipWatchTriggers) {\r\n            return;\r\n        }\r\n\r\n        if (!selectedValue.value) {\r\n            internalValue.value = null;\r\n        }\r\n\r\n        const fullSelectedValue = internalRoot.value?.childValues?.find((v) => v.value == selectedValue.value);\r\n\r\n        if (fullSelectedValue) {\r\n            updateRefValue(internalValue, {\r\n                text: fullSelectedValue.text,\r\n                value: fullSelectedValue.value\r\n            });\r\n        }\r\n        else {\r\n            internalValue.value = null;\r\n        }\r\n    });\r\n\r\n    watch(() => props.modelValue, (val) => {\r\n        if (updateRefValue(internalValue, val)) {\r\n            // If we got a new value from an ancestor, make sure we reflect that value\r\n            setBasedOnModelValue();\r\n        }\r\n    });\r\n\r\n    watch(internalValue, () => emit(\"update:modelValue\", internalValue.value));\r\n\r\n    // #endregion\r\n\r\n    // #region Functions\r\n\r\n    /**\r\n     * Try to build the whole structure to the point that we get to the value picker that has the current value and select it.\r\n     * This should only be run when we get the new value from the top coming down to the children, not when a child changes it\r\n     */\r\n    function setBasedOnModelValue(): void {\r\n        // Does our root have this value?\r\n        const value = internalValue.value != null && internalRoot.value?.childValues?.find((v) => v.value == internalValue.value?.value);\r\n\r\n        if (value) {\r\n            // Yup, set the selected value to this value and set the category to this category\r\n            selectedCategory.value = emptyGuid;\r\n            selectedValue.value = value.value as string;\r\n            skipWatchTriggers();\r\n            return;\r\n        }\r\n\r\n        // Nope, blank out the selected value\r\n        selectedValue.value = \"\";\r\n\r\n        // Is the new value even a value?\r\n        if (internalValue.value == null) {\r\n            // Nothing more to do. Just leave the category selectors as is.\r\n            return;\r\n        }\r\n\r\n        // Determine if the new value is deep within any of the categories\r\n        let containingCategory: CategorizedValuePickerNodeBag | null = null;\r\n\r\n        // Check each category to see if it has the value\r\n        for (const category of internalRoot.value?.childCategories ?? []) {\r\n            if (hasDescendantValue(category, internalValue.value)) {\r\n                containingCategory = category;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // We found the value as a descendant of this category, so set it and pass it to the next level\r\n        if (containingCategory) {\r\n            selectedCategory.value = containingCategory.value as string;\r\n            skipWatchTriggers();\r\n            return;\r\n        }\r\n    }\r\n\r\n    function hasDescendantValue(base: CategorizedValuePickerNodeBag, valToFind: ListItemBag): boolean {\r\n        // Does our base have this value?\r\n        const isValFound = base.childValues?.find((v) => v.value == valToFind.value);\r\n\r\n        // Yup we found it\r\n        if (isValFound) {\r\n            return true;\r\n        }\r\n\r\n        // Check each category to see if it has the value\r\n        for (const category of base.childCategories ?? []) {\r\n            if (hasDescendantValue(category, valToFind)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        // Couldn't find it\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Sometimes we want to prevent watchers from triggering after setting values because those watchers can make\r\n     * changes that break what we're attempting to do. This allows us to easily skip those watchers that have been\r\n     * configured to be skippable.\r\n     */\r\n    async function skipWatchTriggers() {\r\n        willSkipWatchTriggers = true;\r\n        await nextTick();\r\n        willSkipWatchTriggers = false;\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Initialization\r\n\r\n    // Initial based on the incoming model value\r\n    if (internalValue.value && internalValue.value.value) {\r\n        setBasedOnModelValue();\r\n    }\r\n\r\n        // #endregion\r\n</script>"],"names":["internalValue","ref","props","modelValue","selectedCategory","selectedValue","_internalValue$value$","_internalValue$value","value","formFieldProps","useStandardRockFormFieldProps","willSkipWatchTriggers","internalRoot","computed","root","_root$childCategories","childCategories","length","childValues","hasCategories","_ref2","_internalRoot$value","hasValues","_ref3","_internalRoot$value2","categoryOptions","_internalRoot$value$c","_internalRoot$value3","text","emptyGuid","_internalRoot$value$c2","_internalRoot$value4","fullSelectedCategory","_internalRoot$value$c3","_internalRoot$value5","_internalRoot$value5$","find","cat","showValues","showNextLevel","watch","_internalRoot$value6","_internalRoot$value6$","fullSelectedValue","v","updateRefValue","val","setBasedOnModelValue","emit","_internalRoot$value7","_internalRoot$value7$","_internalRoot$value$c4","_internalRoot$value8","_internalValue$value2","skipWatchTriggers","containingCategory","_iterator","_createForOfIteratorHelper","_step","s","n","done","category","hasDescendantValue","err","e","f","base","valToFind","_base$childValues","_base$childCategories","isValFound","_iterator2","_step2","_skipWatchTriggers","apply","arguments","_asyncToGenerator","nextTick"],"mappings":"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"}