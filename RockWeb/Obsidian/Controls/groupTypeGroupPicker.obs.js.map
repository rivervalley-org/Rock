{"version":3,"file":"groupTypeGroupPicker.obs.js","sources":["../../../Framework/Controls/groupTypeGroupPicker.obs"],"sourcesContent":["<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <RockFormField v-bind=\"fieldProps\" :modelValue=\"internalGroupValue\" name=\"group-type-group-picker\">\r\n        <GroupTypePicker v-bind=\"standardProps\"\r\n                         v-model=\"internalTypeValue\"\r\n                         label=\"Group Type\"\r\n                         showBlankItem\r\n                         :displayStyle=\"PickerDisplayStyle.Condensed\"\r\n                         :multiple=\"false\"\r\n                         rules=\"\"\r\n                         onlyGroupListItems\r\n                         formGroupClasses=\"mt-0\" />\r\n        <BaseAsyncPicker v-model=\"internalGroupValue\"\r\n                         v-bind=\"standardProps\"\r\n                         :label=\"groupLabel\"\r\n                         :displayStyle=\"displayStyle\"\r\n                         :items=\"actualGroupItems\"\r\n                         showBlankItem\r\n                         :multiple=\"false\" />\r\n    </RockFormField>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { standardAsyncPickerProps, updateRefValue, useStandardAsyncPickerProps, useStandardRockFormFieldProps } from \"@Obsidian/Utility/component\";\r\n    import { useHttp } from \"@Obsidian/Utility/http\";\r\n    import { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\n    import { PropType, computed, nextTick, ref, watch } from \"vue\";\r\n    import BaseAsyncPicker from \"./baseAsyncPicker\";\r\n    import GroupTypePicker from \"./groupTypePicker.obs\";\r\n    import RockFormField from \"./rockFormField\";\r\n    import { PickerDisplayStyle } from \"@Obsidian/Enums/Controls/pickerDisplayStyle\";\r\n    import { GroupTypeGroupPickerGetGroupsOptionsBag } from \"@Obsidian/ViewModels/Rest/Controls/groupTypeGroupPickerGetGroupsOptionsBag\";\r\n    import { GroupTypeGroupPickerGetGroupTypeOfGroupOptionsBag } from \"@Obsidian/ViewModels/Rest/Controls/groupTypeGroupPickerGetGroupTypeOfGroupOptionsBag\";\r\n\r\n    const props = defineProps({\r\n        modelValue: {\r\n            type: Object as PropType<ListItemBag | null>,\r\n            required: true\r\n        },\r\n\r\n        /** V-model for the group type so you can get/set it */\r\n        groupType: {\r\n            type: Object as PropType<ListItemBag | null>,\r\n            default: null\r\n        },\r\n\r\n        /** Label for the group picker */\r\n        groupLabel: {\r\n            type: String,\r\n            default: \"Group\"\r\n        },\r\n\r\n        ...standardAsyncPickerProps\r\n    });\r\n\r\n    const emit = defineEmits<{\r\n        (e: \"update:groupType\", value: ListItemBag | null): void\r\n        (e: \"update:modelValue\", value: ListItemBag | null): void\r\n    }>();\r\n\r\n    // #region Values\r\n\r\n    const standardProps = useStandardAsyncPickerProps(props);\r\n    const fieldProps = useStandardRockFormFieldProps(props);\r\n    const http = useHttp();\r\n\r\n    const internalTypeValue = ref<ListItemBag | null>(props.groupType);\r\n\r\n    const internalGroupValue = ref(props.modelValue);\r\n    const loadedGroupItems = ref<ListItemBag[] | null>(null);\r\n\r\n    // #endregion\r\n\r\n    // #region Computed Values\r\n\r\n    /**\r\n     * The actual items to make available to the picker. This allows us to do any\r\n     * post-processing, such as adding additional items, and still be lazy loaded as well.\r\n     */\r\n    const actualGroupItems = computed((): ListItemBag[] | (() => Promise<ListItemBag[]>) => {\r\n        return loadedGroupItems.value || loadGroupOptions;\r\n    });\r\n\r\n    // #endregion\r\n\r\n    // #region Functions\r\n\r\n    /**\r\n     * Loads the group items from the server.\r\n     */\r\n    async function loadGroupOptions(): Promise<ListItemBag[]> {\r\n        if (!internalTypeValue.value) {\r\n            return [];\r\n        }\r\n\r\n        const options: GroupTypeGroupPickerGetGroupsOptionsBag = {\r\n            groupTypeGuid: internalTypeValue.value?.value\r\n        };\r\n\r\n        const result = await http.post<ListItemBag[]>(\"/api/v2/Controls/GroupTypeGroupPickerGetGroups\", null, options);\r\n\r\n        if (result.isSuccess && result.data) {\r\n            loadedGroupItems.value = result.data ?? null;\r\n\r\n            return loadedGroupItems.value ?? [];\r\n        }\r\n        else {\r\n            console.error(result.errorMessage ?? \"Unknown error while loading data.\");\r\n            loadedGroupItems.value = [];\r\n            return [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets all the data needed to fill in the pickers when we're given a value to start\r\n     */\r\n    async function loadGroupTypeFromGroup(): Promise<void> {\r\n        const options: GroupTypeGroupPickerGetGroupTypeOfGroupOptionsBag = {\r\n            groupGuid: props.modelValue?.value\r\n        };\r\n\r\n        const result = await http.post<ListItemBag>(\"/api/v2/Controls/GroupTypeGroupPickerGetGroupTypeOfGroup\", null, options);\r\n\r\n        if (result.isSuccess && result.data) {\r\n            const currentValue = internalGroupValue.value;\r\n            internalTypeValue.value = result.data ?? null;\r\n\r\n            // Wait for watchers of the group type to fire so we don't undo the next line\r\n            await nextTick();\r\n\r\n            internalGroupValue.value = currentValue;\r\n        }\r\n        else {\r\n            console.error(result.errorMessage ?? \"Unknown error while loading data.\");\r\n        }\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Watchers\r\n\r\n    /** If the value is changed from the outside, fill in all the required data */\r\n    watch(() => props.modelValue, () => {\r\n        if (updateRefValue(internalGroupValue, props.modelValue)) {\r\n            loadGroupTypeFromGroup();\r\n        }\r\n    });\r\n\r\n    /** If the groupType value is changed from the outside, fill in all the required data */\r\n    watch(() => props.groupType, () => {\r\n        updateRefValue(internalTypeValue, props.groupType);\r\n    });\r\n\r\n    watch(internalGroupValue, () => {\r\n        emit(\"update:modelValue\", internalGroupValue.value);\r\n    });\r\n\r\n    /** Reload Roles if the type or excluded roles list change */\r\n    watch(internalTypeValue, () => {\r\n        emit(\"update:groupType\", internalTypeValue.value);\r\n        internalGroupValue.value = null;\r\n\r\n        loadedGroupItems.value = null;\r\n        loadGroupOptions();\r\n    });\r\n\r\n    // #endregion\r\n\r\n    if (props.modelValue) {\r\n        // Load the type and list of items based on the selected value\r\n        loadGroupTypeFromGroup();\r\n    }\r\n</script>\r\n"],"names":["standardProps","useStandardAsyncPickerProps","props","fieldProps","useStandardRockFormFieldProps","http","useHttp","internalTypeValue","ref","groupType","internalGroupValue","modelValue","loadedGroupItems","actualGroupItems","computed","value","loadGroupOptions","_loadGroupOptions","apply","arguments","_asyncToGenerator","_internalTypeValue$va","options","groupTypeGuid","result","post","isSuccess","data","_result$data","_loadedGroupItems$val","_result$errorMessage","console","error","errorMessage","loadGroupTypeFromGroup","_loadGroupTypeFromGroup","_props$modelValue","groupGuid","_result$data2","currentValue","nextTick","_result$errorMessage2","watch","updateRefValue","emit"],"mappings":"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"}