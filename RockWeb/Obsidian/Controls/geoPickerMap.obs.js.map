{"version":3,"file":"geoPickerMap.obs.js","sources":["../../../Framework/Controls/geoPickerMap.obs","../../../node_modules/style-inject/dist/style-inject.es.js"],"sourcesContent":["<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <div class=\"gm-container\" :class=\"isExpanded ? 'expanded-map-size' : 'static-map-size'\">\r\n        <!-- Our custom clear button that we add to the map for deleting polygons. -->\r\n        <button type=\"button\" ref=\"clearButton\" v-show=\"isClearButtonEnabled\" @click.prevent=\"deleteSelectedShape()\" class=\"gm-clear-button\" title=\"Delete selected shape\" aria-label=\"Delete selected shape\"><i class=\"fa fa-times\"></i></button>\r\n        <!-- This is where the Google Map (with Drawing Tools) will go. -->\r\n        <Loading :isLoading=\"!isReady\" :class=\"isExpanded ? 'expanded-map-size' : 'static-map-size'\">\r\n            <div ref=\"mapContainer\" :class=\"isExpanded ? 'expanded-map-size' : 'static-map-size'\" class=\"gm-map\"></div>\r\n        </Loading>\r\n    </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    /* global google */\r\n    import { computed, nextTick, onBeforeMount, onMounted, PropType, ref, watch } from \"vue\";\r\n    import { Guid } from \"@Obsidian/Types\";\r\n    import { DrawingMode, Coordinate } from \"@Obsidian/Types/Controls/geo\";\r\n    import { toCoordinate, wellKnownToCoordinates, coordinatesToWellKnown, loadMapResources, createLatLng } from \"@Obsidian/Utility/geo\";\r\n    import { DefinedValue } from \"@Obsidian/SystemGuids/definedValue\";\r\n    import Loading from \"@Obsidian/Controls/loading\";\r\n    import { confirm } from \"@Obsidian/Utility/dialogs\";\r\n\r\n    /**\r\n     * The types of shapes Google Maps uses internally\r\n     */\r\n    type Shape = google.maps.Polygon | google.maps.Marker;\r\n\r\n    const props = defineProps({\r\n        /**\r\n         * Point or polygon coordinate string in the Well Known Text format:\r\n         * \"POINT(longitude latitude)\" or \"POLYGON((longitude latitude, longitude latitude, ...))\"\r\n         */\r\n        modelValue: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n\r\n        /**\r\n         * What are we drawing? Point or Polygon? This prop is not reactive.\r\n         */\r\n        drawingMode: {\r\n            type: String as PropType<DrawingMode>,\r\n            required: true\r\n        },\r\n\r\n        /**\r\n         * GUID of a DefinedValue of the Map Styles DefinedType. Determines the way the map looks.\r\n         */\r\n        mapStyleValueGuid: {\r\n            type: String as PropType<Guid>,\r\n            default: DefinedValue.MapStyleRock\r\n        },\r\n\r\n        /**\r\n         * Latitude coordinate to center map on if not initialized with a shape. This prop is not reactive.\r\n         */\r\n        centerLatitude: {\r\n            type: Number as PropType<number>,\r\n            default: null\r\n        },\r\n\r\n        /**\r\n         * Longitude coordinate to center map on if not initialized with a shape. This prop is not reactive.\r\n         */\r\n        centerLongitude: {\r\n            type: Number as PropType<number>,\r\n            default: null\r\n        },\r\n\r\n        /**\r\n         * Whether to use the normal static size or have the map fill its container\r\n         */\r\n        isExpanded: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n    });\r\n\r\n    const emit = defineEmits<{\r\n        (e: \"update:modelValue\", value: string): void\r\n        (e: \"update:valueLabel\", value: string): void\r\n    }>();\r\n\r\n    // #region Values\r\n\r\n    // References to DOM elements\r\n    const clearButton = ref<HTMLButtonElement | null>(null);\r\n    const mapContainer = ref<HTMLDivElement | null>(null);\r\n\r\n    // variables used to determine when everything is ready so we can initialize the map\r\n    const isGoogleLoaded = ref(false);\r\n    const isMounted = ref(false);\r\n    const isReady = computed(() => isGoogleLoaded.value && isMounted.value);\r\n\r\n    const isClearButtonEnabled = ref(false);\r\n\r\n    let drawingMode = props.drawingMode;\r\n    let drawingModes: google.maps.drawing.OverlayType[] = [];\r\n    let drawingManager: google.maps.drawing.DrawingManager | null = null;\r\n    let map: google.maps.Map | null = null;\r\n    let centerLatitude = props.centerLatitude; // Get from prop on init; we aren't reacting to it\r\n    let centerLongitude = props.centerLongitude; // Get from prop on init; we aren't reacting to it\r\n    let minLat: number | null = null;\r\n    let minLng: number | null = null;\r\n    let maxLat: number | null = null;\r\n    let maxLng: number | null = null;\r\n    let fillColor = \"0088cc\";\r\n    let strokeColor = \"0088cc\";\r\n    let styles: google.maps.MapTypeStyle[] = [];\r\n    let shape: Shape | null = null;\r\n    let marker: google.maps.Symbol | null = null;\r\n\r\n    // #endregion\r\n\r\n    // #region Computed Values\r\n\r\n    // The main value.\r\n    // Internally we use an array of Coordinates\r\n    // Externally we give a point or polygon in the Well Know Text format (for DB compatibility)\r\n    const internalValue = computed({\r\n        // Prop is in DB format; convert for use internally\r\n        get(): Coordinate[] {\r\n            return wellKnownToCoordinates(props.modelValue ?? \"\", drawingMode);\r\n        },\r\n        // Convert the value to Well Known Text for emitting\r\n        set(newValue: Coordinate[]): void {\r\n            emit(\"update:modelValue\", coordinatesToWellKnown(newValue, drawingMode));\r\n        }\r\n    });\r\n\r\n    // #endregion\r\n\r\n    // #region Watchers\r\n\r\n    // We can initialize the map now that everything is ready\r\n    watch([isReady], initialize);\r\n\r\n    // When we resize, let Google Maps know\r\n    watch(() => props.isExpanded, async () => {\r\n        if (isReady.value) {\r\n            await nextTick(); // Wait until rerender before telling G to resize\r\n            google.maps.event.trigger(map as google.maps.Map, \"resize\");\r\n        }\r\n    });\r\n\r\n    // #endregion\r\n\r\n    // #region Functions\r\n\r\n    /**\r\n     * Initialize the map\r\n     */\r\n    async function initialize(isReady): Promise<void> {\r\n        if (!isReady) return;\r\n\r\n        marker = {\r\n            path: \"M 0,0 C -2,-20 -10,-22 -10,-30 A 10,10 0 1,1 10,-30 C 10,-22 2,-20 0,0 z\",\r\n            fillColor: \"#FE7569\",\r\n            fillOpacity: 1,\r\n            strokeColor: \"#000\",\r\n            strokeWeight: 1,\r\n            scale: 1,\r\n            labelOrigin: new google.maps.Point(0, -28)\r\n        };\r\n\r\n        // Make sure the map's DIV will be rendered so we have a reference to it\r\n        await nextTick();\r\n\r\n        drawingModes = [drawingMode == \"Polygon\" ? google.maps.drawing.OverlayType.POLYGON : google.maps.drawing.OverlayType.MARKER];\r\n\r\n        // Create a new StyledMapType object, passing it the array of styles,\r\n        // as well as the name to be displayed on the map type control.\r\n        var styledMap = new google.maps.StyledMapType(styles, { name: \"Styled Map\" });\r\n\r\n        // WARNING: I though about removing the \"center:\" from the options here but then the\r\n        // map's controls were different and then our delete button was out of alignment.\r\n        var mapOptions = {\r\n            center: new google.maps.LatLng(centerLatitude, centerLongitude),\r\n            zoom: 16,\r\n            streetViewControl: false,\r\n            fullscreenControl: false,\r\n            mapTypeControlOptions: {\r\n                mapTypeIds: [google.maps.MapTypeId.ROADMAP, \"map_style\"],\r\n            }\r\n        };\r\n\r\n        map = new google.maps.Map(mapContainer.value as HTMLElement, mapOptions);\r\n\r\n        // Add our clear button to the Google Map control flow so we don't need to position it\r\n        map.controls[google.maps.ControlPosition.TOP_LEFT].push(clearButton.value as HTMLElement);\r\n\r\n        //Associate the styled map with the MapTypeId and set it to display.\r\n        map.mapTypes.set(\"map_style\", styledMap);\r\n        map.setMapTypeId(\"map_style\");\r\n\r\n        // Set up the Drawing Manager for creating polygons, circles, etc.\r\n        drawingManager = new google.maps.drawing.DrawingManager({\r\n            drawingControl: true,\r\n            drawingControlOptions: {\r\n                drawingModes: drawingModes\r\n            },\r\n            polygonOptions: {\r\n                editable: true,\r\n                strokeColor: strokeColor,\r\n                fillColor: fillColor,\r\n                strokeWeight: 2\r\n            },\r\n            markerOptions: {\r\n                icon: marker\r\n            },\r\n            map\r\n        });\r\n\r\n        // Create the shape overlay if we already have a value for it\r\n        if (internalValue.value && internalValue.value.length > 0) {\r\n            let shape;\r\n            if (drawingMode == \"Polygon\") {\r\n                shape = new google.maps.Polygon({\r\n                    paths: internalValue.value.map((c: Coordinate) => createLatLng(...c)),\r\n                    clickable: true,\r\n                    editable: true,\r\n                    strokeColor: strokeColor,\r\n                    fillColor: fillColor,\r\n                    strokeWeight: 2,\r\n                    map\r\n                });\r\n            }\r\n            else {\r\n                shape = new google.maps.Marker({\r\n                    position: new google.maps.LatLng(...internalValue.value[0]),\r\n                    map: map,\r\n                    clickable: true,\r\n                    icon: marker\r\n                });\r\n            }\r\n\r\n            setCurrentShape(shape);\r\n            fitBounds(map);\r\n        }\r\n\r\n        // Handle when the polygon shape drawing is \"complete\"\r\n        google.maps.event.addListener(drawingManager, \"overlaycomplete\", function (e) {\r\n            setCurrentShape(e.overlay as Shape);\r\n        });\r\n\r\n        // Clear the current selection when the drawing mode is changed, or when the\r\n        // map is clicked.\r\n        google.maps.event.addListener(drawingManager, \"drawingmode_changed\", deselect);\r\n        google.maps.event.addListener(map, \"click\", deselect);\r\n    }\r\n\r\n    /**\r\n     * Create a new shape, add it to the map, and add listeners for updates to it\r\n     */\r\n    function setCurrentShape(newShape: Shape): void {\r\n        disableDrawing();\r\n        select(newShape);\r\n\r\n        if (drawingMode == \"Polygon\") {\r\n            shape = newShape as google.maps.Polygon;\r\n            setEditable(true);\r\n\r\n            internalValue.value = pathToCoordinates(shape.getPath());\r\n\r\n            // add listener for moving polygon points.\r\n            google.maps.event.addListener(shape.getPath(), \"set_at\", () => {\r\n                updateShape(shape as google.maps.Polygon);\r\n            });\r\n\r\n            // add listener for adding new points.\r\n            google.maps.event.addListener(shape.getPath(), \"insert_at\", () => {\r\n                updateShape(shape as google.maps.Polygon);\r\n            });\r\n\r\n            // Add an event listener to implement right-click to delete node\r\n            google.maps.event.addListener(shape, \"rightclick\", (ev) => {\r\n                if (ev.vertex != null) {\r\n                    (shape as google.maps.Polygon).getPath().removeAt(ev.vertex);\r\n                }\r\n\r\n                updateShape(shape as google.maps.Polygon);\r\n            });\r\n\r\n            // add listener for selecting the polygon\r\n            google.maps.event.addListener(shape, \"click\", () => {\r\n                select(shape);\r\n            });\r\n        }\r\n        else if (drawingMode == \"Point\") {\r\n            shape = newShape as google.maps.Marker;\r\n            let position = shape.getPosition();\r\n\r\n            if (!position) {\r\n                internalValue.value = [];\r\n            }\r\n            else {\r\n                internalValue.value = [toCoordinate(position)];\r\n            }\r\n\r\n            // add listener for selecting the polygon\r\n            google.maps.event.addListener(shape, \"click\", () => {\r\n                select(shape);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * When nodes are added/moved/deleted from a polygon, this makes sure the component's value is up-to-date\r\n     */\r\n    function updateShape(updatedShape: google.maps.Polygon): void {\r\n        shape = updatedShape as google.maps.Polygon;\r\n\r\n        let path = shape.getPath();\r\n\r\n        // if the last vertex has been removed, there's no more shape, so delete it and let us draw a new one.\r\n        if (path.getLength() == 0) {\r\n            deleteSelectedShape(true);\r\n            return;\r\n        }\r\n\r\n        const coordinates: Coordinate[] = pathToCoordinates(path);\r\n\r\n        internalValue.value = coordinates;\r\n    }\r\n\r\n    /**\r\n     * Select the shape for editing/deleting\r\n     */\r\n    function select(shape: Shape | null): void {\r\n        if (shape == null) return;\r\n\r\n        setEditable(true);\r\n        isClearButtonEnabled.value = true;\r\n    }\r\n\r\n    /**\r\n     * Unselects the selected shape (if selected) and disables the delete button.\r\n     */\r\n    function deselect(): void {\r\n        setEditable(false);\r\n        isClearButtonEnabled.value = false;\r\n    }\r\n\r\n    /**\r\n     * If the current shape is a polygon, make it editable\r\n     */\r\n    function setEditable(isEditable: boolean): void {\r\n        if (shape && drawingMode == \"Polygon\") {\r\n            (shape as google.maps.Polygon).setEditable(isEditable);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Finds the point/polygon boundary and sets the map viewport to fit\r\n     */\r\n    function fitBounds(map: google.maps.Map): void {\r\n        if (!internalValue.value) {\r\n            // if no path, then set the center using the options\r\n            const newLatLng = new google.maps.LatLng(\r\n                centerLatitude,\r\n                centerLongitude\r\n            );\r\n\r\n            map.setCenter(newLatLng);\r\n            return;\r\n        }\r\n\r\n        const coords = internalValue.value;\r\n\r\n        if (drawingMode == \"Point\") {\r\n            map.setCenter(new google.maps.LatLng(...coords[0]));\r\n            return;\r\n        }\r\n\r\n        // find the most southWest and northEast points of the path.\r\n        for (let i = 0; i < coords.length; i++) {\r\n            const [lat, lng] = coords[i];\r\n\r\n            if (minLat == null || lat < minLat) {\r\n                minLat = lat;\r\n            }\r\n            if (maxLat == null || lat > maxLat) {\r\n                maxLat = lat;\r\n            }\r\n            if (minLng == null || lng < minLng) {\r\n                minLng = lng;\r\n            }\r\n            if (maxLng == null || lng > maxLng) {\r\n                maxLng = lng;\r\n            }\r\n        }\r\n\r\n        // Set the viewport to contain the given bounds.\r\n        const southWest = new google.maps.LatLng(minLat ?? 0, minLng);\r\n        const northEast = new google.maps.LatLng(maxLat ?? 0, maxLng);\r\n        const bounds = new google.maps.LatLngBounds(southWest, northEast);\r\n        map.fitBounds(bounds);\r\n    }\r\n\r\n    /**\r\n     * Disables the drawing manager so they cannot add anything to the map.\r\n     */\r\n    function disableDrawing(): void {\r\n        if (!drawingManager) {\r\n            return;\r\n        }\r\n\r\n        drawingManager.setDrawingMode(null);\r\n\r\n        // disable the drawing controls so we only get one polygon\r\n        // and we'll add it back on deleting the existing polygon.\r\n        drawingManager.setOptions({\r\n            drawingControlOptions: { drawingModes: [] }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disables the drawing manager so they cannot add anything to the map.\r\n     */\r\n    function enableDrawing(): void {\r\n        // TODO\r\n        if (!drawingManager) {\r\n            return;\r\n        }\r\n\r\n        drawingManager?.setOptions({\r\n            drawingControlOptions: { drawingModes: drawingModes }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Delete the selected shape and enable the drawing controls\r\n     * if they were deleted.  Also removes the polygon from the hidden variable.\r\n     */\r\n    async function deleteSelectedShape(confirmed: boolean = false): Promise<void> {\r\n        if (shape && (confirmed || await confirm(\"Delete selected shape?\"))) {\r\n            deselect();\r\n            shape.setMap(null);\r\n            shape = null;\r\n\r\n            internalValue.value = [];\r\n            enableDrawing();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Takes a Google Polygon path and converts it into a Coordinate array\r\n     */\r\n    function pathToCoordinates(path: google.maps.MVCArray<google.maps.LatLng>): Coordinate[] {\r\n        const coordinates: Coordinate[] = [];\r\n\r\n        // Iterate over the vertices of the shape's path\r\n        for (let i = 0; i < path.getLength(); i++) {\r\n            const xy = path.getAt(i);\r\n            coordinates[i] = toCoordinate(xy);\r\n        }\r\n\r\n        return coordinates;\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Life Cycle\r\n\r\n    /*\r\n     * Load Google Maps and grab data needed from the server\r\n     */\r\n    onBeforeMount(async (): Promise<void> => {\r\n        const googleMapSettings = await loadMapResources({ mapStyleValueGuid: props.mapStyleValueGuid });\r\n\r\n        centerLatitude = centerLatitude ?? googleMapSettings.centerLatitude ?? 33.590795;\r\n        centerLongitude = centerLongitude ?? googleMapSettings.centerLongitude ?? -112.126459;\r\n\r\n        try {\r\n            styles = JSON.parse(googleMapSettings.mapStyle ?? \"\");\r\n        }\r\n        catch { /* empty */ }\r\n\r\n        fillColor = strokeColor = googleMapSettings.markerColor ? \"#\" + googleMapSettings.markerColor : \"#0088cc\";\r\n\r\n        isGoogleLoaded.value = true;\r\n    });\r\n\r\n    // Mark the component as mounted so we can know when we're ready to initialize\r\n    onMounted((): void => {\r\n        isMounted.value = true;\r\n    });\r\n\r\n    // #endregion\r\n</script>\r\n\r\n<style>\r\n.gm-container {\r\n    position: relative;\r\n}\r\n\r\n.gm-map {\r\n    overflow: hidden;\r\n}\r\n\r\n.gm-clear-button {\r\n    z-index: 10;\r\n    position: absolute;\r\n    /* right: 0px; */\r\n    margin-top: 5px;\r\n    line-height: 0;\r\n    overflow: hidden;\r\n    text-align: center;\r\n    color: #8c4b4b;\r\n    background: white;\r\n    padding: 4px;\r\n    border-radius: 2px;\r\n    box-shadow: rgba(0, 0, 0, 0.3) 0px 1px 4px -1px;\r\n    border: 0;\r\n    text-align: left;\r\n}\r\n\r\n.gm-clear-button:hover {\r\n    background: whitesmoke;\r\n}\r\n\r\n.gm-clear-button:disabled {\r\n    color: #aaa;\r\n    background: white;\r\n}\r\n\r\n.gm-clear-button i.fa {\r\n    font-size: 16px;\r\n    padding: 0 2.5px;\r\n}\r\n\r\n.static-map-size {\r\n    height: 300px;\r\n    width: 500px;\r\n}\r\n\r\n.expanded-map-size {\r\n    height: 100%;\r\n    width: 100%;\r\n}\r\n</style>","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n"],"names":["clearButton","ref","mapContainer","isGoogleLoaded","isMounted","isReady","computed","value","isClearButtonEnabled","drawingMode","props","drawingModes","drawingManager","map","centerLatitude","centerLongitude","minLat","minLng","maxLat","maxLng","fillColor","strokeColor","styles","shape","marker","internalValue","get","_props$modelValue","wellKnownToCoordinates","modelValue","set","newValue","emit","coordinatesToWellKnown","watch","initialize","isExpanded","_asyncToGenerator","nextTick","google","maps","event","trigger","_x","_initialize","apply","arguments","path","fillOpacity","strokeWeight","scale","labelOrigin","Point","drawing","OverlayType","POLYGON","MARKER","styledMap","StyledMapType","name","mapOptions","center","LatLng","zoom","streetViewControl","fullscreenControl","mapTypeControlOptions","mapTypeIds","MapTypeId","ROADMAP","Map","controls","ControlPosition","TOP_LEFT","push","mapTypes","setMapTypeId","DrawingManager","drawingControl","drawingControlOptions","polygonOptions","editable","markerOptions","icon","length","Polygon","paths","c","createLatLng","clickable","Marker","position","setCurrentShape","fitBounds","addListener","e","overlay","deselect","newShape","disableDrawing","select","setEditable","pathToCoordinates","getPath","updateShape","ev","vertex","removeAt","getPosition","toCoordinate","updatedShape","getLength","deleteSelectedShape","coordinates","isEditable","_minLat","_maxLat","newLatLng","setCenter","coords","i","_coords$i","_slicedToArray","lat","lng","southWest","northEast","bounds","LatLngBounds","setDrawingMode","setOptions","enableDrawing","_drawingManager","_deleteSelectedShape","confirmed","undefined","confirm","setMap","xy","getAt","onBeforeMount","_ref4","_centerLatitude","_ref5","_centerLongitude","googleMapSettings","loadMapResources","mapStyleValueGuid","_googleMapSettings$ma","JSON","parse","mapStyle","_unused","markerColor","onMounted","styleInject","css","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode"],"mappings":"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"}