{"version":3,"file":"contentChannelItemPicker.obs.js","sources":["../../../Framework/Controls/contentChannelItemPicker.obs"],"sourcesContent":["<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <RockFormField v-model=\"internalItemValue\" name=\"content-channel-item\" v-bind=\"standardProps\">\r\n        <BaseAsyncPicker v-if=\"!contentChannelGuid\"\r\n                         v-model=\"internalChannelValue\"\r\n                         v-bind=\"standardAsyncProps\"\r\n                         label=\"Content Channel\"\r\n                         :displayStyle=\"displayStyle\"\r\n                         :items=\"actualChannelItems\"\r\n                         :multiple=\"false\"\r\n                         rules=\"\"\r\n                         showBlankItem\r\n                         enhanceForLongLists />\r\n        <BaseAsyncPicker v-model=\"internalItemValue\"\r\n                         v-bind=\"standardAsyncProps\"\r\n                         label=\"Content Channel Item\"\r\n                         :displayStyle=\"displayStyle\"\r\n                         :items=\"actualItemItems\"\r\n                         :multiple=\"false\"\r\n                         showBlankItem\r\n                         enhanceForLongLists />\r\n    </RockFormField>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { standardAsyncPickerProps, updateRefValue, useStandardAsyncPickerProps, useStandardRockFormFieldProps } from \"@Obsidian/Utility/component\";\r\n    import { useHttp } from \"@Obsidian/Utility/http\";\r\n    import { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\n    import { PropType, computed, nextTick, ref, watch } from \"vue\";\r\n    import BaseAsyncPicker from \"./baseAsyncPicker\";\r\n    import RockFormField from \"./rockFormField\";\r\n    import { Guid } from \"@Obsidian/Types\";\r\n    import { ContentChannelItemPickerGetContentChannelItemsOptionsBag } from \"@Obsidian/ViewModels/Rest/Controls/contentChannelItemPickerGetContentChannelItemsOptionsBag\";\r\n    import { ContentChannelItemPickerGetAllForContentChannelItemOptionsBag } from \"@Obsidian/ViewModels/Rest/Controls/contentChannelItemPickerGetAllForContentChannelItemOptionsBag\";\r\n    import { ContentChannelItemPickerGetAllForContentChannelItemResultsBag } from \"@Obsidian/ViewModels/Rest/Controls/contentChannelItemPickerGetAllForContentChannelItemResultsBag\";\r\n\r\n    const props = defineProps({\r\n        modelValue: {\r\n            type: Object as PropType<ListItemBag | null>,\r\n            required: true\r\n        },\r\n\r\n        excludeContentChannelItems: {\r\n            type: Array as PropType<Guid[]>\r\n        },\r\n\r\n        /** If you specify the channel, the channel picker will be hidden and we'll just show CC Items for this type */\r\n        contentChannelGuid: {\r\n            type: String as PropType<Guid>,\r\n            default: null\r\n        },\r\n\r\n        ...standardAsyncPickerProps\r\n    });\r\n\r\n    const emit = defineEmits<{\r\n        (e: \"update:modelValue\", value: ListItemBag | ListItemBag[] | null): void\r\n    }>();\r\n\r\n    // #region Values\r\n\r\n    const standardProps = useStandardRockFormFieldProps(props);\r\n    const standardAsyncProps = useStandardAsyncPickerProps(props);\r\n    const http = useHttp();\r\n\r\n    const internalChannelValue = ref<ListItemBag | null>(null);\r\n    const loadedTypeItems = ref<ListItemBag[] | null>(null);\r\n\r\n    const internalItemValue = ref(props.modelValue);\r\n    const loadedContentChannelItemItems = ref<ListItemBag[] | null>(null);\r\n\r\n    // #endregion\r\n\r\n    // #region Computed\r\n\r\n    const contentChannelGuidValue = computed(() => {\r\n        return props.contentChannelGuid || internalChannelValue.value?.value || null;\r\n    });\r\n\r\n    // #endregion\r\n\r\n    // #region Computed Values\r\n\r\n    /**\r\n     * The actual items to make available to the picker. This allows us to do any\r\n     * post-processing, such as adding additional items, and still be lazy loaded as well.\r\n     */\r\n    const actualChannelItems = computed((): ListItemBag[] | (() => Promise<ListItemBag[]>) => {\r\n        return loadedTypeItems.value || loadTypeOptions;\r\n    });\r\n\r\n    /**\r\n     * The actual items to make available to the picker. This allows us to do any\r\n     * post-processing, such as adding additional items, and still be lazy loaded as well.\r\n     */\r\n    const actualItemItems = computed((): ListItemBag[] | (() => Promise<ListItemBag[]>) => {\r\n        return loadedContentChannelItemItems.value || loadContentChannelItemOptions;\r\n    });\r\n\r\n    // #endregion\r\n\r\n    // #region Functions\r\n\r\n    /**\r\n     * Loads the content channels from the server.\r\n     */\r\n    async function loadTypeOptions(): Promise<ListItemBag[]> {\r\n        const result = await http.post<ListItemBag[]>(\"/api/v2/Controls/ContentChannelItemPickerGetContentChannels\");\r\n\r\n        if (result.isSuccess && result.data) {\r\n            loadedTypeItems.value = result.data ?? null;\r\n\r\n            return loadedTypeItems.value ?? [];\r\n        }\r\n        else {\r\n            console.error(result.errorMessage ?? \"Unknown error while loading data.\");\r\n            loadedTypeItems.value = [];\r\n            return [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads the content channel items from the server.\r\n     */\r\n    async function loadContentChannelItemOptions(): Promise<ListItemBag[]> {\r\n        if (!contentChannelGuidValue.value) {\r\n            return [];\r\n        }\r\n\r\n        const options: ContentChannelItemPickerGetContentChannelItemsOptionsBag = {\r\n            contentChannelGuid: contentChannelGuidValue.value,\r\n            excludeContentChannelItems: props.excludeContentChannelItems\r\n        };\r\n\r\n        const result = await http.post<ListItemBag[]>(\"/api/v2/Controls/ContentChannelItemPickerGetContentChannelItems\", null, options);\r\n\r\n        if (result.isSuccess && result.data) {\r\n            loadedContentChannelItemItems.value = result.data ?? null;\r\n\r\n            return loadedContentChannelItemItems.value ?? [];\r\n        }\r\n        else {\r\n            console.error(result.errorMessage ?? \"Unknown error while loading data.\");\r\n            loadedContentChannelItemItems.value = [];\r\n            return [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets all the data needed to fill in the pickers when we're given a value to start\r\n     */\r\n    async function loadContentChannelItemOptionsFromValue(): Promise<void> {\r\n        const options: ContentChannelItemPickerGetAllForContentChannelItemOptionsBag = {\r\n            contentChannelItemGuid: props.modelValue?.value,\r\n            excludeContentChannelItems: props.excludeContentChannelItems\r\n        };\r\n\r\n        const result = await http.post<ContentChannelItemPickerGetAllForContentChannelItemResultsBag>(\"/api/v2/Controls/ContentChannelItemPickerGetAllForContentChannelItem\", null, options);\r\n\r\n        if (result.isSuccess && result.data) {\r\n            loadedContentChannelItemItems.value = result.data.contentChannelItems ?? null;\r\n            internalChannelValue.value = result.data.selectedContentChannel ?? null;\r\n\r\n            // Wait for watchers of the content channel to fire so we don't undo the next line\r\n            await nextTick();\r\n\r\n            internalItemValue.value = result.data.selectedContentChannelItem ?? null;\r\n        }\r\n        else {\r\n            console.error(result.errorMessage ?? \"Unknown error while loading data.\");\r\n            loadedContentChannelItemItems.value = [];\r\n        }\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Watchers\r\n\r\n    /** If the value is changed from the outside, fill in all the required data */\r\n    watch(() => props.modelValue, () => {\r\n        if (updateRefValue(internalItemValue, props.modelValue)) {\r\n            loadContentChannelItemOptionsFromValue();\r\n        }\r\n    });\r\n\r\n    watch(internalItemValue, () => emit(\"update:modelValue\", internalItemValue.value));\r\n\r\n    /** Reload CC items if the channel or excluded CC items list change */\r\n    watch([contentChannelGuidValue, () => props.excludeContentChannelItems], () => {\r\n        internalItemValue.value = null;\r\n\r\n        loadedContentChannelItemItems.value = null;\r\n        loadContentChannelItemOptions();\r\n    });\r\n\r\n    // #endregion\r\n\r\n    // #region Initialization\r\n\r\n    if (props.modelValue) {\r\n        // Load the type and list of items based on the selected value\r\n        loadContentChannelItemOptionsFromValue();\r\n    }\r\n    else if (props.contentChannelGuid) {\r\n        loadContentChannelItemOptions();\r\n    }\r\n\r\n                            // #endregion\r\n</script>\r\n"],"names":["standardProps","useStandardRockFormFieldProps","props","standardAsyncProps","useStandardAsyncPickerProps","http","useHttp","internalChannelValue","ref","loadedTypeItems","internalItemValue","modelValue","loadedContentChannelItemItems","contentChannelGuidValue","computed","_internalChannelValue","contentChannelGuid","value","actualChannelItems","loadTypeOptions","actualItemItems","loadContentChannelItemOptions","_loadTypeOptions","apply","arguments","_asyncToGenerator","result","post","isSuccess","data","_result$data","_loadedTypeItems$valu","_result$errorMessage","console","error","errorMessage","_loadContentChannelItemOptions","options","excludeContentChannelItems","_result$data2","_loadedContentChannel","_result$errorMessage2","loadContentChannelItemOptionsFromValue","_loadContentChannelItemOptionsFromValue","_props$modelValue","contentChannelItemGuid","_result$data$contentC","_result$data$selected","_result$data$selected2","contentChannelItems","selectedContentChannel","nextTick","selectedContentChannelItem","_result$errorMessage3","watch","updateRefValue","emit"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA6DI,IAAA,IAAMA,aAAa,GAAGC,6BAA6B,CAACC,KAAK,CAAC,CAAA;MAC1D,IAAA,IAAMC,kBAAkB,GAAGC,2BAA2B,CAACF,KAAK,CAAC,CAAA;UAC7D,IAAMG,IAAI,GAAGC,OAAO,EAAE,CAAA;MAEtB,IAAA,IAAMC,oBAAoB,GAAGC,GAAG,CAAqB,IAAI,CAAC,CAAA;MAC1D,IAAA,IAAMC,eAAe,GAAGD,GAAG,CAAuB,IAAI,CAAC,CAAA;MAEvD,IAAA,IAAME,iBAAiB,GAAGF,GAAG,CAACN,KAAK,CAACS,UAAU,CAAC,CAAA;MAC/C,IAAA,IAAMC,6BAA6B,GAAGJ,GAAG,CAAuB,IAAI,CAAC,CAAA;MAMrE,IAAA,IAAMK,uBAAuB,GAAGC,QAAQ,CAAC,MAAM;MAAA,MAAA,IAAAC,qBAAA,CAAA;MAC3C,MAAA,OAAOb,KAAK,CAACc,kBAAkB,KAAAD,CAAAA,qBAAA,GAAIR,oBAAoB,CAACU,KAAK,MAAA,IAAA,IAAAF,qBAAA,KAA1BA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,qBAAA,CAA4BE,KAAK,KAAI,IAAI,CAAA;MAChF,KAAC,CAAC,CAAA;MAUF,IAAA,IAAMC,kBAAkB,GAAGJ,QAAQ,CAAC,MAAsD;MACtF,MAAA,OAAOL,eAAe,CAACQ,KAAK,IAAIE,eAAe,CAAA;MACnD,KAAC,CAAC,CAAA;MAMF,IAAA,IAAMC,eAAe,GAAGN,QAAQ,CAAC,MAAsD;MACnF,MAAA,OAAOF,6BAA6B,CAACK,KAAK,IAAII,6BAA6B,CAAA;MAC/E,KAAC,CAAC,CAAA;MAAC,IAAA,SASYF,eAAeA,GAAA;MAAA,MAAA,OAAAG,gBAAA,CAAAC,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;MAAA,KAAA;MAAA,IAAA,SAAAF,gBAAA,GAAA;YAAAA,gBAAA,GAAAG,iBAAA,CAA9B,aAAyD;MACrD,QAAA,IAAMC,MAAM,GAASrB,MAAAA,IAAI,CAACsB,IAAI,CAAgB,6DAA6D,CAAC,CAAA;MAE5G,QAAA,IAAID,MAAM,CAACE,SAAS,IAAIF,MAAM,CAACG,IAAI,EAAE;gBAAA,IAAAC,YAAA,EAAAC,qBAAA,CAAA;MACjCtB,UAAAA,eAAe,CAACQ,KAAK,GAAAa,CAAAA,YAAA,GAAGJ,MAAM,CAACG,IAAI,MAAAC,IAAAA,IAAAA,YAAA,KAAAA,KAAAA,CAAAA,GAAAA,YAAA,GAAI,IAAI,CAAA;gBAE3C,OAAAC,CAAAA,qBAAA,GAAOtB,eAAe,CAACQ,KAAK,cAAAc,qBAAA,KAAA,KAAA,CAAA,GAAAA,qBAAA,GAAI,EAAE,CAAA;MACtC,SAAC,MACI;MAAA,UAAA,IAAAC,oBAAA,CAAA;MACDC,UAAAA,OAAO,CAACC,KAAK,CAAAF,CAAAA,oBAAA,GAACN,MAAM,CAACS,YAAY,MAAA,IAAA,IAAAH,oBAAA,KAAA,KAAA,CAAA,GAAAA,oBAAA,GAAI,mCAAmC,CAAC,CAAA;gBACzEvB,eAAe,CAACQ,KAAK,GAAG,EAAE,CAAA;MAC1B,UAAA,OAAO,EAAE,CAAA;MACb,SAAA;aACH,CAAA,CAAA;MAAA,MAAA,OAAAK,gBAAA,CAAAC,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;MAAA,KAAA;MAAA,IAAA,SAKcH,6BAA6BA,GAAA;MAAA,MAAA,OAAAe,8BAAA,CAAAb,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;MAAA,KAAA;MAAA,IAAA,SAAAY,8BAAA,GAAA;YAAAA,8BAAA,GAAAX,iBAAA,CAA5C,aAAuE;MACnE,QAAA,IAAI,CAACZ,uBAAuB,CAACI,KAAK,EAAE;MAChC,UAAA,OAAO,EAAE,CAAA;MACb,SAAA;MAEA,QAAA,IAAMoB,OAAiE,GAAG;gBACtErB,kBAAkB,EAAEH,uBAAuB,CAACI,KAAK;gBACjDqB,0BAA0B,EAAEpC,KAAK,CAACoC,0BAAAA;eACrC,CAAA;cAED,IAAMZ,MAAM,GAASrB,MAAAA,IAAI,CAACsB,IAAI,CAAgB,iEAAiE,EAAE,IAAI,EAAEU,OAAO,CAAC,CAAA;MAE/H,QAAA,IAAIX,MAAM,CAACE,SAAS,IAAIF,MAAM,CAACG,IAAI,EAAE;gBAAA,IAAAU,aAAA,EAAAC,qBAAA,CAAA;MACjC5B,UAAAA,6BAA6B,CAACK,KAAK,GAAAsB,CAAAA,aAAA,GAAGb,MAAM,CAACG,IAAI,MAAAU,IAAAA,IAAAA,aAAA,KAAAA,KAAAA,CAAAA,GAAAA,aAAA,GAAI,IAAI,CAAA;gBAEzD,OAAAC,CAAAA,qBAAA,GAAO5B,6BAA6B,CAACK,KAAK,cAAAuB,qBAAA,KAAA,KAAA,CAAA,GAAAA,qBAAA,GAAI,EAAE,CAAA;MACpD,SAAC,MACI;MAAA,UAAA,IAAAC,qBAAA,CAAA;MACDR,UAAAA,OAAO,CAACC,KAAK,CAAAO,CAAAA,qBAAA,GAACf,MAAM,CAACS,YAAY,MAAA,IAAA,IAAAM,qBAAA,KAAA,KAAA,CAAA,GAAAA,qBAAA,GAAI,mCAAmC,CAAC,CAAA;gBACzE7B,6BAA6B,CAACK,KAAK,GAAG,EAAE,CAAA;MACxC,UAAA,OAAO,EAAE,CAAA;MACb,SAAA;aACH,CAAA,CAAA;MAAA,MAAA,OAAAmB,8BAAA,CAAAb,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;MAAA,KAAA;MAAA,IAAA,SAKckB,sCAAsCA,GAAA;MAAA,MAAA,OAAAC,uCAAA,CAAApB,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;MAAA,KAAA;MAAA,IAAA,SAAAmB,uCAAA,GAAA;YAAAA,uCAAA,GAAAlB,iBAAA,CAArD,aAAuE;MAAA,QAAA,IAAAmB,iBAAA,CAAA;MACnE,QAAA,IAAMP,OAAsE,GAAG;gBAC3EQ,sBAAsB,EAAA,CAAAD,iBAAA,GAAE1C,KAAK,CAACS,UAAU,MAAA,IAAA,IAAAiC,iBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAhBA,iBAAA,CAAkB3B,KAAK;gBAC/CqB,0BAA0B,EAAEpC,KAAK,CAACoC,0BAAAA;eACrC,CAAA;cAED,IAAMZ,MAAM,GAASrB,MAAAA,IAAI,CAACsB,IAAI,CAAgE,sEAAsE,EAAE,IAAI,EAAEU,OAAO,CAAC,CAAA;MAEpL,QAAA,IAAIX,MAAM,CAACE,SAAS,IAAIF,MAAM,CAACG,IAAI,EAAE;MAAA,UAAA,IAAAiB,qBAAA,EAAAC,qBAAA,EAAAC,sBAAA,CAAA;MACjCpC,UAAAA,6BAA6B,CAACK,KAAK,GAAA6B,CAAAA,qBAAA,GAAGpB,MAAM,CAACG,IAAI,CAACoB,mBAAmB,MAAAH,IAAAA,IAAAA,qBAAA,KAAAA,KAAAA,CAAAA,GAAAA,qBAAA,GAAI,IAAI,CAAA;MAC7EvC,UAAAA,oBAAoB,CAACU,KAAK,GAAA8B,CAAAA,qBAAA,GAAGrB,MAAM,CAACG,IAAI,CAACqB,sBAAsB,MAAAH,IAAAA,IAAAA,qBAAA,KAAAA,KAAAA,CAAAA,GAAAA,qBAAA,GAAI,IAAI,CAAA;MAGvE,UAAA,MAAMI,QAAQ,EAAE,CAAA;MAEhBzC,UAAAA,iBAAiB,CAACO,KAAK,GAAA+B,CAAAA,sBAAA,GAAGtB,MAAM,CAACG,IAAI,CAACuB,0BAA0B,MAAAJ,IAAAA,IAAAA,sBAAA,KAAAA,KAAAA,CAAAA,GAAAA,sBAAA,GAAI,IAAI,CAAA;MAC5E,SAAC,MACI;MAAA,UAAA,IAAAK,qBAAA,CAAA;MACDpB,UAAAA,OAAO,CAACC,KAAK,CAAAmB,CAAAA,qBAAA,GAAC3B,MAAM,CAACS,YAAY,MAAA,IAAA,IAAAkB,qBAAA,KAAA,KAAA,CAAA,GAAAA,qBAAA,GAAI,mCAAmC,CAAC,CAAA;gBACzEzC,6BAA6B,CAACK,KAAK,GAAG,EAAE,CAAA;MAC5C,SAAA;aACH,CAAA,CAAA;MAAA,MAAA,OAAA0B,uCAAA,CAAApB,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;MAAA,KAAA;MAOD8B,IAAAA,KAAK,CAAC,MAAMpD,KAAK,CAACS,UAAU,EAAE,MAAM;YAChC,IAAI4C,cAAc,CAAC7C,iBAAiB,EAAER,KAAK,CAACS,UAAU,CAAC,EAAE;MACrD+B,QAAAA,sCAAsC,EAAE,CAAA;MAC5C,OAAA;MACJ,KAAC,CAAC,CAAA;MAEFY,IAAAA,KAAK,CAAC5C,iBAAiB,EAAE,MAAM8C,IAAI,CAAC,mBAAmB,EAAE9C,iBAAiB,CAACO,KAAK,CAAC,CAAC,CAAA;UAGlFqC,KAAK,CAAC,CAACzC,uBAAuB,EAAE,MAAMX,KAAK,CAACoC,0BAA0B,CAAC,EAAE,MAAM;YAC3E5B,iBAAiB,CAACO,KAAK,GAAG,IAAI,CAAA;YAE9BL,6BAA6B,CAACK,KAAK,GAAG,IAAI,CAAA;MAC1CI,MAAAA,6BAA6B,EAAE,CAAA;MACnC,KAAC,CAAC,CAAA;UAMF,IAAInB,KAAK,CAACS,UAAU,EAAE;MAElB+B,MAAAA,sCAAsC,EAAE,CAAA;MAC5C,KAAC,MACI,IAAIxC,KAAK,CAACc,kBAAkB,EAAE;MAC/BK,MAAAA,6BAA6B,EAAE,CAAA;MACnC,KAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}