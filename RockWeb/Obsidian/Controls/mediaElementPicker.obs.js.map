{"version":3,"file":"mediaElementPicker.obs.js","sources":["../../../Framework/Controls/mediaElementPicker.obs"],"sourcesContent":["<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <RockFormField v-bind=\"formFieldProps\" :modelValue=\"internalMediaElement\" name=\"media-element-picker\">\r\n        <BaseAsyncPicker v-if=\"!hideAccountPicker\" v-model=\"internalMediaAccount\" v-bind=\"standardProps\" label=\"Account\" :multiple=\"false\" :items=\"mediaAccountItems\" showBlankItem />\r\n        <BaseAsyncPicker v-if=\"internalMediaAccount && !hideFolderPicker\" v-model=\"internalMediaFolder\" v-bind=\"standardProps\" label=\"Folder\" :multiple=\"false\" :items=\"mediaFolderItems\" showBlankItem :lazyMode=\"ControlLazyMode.Eager\">\r\n            <template #inputGroupAppend v-if=\"!hideRefreshButtons\">\r\n                <span class=\"input-group-addon\">\r\n                    <RockButton isSquare @click.prevent=\"fetchMediaFolders\"><i class=\"fa fa-refresh\"></i></RockButton>\r\n                </span>\r\n            </template>\r\n        </BaseAsyncPicker>\r\n        <BaseAsyncPicker v-if=\"internalMediaFolder && !hideMediaPicker\" v-model=\"internalMediaElement\" v-bind=\"standardProps\" :label=\"mediaElementLabel\" :items=\"mediaElementItems\" showBlankItem :lazyMode=\"ControlLazyMode.Eager\">\r\n            <template #inputGroupAppend v-if=\"!hideRefreshButtons\">\r\n                <span class=\"input-group-addon\">\r\n                    <RockButton isSquare @click.prevent=\"fetchMediaElements\"><i class=\"fa fa-refresh\"></i></RockButton>\r\n                </span>\r\n            </template>\r\n        </BaseAsyncPicker>\r\n    </RockFormField>\r\n</template>\r\n\r\n<script lang=\"ts\" setup>\r\n    import { computed, nextTick, PropType, ref, watch } from \"vue\";\r\n    import { standardRockFormFieldProps, useStandardAsyncPickerProps, standardAsyncPickerProps, useStandardRockFormFieldProps, updateRefValue } from \"@Obsidian/Utility/component\";\r\n    import { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\n    import { MediaElementPickerGetMediaFoldersOptionsBag } from \"@Obsidian/ViewModels/Rest/Controls/mediaElementPickerGetMediaFoldersOptionsBag\";\r\n    import { MediaElementPickerGetMediaElementsOptionsBag } from \"@Obsidian/ViewModels/Rest/Controls/mediaElementPickerGetMediaElementsOptionsBag\";\r\n    import { MediaElementPickerGetMediaTreeOptionsBag } from \"@Obsidian/ViewModels/Rest/Controls/mediaElementPickerGetMediaTreeOptionsBag\";\r\n    import { MediaElementPickerGetMediaTreeResultsBag } from \"@Obsidian/ViewModels/Rest/Controls/mediaElementPickerGetMediaTreeResultsBag\";\r\n    import { HttpBodyData } from \"@Obsidian/Types/Utility/http\";\r\n    import { ControlLazyMode } from \"@Obsidian/Enums/Controls/controlLazyMode\";\r\n    import { useHttp } from \"@Obsidian/Utility/http\";\r\n    import BaseAsyncPicker from \"./baseAsyncPicker\";\r\n    import RockButton from \"./rockButton\";\r\n    import RockFormField from \"./rockFormField\";\r\n\r\n    const props = defineProps({\r\n        ...standardRockFormFieldProps,\r\n\r\n        /** v-model of the media account */\r\n        account: {\r\n            type: Object as PropType<ListItemBag | null>,\r\n            default: null\r\n        },\r\n\r\n        /** v-model of the folder */\r\n        folder: {\r\n            type: Object as PropType<ListItemBag | null>,\r\n            default: null\r\n        },\r\n\r\n        /** v-model of the media element */\r\n        modelValue: {\r\n            type: Object as PropType<ListItemBag | null>,\r\n            default: null\r\n        },\r\n\r\n        /** Whether to hide the media account dropdown portion */\r\n        hideAccountPicker: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        /** Whether to hide the media folder dropdown portion */\r\n        hideFolderPicker: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        /** Whether to hide the media element dropdown portion */\r\n        hideMediaPicker: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        /** True to hide the refresh buttons next to the folder and element dropdowns */\r\n        hideRefreshButtons: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        /** Label text for the media element dropdown */\r\n        mediaElementLabel: {\r\n            type: String,\r\n            default: \"Media\"\r\n        },\r\n\r\n        ...standardAsyncPickerProps\r\n    });\r\n\r\n    const emit = defineEmits<{\r\n        (e: \"update:account\", value: ListItemBag | null): void,\r\n        (e: \"update:folder\", value: ListItemBag | null): void,\r\n        (e: \"update:modelValue\", value: ListItemBag | null): void\r\n    }>();\r\n\r\n    // #region Values\r\n\r\n    const internalMediaAccount = ref<ListItemBag | null>(props.account);\r\n    const internalMediaFolder = ref<ListItemBag | null>(props.folder);\r\n    const internalMediaElement = ref<ListItemBag | null>(props.modelValue);\r\n\r\n    const mediaAccountItems = ref<(() => Promise<ListItemBag[]>) | ListItemBag[] | null>(null);\r\n    const mediaFolderItems = ref<(() => Promise<ListItemBag[]>) | ListItemBag[] | null>(null);\r\n    const mediaElementItems = ref<(() => Promise<ListItemBag[]>) | ListItemBag[] | null>(null);\r\n\r\n    const standardProps = useStandardAsyncPickerProps(props);\r\n    const formFieldProps = useStandardRockFormFieldProps(props);\r\n\r\n    // When true, watchers will not respond to changes to the internal models so we can set many pieces of data without the watchers busting anything\r\n    let pauseModelWatching = false;\r\n\r\n    const http = useHttp();\r\n\r\n    // #endregion\r\n\r\n    // #region Functions\r\n\r\n    /** Generic function to load items for sub-pickers. Used by specific load functions */\r\n    async function loadItems(apiAction: string, payload: HttpBodyData = null): Promise<ListItemBag[]> {\r\n        const result = await http.post<ListItemBag[]>(\"/api/v2/Controls/\" + apiAction, undefined, payload);\r\n\r\n        if (result.isSuccess && result.data) {\r\n            return result.data;\r\n        }\r\n        else {\r\n            console.error(result.errorMessage ?? \"Unknown error while loading data.\");\r\n            return [];\r\n        }\r\n    }\r\n\r\n    /** Load media accounts from server and returns them */\r\n    async function loadMediaAccounts(): Promise<ListItemBag[]> {\r\n        return loadItems(\"MediaElementPickerGetMediaAccounts\");\r\n    }\r\n\r\n    /** Load media folders for the selected account from server and returns them */\r\n    async function loadMediaFolders(): Promise<ListItemBag[]> {\r\n        const options: MediaElementPickerGetMediaFoldersOptionsBag = {\r\n            mediaAccountGuid: internalMediaAccount.value?.value ?? null\r\n        };\r\n\r\n        return loadItems(\"MediaElementPickerGetMediaFolders\", options);\r\n    }\r\n\r\n    /** Load media elements for the selected folder from server and returns them */\r\n    async function loadMediaElements(): Promise<ListItemBag[]> {\r\n        const options: MediaElementPickerGetMediaElementsOptionsBag = {\r\n            mediaFolderGuid: internalMediaFolder.value?.value ?? null\r\n        };\r\n\r\n        return loadItems(\"MediaElementPickerGetMediaElements\", options);\r\n    }\r\n\r\n    /**\r\n     * When we receive a selected account/folder/element from outside this component, we need to update all the sub-pickers\r\n     * to match the given data. This loads all that matching data from the server and applies it.\r\n     */\r\n    async function loadFullTree(payload: MediaElementPickerGetMediaTreeOptionsBag): Promise<void> {\r\n\r\n        const result = await http.post<MediaElementPickerGetMediaTreeResultsBag>(\"/api/v2/Controls/MediaElementPickerGetMediaTree\", undefined, payload);\r\n\r\n        if (!result.isSuccess || !result.data) {\r\n            console.error(result.errorMessage ?? \"Unknown error while loading data.\");\r\n            return;\r\n        }\r\n\r\n        const data = result.data;\r\n\r\n        // Pause the watchers so they don't end up messing up the data we're setting right now\r\n        pauseModelWatching = true;\r\n\r\n        // Assign any values we received from the server\r\n        if (data.mediaAccounts) {\r\n            mediaAccountItems.value = data.mediaAccounts;\r\n        }\r\n\r\n        if (data.mediaFolders) {\r\n            mediaFolderItems.value = data.mediaFolders;\r\n        }\r\n\r\n        if (data.mediaElements) {\r\n            mediaElementItems.value = data.mediaElements;\r\n        }\r\n\r\n        if (data.mediaAccount) {\r\n            internalMediaAccount.value = data.mediaAccount;\r\n        }\r\n\r\n        if (data.mediaFolder) {\r\n            internalMediaFolder.value = data.mediaFolder;\r\n        }\r\n\r\n        if (data.mediaElement) {\r\n            internalMediaElement.value = data.mediaElement;\r\n        }\r\n\r\n        // Allow watch handlers to fire and read that pauseModelWatching is true before we unpause.\r\n        await nextTick();\r\n\r\n        pauseModelWatching = false;\r\n    }\r\n\r\n    /** Sets the list of account items to a load function so the picker knows to run it to load account items */\r\n    function fetchMediaAccounts(): void {\r\n        mediaAccountItems.value = () => loadMediaAccounts();\r\n    }\r\n    /** Sets the list of folder items to a load function so the picker knows to run it to load folder items */\r\n    function fetchMediaFolders(): void {\r\n        mediaFolderItems.value = () => loadMediaFolders();\r\n    }\r\n    /** Sets the list of media element items to a load function so the picker knows to run it to load media element items */\r\n    function fetchMediaElements(): void {\r\n        mediaElementItems.value = () => loadMediaElements();\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Computed\r\n\r\n    const hideAccountPicker = computed<boolean>(() => {\r\n        // Only hide the account picker when the prop says we should AND we have an account selected\r\n        return props.hideAccountPicker && internalMediaAccount.value != null;\r\n    });\r\n\r\n    const hideFolderPicker = computed<boolean>(() => {\r\n        // Only hide the account picker when the prop says we should AND we have an account selected\r\n        return props.hideFolderPicker && internalMediaFolder.value != null;\r\n    });\r\n\r\n    // #endregion\r\n\r\n    // #region Watchers\r\n\r\n    watch(internalMediaAccount, () => {\r\n        emit(\"update:account\", internalMediaAccount.value);\r\n\r\n        // Don't proceed if we're pausing model watching\r\n        if (pauseModelWatching) return;\r\n\r\n        // Account changed, so reset media folder so an unavailable one won't be selected\r\n        internalMediaFolder.value = null;\r\n        if (internalMediaAccount.value != null) {\r\n            fetchMediaFolders();\r\n        }\r\n    });\r\n\r\n    watch(internalMediaFolder, () => {\r\n        emit(\"update:folder\", internalMediaFolder.value);\r\n\r\n        // Don't proceed if we're pausing model watching\r\n        if (pauseModelWatching) return;\r\n\r\n        // Account changed, so reset media element so an unavailable one won't be selected\r\n        internalMediaElement.value = null;\r\n        if (internalMediaFolder.value != null) {\r\n            fetchMediaElements();\r\n        }\r\n    });\r\n\r\n    watch(internalMediaElement, () => {\r\n        emit(\"update:modelValue\", internalMediaElement.value);\r\n    });\r\n\r\n\r\n    watch(() => props.account, () => {\r\n        if (updateRefValue(internalMediaAccount, props.account) && internalMediaAccount.value != null) {\r\n            // Prop value is different than current value... need updates from server\r\n            loadFullTree({ mediaAccountGuid: internalMediaAccount.value.value });\r\n        }\r\n    });\r\n\r\n    watch(() => props.folder, () => {\r\n        if (updateRefValue(internalMediaFolder, props.folder) && internalMediaFolder.value != null) {\r\n            // Prop value is different than current value... need updates from server\r\n            loadFullTree({ mediaFolderGuid: internalMediaFolder.value.value });\r\n        }\r\n    });\r\n\r\n    watch(() => props.modelValue, () => {\r\n        if (updateRefValue(internalMediaElement, props.modelValue) && internalMediaElement.value != null) {\r\n            // Prop value is different than current value... need updates from server\r\n            loadFullTree({ mediaElementGuid: internalMediaElement.value.value });\r\n        }\r\n    });\r\n\r\n    // #endregion\r\n\r\n\r\n    // Initialize\r\n\r\n    if (internalMediaElement.value?.value) {\r\n        loadFullTree({ mediaElementGuid: internalMediaElement.value.value });\r\n    }\r\n    else if (internalMediaFolder.value?.value) {\r\n        loadFullTree({ mediaFolderGuid: internalMediaFolder.value.value });\r\n    }\r\n    else if (internalMediaAccount.value?.value) {\r\n        loadFullTree({ mediaAccountGuid: internalMediaAccount.value.value });\r\n    }\r\n    else {\r\n        fetchMediaAccounts();\r\n    }\r\n\r\n</script>\r\n"],"names":["internalMediaAccount","ref","props","account","internalMediaFolder","folder","internalMediaElement","modelValue","mediaAccountItems","mediaFolderItems","mediaElementItems","standardProps","useStandardAsyncPickerProps","formFieldProps","useStandardRockFormFieldProps","pauseModelWatching","http","useHttp","loadItems","_x","_loadItems","apply","arguments","_asyncToGenerator","apiAction","payload","length","undefined","result","post","isSuccess","data","_result$errorMessage","console","error","errorMessage","loadMediaAccounts","_loadMediaAccounts","loadMediaFolders","_loadMediaFolders","_internalMediaAccount2","_internalMediaAccount3","options","mediaAccountGuid","value","loadMediaElements","_loadMediaElements","_internalMediaFolder$2","_internalMediaFolder$3","mediaFolderGuid","loadFullTree","_x2","_loadFullTree","_result$errorMessage2","mediaAccounts","mediaFolders","mediaElements","mediaAccount","mediaFolder","mediaElement","nextTick","fetchMediaAccounts","fetchMediaFolders","fetchMediaElements","hideAccountPicker","computed","hideFolderPicker","watch","emit","updateRefValue","mediaElementGuid","_internalMediaElement","_internalMediaFolder$","_internalMediaAccount"],"mappings":"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"}