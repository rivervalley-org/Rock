{"version":3,"file":"personPicker.js","sources":["../../../Framework/Controls/personPicker.ts"],"sourcesContent":["// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { computed, defineComponent, PropType, Ref, ref, watch } from \"vue\";\r\nimport { PersonPickerSearchOptionsBag } from \"@Obsidian/ViewModels/Rest/Controls/personPickerSearchOptionsBag\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport RockFormField from \"./rockFormField\";\r\nimport Panel from \"./panel\";\r\nimport TextBox from \"./textBox\";\r\nimport { nextTick } from \"vue\";\r\nimport { useHttp } from \"@Obsidian/Utility/http\";\r\nimport { sleep } from \"@Obsidian/Utility/promiseUtils\";\r\n\r\nconst enum AgeClassification {\r\n    Unknown = 0,\r\n\r\n    Adult = 1,\r\n\r\n    Child = 2\r\n}\r\n\r\ntype PersonSearchResult = {\r\n    guid?: string | null;\r\n\r\n    primaryAliasGuid?: string | null;\r\n\r\n    name?: string | null;\r\n\r\n    isActive?: boolean;\r\n\r\n    isDeceased?: boolean;\r\n\r\n    isBusiness?: boolean;\r\n\r\n    imageUrl?: string | null;\r\n\r\n    age?: number | null;\r\n\r\n    formattedAge?: string | null;\r\n\r\n    ageClassification?: AgeClassification;\r\n\r\n    gender?: string | null;\r\n\r\n    connectionStatus?: string | null;\r\n\r\n    recordStatus?: string | null;\r\n\r\n    email?: string | null;\r\n\r\n    spouseName?: string | null;\r\n\r\n    spouseNickName?: string | null;\r\n\r\n    address?: string | null;\r\n\r\n    phoneNumbers?: PersonSearchPhoneNumber[] | null;\r\n};\r\n\r\ntype PersonSearchPhoneNumber = {\r\n    type?: string | null;\r\n\r\n    number?: string | null;\r\n\r\n    isUnlisted?: boolean;\r\n};\r\n\r\nexport default defineComponent({\r\n    name: \"PersonPicker\",\r\n\r\n    components: {\r\n        RockFormField,\r\n        Panel,\r\n        TextBox\r\n    },\r\n\r\n    props: {\r\n        modelValue: {\r\n            type: Object as PropType<ListItemBag>\r\n        },\r\n\r\n        formGroupClasses: {\r\n            type: String as PropType<string>,\r\n            default: \"\"\r\n        },\r\n    },\r\n\r\n    setup(props, { emit }) {\r\n        const http = useHttp();\r\n        const internalValue = ref(props.modelValue);\r\n\r\n        /** Determines if the clear button should be shown. */\r\n        const showClear = computed(() => props.modelValue?.value);\r\n\r\n        /** True if the popup person picker should be visible. */\r\n        const showPopup = ref(false);\r\n\r\n        /** The current text typed in the search box. */\r\n        const searchText = ref(\"\");\r\n\r\n        /** A reference to the container element for the search box. */\r\n        const searchTextBox = ref<HTMLElement | null>(null);\r\n\r\n        /** The currently displayed search results. */\r\n        const searchResults = ref<PersonSearchResult[]>([]);\r\n\r\n        /** The currently selected search result. */\r\n        const selectedSearchResult = ref(\"\");\r\n\r\n        /** The cancellation token used to cancel a previous search API call. */\r\n        let searchCancelToken: Ref<boolean> | null = null;\r\n\r\n        /** The currently selected name to display in the picker. */\r\n        const selectedName = computed((): string => internalValue.value?.text ?? \"\");\r\n\r\n        /**\r\n         * Updates the search results. This is called as soon as the search text\r\n         * value changes.\r\n         *\r\n         * @param text The text to be searched for.\r\n         * @param cancellationToken The token that indicates if we should abort our search.\r\n         */\r\n        const updateSearchResults = async (text: string, cancellationToken: Ref<boolean>): Promise<void> => {\r\n            // Only search if we have 3 or more characters.\r\n            if (text.length < 3) {\r\n                return;\r\n            }\r\n\r\n            // Wait 200ms to see if the user has continued to type.\r\n            await sleep(200);\r\n\r\n            // This is set if the user kept typing.\r\n            if (cancellationToken.value) {\r\n                return;\r\n            }\r\n\r\n            const options: Partial<PersonPickerSearchOptionsBag> = {\r\n                name: text,\r\n                includeDetails: true\r\n            };\r\n\r\n            // Make the API call to get the search results.\r\n            const result = await http.doApiCall<PersonSearchResult[]>(\"POST\", \"/api/v2/Controls/PersonPickerSearch\", undefined, options);\r\n\r\n            // Check again if we have been cancelled before we do the update.\r\n            if (cancellationToken.value) {\r\n                return;\r\n            }\r\n\r\n            // Update the search results if we didn't get back an error.\r\n            if (result.isSuccess && result.data) {\r\n                searchResults.value = result.data;\r\n                selectedSearchResult.value = \"\";\r\n            }\r\n            else {\r\n                console.warn(result.errorMessage);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Gets the additional text to display next to the name.\r\n         *\r\n         * @param result The details of the person.\r\n         */\r\n        const getNameAdditionalText = (result: PersonSearchResult): string => {\r\n            if (result.spouseNickName && result.formattedAge) {\r\n                return `Age: ${result.formattedAge}; Spouse: ${result.spouseNickName}`;\r\n            }\r\n            else if (result.formattedAge) {\r\n                return `Age: ${result.formattedAge}`;\r\n            }\r\n            else if (result.spouseNickName) {\r\n                return `Spouse: ${result.spouseNickName}`;\r\n            }\r\n            else {\r\n                return \"\";\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Gets the style attribute values for the person image tag.\r\n         *\r\n         * @param result The details of the person.\r\n         */\r\n        const getPersonImageStyle = (result: PersonSearchResult): Record<string, string> => {\r\n            if (result.imageUrl) {\r\n                return {\r\n                    backgroundImage: `url(${result.imageUrl})`,\r\n                    width: \"70px\",\r\n                    height: \"70px\",\r\n                    backgroundSize: \"cover\",\r\n                    marginRight: \"8px\",\r\n                    border: \"1px solid #dfe0e1\"\r\n                };\r\n            }\r\n            else {\r\n                return {};\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Gets the card container style attribute values.\r\n         *\r\n         * @param result The details of the person.\r\n         */\r\n        const getCardStyle = (result: PersonSearchResult): Record<string, string> => {\r\n            const styles: Record<string, string> = {\r\n                margin: \"0px 20px 20px 0px\"\r\n            };\r\n\r\n            if (result.primaryAliasGuid === selectedSearchResult.value) {\r\n                styles[\"border\"] = \"2px solid var(--brand-color)\";\r\n            }\r\n            else {\r\n                styles[\"border\"] = \"2px solid transparent\";\r\n            }\r\n\r\n            return styles;\r\n        };\r\n\r\n        /**\r\n         * Event handler for when the clear button is clicked by the user.\r\n         */\r\n        const onClear = (): void => {\r\n            emit(\"update:modelValue\", undefined);\r\n        };\r\n\r\n        /**\r\n         * Event handler for when the user clicks on the picker. Show/hide the\r\n         * popup.\r\n         */\r\n        const onPickerClick = (): void => {\r\n            showPopup.value = !showPopup.value;\r\n\r\n            if (showPopup.value) {\r\n                searchText.value = \"\";\r\n                selectedSearchResult.value = \"\";\r\n                searchResults.value = [];\r\n\r\n                nextTick(() => {\r\n                    if (searchTextBox.value) {\r\n                        const input = searchTextBox.value.querySelector(\"input\");\r\n\r\n                        input?.focus();\r\n                    }\r\n                });\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Event handler for when the user clicks the cancel button. Hide the\r\n         * popup.\r\n         */\r\n        const onCancel = (): void => {\r\n            showPopup.value = false;\r\n        };\r\n\r\n        /**\r\n         * Event handler for when the user presses a key anywhere inside the\r\n         * popup body. If it is the escape key then close the popup.\r\n         *\r\n         * @param ev The event details about the key press.\r\n         */\r\n        const onPopupKeyDown = (ev: KeyboardEvent): void => {\r\n            if (ev.keyCode === 27 && showPopup.value) {\r\n                ev.stopImmediatePropagation();\r\n                onCancel();\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Event handler for when a card is clicked. If the card is not selected\r\n         * them mark it selected. If it is already selected then close the\r\n         * popup and emit the new selection.\r\n         *\r\n         * @param result The result object that contains the details about the person.\r\n         */\r\n        const onCardClick = (result: PersonSearchResult): void => {\r\n            if (!result.primaryAliasGuid || !result.name) {\r\n                return;\r\n            }\r\n\r\n            internalValue.value = {\r\n                value: selectedSearchResult.value,\r\n                text: result.name\r\n            };\r\n\r\n            // Emit the new value and close the popup.\r\n            emit(\"update:modelValue\", internalValue.value);\r\n            showPopup.value = false;\r\n        };\r\n\r\n        /**\r\n         * Event handler for when a card gains focus. This allows keyboard\r\n         * navigation through the cards.\r\n         *\r\n         * @param result The result object that contains the details about the person.\r\n         */\r\n        const onCardFocus = (result: PersonSearchResult): void => {\r\n            if (!result.primaryAliasGuid || !result.name) {\r\n                return;\r\n            }\r\n\r\n            selectedSearchResult.value = result.primaryAliasGuid;\r\n        };\r\n\r\n        /**\r\n         * Event handler for when a card loses focus. This allows keyboard\r\n         * navigation through the cards.\r\n         *\r\n         * @param result The result object that contains the details about the person.\r\n         */\r\n        const onCardBlur = (result: PersonSearchResult): void => {\r\n            if (!result.primaryAliasGuid || !result.name) {\r\n                return;\r\n            }\r\n\r\n            if (selectedSearchResult.value === result.primaryAliasGuid) {\r\n                selectedSearchResult.value = \"\";\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Event handler for when a key is pressed while a card has focus. If\r\n         * it is the enter key and the card is selected then emit the new value\r\n         * and close the popup.\r\n         *\r\n         * @param result The result object that contains the details about the person.\r\n         */\r\n        const onCardKeyPress = (result: PersonSearchResult, ev: KeyboardEvent): void => {\r\n            if (!result.primaryAliasGuid || !result.name) {\r\n                return;\r\n            }\r\n\r\n            const isEnterKey = ev.keyCode === 10 || ev.keyCode === 13;\r\n\r\n            if (selectedSearchResult.value === result.primaryAliasGuid && isEnterKey) {\r\n                internalValue.value = {\r\n                    value: selectedSearchResult.value,\r\n                    text: result.name\r\n                };\r\n\r\n                // Emit the new value and close the popup.\r\n                emit(\"update:modelValue\", internalValue.value);\r\n                showPopup.value = false;\r\n            }\r\n        };\r\n\r\n        // Watch for changes to what the user has typed and update the search\r\n        // results.\r\n        watch(searchText, () => {\r\n            // If a search is in progress, cancel it.\r\n            if (searchCancelToken) {\r\n                searchCancelToken.value = true;\r\n            }\r\n\r\n            // Create a new cancellation token that we can use if the user\r\n            // continues to type in the search box.\r\n            searchCancelToken = ref(false);\r\n\r\n            updateSearchResults(searchText.value, searchCancelToken);\r\n        });\r\n\r\n        // Watch for changes in our provided value and update the UI.\r\n        watch(() => props.modelValue, () => internalValue.value = props.modelValue);\r\n\r\n        return {\r\n            getCardStyle,\r\n            getNameAdditionalText,\r\n            getPersonImageStyle,\r\n            internalValue,\r\n            onCardBlur,\r\n            onCardClick,\r\n            onCardFocus,\r\n            onCardKeyPress,\r\n            onClear,\r\n            onPickerClick,\r\n            onCancel,\r\n            onPopupKeyDown,\r\n            searchResults,\r\n            searchText,\r\n            searchTextBox,\r\n            selectedName,\r\n            selectedSearchResult,\r\n            showClear,\r\n            showPopup\r\n        };\r\n    },\r\n\r\n    template: `\r\n<RockFormField\r\n    :modelValue=\"internalValue\"\r\n    :formGroupClasses=\"'person-picker ' + formGroupClasses\"\r\n    name=\"personpicker\">\r\n    <template #default=\"{uniqueId, field}\">\r\n        <div class=\"control-wrapper\">\r\n            <div class=\"picker picker-select person-picker\">\r\n                <a class=\"picker-label\" href=\"#\" @click.prevent.stop=\"onPickerClick\">\r\n                    <i class=\"fa fa-user fa-fw\"></i>\r\n                    <span class=\"selected-name\">{{ selectedName }}</span>\r\n                    <b class=\"fa fa-caret-down pull-right\"></b>\r\n                </a>\r\n\r\n                <a v-if=\"showClear\" class=\"picker-select-none\" @click.prevent.stop=\"onClear\">\r\n                    <i class=\"fa fa-times\"></i>\r\n                </a>\r\n\r\n                <Panel v-if=\"showPopup\" isFullscreen isFullscreenPageOnly title=\"Person Search\">\r\n                    <template #headerActions>\r\n                        <span class=\"action\" @click.prevent.stop=\"onCancel\">\r\n                            <i class=\"fa fa-times\"></i>\r\n                        </span>\r\n                    </template>\r\n\r\n                    <div @keydown=\"onPopupKeyDown\" tabindex=\"0\">\r\n                        <div ref=\"searchTextBox\">\r\n                            <TextBox v-model=\"searchText\" label=\"Search\" />\r\n                        </div>\r\n\r\n                        <div style=\"display: flex;\">\r\n                            <div v-for=\"result in searchResults\" :key=\"result.primaryAliasGuid\" class=\"well cursor-pointer\" :style=\"getCardStyle(result)\" tabindex=\"0\" @click=\"onCardClick(result)\" @focus=\"onCardFocus(result)\" @blur=\"onCardBlur(result)\" @keypress=\"onCardKeyPress(result, $event)\">\r\n                                <div style=\"display: flex; min-width: 250px;\">\r\n                                    <div class=\"person-image\" :style=\"getPersonImageStyle(result)\"></div>\r\n                                    <div>\r\n                                        <div>{{ result.name }}</div>\r\n                                        <div v-if=\"getNameAdditionalText(result)\" class=\"text-muted\"><small>{{ getNameAdditionalText(result) }}</small></div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Panel>\r\n            </div>\r\n        </div>\r\n    </template>\r\n</RockFormField>\r\n`\r\n});\r\n"],"names":["AgeClassification","defineComponent","name","components","RockFormField","Panel","TextBox","props","modelValue","type","Object","formGroupClasses","String","default","setup","_ref","emit","http","useHttp","internalValue","ref","showClear","computed","_props$modelValue","value","showPopup","searchText","searchTextBox","searchResults","selectedSearchResult","searchCancelToken","selectedName","_internalValue$value$","_internalValue$value","text","updateSearchResults","_ref2","_asyncToGenerator","cancellationToken","length","sleep","options","includeDetails","result","doApiCall","undefined","isSuccess","data","console","warn","errorMessage","_x","_x2","apply","arguments","getNameAdditionalText","spouseNickName","formattedAge","concat","getPersonImageStyle","imageUrl","backgroundImage","width","height","backgroundSize","marginRight","border","getCardStyle","styles","margin","primaryAliasGuid","onClear","onPickerClick","nextTick","input","querySelector","focus","onCancel","onPopupKeyDown","ev","keyCode","stopImmediatePropagation","onCardClick","onCardFocus","onCardBlur","onCardKeyPress","isEnterKey","watch","template"],"mappings":"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"}