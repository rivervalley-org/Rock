{"version":3,"file":"pagePicker.obs.js","sources":["../../../Framework/Controls/pagePicker.obs"],"sourcesContent":["<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <TreeItemPicker\r\n                    v-bind=\"standardFieldProps\"\r\n                    :modelValue=\"(pagePickerValue as ListItemBag[])\"\r\n                    @update:modelValue=\"updatePage\"\r\n                    formGroupClasses=\"location-item-picker\"\r\n                    iconCssClass=\"fa fa-file\"\r\n                    :provider=\"itemProvider\"\r\n                    :multiple=\"multiple\"\r\n                    :autoExpand=\"true\">\r\n\r\n        <template #customPickerActions v-if=\"showSelectCurrentPage\">\r\n            <RockButton @click=\"selectCurrentPage\" :btnSize=\"BtnSize.ExtraSmall\" :btnType=\"BtnType.Link\" title=\"Select Current Page\"><i class=\"fa fa-file-o\"></i></RockButton>\r\n        </template>\r\n\r\n        <template #append>\r\n            <div class=\"input-max-w-xl\" v-if=\"isRoutePickerVisible\" v-show=\"routeItemsCount > 0\">\r\n                <span class=\"d-block small mt-1 mb-2\">{{ routeCountText }}</span>\r\n                <BaseAsyncPicker\r\n                                 :modelValue=\"internalRouteValue\"\r\n                                 @update:modelValue=\"updateRoute\"\r\n                                 showBlankItem\r\n                                 :lazyMode=\"isLazy\"\r\n                                 :displayStyle=\"routePickerDisplayStyle\"\r\n                                 :items=\"actualRouteItems\"\r\n                                 :open=\"open\" />\r\n            </div>\r\n        </template>\r\n    </TreeItemPicker>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { computed, nextTick, PropType, ref, watch } from \"vue\";\r\n    import { PageTreeItemProvider } from \"@Obsidian/Utility/treeItemProviders\";\r\n    import { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\n    import TreeItemPicker from \"./treeItemPicker.obs\";\r\n    import RockButton from \"./rockButton\";\r\n    import { BtnType } from \"@Obsidian/Enums/Controls/btnType\";\r\n    import { BtnSize } from \"@Obsidian/Enums/Controls/btnSize\";\r\n    import { useStore } from \"@Obsidian/PageState\";\r\n    import { Guid } from \"@Obsidian/Types\";\r\n    import { PagePickerGetPageNameOptionsBag } from \"@Obsidian/ViewModels/Rest/Controls/pagePickerGetPageNameOptionsBag\";\r\n    import { PagePickerGetPageRoutesOptionsBag } from \"@Obsidian/ViewModels/Rest/Controls/pagePickerGetPageRoutesOptionsBag\";\r\n    import { PageRouteValueBag } from \"@Obsidian/ViewModels/Rest/Controls/pageRouteValueBag\";\r\n    import BaseAsyncPicker from \"./baseAsyncPicker\";\r\n    import { useHttp } from \"@Obsidian/Utility/http\";\r\n    import { PickerDisplayStyle } from \"@Obsidian/Enums/Controls/pickerDisplayStyle\";\r\n    import { ControlLazyMode } from \"@Obsidian/Enums/Controls/controlLazyMode\";\r\n    import { emptyGuid } from \"@Obsidian/Utility/guid\";\r\n    import { standardRockFormFieldProps, useStandardRockFormFieldProps } from \"@Obsidian/Utility/component\";\r\n    import * as Dialogs from \"@Obsidian/Utility/dialogs\";\r\n\r\n    const props = defineProps({\r\n        modelValue: {\r\n            type: Object as PropType<PageRouteValueBag | PageRouteValueBag[] | null>,\r\n            required: false\r\n        },\r\n\r\n        securityGrantToken: {\r\n            type: String as PropType<string | null>,\r\n            required: false\r\n        },\r\n\r\n        /**\r\n         * Whether or not to show a button on the drop-down that sets the value to the current page\r\n         */\r\n        showSelectCurrentPage: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        /**\r\n         * List of GUIDs of pages to hide from the list\r\n         */\r\n        hidePageGuids: {\r\n            type: Array as PropType<Guid[]>,\r\n            required: false\r\n        },\r\n\r\n        /**\r\n         * Whether or not to prompt for a route for pages that have at least one\r\n         */\r\n        promptForPageRoute: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        /**\r\n         * Whether to allow multi-select or single-select\r\n         */\r\n        multiple: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        ...standardRockFormFieldProps\r\n    });\r\n\r\n    const emit = defineEmits<{\r\n        (e: \"update:modelValue\", value: PageRouteValueBag | PageRouteValueBag[] | null): void\r\n    }>();\r\n\r\n    const http = useHttp();\r\n    const standardFieldProps = useStandardRockFormFieldProps(props);\r\n    const open = ref(null);\r\n\r\n    // #region Page\r\n\r\n    // Extract the page value(s) from the the PageRouteValueBag(s) so they can be used with the tree picker\r\n    const internalPageValue = computed<ListItemBag | (ListItemBag | null | undefined)[] | null | undefined>(() => {\r\n        if (!props.modelValue) {\r\n            return null;\r\n        }\r\n        if (Array.isArray(props.modelValue)) {\r\n            if (props.multiple) {\r\n                return props.modelValue.map(item => item.page);\r\n            }\r\n            emit(\"update:modelValue\", { page: props.modelValue[0].page });\r\n            return props.modelValue[0].page;\r\n        }\r\n\r\n        return props.modelValue.page;\r\n    });\r\n\r\n    // This value is used for TreePicker to show the route in parentheses if a route is chosen\r\n    const pagePickerValue = computed<ListItemBag | (ListItemBag | null | undefined)[] | null | undefined>(() => {\r\n        if (internalRouteValue.value) {\r\n            const route = internalRouteValue.value as ListItemBag;\r\n            const page = internalPageValue.value as ListItemBag;\r\n\r\n            return {\r\n                value: page.value,\r\n                text: `${page.text} (${route.text})`\r\n            };\r\n        }\r\n\r\n        return internalPageValue.value;\r\n    });\r\n\r\n    // Set the page value\r\n    function updatePage(pages: ListItemBag | ListItemBag[] | null): void {\r\n        if (!pages) {\r\n            if (props.multiple) {\r\n                emit(\"update:modelValue\", []);\r\n            }\r\n            else {\r\n                emit(\"update:modelValue\", null);\r\n            }\r\n        }\r\n        else if (props.multiple) {\r\n            // When `multiple`, we can assume we're receiving an array\r\n            emit(\"update:modelValue\", (pages as ListItemBag[]).map(page => ({ page })));\r\n        }\r\n        else if ((pages as ListItemBag).value == (internalPageValue.value as ListItemBag)?.value) {\r\n            // In this case, the user hit \"select\" without choosing a different option, so reset the value to the current page (no route)\r\n            emit(\"update:modelValue\", { page: internalPageValue.value as ListItemBag });\r\n        }\r\n        else {\r\n            // When page is updated, no route will be picked, so just use the page property\r\n            emit(\"update:modelValue\", { page: pages as ListItemBag });\r\n        }\r\n    }\r\n\r\n    // Use the Page State store to get the GUID of the current page\r\n    const pageStore = useStore();\r\n    const pageGuid = pageStore.state.pageGuid;\r\n    let currentPage: ListItemBag | undefined;\r\n\r\n    // Using the GUID we have of the current page, fetch the page name and assign the current page as the picker's value\r\n    async function selectCurrentPage(): Promise<void> {\r\n        // If cached, don't re-fetch\r\n        if (currentPage) {\r\n            updatePage(props.multiple ? [currentPage] : currentPage);\r\n            refreshProvider();\r\n            return;\r\n        }\r\n\r\n        const options: PagePickerGetPageNameOptionsBag = { pageGuid, securityGrantToken: props.securityGrantToken };\r\n        const response = await http.post<string>(\"/api/v2/Controls/PagePickerGetPageName\", {}, options);\r\n\r\n        if (response.isSuccess && response.data) {\r\n            currentPage = {\r\n                text: response.data,\r\n                value: pageGuid\r\n            };\r\n            updatePage(props.multiple ? [currentPage] : currentPage);\r\n        }\r\n        else if (response.statusCode == 401) {\r\n            Dialogs.alert(\"Could not determine current page\");\r\n            return;\r\n        }\r\n        else {\r\n            console.error(\"Error\", response.errorMessage);\r\n            updatePage(props.multiple ? [{ value: pageGuid }] : { value: pageGuid });\r\n        }\r\n        // Wait until internalPageValue is updated before retrieving the tree again.\r\n        await nextTick();\r\n\r\n        refreshProvider();\r\n    }\r\n\r\n    // Configure the item provider with our settings.\r\n    const itemProvider = ref<PageTreeItemProvider>(new PageTreeItemProvider());\r\n    refreshProvider();\r\n\r\n    // (Re)Initialize the PageTreeItemProvider to pull in the right tree of options for the picker\r\n    function refreshProvider(): void {\r\n        const prov = new PageTreeItemProvider();\r\n        prov.securityGrantToken = props.securityGrantToken;\r\n        prov.hidePageGuids = props.hidePageGuids;\r\n\r\n        if (internalPageValue.value) {\r\n            if (Array.isArray(internalPageValue.value)) {\r\n                prov.selectedPageGuids = internalPageValue.value.map(p => p?.value ?? emptyGuid);\r\n            }\r\n            else {\r\n                prov.selectedPageGuids = [internalPageValue.value.value ?? emptyGuid];\r\n            }\r\n        }\r\n\r\n        itemProvider.value = prov;\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Route\r\n\r\n    // Enable route picker only if prop is set to true AND we're only selecting one value\r\n    const shouldPromptForRoute = computed(() => !props.multiple && props.promptForPageRoute);\r\n\r\n    // Extract the route so it can be controlled by its own picker (if route picking enabled)\r\n    const internalRouteValue = computed<ListItemBag | null | undefined>(() => {\r\n        if (!props.modelValue || Array.isArray(props.modelValue) || !shouldPromptForRoute.value) {\r\n            return null;\r\n        }\r\n\r\n        return props.modelValue.route;\r\n    });\r\n\r\n    // Initialize to true if we have a page value but no route value and the props indicate we should ask for a route\r\n    const isRoutePickerVisible = computed(() => {\r\n        return shouldPromptForRoute.value && !internalRouteValue.value && !!internalPageValue.value;\r\n    });\r\n\r\n    function updateRoute(route: ListItemBag | ListItemBag[] | null): void {\r\n        if (Array.isArray(route)) {\r\n            route = route[0];\r\n        }\r\n\r\n        // This is only called if route selection is enabled, and a page is selected, so we can assume\r\n        // internalPageValue is a single ListItemBag\r\n        emit(\"update:modelValue\", {\r\n            page: internalPageValue.value as ListItemBag,\r\n            route\r\n        });\r\n    }\r\n\r\n    /*\r\n     * Route Async Picker Information\r\n     */\r\n    const loadedItems = ref<ListItemBag[] | null>(null);\r\n    const actualRouteItems = computed((): ListItemBag[] | (() => Promise<ListItemBag[]>) => {\r\n        return loadedItems.value || loadOptions;\r\n    });\r\n    const routeItemsCount = computed<number>(() => {\r\n        if (Array.isArray(actualRouteItems.value)) {\r\n            return actualRouteItems.value.length;\r\n        }\r\n\r\n        return 0;\r\n    });\r\n    const routeCountText = computed<string>(() => {\r\n        if (routeItemsCount.value == 1) {\r\n            return \"( 1 route exists )\";\r\n        }\r\n\r\n        return `( ${routeItemsCount.value} routes exist )`;\r\n    });\r\n\r\n    // Loads the items from the server.\r\n    const loadOptions = async (): Promise<ListItemBag[]> => {\r\n        if (Array.isArray(internalPageValue.value)) {\r\n            return [];\r\n        }\r\n\r\n        const options: PagePickerGetPageRoutesOptionsBag = {\r\n            pageGuid: (internalPageValue.value as ListItemBag).value\r\n        };\r\n        const result = await http.post<ListItemBag[]>(\"/api/v2/Controls/PagePickerGetPageRoutes\", undefined, options);\r\n\r\n        if (result.isSuccess && result.data) {\r\n            loadedItems.value = result.data;\r\n            return result.data;\r\n        }\r\n        else {\r\n            console.error(result.errorMessage ?? \"Unknown error while loading data.\");\r\n            loadedItems.value = [];\r\n            return [];\r\n        }\r\n    };\r\n\r\n    // When new page is selected, reload route picker options\r\n    watch(internalPageValue, () => {\r\n        loadedItems.value = null;\r\n    });\r\n\r\n    const routePickerDisplayStyle = PickerDisplayStyle.Condensed;\r\n    const isLazy = ControlLazyMode.Eager;\r\n</script>\r\n"],"names":["http","useHttp","standardFieldProps","useStandardRockFormFieldProps","props","open","ref","internalPageValue","computed","modelValue","Array","isArray","multiple","map","item","page","emit","pagePickerValue","internalRouteValue","value","route","text","concat","updatePage","pages","_internalPageValue$va","pageStore","useStore","pageGuid","state","currentPage","selectCurrentPage","_selectCurrentPage","apply","arguments","_asyncToGenerator","refreshProvider","options","securityGrantToken","response","post","isSuccess","data","statusCode","Dialogs","alert","console","error","errorMessage","nextTick","itemProvider","PageTreeItemProvider","prov","hidePageGuids","selectedPageGuids","p","_p$value","emptyGuid","_internalPageValue$va2","shouldPromptForRoute","promptForPageRoute","isRoutePickerVisible","updateRoute","loadedItems","actualRouteItems","loadOptions","routeItemsCount","length","routeCountText","_ref2","result","undefined","_result$errorMessage","watch","routePickerDisplayStyle","PickerDisplayStyle","Condensed","isLazy","ControlLazyMode","Eager"],"mappings":"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"}