{"version":3,"file":"countdownTimer.js","sources":["../../../Framework/Controls/countdownTimer.ts"],"sourcesContent":["ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { defineComponent, PropType } from \"vue\";\r\n\r\n/** Displays a countdown and decremements the seconds. */\r\nconst CountdownTimer = defineComponent({\r\n    name: \"CountdownTimer\",\r\n    props: {\r\n        /** Seconds until 0:00 */\r\n        modelValue: {\r\n            type: Number as PropType<number>,\r\n            required: true\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            handle: null as null | number\r\n        };\r\n    },\r\n    computed: {\r\n        timeString(): string {\r\n            const minutes = Math.floor(this.modelValue / 60);\r\n            const seconds = Math.floor(this.modelValue % 60);\r\n            return `${minutes}:${seconds < 10 ? \"0\" + seconds : seconds}`;\r\n        },\r\n    },\r\n    methods: {\r\n        onInterval() {\r\n            if (this.modelValue <= 0) {\r\n                this.$emit(\"update:modelValue\", 0);\r\n                return;\r\n            }\r\n\r\n            this.$emit(\"update:modelValue\", Math.floor(this.modelValue - 1));\r\n        }\r\n    },\r\n    mounted() {\r\n        if (this.handle) {\r\n            clearInterval(this.handle);\r\n        }\r\n\r\n        this.handle = setInterval(() => this.onInterval(), 1000) as unknown as number;\r\n    },\r\n    unmounted() {\r\n        if (this.handle) {\r\n            clearInterval(this.handle);\r\n            this.handle = null;\r\n        }\r\n    },\r\n    template: `\r\n<span>{{timeString}}</span>`\r\n});\r\n\r\nexport default CountdownTimer;\r\n"],"names":["CountdownTimer","defineComponent","name","props","modelValue","type","Number","required","data","handle","computed","timeString","minutes","Math","floor","seconds","concat","methods","onInterval","$emit","mounted","clearInterval","setInterval","unmounted","template"],"mappings":";;;;;;;;;AAoBMA,gBAAAA,cAAc,sBAAGC,eAAe,CAAC;YACnCC,EAAAA,IAAI,EAAE,gBAAgB;YACtBC,EAAAA,KAAK,EAAE;YAEHC,IAAAA,UAAU,EAAE;YACRC,MAAAA,IAAI,EAAEC,MAA0B;YAChCC,MAAAA,QAAQ,EAAE,IAAA;YACd,KAAA;eACH;YACDC,EAAAA,IAAIA,GAAG;gBACH,OAAO;YACHC,MAAAA,MAAM,EAAE,IAAA;iBACX,CAAA;eACJ;YACDC,EAAAA,QAAQ,EAAE;YACNC,IAAAA,UAAUA,GAAW;kBACjB,IAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAAC,IAAI,CAACV,UAAU,GAAG,EAAE,CAAC,CAAA;kBAChD,IAAMW,OAAO,GAAGF,IAAI,CAACC,KAAK,CAAC,IAAI,CAACV,UAAU,GAAG,EAAE,CAAC,CAAA;YAChD,MAAA,OAAA,EAAA,CAAAY,MAAA,CAAUJ,OAAO,EAAA,GAAA,CAAA,CAAAI,MAAA,CAAID,OAAO,GAAG,EAAE,GAAG,GAAG,GAAGA,OAAO,GAAGA,OAAO,CAAA,CAAA;YAC/D,KAAA;eACH;YACDE,EAAAA,OAAO,EAAE;YACLC,IAAAA,UAAUA,GAAG;YACT,MAAA,IAAI,IAAI,CAACd,UAAU,IAAI,CAAC,EAAE;YACtB,QAAA,IAAI,CAACe,KAAK,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAA;YAClC,QAAA,OAAA;YACJ,OAAA;YAEA,MAAA,IAAI,CAACA,KAAK,CAAC,mBAAmB,EAAEN,IAAI,CAACC,KAAK,CAAC,IAAI,CAACV,UAAU,GAAG,CAAC,CAAC,CAAC,CAAA;YACpE,KAAA;eACH;YACDgB,EAAAA,OAAOA,GAAG;gBACN,IAAI,IAAI,CAACX,MAAM,EAAE;YACbY,MAAAA,aAAa,CAAC,IAAI,CAACZ,MAAM,CAAC,CAAA;YAC9B,KAAA;YAEA,IAAA,IAAI,CAACA,MAAM,GAAGa,WAAW,CAAC,MAAM,IAAI,CAACJ,UAAU,EAAE,EAAE,IAAI,CAAsB,CAAA;eAChF;YACDK,EAAAA,SAASA,GAAG;gBACR,IAAI,IAAI,CAACd,MAAM,EAAE;YACbY,MAAAA,aAAa,CAAC,IAAI,CAACZ,MAAM,CAAC,CAAA;kBAC1B,IAAI,CAACA,MAAM,GAAG,IAAI,CAAA;YACtB,KAAA;eACH;cACDe,QAAQ,EAAA,+BAAA;YAEZ,CAAC;;;;;;;;"}