{"version":3,"file":"numberRangeBox.js","sources":["../../../Framework/Controls/numberRangeBox.ts"],"sourcesContent":["ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { defineComponent, PropType } from \"vue\";\r\nimport { normalizeRules, rulesPropType, ValidationRule } from \"@Obsidian/ValidationRules\";\r\nimport { asFormattedString, toNumberOrNull } from \"@Obsidian/Utility/numberUtils\";\r\nimport RockFormField from \"./rockFormField\";\r\n\r\n/**\r\n * The model value used by the NumberRangeBox element.\r\n */\r\nexport type NumberRangeModelValue = {\r\n    /** The lower number of the range. */\r\n    lower: number | null;\r\n\r\n    /** The upper number of the range. */\r\n    upper: number | null;\r\n};\r\n\r\nexport default defineComponent({\r\n    name: \"NumberRangeBox\",\r\n\r\n    components: {\r\n        RockFormField\r\n    },\r\n\r\n    props: {\r\n        modelValue: {\r\n            type: Object as PropType<NumberRangeModelValue>,\r\n            default: { lower: null, upper: null }\r\n        },\r\n\r\n        /** The number of decimal places allowed. */\r\n        decimalCount: {\r\n            type: Number as PropType<number | null>,\r\n            default: null\r\n        },\r\n\r\n        inputClasses: {\r\n            type: String as PropType<string>,\r\n            default: \"\"\r\n        },\r\n\r\n        rules: rulesPropType\r\n    },\r\n\r\n    emits: [\r\n        \"update:modelValue\"\r\n    ],\r\n\r\n    data: function () {\r\n        return {\r\n            internalValue: {\r\n                lower: \"\" as number | string,\r\n                upper: \"\" as number | string\r\n            }\r\n        };\r\n    },\r\n\r\n    methods: {\r\n        onChange(): void {\r\n            this.internalValue = {\r\n                lower: asFormattedString(this.modelValue.lower, this.internalDecimalCount ?? undefined, { useGrouping: false }),\r\n                upper: asFormattedString(this.modelValue.upper, this.internalDecimalCount ?? undefined, { useGrouping: false })\r\n            };\r\n        }\r\n    },\r\n\r\n    computed: {\r\n        computedValue(): NumberRangeModelValue {\r\n            return {\r\n                lower: toNumberOrNull(this.internalValue.lower),\r\n                upper: toNumberOrNull(this.internalValue.upper)\r\n            };\r\n        },\r\n\r\n        internalDecimalCount(): number | null {\r\n            return this.decimalCount;\r\n        },\r\n\r\n        internalStep(): string {\r\n            return this.internalDecimalCount === null ? \"any\" : (1 / Math.pow(10, this.internalDecimalCount)).toString();\r\n        },\r\n\r\n        computedRules(): ValidationRule[] {\r\n            const rules = normalizeRules(this.rules);\r\n\r\n            return rules;\r\n        },\r\n\r\n        validationValue(): string {\r\n            return `${this.internalValue.lower ?? \"\"},${this.internalValue.upper ?? \"\"}`;\r\n        }\r\n    },\r\n\r\n    watch: {\r\n        computedValue(): void {\r\n            this.$emit(\"update:modelValue\", this.computedValue);\r\n        },\r\n\r\n        internalStep(): string {\r\n            return this.decimalCount === null ? \"any\" : (1 / Math.pow(10, this.decimalCount)).toString();\r\n        },\r\n\r\n        modelValue: {\r\n            immediate: true,\r\n            handler(): void {\r\n                // Model is stored as numbers and internal value is strings, so we need to determine if they're\r\n                // any different when converted to the same type. If they're different, update our internal value.\r\n                // Otherwise don't update because it can unintentionally end up deleting characters from the input box.\r\n                if (this.modelValue.lower !== toNumberOrNull(this.internalValue.lower) || this.modelValue.upper !== toNumberOrNull(this.internalValue.upper)) {\r\n                    this.internalValue = {\r\n                        lower: this.modelValue.lower != null ? this.modelValue.lower.toString() : \"\",\r\n                        upper: this.modelValue.upper != null ? this.modelValue.upper.toString() : \"\"\r\n                    };\r\n                }\r\n            }\r\n        }\r\n    },\r\n    template: `\r\n<RockFormField\r\n    v-model=\"validationValue\"\r\n    formGroupClasses=\"number-range-editor\"\r\n    name=\"number-range-box\"\r\n    :rules=\"computedRules\">\r\n    <template #default=\"{uniqueId, field}\">\r\n        <div class=\"control-wrapper\">\r\n            <div class=\"form-control-group\">\r\n                <input\r\n                    :id=\"uniqueId + '_lower'\"\r\n                    @change=\"onChange\"\r\n                    type=\"number\"\r\n                    class=\"input-width-md form-control\"\r\n                    :class=\"inputClasses\"\r\n                    v-model=\"internalValue.lower\"\r\n                    :step=\"internalStep\" />\r\n                <span class=\"to\">to</span>\r\n                <input\r\n                    :id=\"uniqueId + '_upper'\"\r\n                    @change=\"onChange\"\r\n                    type=\"number\"\r\n                    class=\"input-width-md form-control\"\r\n                    :class=\"inputClasses\"\r\n                    v-model=\"internalValue.upper\"\r\n                    :step=\"internalStep\" />\r\n            </div>\r\n        </div>\r\n    </template>\r\n</RockFormField>`\r\n});\r\n"],"names":["defineComponent","name","components","RockFormField","props","modelValue","type","Object","default","lower","upper","decimalCount","Number","inputClasses","String","rules","rulesPropType","emits","data","internalValue","methods","onChange","_this$internalDecimal","_this$internalDecimal2","asFormattedString","internalDecimalCount","undefined","useGrouping","computed","computedValue","toNumberOrNull","internalStep","Math","pow","toString","computedRules","normalizeRules","validationValue","_this$internalValue$l","_this$internalValue$u","concat","watch","$emit","immediate","handler","template"],"mappings":"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"}