{"version":3,"file":"entityTagList.js","sources":["../../../Framework/Controls/entityTagList.ts"],"sourcesContent":["// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { Guid } from \"@Obsidian/Types\";\r\nimport { useHttp } from \"@Obsidian/Utility/http\";\r\nimport { useSuspense } from \"@Obsidian/Utility/suspense\";\r\nimport { ControlLazyMode } from \"@Obsidian/Enums/Controls/controlLazyMode\";\r\nimport { EntityTagListAddEntityTagOptionsBag } from \"@Obsidian/ViewModels/Rest/Controls/entityTagListAddEntityTagOptionsBag\";\r\nimport { EntityTagListCreatePersonalTagOptionsBag } from \"@Obsidian/ViewModels/Rest/Controls/entityTagListCreatePersonalTagOptionsBag\";\r\nimport { EntityTagListGetEntityTagsOptionsBag } from \"@Obsidian/ViewModels/Rest/Controls/entityTagListGetEntityTagsOptionsBag\";\r\nimport { EntityTagListGetAvailableTagsOptionsBag } from \"@Obsidian/ViewModels/Rest/Controls/entityTagListGetAvailableTagsOptionsBag\";\r\nimport { EntityTagListRemoveEntityTagOptionsBag } from \"@Obsidian/ViewModels/Rest/Controls/entityTagListRemoveEntityTagOptionsBag\";\r\nimport { EntityTagListTagBag } from \"@Obsidian/ViewModels/Rest/Controls/entityTagListTagBag\";\r\nimport { AutoComplete } from \"ant-design-vue\";\r\nimport { computed, defineComponent, nextTick, PropType, Ref, ref, watch } from \"vue\";\r\nimport { useSecurityGrantToken } from \"@Obsidian/Utility/block\";\r\nimport { alert, confirm } from \"@Obsidian/Utility/dialogs\";\r\nimport { HttpFunctions } from \"@Obsidian/Types/Utility/http\";\r\n\r\n/** The type definition for a select option, since the ones from the library are wrong. */\r\ntype SelectOption = {\r\n    value?: string;\r\n\r\n    label: string;\r\n\r\n    options?: SelectOption[];\r\n};\r\n\r\n/** Helper component to display a single tag. */\r\nconst tag = defineComponent({\r\n    name: \"EntityTagList.Tag\",\r\n\r\n    props: {\r\n        modelValue: {\r\n            type: Object as PropType<EntityTagListTagBag>,\r\n            required: true\r\n        },\r\n\r\n        disabled: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        }\r\n    },\r\n\r\n    emits: {\r\n        \"removeTag\": (_value: string) => true\r\n    },\r\n\r\n    setup(props, { emit }) {\r\n        const text = computed((): string => {\r\n            return props.modelValue.name ?? \"\";\r\n        });\r\n\r\n        const iconCssClass = computed((): string => {\r\n            return props.modelValue.iconCssClass ?? \"\";\r\n        });\r\n\r\n        const tagClass = computed((): string => {\r\n            return props.modelValue.isPersonal ? \"tag personal\" : \"tag\";\r\n        });\r\n\r\n        const tagStyle = computed((): Record<string, string> => {\r\n            const styles = {};\r\n\r\n            if (props.modelValue.backgroundColor) {\r\n                styles[\"background-color\"] = props.modelValue.backgroundColor;\r\n            }\r\n\r\n            return styles;\r\n        });\r\n\r\n        const onRemoveTag = (): void => {\r\n            emit(\"removeTag\", props.modelValue.idKey ?? \"\");\r\n        };\r\n\r\n        return {\r\n            iconCssClass,\r\n            onRemoveTag,\r\n            tagClass,\r\n            tagStyle,\r\n            text\r\n        };\r\n    },\r\n\r\n    template: `\r\n<span :class=\"tagClass\" :style=\"tagStyle\">\r\n    <span v-if=\"iconCssClass\" class=\"tag-icon\">\r\n        <i :class=\"iconCssClass\"></i>\r\n    </span>\r\n    <span>{{ text }}</span>\r\n    <a v-if=\"!disabled\" href=\"#\" title=\"Remove tag\" @click.prevent.stop=\"onRemoveTag\">x</a>\r\n</span>\r\n`\r\n});\r\n\r\n/**\r\n * Get the existing tags on an entity.\r\n *\r\n * @param entityTypeGuid The unique identifier of the entity type.\r\n * @param entityKey The identifier key of the entity.\r\n * @param securityToken The security token to grant additional access.\r\n *\r\n * @returns A promise to an array of EntityTagListTagBag objects with the existing tag information.\r\n */\r\nasync function getEntityTags(http: HttpFunctions, entityTypeGuid: Guid, entityKey: string, securityToken: string | null): Promise<EntityTagListTagBag[]> {\r\n    const data: EntityTagListGetEntityTagsOptionsBag = {\r\n        entityTypeGuid: entityTypeGuid,\r\n        entityKey: entityKey,\r\n        securityGrantToken: securityToken\r\n    };\r\n\r\n    const result = await http.post<EntityTagListTagBag[]>(\"/api/v2/Controls/EntityTagListGetEntityTags\", undefined, data);\r\n\r\n    if (result.isSuccess && result.data) {\r\n        return result.data;\r\n    }\r\n\r\n    return [];\r\n}\r\n\r\nexport default defineComponent({\r\n    name: \"EntityTagList\",\r\n\r\n    components: {\r\n        AutoComplete,\r\n        Tag: tag\r\n    },\r\n\r\n    props: {\r\n        /** The unique identifier of the entity type described by entityKey. */\r\n        entityTypeGuid: {\r\n            type: String as PropType<Guid>,\r\n            required: false\r\n        },\r\n\r\n        /** The identifier key for the entity whose tags should be displayed. */\r\n        entityKey: {\r\n            type: String as PropType<string>,\r\n            required: false\r\n        },\r\n\r\n        /** The optional category unique identifier to limit tags to. */\r\n        categoryGuid: {\r\n            type: String as PropType<Guid>,\r\n            required: false\r\n        },\r\n\r\n        /** Determines if this control should delay page rendering until the initial tag data is loaded. */\r\n        lazyMode: {\r\n            type: String as PropType<ControlLazyMode>,\r\n            default: ControlLazyMode.Lazy\r\n        },\r\n\r\n        /** If true then the tag list will be read only. */\r\n        disabled: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        }\r\n    },\r\n\r\n    emits: {\r\n    },\r\n\r\n    setup(props) {\r\n        // #region Values\r\n\r\n        const securityToken = useSecurityGrantToken();\r\n        const http = useHttp();\r\n        const currentTags = ref<EntityTagListTagBag[]>([]);\r\n        const searchValue = ref(\"\");\r\n        const searchOptions = ref<SelectOption[]>([]);\r\n        const isNewTagVisible = ref(false);\r\n        const tagsInputRef = ref<HTMLElement | null>(null);\r\n        let loadCancelledToken: Ref<boolean> | null = null;\r\n        let searchCancelledToken: Ref<boolean> | null = null;\r\n        let isAddNewTagCancelled: boolean = false;\r\n\r\n        // #endregion\r\n\r\n        // #region Functions\r\n\r\n        /**\r\n         * Finds an existing tag with the given name and returns it.\r\n         *\r\n         * @param name The name of the tag to find on the server.\r\n         *\r\n         * @returns An object that contains the tag information or null if no matching tag was found.\r\n         */\r\n        const getTagByName = async (name: string): Promise<EntityTagListTagBag | null> => {\r\n            const data: EntityTagListGetAvailableTagsOptionsBag = {\r\n                entityTypeGuid: props.entityTypeGuid,\r\n                entityKey: props.entityKey,\r\n                categoryGuid: props.categoryGuid,\r\n                name: name,\r\n                securityGrantToken: securityToken.value\r\n            };\r\n\r\n            const result = await http.post<EntityTagListTagBag[]>(\"/api/v2/Controls/EntityTagListGetAvailableTags\", undefined, data);\r\n\r\n            if (result.isSuccess && result.data) {\r\n                // Filter the matching tags to find one that matches the tag name\r\n                // exactly rather than a prefix match.\r\n                const tags = result.data.filter(t => t.name?.toLowerCase() === name.toLowerCase());\r\n\r\n                if (tags.length >= 1) {\r\n                    return tags[0];\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Creates a new personal tag on the server with the given tag name.\r\n         *\r\n         * @param name The name of the tag to be created.\r\n         *\r\n         * @returns An object that contains the tag information that was created or null if one couldn't be created.\r\n         */\r\n        const createPersonalTag = async (name: string): Promise<EntityTagListTagBag | null> => {\r\n            const data: EntityTagListCreatePersonalTagOptionsBag = {\r\n                entityTypeGuid: props.entityTypeGuid,\r\n                categoryGuid: props.categoryGuid,\r\n                name: name,\r\n                securityGrantToken: securityToken.value\r\n            };\r\n\r\n            const result = await http.post<EntityTagListTagBag>(\"/api/v2/Controls/EntityTagListCreatePersonalTag\", undefined, data);\r\n\r\n            // An OK and CONFLICT both will return a valid tag.\r\n            if ((result.isSuccess || result.statusCode === 409) && result.data) {\r\n                return result.data;\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Add an existing tag to the entity.\r\n         *\r\n         * @param tagKey The key identifier of the tag to be added.\r\n         */\r\n        const addTag = async (tagKey: string): Promise<void> => {\r\n            const data: EntityTagListAddEntityTagOptionsBag = {\r\n                entityTypeGuid: props.entityTypeGuid,\r\n                entityKey: props.entityKey,\r\n                tagKey: tagKey,\r\n                securityGrantToken: securityToken.value\r\n            };\r\n\r\n            const result = await http.post<EntityTagListTagBag>(\"/api/v2/Controls/EntityTagListAddEntityTag\", undefined, data);\r\n\r\n            if (result.isSuccess && result.data) {\r\n                const newTags = [...currentTags.value];\r\n                newTags.push(result.data);\r\n                newTags.sort((a, b) => (a.name ?? \"\").localeCompare(b.name ?? \"\"));\r\n\r\n                currentTags.value = newTags;\r\n                searchValue.value = \"\";\r\n            }\r\n            else {\r\n                alert(result.errorMessage ?? \"Unable to add tag.\");\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Remove an existing tag from the entity.\r\n         *\r\n         * @param tagKey The identifier key of the tag to be removed.\r\n         */\r\n        const removeTag = async (tagKey: string): Promise<void> => {\r\n            const data: EntityTagListRemoveEntityTagOptionsBag = {\r\n                entityTypeGuid: props.entityTypeGuid,\r\n                entityKey: props.entityKey,\r\n                tagKey: tagKey,\r\n                securityGrantToken: securityToken.value\r\n            };\r\n\r\n            const result = await http.post<EntityTagListTagBag>(\"/api/v2/Controls/EntityTagListRemoveEntityTag\", undefined, data);\r\n\r\n            if (result.isSuccess) {\r\n                const newTags = currentTags.value.filter(t => t.idKey !== tagKey);\r\n\r\n                currentTags.value = newTags;\r\n            }\r\n            else {\r\n                alert(result.errorMessage ?? \"Unable to remove tag.\");\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Add a tag by name to the entity. If the tag doesn't exist the user\r\n         * will be prompted to create a new personal tag.\r\n         *\r\n         * @param tagName The name of the tag to be added.\r\n         */\r\n        const addNamedTag = async (tagName: string): Promise<void> => {\r\n            let tag = await getTagByName(tagName);\r\n\r\n            if (tag === null) {\r\n                if (!await confirm(`A tag called \"${tagName}\" does not exist. Do you want to create a new personal tag?`)) {\r\n                    return;\r\n                }\r\n\r\n                tag = await createPersonalTag(tagName);\r\n\r\n                if (tag === null) {\r\n                    await alert(\"Unable to create personal tag.\");\r\n                    return;\r\n                }\r\n            }\r\n\r\n            await addTag(tag.idKey ?? \"\");\r\n        };\r\n\r\n        /**\r\n         * Start loading existing tags for the entity described in our properties.\r\n         */\r\n        const loadExistingTags = async (): Promise<void> => {\r\n            // Cancel any previous load that hasn't completed.\r\n            if (loadCancelledToken) {\r\n                loadCancelledToken.value = true;\r\n            }\r\n\r\n            if (props.entityTypeGuid && props.entityKey) {\r\n                // Start a new cancellation request.\r\n                const cancelled = ref(false);\r\n                loadCancelledToken = cancelled;\r\n\r\n                const tags = await getEntityTags(http, props.entityTypeGuid, props.entityKey, securityToken.value);\r\n\r\n                // If we haven't been cancelled, then set the value.\r\n                if (!cancelled.value) {\r\n                    currentTags.value = tags;\r\n                }\r\n            }\r\n        };\r\n\r\n        // #endregion\r\n\r\n        // #region Event Handlers\r\n\r\n        /**\r\n         * Called when the user selects an existing tag from the popup list.\r\n         *\r\n         * @param value The value of the tag that was selected.\r\n         */\r\n        const onSelect = (value: string): void => {\r\n            isAddNewTagCancelled = true;\r\n            const item = searchOptions.value.filter(o => o.value === value);\r\n\r\n            if (item.length === 0) {\r\n                return;\r\n            }\r\n\r\n            // Replace the typed in value with the friendly label otherwise the\r\n            // text box is filled in with the value key.\r\n            searchValue.value = item[0].label;\r\n            addTag(item[0].value ?? \"\");\r\n        };\r\n\r\n        /**\r\n         * Called when an autocomplete search operation should start.\r\n         *\r\n         * @param value The value that has been typed so far that should be searched for.\r\n         */\r\n        const onSearch = async (value: string): Promise<void> => {\r\n            // Cancel any previous search that hasn't completed.\r\n            if (searchCancelledToken) {\r\n                searchCancelledToken.value = true;\r\n            }\r\n\r\n            if (!value) {\r\n                return;\r\n            }\r\n\r\n            // Start a new cancellation request.\r\n            const cancelled = ref(false);\r\n            searchCancelledToken = cancelled;\r\n\r\n            const data: EntityTagListGetAvailableTagsOptionsBag = {\r\n                entityTypeGuid: props.entityTypeGuid,\r\n                entityKey: props.entityKey,\r\n                name: value\r\n            };\r\n\r\n            const result = await http.post<EntityTagListTagBag[]>(\"/api/v2/Controls/EntityTagListGetAvailableTags\", undefined, data);\r\n\r\n            if (result.isSuccess && result.data) {\r\n                searchOptions.value = result.data.map(t => {\r\n                    return {\r\n                        value: t.idKey ?? \"\",\r\n                        label: t.name ?? \"\"\r\n                    };\r\n                });\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Called when a key has been pressed while the tag search field has focus.\r\n         *\r\n         * @param ev The object that describes the event being handled.\r\n         */\r\n        const onInputKeyDown = (ev: KeyboardEvent): void => {\r\n            if (ev.keyCode === 13 && searchValue.value) {\r\n                const tagName = searchValue.value;\r\n                isAddNewTagCancelled = false;\r\n\r\n                // As horrible as this is, there doesn't seem to be a way to determine\r\n                // the difference between hitting enter with something in the popup\r\n                // selected vs adding a new word. So the delay gives a chance for\r\n                // the select event to fire if there is something in the popup.\r\n                setTimeout(() => {\r\n                    if (!isAddNewTagCancelled) {\r\n                        addNamedTag(tagName);\r\n                    }\r\n                }, 1);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Called when the remove button for an existing tag has been clicked.\r\n         *\r\n         * @param tagKey The identifier key of the tag to be removed.\r\n         */\r\n        const onRemoveTag = async (tagKey: string): Promise<void> => {\r\n            await removeTag(tagKey);\r\n        };\r\n\r\n        /**\r\n         * Event handler for when the \"+\" button is clicked to begin the process\r\n         * of adding new tags to the entity.\r\n         */\r\n        const onAddNewTagsClick = (): void => {\r\n            isNewTagVisible.value = true;\r\n\r\n            // After the UI updates, put the keyboard focus on the input box.\r\n            nextTick(() => {\r\n                const input = tagsInputRef.value?.querySelector(\"input.ant-select-selection-search-input\") as HTMLElement;\r\n                input?.focus();\r\n            });\r\n        };\r\n\r\n        // #endregion\r\n\r\n        // Watch for changes in our configuration that would require us to reload\r\n        // all the tags.\r\n        watch([() => props.entityTypeGuid, () => props.entityKey, () => props.categoryGuid], () => {\r\n            loadExistingTags();\r\n        });\r\n\r\n        // Begin loading the tags in either eager or lazy mode.\r\n        if (props.lazyMode === ControlLazyMode.Eager) {\r\n            useSuspense()?.addOperation(loadExistingTags());\r\n        }\r\n        else {\r\n            loadExistingTags();\r\n        }\r\n\r\n        return {\r\n            currentTags,\r\n            isNewTagVisible,\r\n            onAddNewTagsClick,\r\n            onInputKeyDown,\r\n            onRemoveTag,\r\n            onSearch,\r\n            onSelect,\r\n            searchOptions,\r\n            searchValue,\r\n            tagsInputRef\r\n        };\r\n    },\r\n\r\n    template: `\r\n<div class=\"taglist\">\r\n    <v-style>\r\n.taglist .ant-select-auto-complete.ant-select {\r\n    width: 125px;\r\n}\r\n\r\n.taglist .ant-select-auto-complete.ant-select > .ant-select-selector {\r\n    border: 0px;\r\n    padding: 0px;\r\n    height: 22px;\r\n    font-size: 12px;\r\n    background: transparent;\r\n}\r\n\r\n.taglist .ant-select-auto-complete.ant-select-focused.ant-select > .ant-select-selector,\r\n.taglist .ant-select-auto-complete.ant-select > .ant-select-selector:hover {\r\n    border: 0px;\r\n    box-shadow: initial;\r\n    background: rgba(0,0,0,0.05);\r\n}\r\n\r\n.taglist .ant-select-auto-complete.ant-select > .ant-select-selector .ant-select-selection-search {\r\n    left: 6px;\r\n    right: 6px;\r\n}\r\n\r\n.taglist .ant-select-auto-complete.ant-select > .ant-select-selector .ant-select-selection-placeholder {\r\n    position: absolute;\r\n    margin-left: 6px;\r\n    line-height: 22px;\r\n}\r\n\r\n.taglist .ant-select-auto-complete.ant-select .ant-select-selection-search-input {\r\n    height: 22px;\r\n}\r\n\r\n.taglist .add-new-tags {\r\n    float: left;\r\n    height: 22px;\r\n    font-size: 0.7em;\r\n    line-height: 22px;\r\n}\r\n    </v-style>\r\n\r\n    <div class=\"tag-wrap\">\r\n        <div class=\"tagsinput\" ref=\"tagsInputRef\">\r\n            <Tag v-for=\"tag in currentTags\"\r\n                :key=\"tag.value\"\r\n                :modelValue=\"tag\"\r\n                :disabled=\"disabled\"\r\n                @removeTag=\"onRemoveTag\" />\r\n        </div>\r\n\r\n        <template v-if=\"!disabled\">\r\n            <AutoComplete v-if=\"isNewTagVisible\"\r\n                v-model:value=\"searchValue\"\r\n                :options=\"searchOptions\"\r\n                placeholder=\"tag name\"\r\n                @select=\"onSelect\"\r\n                @search=\"onSearch\"\r\n                @inputKeyDown=\"onInputKeyDown\" />\r\n\r\n            <span v-else class=\"text-muted add-new-tags clickable\" @click=\"onAddNewTagsClick\">\r\n                <i class=\"fa fa-plus\"></i>\r\n            </span>\r\n        </template>\r\n    </div>\r\n</div>\r\n`\r\n});\r\n"],"names":["tag","defineComponent","name","props","modelValue","type","Object","required","disabled","Boolean","default","emits","_value","setup","_ref","emit","text","computed","_props$modelValue$nam","iconCssClass","_props$modelValue$ico","tagClass","isPersonal","tagStyle","styles","backgroundColor","onRemoveTag","_props$modelValue$idK","idKey","template","getEntityTags","_x","_x2","_x3","_x4","_getEntityTags","apply","arguments","_asyncToGenerator","http","entityTypeGuid","entityKey","securityToken","data","securityGrantToken","result","post","undefined","isSuccess","components","AutoComplete","Tag","String","categoryGuid","lazyMode","ControlLazyMode","Lazy","useSecurityGrantToken","useHttp","currentTags","ref","searchValue","searchOptions","isNewTagVisible","tagsInputRef","loadCancelledToken","searchCancelledToken","isAddNewTagCancelled","getTagByName","_ref2","value","tags","filter","t","_t$name","toLowerCase","length","_x5","createPersonalTag","_ref3","statusCode","_x6","addTag","_ref4","tagKey","newTags","push","sort","a","b","_a$name","_b$name","localeCompare","_result$errorMessage","alert","errorMessage","_x7","removeTag","_ref5","_result$errorMessage2","_x8","addNamedTag","_ref6","tagName","_tag$idKey","confirm","concat","_x9","loadExistingTags","_ref7","cancelled","onSelect","_item$0$value","item","o","label","onSearch","_ref8","map","_t$idKey","_t$name2","_x10","onInputKeyDown","ev","keyCode","setTimeout","_ref9","_x11","onAddNewTagsClick","nextTick","_tagsInputRef$value","input","querySelector","focus","watch","Eager","_useSuspense","useSuspense","addOperation"],"mappings":"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"}