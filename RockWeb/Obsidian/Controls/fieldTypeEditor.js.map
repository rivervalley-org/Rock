{"version":3,"file":"fieldTypeEditor.js","sources":["../../../Framework/Controls/fieldTypeEditor.ts"],"sourcesContent":["// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { Component, computed, defineComponent, PropType, ref, watch } from \"vue\";\r\nimport RockField from \"./rockField\";\r\nimport NotificationBox from \"./notificationBox.obs\";\r\nimport DropDownList from \"./dropDownList\";\r\nimport StaticFormControl from \"./staticFormControl\";\r\nimport { getFieldType } from \"@Obsidian/Utility/fieldTypes\";\r\nimport { useHttp } from \"@Obsidian/Utility/http\";\r\nimport { areEqual, newGuid } from \"@Obsidian/Utility/guid\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport { PublicAttributeBag } from \"@Obsidian/ViewModels/Utility/publicAttributeBag\";\r\nimport { FieldTypeEditorUpdateAttributeConfigurationOptionsBag } from \"@Obsidian/ViewModels/Controls/fieldTypeEditorUpdateAttributeConfigurationOptionsBag\";\r\nimport { FieldTypeEditorUpdateAttributeConfigurationResultBag } from \"@Obsidian/ViewModels/Controls/fieldTypeEditorUpdateAttributeConfigurationResultBag\";\r\nimport { updateRefValue } from \"@Obsidian/Utility/component\";\r\nimport { deepEqual } from \"@Obsidian/Utility/util\";\r\n\r\nexport default defineComponent({\r\n    name: \"FieldTypeEditor\",\r\n\r\n    components: {\r\n        NotificationBox,\r\n        DropDownList,\r\n        RockField,\r\n        StaticFormControl\r\n    },\r\n\r\n    props: {\r\n        modelValue: {\r\n            type: Object as PropType<FieldTypeEditorUpdateAttributeConfigurationOptionsBag | null>,\r\n            default: null\r\n        },\r\n\r\n        isFieldTypeReadOnly: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        }\r\n    },\r\n\r\n    emits: [\r\n        \"update:modelValue\"\r\n    ],\r\n\r\n    setup(props, { emit }) {\r\n        const http = useHttp();\r\n        const internalValue = ref(props.modelValue);\r\n\r\n        /** The selected field type in the drop down list. */\r\n        const fieldTypeValue = ref(props.modelValue?.fieldTypeGuid ?? \"\");\r\n\r\n        // Tracks a pending resetToDefaults() call.\r\n        let resetToDefaultsTimer: number | null = null;\r\n\r\n        /** The details about the default value used for the field. */\r\n        const defaultValue = ref(\"\");\r\n\r\n        /** The current configuration properties that describe the field type options. */\r\n        const configurationProperties = ref<Record<string, string>>({});\r\n\r\n        /** The current values selected in the configuration properties. */\r\n        const configurationValues = ref<Record<string, string>>(props.modelValue?.configurationValues ?? {});\r\n\r\n        /** True if the default value component should be shown. */\r\n        const hasDefaultValue = computed((): boolean => {\r\n            // Verify the configuration component is visible and we have a\r\n            // default value.\r\n            if (!showConfigurationComponent.value || defaultValue.value === null) {\r\n                return false;\r\n            }\r\n\r\n            const fieldType = getFieldType(fieldTypeValue.value);\r\n\r\n            // Field type has final say if a default value should be shown.\r\n            return fieldType?.hasDefaultComponent() ?? false;\r\n        });\r\n\r\n        /** True if the field types options are ready for display. */\r\n        const isFieldTypesReady = ref(false);\r\n\r\n        /** True if the configuration data has been retrieved and is ready for display. */\r\n        const isConfigurationReady = ref(false);\r\n\r\n        /** True if everything is loaded and ready for display. */\r\n        const isReady = computed(() => isFieldTypesReady.value && isConfigurationReady.value);\r\n\r\n        /** Contains any error message to be displayed to the user about the operation. */\r\n        const fieldErrorMessage = ref(\"\");\r\n\r\n        /** The options to be shown in the field type drop down control. */\r\n        const fieldTypeOptions = ref<ListItemBag[]>([]);\r\n\r\n        /** The UI component that will handle the configuration of the field type. */\r\n        const configurationComponent = computed((): Component | null => {\r\n            const fieldType = getFieldType(fieldTypeValue.value);\r\n            if (fieldType) {\r\n                return fieldType.getConfigurationComponent();\r\n            }\r\n            return null;\r\n        });\r\n\r\n        /** True if the configuration component is ready to be displayed. */\r\n        const showConfigurationComponent = computed((): boolean => {\r\n            return configurationComponent.value !== null && isReady.value;\r\n        });\r\n\r\n        /** The name of the currently selected field type. */\r\n        const fieldTypeName = computed((): string => {\r\n            const matches = fieldTypeOptions.value.filter(v => areEqual(v.value, fieldTypeValue.value));\r\n\r\n            return matches.length >= 1 ? matches[0].text ?? \"\" : \"\";\r\n        });\r\n\r\n        const defaultValueAttribute = computed((): PublicAttributeBag => {\r\n            return {\r\n                fieldTypeGuid: fieldTypeValue.value,\r\n                attributeGuid: newGuid(),\r\n                configurationValues: configurationValues.value,\r\n                name: \"Default Value\",\r\n                key: \"DefaultValue\",\r\n                description: \"\",\r\n                isRequired: false,\r\n                order: 0,\r\n                categories: []\r\n            };\r\n        });\r\n\r\n        /**\r\n         * True if an update request has been caused by an internal value change.\r\n         * In this case, the update is not emitted to the parent.\r\n         */\r\n        let isInternalUpdate = false;\r\n\r\n        /**\r\n         * Called when the modelValue needs to be updated from any change\r\n         * that was made.\r\n         */\r\n        const updateModelValue = (): void => {\r\n            if (isInternalUpdate) {\r\n                return;\r\n            }\r\n\r\n            const newValue: FieldTypeEditorUpdateAttributeConfigurationOptionsBag = {\r\n                fieldTypeGuid: fieldTypeValue.value,\r\n                configurationValues: configurationValues.value,\r\n                defaultValue: defaultValue.value ?? \"\"\r\n            };\r\n\r\n            // This only updates if the value has actually changed, which removes\r\n            // some false dirty state.\r\n            updateRefValue(internalValue, newValue);\r\n        };\r\n\r\n        /**\r\n         * Resets all configuration details as if the user selected a blank\r\n         * field type.\r\n         */\r\n        const resetToDefaults = (): void => {\r\n            if (resetToDefaultsTimer !== null) {\r\n                clearTimeout(resetToDefaultsTimer);\r\n                resetToDefaultsTimer = null;\r\n            }\r\n\r\n            isConfigurationReady.value = false;\r\n            isInternalUpdate = true;\r\n            configurationProperties.value = {};\r\n            configurationValues.value = {};\r\n            defaultValue.value = \"\";\r\n            isInternalUpdate = false;\r\n\r\n            updateModelValue();\r\n        };\r\n\r\n        /** Updates the field configuration from new data on the server. */\r\n        const updateFieldConfiguration = (currentDefaultValue: string): void => {\r\n            if (fieldTypeValue.value === \"\") {\r\n                resetToDefaults();\r\n\r\n                return;\r\n            }\r\n\r\n            const update: FieldTypeEditorUpdateAttributeConfigurationOptionsBag = {\r\n                fieldTypeGuid: fieldTypeValue.value,\r\n                configurationValues: configurationValues.value,\r\n                defaultValue: currentDefaultValue\r\n            };\r\n\r\n            http.post<FieldTypeEditorUpdateAttributeConfigurationResultBag>(\"/api/v2/Controls/FieldTypeEditorUpdateAttributeConfiguration\", null, update)\r\n                .then(result => {\r\n                    resetToDefaults();\r\n                    console.debug(\"got configuration\", result.data);\r\n\r\n                    if (result.isSuccess && result.data && result.data.configurationProperties && result.data.configurationValues) {\r\n                        fieldErrorMessage.value = \"\";\r\n                        isConfigurationReady.value = true;\r\n\r\n                        isInternalUpdate = true;\r\n                        configurationProperties.value = result.data.configurationProperties;\r\n                        configurationValues.value = result.data.configurationValues;\r\n                        defaultValue.value = result.data.defaultValue ?? \"\";\r\n                        isInternalUpdate = false;\r\n\r\n                        updateModelValue();\r\n                    }\r\n                    else {\r\n                        fieldErrorMessage.value = result.errorMessage ?? \"Encountered unknown error communicating with server.\";\r\n                    }\r\n                });\r\n        };\r\n\r\n        /** Called when the default value has been changed by the screen control. */\r\n        const onDefaultValueUpdate = (value: string): void => {\r\n            console.debug(\"default value updated\");\r\n            defaultValue.value = value;\r\n            updateModelValue();\r\n        };\r\n\r\n        /**\r\n         * Called when the field type configuration control requests that the\r\n         * configuration properties be updated from the server.\r\n         */\r\n        const onUpdateConfiguration = (): void => {\r\n            console.debug(\"onUpdateConfiguration\");\r\n            updateFieldConfiguration(defaultValue.value ?? \"\");\r\n        };\r\n\r\n        /**\r\n         * Called when the field type configuration control has updated one of\r\n         * the configuration values that does not require a full reload.\r\n         *\r\n         * @param key The key of the configuration value that was changed.\r\n         * @param value The new value of the configuration value.\r\n         */\r\n        const onUpdateConfigurationValue = (_key: string, _value: string): void => {\r\n            updateModelValue();\r\n        };\r\n\r\n        // Called when the field type drop down value is changed.\r\n        watch(fieldTypeValue, () => {\r\n            if (resetToDefaultsTimer === null) {\r\n                resetToDefaultsTimer = window.setTimeout(resetToDefaults, 250);\r\n            }\r\n\r\n            updateFieldConfiguration(\"\");\r\n        });\r\n\r\n        // Watch for changes to our internal value and update the model value.\r\n        watch(internalValue, () => {\r\n            // Normally, this deepEqual wouldn't be needed. But there are times\r\n            // where the internalValue is changed twice. For example, we will\r\n            // reset the value to blank and then set the proper value. In that\r\n            // case this watch will be triggered because it detects the value\r\n            // did indeed change, but we need to check if it was just a toggle\r\n            // to a blank value and then back to the model value.\r\n            if (!deepEqual(internalValue.value, props.modelValue, true)) {\r\n                emit(\"update:modelValue\", internalValue.value);\r\n            }\r\n        });\r\n\r\n        // Get all the available field types that the user is allowed to edit.\r\n        http.post<ListItemBag[]>(\"/api/v2/Controls/FieldTypeEditorGetAvailableFieldTypes\", undefined, {})\r\n            .then(result => {\r\n                if (result.isSuccess && result.data) {\r\n                    fieldTypeOptions.value = result.data;\r\n                    isFieldTypesReady.value = true;\r\n\r\n                    // If the field type is already selected then begin to load\r\n                    // all the field configuration.\r\n                    if (fieldTypeValue.value !== \"\") {\r\n                        updateFieldConfiguration(props.modelValue?.defaultValue ?? \"\");\r\n                    }\r\n                }\r\n            });\r\n\r\n        return {\r\n            configurationComponent,\r\n            configurationValues,\r\n            configurationProperties,\r\n            defaultValue,\r\n            defaultValueAttribute,\r\n            hasDefaultValue,\r\n            fieldErrorMessage,\r\n            fieldTypeName,\r\n            fieldTypeOptions,\r\n            fieldTypeValue,\r\n            isFieldTypesReady,\r\n            onDefaultValueUpdate,\r\n            onUpdateConfiguration,\r\n            onUpdateConfigurationValue,\r\n            showConfigurationComponent\r\n        };\r\n    },\r\n\r\n    template: `\r\n<div>\r\n    <template v-if=\"isFieldTypesReady\">\r\n        <StaticFormControl v-if=\"isFieldTypeReadOnly\" label=\"Field Type\" v-model=\"fieldTypeName\" />\r\n        <DropDownList v-else label=\"Field Type\" v-model=\"fieldTypeValue\" :items=\"fieldTypeOptions\" rules=\"required\" enhanceForLongLists />\r\n    </template>\r\n    <NotificationBox v-if=\"fieldErrorMessage\" alertType=\"warning\">\r\n        {{ fieldErrorMessage }}\r\n    </NotificationBox>\r\n    <component v-if=\"showConfigurationComponent\" :is=\"configurationComponent\" v-model=\"configurationValues\" :configurationProperties=\"configurationProperties\" @updateConfiguration=\"onUpdateConfiguration\" @updateConfigurationValue=\"onUpdateConfigurationValue\" />\r\n    <RockField v-if=\"hasDefaultValue\" :modelValue=\"defaultValue\" :attribute=\"defaultValueAttribute\" @update:modelValue=\"onDefaultValueUpdate\" isEditMode />\r\n</div>\r\n`\r\n});\r\n"],"names":["defineComponent","name","components","NotificationBox","DropDownList","RockField","StaticFormControl","props","modelValue","type","Object","default","isFieldTypeReadOnly","Boolean","emits","setup","_ref","_props$modelValue$fie","_props$modelValue","_props$modelValue$con","_props$modelValue2","emit","http","useHttp","internalValue","ref","fieldTypeValue","fieldTypeGuid","resetToDefaultsTimer","defaultValue","configurationProperties","configurationValues","hasDefaultValue","computed","_fieldType$hasDefault","showConfigurationComponent","value","fieldType","getFieldType","hasDefaultComponent","isFieldTypesReady","isConfigurationReady","isReady","fieldErrorMessage","fieldTypeOptions","configurationComponent","getConfigurationComponent","fieldTypeName","_matches$0$text","matches","filter","v","areEqual","length","text","defaultValueAttribute","attributeGuid","newGuid","key","description","isRequired","order","categories","isInternalUpdate","updateModelValue","_defaultValue$value","newValue","updateRefValue","resetToDefaults","clearTimeout","updateFieldConfiguration","currentDefaultValue","update","post","then","result","console","debug","data","isSuccess","_result$data$defaultV","_result$errorMessage","errorMessage","onDefaultValueUpdate","onUpdateConfiguration","_defaultValue$value2","onUpdateConfigurationValue","_key","_value","watch","window","setTimeout","deepEqual","undefined","_props$modelValue$def","_props$modelValue3","template"],"mappings":"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"}