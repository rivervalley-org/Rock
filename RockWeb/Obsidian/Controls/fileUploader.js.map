{"version":3,"file":"fileUploader.js","sources":["../../../Framework/Controls/fileUploader.ts"],"sourcesContent":["// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { Guid } from \"@Obsidian/Types\";\r\nimport { computed, defineComponent, PropType, ref, watch } from \"vue\";\r\nimport NotificationBox from \"./notificationBox.obs\";\r\nimport { BinaryFiletype } from \"@Obsidian/SystemGuids/binaryFiletype\";\r\nimport { uploadBinaryFile } from \"@Obsidian/Utility/http\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport RockFormField from \"./rockFormField\";\r\n\r\nexport default defineComponent({\r\n    name: \"FileUploader\",\r\n\r\n    components: {\r\n        NotificationBox,\r\n        RockFormField\r\n    },\r\n\r\n    props: {\r\n        modelValue: {\r\n            type: Object as PropType<ListItemBag | null>,\r\n            required: false\r\n        },\r\n\r\n        binaryFileTypeGuid: {\r\n            type: String as PropType<Guid>,\r\n            default: BinaryFiletype.Default\r\n        },\r\n\r\n        uploadAsTemporary: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: true\r\n        },\r\n\r\n        uploadButtonText: {\r\n            type: String as PropType<string>,\r\n            default: \"Upload\"\r\n        },\r\n\r\n        showDeleteButton: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: true\r\n        }\r\n    },\r\n\r\n    emits: [\r\n        \"update:modelValue\"\r\n    ],\r\n\r\n    setup(props, { emit }) {\r\n        const fileGuid = ref<Guid>(props.modelValue?.value ?? \"\");\r\n        const fileName = ref(props.modelValue?.text ?? \"\");\r\n\r\n        // Variables related to the progress of uploading a new file.\r\n        const isUploading = ref(false);\r\n        const uploadProgressText = ref(\"\");\r\n        const uploadErrorMessage = ref(\"\");\r\n\r\n        // Element references used to interact directly with the DOM.\r\n        const fileInputElement = ref<HTMLInputElement | null>(null);\r\n        const dropZoneElement = ref<HTMLElement | null>(null);\r\n\r\n        /** The URL used to download the file. */\r\n        const fileUrl = computed((): string | null => {\r\n            if (fileGuid.value) {\r\n                return `/GetFile.ashx?guid=${fileGuid.value}`;\r\n            }\r\n\r\n            return null;\r\n        });\r\n\r\n        /** The CSS class string to use for the thumbnail element. */\r\n        const thumbnailClass = computed((): string => {\r\n            return fileUrl.value ? \"file-link file-exists\" : \"file-link\";\r\n        });\r\n\r\n        /** True if the delete button should be visible. */\r\n        const isDeleteVisible = computed((): boolean => {\r\n            return props.showDeleteButton && !!fileGuid.value;\r\n        });\r\n\r\n        /**\r\n         * Upload the specified file into Rock with the current settings.\r\n         *\r\n         * @param file The file to be uploaded.\r\n         */\r\n        const uploadFile = async (file: File): Promise<void> => {\r\n            // Update the UI to reflect that we are currently uploading.\r\n            isUploading.value = true;\r\n            uploadProgressText.value = \"0%\";\r\n            uploadErrorMessage.value = \"\";\r\n\r\n            try {\r\n                // Perform the actual file upload using the helper function.\r\n                const result = await uploadBinaryFile(file, props.binaryFileTypeGuid || BinaryFiletype.Default, {\r\n                    isTemporary: props.uploadAsTemporary,\r\n                    progress: (progress, total, percent) => {\r\n                        uploadProgressText.value = `${percent}%`;\r\n                    }\r\n                });\r\n\r\n                fileGuid.value = result.value ?? \"\";\r\n                fileName.value = result.text ?? \"\";\r\n            }\r\n            catch (e) {\r\n                // Show any error message we got.\r\n                uploadErrorMessage.value = String(e);\r\n            }\r\n            finally {\r\n                // Clear the uploading progress whether success or failure.\r\n                isUploading.value = false;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Event handler for when the individual clicks to manually select a file\r\n         * to be uploaded into Rock.\r\n         */\r\n        const onSelectFileClick = (): void => {\r\n            if (!isUploading.value) {\r\n                fileInputElement.value?.click();\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Event handler for when the remove file button is clicked.\r\n         */\r\n        const onRemoveFileClick = (): void => {\r\n            fileGuid.value = \"\";\r\n            fileName.value = \"\";\r\n        };\r\n\r\n        /**\r\n         * Event handler for when the file input has a new file selected. This\r\n         * is triggered for manual selection only, not drag and drop.\r\n         */\r\n        const onFileChange = (): void => {\r\n            if (isUploading.value) {\r\n                return;\r\n            }\r\n\r\n            if (fileInputElement.value && fileInputElement.value.files && fileInputElement.value.files.length > 0) {\r\n                uploadFile(fileInputElement.value.files[0]);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Event handler for when the file input has been cleared. This is\r\n         * probably not actually needed since the control is hidden but including\r\n         * it just in case.\r\n         */\r\n        const onFileRemove = (): void => {\r\n            if (isUploading.value) {\r\n                return;\r\n            }\r\n\r\n            fileGuid.value = \"\";\r\n            fileName.value = \"\";\r\n        };\r\n\r\n        // Watch for the drop zone element to become available. Once we have it\r\n        // register for the drag and drop events to support dropping a file onto\r\n        // the file uploader component.\r\n        watch(dropZoneElement, () => {\r\n            if (dropZoneElement.value) {\r\n                // Register the dragover event so we can indicate that we will\r\n                // accept a file dropped on us.\r\n                dropZoneElement.value.addEventListener(\"dragover\", event => {\r\n                    if (!isUploading.value && event.dataTransfer) {\r\n                        event.stopPropagation();\r\n                        event.preventDefault();\r\n\r\n                        if (event.dataTransfer.items.length === 1 && event.dataTransfer.items[0].kind === \"file\") {\r\n                            event.dataTransfer.dropEffect = \"copy\";\r\n                        }\r\n                        else {\r\n                            event.dataTransfer.dropEffect = \"none\";\r\n                        }\r\n                    }\r\n                });\r\n\r\n                // Register the drop event so we can begin the upload for the\r\n                // file that was dropped on us.\r\n                dropZoneElement.value.addEventListener(\"drop\", event => {\r\n                    if (!isUploading.value && event.dataTransfer && event.dataTransfer.files.length > 0) {\r\n                        event.stopPropagation();\r\n                        event.preventDefault();\r\n\r\n                        uploadFile(event.dataTransfer.files[0]);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        // Watch for changes to the model value and update our internal values.\r\n        watch(() => props.modelValue, () => {\r\n            fileGuid.value = props.modelValue?.value ?? \"\";\r\n            fileName.value = props.modelValue?.text ?? \"\";\r\n        });\r\n\r\n        // Watch for changes to our internal values and update the model value.\r\n        watch([fileGuid, fileName], () => {\r\n            let newValue: ListItemBag | undefined = undefined;\r\n\r\n            if (fileGuid.value) {\r\n                newValue = {\r\n                    value: fileGuid.value,\r\n                    text: fileName.value\r\n                };\r\n            }\r\n\r\n            emit(\"update:modelValue\", newValue);\r\n        });\r\n\r\n        return {\r\n            dropZoneElement,\r\n            fileGuid,\r\n            fileInputElement,\r\n            fileName,\r\n            fileUrl,\r\n            isDeleteVisible,\r\n            isUploading,\r\n            onFileChange,\r\n            onFileRemove,\r\n            onRemoveFileClick,\r\n            onSelectFileClick,\r\n            thumbnailClass,\r\n            uploadErrorMessage,\r\n            uploadProgressText\r\n        };\r\n    },\r\n\r\n    template: `\r\n<RockFormField\r\n    :modelValue=\"fileGuid\"\r\n    formGroupClasses=\"file-uploader\"\r\n    name=\"fileuploader\">\r\n    <template #default=\"{uniqueId, field}\">\r\n        <div class=\"control-wrapper\">\r\n            <NotificationBox v-if=\"uploadErrorMessage\" alertType=\"warning\">\r\n                <strong><i class=\"fa fa-exclamation-triangle\"></i> Warning </strong>\r\n                <span>{{ uploadErrorMessage }}</span>\r\n            </NotificationBox>\r\n\r\n            <div ref=\"dropZoneElement\" :id=\"uniqueId\" class=\"fileupload-group\" @click=\"onSelectFileClick\">\r\n                <div class=\"fileupload-thumbnail\">\r\n                    <a v-if=\"fileUrl\" :class=\"thumbnailClass\" :href=\"fileUrl\" target=\"_blank\" @click.stop>{{ fileName }}</a>\r\n                    <span v-else :class=\"thumbnailClass\"></span>\r\n\r\n                    <div v-if=\"isDeleteVisible\" class=\"fileupload-remove\">\r\n                        <a v-if=\"fileGuid\" href=\"#\" class=\"remove-file\" title=\"Remove File\" @click.prevent.stop=\"onRemoveFileClick\">\r\n                            <i class=\"fa fa-times\"></i>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n\r\n                <div v-if=\"isUploading\" class=\"upload-progress\">\r\n                    <i class=\"fa fa-refresh fa-spin fa-3x\"></i>\r\n                    <div>{{ uploadProgressText }}</div>\r\n                </div>\r\n\r\n                <div class=\"fileupload-dropzone\">\r\n                    <span>{{ uploadButtonText }}</span>\r\n                    <input ref=\"fileInputElement\" type=\"file\" style=\"display: none;\" @change=\"onFileChange\" @remove=\"OnFileRemove\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </template>\r\n</RockFormField>\r\n`\r\n});\r\n"],"names":["defineComponent","name","components","NotificationBox","RockFormField","props","modelValue","type","Object","required","binaryFileTypeGuid","String","default","BinaryFiletype","Default","uploadAsTemporary","Boolean","uploadButtonText","showDeleteButton","emits","setup","_ref","_props$modelValue$val","_props$modelValue","_props$modelValue$tex","_props$modelValue2","emit","fileGuid","ref","value","fileName","text","isUploading","uploadProgressText","uploadErrorMessage","fileInputElement","dropZoneElement","fileUrl","computed","concat","thumbnailClass","isDeleteVisible","uploadFile","_ref2","_asyncToGenerator","file","_result$value","_result$text","result","uploadBinaryFile","isTemporary","progress","total","percent","e","_x","apply","arguments","onSelectFileClick","_fileInputElement$val","click","onRemoveFileClick","onFileChange","files","length","onFileRemove","watch","addEventListener","event","dataTransfer","stopPropagation","preventDefault","items","kind","dropEffect","_props$modelValue$val2","_props$modelValue3","_props$modelValue$tex2","_props$modelValue4","newValue","undefined","template"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,4CAAeA,eAAe,CAAC;MAC3BC,EAAAA,IAAI,EAAE,cAAc;MAEpBC,EAAAA,UAAU,EAAE;UACRC,eAAe;MACfC,IAAAA,aAAAA;SACH;MAEDC,EAAAA,KAAK,EAAE;MACHC,IAAAA,UAAU,EAAE;MACRC,MAAAA,IAAI,EAAEC,MAAsC;MAC5CC,MAAAA,QAAQ,EAAE,KAAA;WACb;MAEDC,IAAAA,kBAAkB,EAAE;MAChBH,MAAAA,IAAI,EAAEI,MAAwB;YAC9BC,OAAO,EAAEC,cAAc,CAACC,OAAAA;WAC3B;MAEDC,IAAAA,iBAAiB,EAAE;MACfR,MAAAA,IAAI,EAAES,OAA4B;MAClCJ,MAAAA,OAAO,EAAE,IAAA;WACZ;MAEDK,IAAAA,gBAAgB,EAAE;MACdV,MAAAA,IAAI,EAAEI,MAA0B;MAChCC,MAAAA,OAAO,EAAE,QAAA;WACZ;MAEDM,IAAAA,gBAAgB,EAAE;MACdX,MAAAA,IAAI,EAAES,OAA4B;MAClCJ,MAAAA,OAAO,EAAE,IAAA;MACb,KAAA;SACH;QAEDO,KAAK,EAAE,CACH,mBAAmB,CACtB;MAEDC,EAAAA,KAAKA,CAACf,KAAK,EAAAgB,IAAA,EAAY;MAAA,IAAA,IAAAC,qBAAA,EAAAC,iBAAA,EAAAC,qBAAA,EAAAC,kBAAA,CAAA;MAAA,IAAA,IAARC,IAAI,GAAAL,IAAA,CAAJK,IAAI,CAAA;UACf,IAAMC,QAAQ,GAAGC,GAAG,CAAA,CAAAN,qBAAA,GAAAC,CAAAA,iBAAA,GAAOlB,KAAK,CAACC,UAAU,cAAAiB,iBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAhBA,iBAAA,CAAkBM,KAAK,MAAA,IAAA,IAAAP,qBAAA,KAAAA,KAAAA,CAAAA,GAAAA,qBAAA,GAAI,EAAE,CAAC,CAAA;UACzD,IAAMQ,QAAQ,GAAGF,GAAG,CAAA,CAAAJ,qBAAA,GAAAC,CAAAA,kBAAA,GAACpB,KAAK,CAACC,UAAU,cAAAmB,kBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAhBA,kBAAA,CAAkBM,IAAI,MAAA,IAAA,IAAAP,qBAAA,KAAAA,KAAAA,CAAAA,GAAAA,qBAAA,GAAI,EAAE,CAAC,CAAA;MAGlD,IAAA,IAAMQ,WAAW,GAAGJ,GAAG,CAAC,KAAK,CAAC,CAAA;MAC9B,IAAA,IAAMK,kBAAkB,GAAGL,GAAG,CAAC,EAAE,CAAC,CAAA;MAClC,IAAA,IAAMM,kBAAkB,GAAGN,GAAG,CAAC,EAAE,CAAC,CAAA;MAGlC,IAAA,IAAMO,gBAAgB,GAAGP,GAAG,CAA0B,IAAI,CAAC,CAAA;MAC3D,IAAA,IAAMQ,eAAe,GAAGR,GAAG,CAAqB,IAAI,CAAC,CAAA;MAGrD,IAAA,IAAMS,OAAO,GAAGC,QAAQ,CAAC,MAAqB;YAC1C,IAAIX,QAAQ,CAACE,KAAK,EAAE;MAChB,QAAA,OAAA,qBAAA,CAAAU,MAAA,CAA6BZ,QAAQ,CAACE,KAAK,CAAA,CAAA;MAC/C,OAAA;MAEA,MAAA,OAAO,IAAI,CAAA;MACf,KAAC,CAAC,CAAA;MAGF,IAAA,IAAMW,cAAc,GAAGF,QAAQ,CAAC,MAAc;MAC1C,MAAA,OAAOD,OAAO,CAACR,KAAK,GAAG,uBAAuB,GAAG,WAAW,CAAA;MAChE,KAAC,CAAC,CAAA;MAGF,IAAA,IAAMY,eAAe,GAAGH,QAAQ,CAAC,MAAe;YAC5C,OAAOjC,KAAK,CAACa,gBAAgB,IAAI,CAAC,CAACS,QAAQ,CAACE,KAAK,CAAA;MACrD,KAAC,CAAC,CAAA;MAOF,IAAA,IAAMa,UAAU,GAAA,YAAA;MAAA,MAAA,IAAAC,KAAA,GAAAC,iBAAA,CAAG,WAAOC,IAAU,EAAoB;cAEpDb,WAAW,CAACH,KAAK,GAAG,IAAI,CAAA;cACxBI,kBAAkB,CAACJ,KAAK,GAAG,IAAI,CAAA;cAC/BK,kBAAkB,CAACL,KAAK,GAAG,EAAE,CAAA;cAE7B,IAAI;gBAAA,IAAAiB,aAAA,EAAAC,YAAA,CAAA;MAEA,UAAA,IAAMC,MAAM,GAAA,MAASC,gBAAgB,CAACJ,IAAI,EAAExC,KAAK,CAACK,kBAAkB,IAAIG,cAAc,CAACC,OAAO,EAAE;kBAC5FoC,WAAW,EAAE7C,KAAK,CAACU,iBAAiB;MACpCoC,YAAAA,QAAQ,EAAEA,CAACA,SAAQ,EAAEC,KAAK,EAAEC,OAAO,KAAK;MACpCpB,cAAAA,kBAAkB,CAACJ,KAAK,GAAA,EAAA,CAAAU,MAAA,CAAMc,OAAO,EAAG,GAAA,CAAA,CAAA;MAC5C,aAAA;MACJ,WAAC,CAAC,CAAA;MAEF1B,UAAAA,QAAQ,CAACE,KAAK,GAAAiB,CAAAA,aAAA,GAAGE,MAAM,CAACnB,KAAK,MAAAiB,IAAAA,IAAAA,aAAA,KAAAA,KAAAA,CAAAA,GAAAA,aAAA,GAAI,EAAE,CAAA;MACnChB,UAAAA,QAAQ,CAACD,KAAK,GAAAkB,CAAAA,YAAA,GAAGC,MAAM,CAACjB,IAAI,MAAAgB,IAAAA,IAAAA,YAAA,KAAAA,KAAAA,CAAAA,GAAAA,YAAA,GAAI,EAAE,CAAA;eACrC,CACD,OAAOO,CAAC,EAAE;MAENpB,UAAAA,kBAAkB,CAACL,KAAK,GAAGlB,MAAM,CAAC2C,CAAC,CAAC,CAAA;MACxC,SAAC,SACO;gBAEJtB,WAAW,CAACH,KAAK,GAAG,KAAK,CAAA;MAC7B,SAAA;aACH,CAAA,CAAA;YAAA,OA1BKa,SAAAA,UAAUA,CAAAa,EAAA,EAAA;MAAA,QAAA,OAAAZ,KAAA,CAAAa,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;MAAA,OAAA,CAAA;WA0Bf,EAAA,CAAA;UAMD,IAAMC,iBAAiB,GAAGA,MAAY;MAClC,MAAA,IAAI,CAAC1B,WAAW,CAACH,KAAK,EAAE;MAAA,QAAA,IAAA8B,qBAAA,CAAA;cACpB,CAAAA,qBAAA,GAAAxB,gBAAgB,CAACN,KAAK,MAAA8B,IAAAA,IAAAA,qBAAA,KAAtBA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,qBAAA,CAAwBC,KAAK,EAAE,CAAA;MACnC,OAAA;WACH,CAAA;UAKD,IAAMC,iBAAiB,GAAGA,MAAY;YAClClC,QAAQ,CAACE,KAAK,GAAG,EAAE,CAAA;YACnBC,QAAQ,CAACD,KAAK,GAAG,EAAE,CAAA;WACtB,CAAA;UAMD,IAAMiC,YAAY,GAAGA,MAAY;YAC7B,IAAI9B,WAAW,CAACH,KAAK,EAAE;MACnB,QAAA,OAAA;MACJ,OAAA;MAEA,MAAA,IAAIM,gBAAgB,CAACN,KAAK,IAAIM,gBAAgB,CAACN,KAAK,CAACkC,KAAK,IAAI5B,gBAAgB,CAACN,KAAK,CAACkC,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;cACnGtB,UAAU,CAACP,gBAAgB,CAACN,KAAK,CAACkC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;MAC/C,OAAA;WACH,CAAA;UAOD,IAAME,YAAY,GAAGA,MAAY;YAC7B,IAAIjC,WAAW,CAACH,KAAK,EAAE;MACnB,QAAA,OAAA;MACJ,OAAA;YAEAF,QAAQ,CAACE,KAAK,GAAG,EAAE,CAAA;YACnBC,QAAQ,CAACD,KAAK,GAAG,EAAE,CAAA;WACtB,CAAA;UAKDqC,KAAK,CAAC9B,eAAe,EAAE,MAAM;YACzB,IAAIA,eAAe,CAACP,KAAK,EAAE;cAGvBO,eAAe,CAACP,KAAK,CAACsC,gBAAgB,CAAC,UAAU,EAAEC,KAAK,IAAI;gBACxD,IAAI,CAACpC,WAAW,CAACH,KAAK,IAAIuC,KAAK,CAACC,YAAY,EAAE;kBAC1CD,KAAK,CAACE,eAAe,EAAE,CAAA;kBACvBF,KAAK,CAACG,cAAc,EAAE,CAAA;kBAEtB,IAAIH,KAAK,CAACC,YAAY,CAACG,KAAK,CAACR,MAAM,KAAK,CAAC,IAAII,KAAK,CAACC,YAAY,CAACG,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,KAAK,MAAM,EAAE;MACtFL,cAAAA,KAAK,CAACC,YAAY,CAACK,UAAU,GAAG,MAAM,CAAA;MAC1C,aAAC,MACI;MACDN,cAAAA,KAAK,CAACC,YAAY,CAACK,UAAU,GAAG,MAAM,CAAA;MAC1C,aAAA;MACJ,WAAA;MACJ,SAAC,CAAC,CAAA;cAIFtC,eAAe,CAACP,KAAK,CAACsC,gBAAgB,CAAC,MAAM,EAAEC,KAAK,IAAI;MACpD,UAAA,IAAI,CAACpC,WAAW,CAACH,KAAK,IAAIuC,KAAK,CAACC,YAAY,IAAID,KAAK,CAACC,YAAY,CAACN,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;kBACjFI,KAAK,CAACE,eAAe,EAAE,CAAA;kBACvBF,KAAK,CAACG,cAAc,EAAE,CAAA;kBAEtB7B,UAAU,CAAC0B,KAAK,CAACC,YAAY,CAACN,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;MAC3C,WAAA;MACJ,SAAC,CAAC,CAAA;MACN,OAAA;MACJ,KAAC,CAAC,CAAA;MAGFG,IAAAA,KAAK,CAAC,MAAM7D,KAAK,CAACC,UAAU,EAAE,MAAM;MAAA,MAAA,IAAAqE,sBAAA,EAAAC,kBAAA,EAAAC,sBAAA,EAAAC,kBAAA,CAAA;YAChCnD,QAAQ,CAACE,KAAK,GAAA8C,CAAAA,sBAAA,IAAAC,kBAAA,GAAGvE,KAAK,CAACC,UAAU,cAAAsE,kBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAhBA,kBAAA,CAAkB/C,KAAK,cAAA8C,sBAAA,KAAA,KAAA,CAAA,GAAAA,sBAAA,GAAI,EAAE,CAAA;YAC9C7C,QAAQ,CAACD,KAAK,GAAAgD,CAAAA,sBAAA,IAAAC,kBAAA,GAAGzE,KAAK,CAACC,UAAU,cAAAwE,kBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAhBA,kBAAA,CAAkB/C,IAAI,cAAA8C,sBAAA,KAAA,KAAA,CAAA,GAAAA,sBAAA,GAAI,EAAE,CAAA;MACjD,KAAC,CAAC,CAAA;MAGFX,IAAAA,KAAK,CAAC,CAACvC,QAAQ,EAAEG,QAAQ,CAAC,EAAE,MAAM;YAC9B,IAAIiD,QAAiC,GAAGC,SAAS,CAAA;YAEjD,IAAIrD,QAAQ,CAACE,KAAK,EAAE;MAChBkD,QAAAA,QAAQ,GAAG;gBACPlD,KAAK,EAAEF,QAAQ,CAACE,KAAK;gBACrBE,IAAI,EAAED,QAAQ,CAACD,KAAAA;eAClB,CAAA;MACL,OAAA;MAEAH,MAAAA,IAAI,CAAC,mBAAmB,EAAEqD,QAAQ,CAAC,CAAA;MACvC,KAAC,CAAC,CAAA;UAEF,OAAO;YACH3C,eAAe;YACfT,QAAQ;YACRQ,gBAAgB;YAChBL,QAAQ;YACRO,OAAO;YACPI,eAAe;YACfT,WAAW;YACX8B,YAAY;YACZG,YAAY;YACZJ,iBAAiB;YACjBH,iBAAiB;YACjBlB,cAAc;YACdN,kBAAkB;MAClBD,MAAAA,kBAAAA;WACH,CAAA;SACJ;QAEDgD,QAAQ,EAAA,+uDAAA;MAsCZ,CAAC,EAAC;;;;;;;;"}