{"version":3,"file":"gatewayControl.js","sources":["../../../Framework/Controls/gatewayControl.ts"],"sourcesContent":["ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { computed, defineComponent, PropType } from \"vue\";\r\nimport JavaScriptAnchor from \"./javaScriptAnchor\";\r\nimport ComponentFromUrl from \"./componentFromUrl\";\r\nimport { FormError } from \"@Obsidian/Utility/form\";\r\nimport { GatewayControlBag } from \"@Obsidian/ViewModels/Controls/gatewayControlBag\";\r\nimport { GatewayEmitStrings } from \"@Obsidian/Enums/Controls/gatewayEmitStrings\";\r\n\r\nexport default defineComponent({\r\n    name: \"GatewayControl\",\r\n\r\n    components: {\r\n        ComponentFromUrl,\r\n        JavaScriptAnchor\r\n    },\r\n\r\n    props: {\r\n        gatewayControlModel: {\r\n            type: Object as PropType<GatewayControlBag>,\r\n            required: true\r\n        },\r\n\r\n        amountToPay: {\r\n            type: Number as PropType<number>,\r\n            required: true\r\n        },\r\n\r\n        returnUrl: {\r\n            type: String as PropType<string>,\r\n            required: false\r\n        }\r\n    },\r\n\r\n    setup(props, { emit }) {\r\n        /** The URL that will be used to load the gateway component. */\r\n        const url = computed((): string => props.gatewayControlModel.fileUrl ?? \"\");\r\n\r\n        /** The settings that will be supplied to the gateway component. */\r\n        const settings = computed((): Record<string, unknown> => props.gatewayControlModel.settings as Record<string, unknown>);\r\n\r\n        /** The amount to be charged to the payment method by the gateway. */\r\n        const amountToPay = computed((): number => props.amountToPay);\r\n\r\n        /**\r\n         * Intercept the success event, so that local state can reflect it.\r\n         * @param token\r\n         */\r\n        const onSuccess = (token: string): void => {\r\n            emit(GatewayEmitStrings.Success, token);\r\n        };\r\n\r\n        /**\r\n         * This method handles validation updates.\r\n         *\r\n         * @param validationErrors The fields and error messages.\r\n         */\r\n        const onValidation = (validationErrors: FormError[]): void => {\r\n            emit(GatewayEmitStrings.Validation, validationErrors);\r\n        };\r\n\r\n        /**\r\n         * This method handles errors in the gateway component.\r\n         *\r\n         * @param message The error message to display.\r\n         */\r\n        const onError = (message: string): void => {\r\n            emit(GatewayEmitStrings.Error, message);\r\n        };\r\n\r\n        return {\r\n            url,\r\n            settings,\r\n            amountToPay,\r\n            returnUrl: props.returnUrl,\r\n            onSuccess,\r\n            onValidation,\r\n            onError\r\n        };\r\n    },\r\n    methods: {\r\n    },\r\n    template: `\r\n<div>\r\n    <ComponentFromUrl :url=\"url\"\r\n        :settings=\"settings\"\r\n        :amount=\"amountToPay\"\r\n        :returnUrl=\"returnUrl\"\r\n        @validation=\"onValidation\"\r\n        @success=\"onSuccess\"\r\n        @error=\"onError\" />\r\n</div>\r\n`\r\n});\r\n"],"names":["defineComponent","name","components","ComponentFromUrl","JavaScriptAnchor","props","gatewayControlModel","type","Object","required","amountToPay","Number","returnUrl","String","setup","_ref","emit","url","computed","_props$gatewayControl","fileUrl","settings","onSuccess","token","GatewayEmitStrings","Success","onValidation","validationErrors","Validation","onError","message","Error","methods","template"],"mappings":";;;;;;;;;;;;;;;;AAuBA,oDAAeA,eAAe,CAAC;YAC3BC,EAAAA,IAAI,EAAE,gBAAgB;YAEtBC,EAAAA,UAAU,EAAE;gBACRC,gBAAgB;YAChBC,IAAAA,gBAAAA;eACH;YAEDC,EAAAA,KAAK,EAAE;YACHC,IAAAA,mBAAmB,EAAE;YACjBC,MAAAA,IAAI,EAAEC,MAAqC;YAC3CC,MAAAA,QAAQ,EAAE,IAAA;iBACb;YAEDC,IAAAA,WAAW,EAAE;YACTH,MAAAA,IAAI,EAAEI,MAA0B;YAChCF,MAAAA,QAAQ,EAAE,IAAA;iBACb;YAEDG,IAAAA,SAAS,EAAE;YACPL,MAAAA,IAAI,EAAEM,MAA0B;YAChCJ,MAAAA,QAAQ,EAAE,KAAA;YACd,KAAA;eACH;YAEDK,EAAAA,KAAKA,CAACT,KAAK,EAAAU,IAAA,EAAY;YAAA,IAAA,IAARC,IAAI,GAAAD,IAAA,CAAJC,IAAI,CAAA;gBAEf,IAAMC,GAAG,GAAGC,QAAQ,CAAC,MAAA;YAAA,MAAA,IAAAC,qBAAA,CAAA;YAAA,MAAA,OAAA,CAAAA,qBAAA,GAAcd,KAAK,CAACC,mBAAmB,CAACc,OAAO,MAAA,IAAA,IAAAD,qBAAA,KAAA,KAAA,CAAA,GAAAA,qBAAA,GAAI,EAAE,CAAA;iBAAC,CAAA,CAAA;gBAG3E,IAAME,QAAQ,GAAGH,QAAQ,CAAC,MAA+Bb,KAAK,CAACC,mBAAmB,CAACe,QAAmC,CAAC,CAAA;gBAGvH,IAAMX,WAAW,GAAGQ,QAAQ,CAAC,MAAcb,KAAK,CAACK,WAAW,CAAC,CAAA;gBAM7D,IAAMY,SAAS,GAAIC,KAAa,IAAW;YACvCP,MAAAA,IAAI,CAACQ,kBAAkB,CAACC,OAAO,EAAEF,KAAK,CAAC,CAAA;iBAC1C,CAAA;gBAOD,IAAMG,YAAY,GAAIC,gBAA6B,IAAW;YAC1DX,MAAAA,IAAI,CAACQ,kBAAkB,CAACI,UAAU,EAAED,gBAAgB,CAAC,CAAA;iBACxD,CAAA;gBAOD,IAAME,OAAO,GAAIC,OAAe,IAAW;YACvCd,MAAAA,IAAI,CAACQ,kBAAkB,CAACO,KAAK,EAAED,OAAO,CAAC,CAAA;iBAC1C,CAAA;gBAED,OAAO;kBACHb,GAAG;kBACHI,QAAQ;kBACRX,WAAW;kBACXE,SAAS,EAAEP,KAAK,CAACO,SAAS;kBAC1BU,SAAS;kBACTI,YAAY;YACZG,MAAAA,OAAAA;iBACH,CAAA;eACJ;cACDG,OAAO,EAAE,EACR;cACDC,QAAQ,EAAA,+PAAA;YAWZ,CAAC,EAAC;;;;;;;;"}