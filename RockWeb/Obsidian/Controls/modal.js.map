{"version":3,"file":"modal.js","sources":["../../../Framework/Controls/modal.ts"],"sourcesContent":["// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { defineComponent, onBeforeUnmount, PropType, ref, watch } from \"vue\";\r\nimport RockForm from \"./rockForm\";\r\nimport RockButton from \"./rockButton\";\r\nimport RockValidation from \"./rockValidation\";\r\nimport { trackModalState } from \"@Obsidian/Utility/page\";\r\nimport { FormError } from \"@Obsidian/Utility/form\";\r\n\r\nexport default defineComponent({\r\n    name: \"Modal\",\r\n\r\n    components: {\r\n        RockButton,\r\n        RockForm,\r\n        RockValidation\r\n    },\r\n\r\n    props: {\r\n        modelValue: {\r\n            type: Boolean as PropType<boolean>,\r\n            required: true\r\n        },\r\n\r\n        title: {\r\n            type: String as PropType<string>,\r\n            default: \"\"\r\n        },\r\n\r\n        subtitle: {\r\n            type: String as PropType<string>,\r\n            default: \"\"\r\n        },\r\n\r\n        cancelText: {\r\n            type: String as PropType<string>,\r\n            default: \"Cancel\"\r\n        },\r\n\r\n        saveText: {\r\n            type: String as PropType<string>,\r\n            default: \"\"\r\n        }\r\n    },\r\n\r\n    emits: {\r\n        \"update:modelValue\": (_value: boolean) => true,\r\n        save: () => true\r\n    },\r\n\r\n    setup(props, { emit }) {\r\n        // #region Values\r\n\r\n        const internalModalVisible = ref(props.modelValue);\r\n        const container = ref(document.fullscreenElement ?? document.body);\r\n        const validationErrors = ref<FormError[]>([]);\r\n\r\n        /** Used to determine if shaking should be currently performed. */\r\n        const isShaking = ref(false);\r\n\r\n        // These values are used to automatically resize the modal if an absolute\r\n        // popup like a DataView picker is used inside the modal body.\r\n        const modalBodyElement = ref<HTMLElement | null>(null);\r\n        const modalBodyPaddingElement = ref<HTMLElement | null>(null);\r\n        let legacyOverflowTimer: NodeJS.Timeout | undefined;\r\n        const overflowMutationObserver: MutationObserver | undefined = MutationObserver ? new MutationObserver(onOverflowMutation) : undefined;\r\n        const overflowResizeObserver: ResizeObserver | undefined = ResizeObserver ? new ResizeObserver(onOverflowResize) : undefined;\r\n\r\n        // #endregion\r\n\r\n        // #region Functions\r\n\r\n        /**\r\n         * Adjusts the height of the modal to fit the content. This handles\r\n         * cases where something like a DataViewPicker is opened up that has\r\n         * an inner popup.\r\n         */\r\n        function adjustOverflowPadding(): void {\r\n            if (modalBodyElement.value && modalBodyPaddingElement.value) {\r\n                if (modalBodyElement.value.scrollHeight !== modalBodyElement.value.clientHeight) {\r\n                    let existingPadding = 0;\r\n                    try {\r\n                        existingPadding = parseFloat(window.getComputedStyle(modalBodyPaddingElement.value, null).getPropertyValue(\"padding-bottom\"));\r\n                    }\r\n                    catch {\r\n                        existingPadding = 0;\r\n                    }\r\n\r\n                    const totalPadding = modalBodyElement.value.scrollHeight - modalBodyElement.value.clientHeight;\r\n\r\n                    if (existingPadding !== totalPadding) {\r\n                        modalBodyPaddingElement.value.style.paddingBottom = `${totalPadding}px`;\r\n                    }\r\n                }\r\n                else if (modalBodyPaddingElement.value.style.paddingBottom !== \"\") {\r\n                    modalBodyPaddingElement.value.style.paddingBottom = \"\";\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Timer callback when the observers are not supported by the browser.\r\n         * Check the overflow padding to see if it needs to be adjusted.\r\n         */\r\n        function detectLegacyOverflow(): void {\r\n            adjustOverflowPadding();\r\n            legacyOverflowTimer = setTimeout(detectLegacyOverflow, 250);\r\n        }\r\n\r\n        // #endregion\r\n\r\n        // #region Event Handlers\r\n\r\n        /**\r\n         * Event handler for when one of the close buttons is clicked.\r\n         */\r\n        const onClose = (): void => {\r\n            internalModalVisible.value = false;\r\n        };\r\n\r\n        /**\r\n         * Event handler for when the scrollable is clicked.\r\n         */\r\n        const onScrollableClick = (): void => {\r\n            // If we aren't already shaking, start shaking to let the user know\r\n            // they are doing something not allowed.\r\n            if (!isShaking.value) {\r\n                isShaking.value = true;\r\n                setTimeout(() => isShaking.value = false, 1000);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Event handler for when the form has been submitted.\r\n         */\r\n        const onSubmit = (): void => {\r\n            emit(\"save\");\r\n        };\r\n\r\n        /**\r\n         * Event handler for when the visible validation errors have changed.\r\n         * This should trigger us showing these errors in the modal.\r\n         *\r\n         * @param errors The errors that should be displayed.\r\n         */\r\n        const onVisibleValidationChanged = (errors: FormError[]): void => {\r\n            validationErrors.value = errors;\r\n        };\r\n\r\n        /**\r\n         * Called when the mutation observer has noticed that the DOM inside\r\n         * our modal has been modified. Update the resize observer to watch\r\n         * those nodes for size changes.\r\n         *\r\n         * @param mutations The mutations that happened since we were last called.\r\n         */\r\n        function onOverflowMutation(mutations: MutationRecord[]): void {\r\n            for (const mutation of mutations) {\r\n                mutation.addedNodes.forEach(node => {\r\n                    if (node instanceof Element) {\r\n                        overflowResizeObserver?.observe(node);\r\n                    }\r\n                });\r\n\r\n                mutation.removedNodes.forEach(node => {\r\n                    if (node instanceof Element) {\r\n                        overflowResizeObserver?.unobserve(node);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Called when the resize observer has noticed that the size of any child\r\n         * nodes have changed. Check if we need to adjust our padding.\r\n         */\r\n        function onOverflowResize(): void {\r\n            adjustOverflowPadding();\r\n        }\r\n\r\n        // #endregion\r\n\r\n        // Watch for changes in our visiblity.\r\n        watch(() => props.modelValue, () => {\r\n            if (props.modelValue) {\r\n                container.value = document.fullscreenElement || document.body;\r\n\r\n                // Clear any old validation errors. They will be updated when\r\n                // the submit button is next clicked.\r\n                validationErrors.value = [];\r\n            }\r\n\r\n            internalModalVisible.value = props.modelValue;\r\n        });\r\n\r\n        watch(internalModalVisible, () => {\r\n            trackModalState(internalModalVisible.value);\r\n            emit(\"update:modelValue\", internalModalVisible.value);\r\n        });\r\n\r\n        // Watch for changes to the body element reference. When it becomes\r\n        // available start observing for changes.\r\n        watch(modalBodyElement, () => {\r\n            if (overflowMutationObserver && overflowResizeObserver) {\r\n                if (modalBodyElement.value) {\r\n                    overflowMutationObserver.observe(modalBodyElement.value, {\r\n                        subtree: true,\r\n                        childList: true\r\n                    });\r\n\r\n                    // Start observing initial children.\r\n                    modalBodyElement.value.querySelectorAll(\"*\").forEach(node => {\r\n                        if (node instanceof Element) {\r\n                            overflowResizeObserver.observe(node);\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    overflowMutationObserver?.disconnect();\r\n                    overflowResizeObserver?.disconnect();\r\n                }\r\n            }\r\n            else {\r\n                if (modalBodyElement.value) {\r\n                    legacyOverflowTimer = setTimeout(detectLegacyOverflow, 250);\r\n                }\r\n                else if (legacyOverflowTimer) {\r\n                    clearTimeout(legacyOverflowTimer);\r\n                    legacyOverflowTimer = undefined;\r\n                }\r\n            }\r\n        });\r\n\r\n        onBeforeUnmount(() => {\r\n            if (internalModalVisible.value) {\r\n                trackModalState(false);\r\n            }\r\n\r\n            if (overflowMutationObserver && overflowResizeObserver) {\r\n                overflowMutationObserver.disconnect();\r\n                overflowResizeObserver.disconnect();\r\n            }\r\n\r\n            if (legacyOverflowTimer) {\r\n                clearTimeout(legacyOverflowTimer);\r\n                legacyOverflowTimer = undefined;\r\n            }\r\n        });\r\n\r\n        // If we are starting visible, then update the modal tracking.\r\n        if (internalModalVisible.value) {\r\n            trackModalState(true);\r\n        }\r\n\r\n        return {\r\n            container,\r\n            internalModalVisible,\r\n            isShaking,\r\n            modalBodyElement,\r\n            modalBodyPaddingElement,\r\n            onClose,\r\n            onScrollableClick,\r\n            onSubmit,\r\n            onVisibleValidationChanged,\r\n            validationErrors\r\n        };\r\n    },\r\n\r\n    template: `\r\n<teleport :to=\"container\" v-if=\"modelValue\">\r\n    <div>\r\n        <div class=\"modal-backdrop\" style=\"z-index: 1050;\"></div>\r\n\r\n        <div @click.stop=\"onScrollableClick\" class=\"modal-scrollable\" style=\"z-index: 1050;\">\r\n            <div @click.stop\r\n                class=\"modal container modal-content rock-modal rock-modal-frame modal-overflow\"\r\n                :class=\"{'animated shake': isShaking}\"\r\n                aria-hidden=\"false\"\r\n                tabindex=\"-1\"\r\n                role=\"dialog\"\r\n                style=\"display: block; margin-top: 0px;\">\r\n                <div class=\"modal-header\">\r\n                    <button @click=\"onClose\" class=\"close\" aria-hidden=\"true\" type=\"button\">&times;</button>\r\n                    <template v-if=\"title\">\r\n                        <h3 class=\"modal-title\">{{ title }}</h3>\r\n                        <small v-if=\"subtitle\">{{ subtitle }}</small>\r\n                    </template>\r\n                    <slot v-else name=\"header\" />\r\n                </div>\r\n\r\n                <RockForm @submit=\"onSubmit\" hideErrors @visibleValidationChanged=\"onVisibleValidationChanged\">\r\n                    <div class=\"modal-body\">\r\n                        <RockValidation :errors=\"validationErrors\" />\r\n\r\n                        <div ref=\"modalBodyElement\">\r\n                        <slot />\r\n                        </div>\r\n\r\n                        <div ref=\"modalBodyPaddingElement\" style=\"transition: 0.15s padding-bottom\"></div>\r\n                    </div>\r\n\r\n                    <div class=\"modal-footer\">\r\n                        <RockButton @click=\"onClose\" btnType=\"link\">{{ cancelText }}</RockButton>\r\n                        <RockButton v-if=\"saveText\" type=\"submit\" btnType=\"primary\">{{ saveText }}</RockButton>\r\n                        <slot name=\"customButtons\" />\r\n                    </div>\r\n                </RockForm>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</teleport>\r\n`\r\n});\r\n"],"names":["defineComponent","name","components","RockButton","RockForm","RockValidation","props","modelValue","type","Boolean","required","title","String","default","subtitle","cancelText","saveText","emits","_value","save","setup","_ref","_document$fullscreenE","emit","internalModalVisible","ref","container","document","fullscreenElement","body","validationErrors","isShaking","modalBodyElement","modalBodyPaddingElement","legacyOverflowTimer","overflowMutationObserver","MutationObserver","onOverflowMutation","undefined","overflowResizeObserver","ResizeObserver","onOverflowResize","adjustOverflowPadding","value","scrollHeight","clientHeight","existingPadding","parseFloat","window","getComputedStyle","getPropertyValue","_unused","totalPadding","style","paddingBottom","concat","detectLegacyOverflow","setTimeout","onClose","onScrollableClick","onSubmit","onVisibleValidationChanged","errors","mutations","_iterator","_createForOfIteratorHelper","_step","s","n","done","mutation","addedNodes","forEach","node","Element","observe","removedNodes","unobserve","err","e","f","watch","trackModalState","subtree","childList","querySelectorAll","disconnect","clearTimeout","onBeforeUnmount","template"],"mappings":"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"}