{"version":3,"file":"rockField.js","sources":["../../../Framework/Controls/rockField.ts"],"sourcesContent":["ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { getFieldType } from \"@Obsidian/Utility/fieldTypes\";\r\nimport { computed, defineComponent, PropType, provide } from \"vue\";\r\nimport { PublicAttributeBag } from \"@Obsidian/ViewModels/Utility/publicAttributeBag\";\r\nimport { FieldType } from \"@Obsidian/SystemGuids/fieldType\";\r\n\r\nconst textField = getFieldType(FieldType.Text);\r\n\r\nexport default defineComponent({\r\n    name: \"RockField\",\r\n    props: {\r\n        modelValue: {\r\n            type: String as PropType<string>,\r\n            required: false\r\n        },\r\n        attribute: {\r\n            type: Object as PropType<PublicAttributeBag>,\r\n            required: true\r\n        },\r\n        showEmptyValue: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n        isEditMode: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n        showLabel: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: true\r\n        },\r\n        isCondensed: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        }\r\n    },\r\n    setup(props, { emit }) {\r\n        const field = computed(() => {\r\n            const fieldType = getFieldType(props.attribute.fieldTypeGuid ?? \"\");\r\n\r\n            return fieldType ?? textField;\r\n        });\r\n\r\n        /** True if the read-only value should be displayed. */\r\n        const showValue = computed(() => props.showEmptyValue || field.value?.getTextValue(props.modelValue ?? \"\", props.attribute.configurationValues ?? {}) !== \"\");\r\n\r\n        /** True if this field is required and must be filled in. */\r\n        const isRequired = computed(() => props.attribute.isRequired);\r\n\r\n        /** Indicates to the editor component if this field is required or not. */\r\n        const rules = computed(() => isRequired.value ? \"required\" : \"\");\r\n\r\n        /** True if we are currently in edit mode. */\r\n        const isEditMode = computed(() => props.isEditMode);\r\n\r\n        /** The label to display above the value or editor. */\r\n        const label = computed(() => props.attribute.name);\r\n\r\n        /** The help text to display in the help bubble when in edit mode. */\r\n        const helpText = computed(() => props.attribute.description);\r\n\r\n        /** The read-only component to use to display the value. */\r\n        const valueComponent = computed(() => {\r\n            // This is here to cause the component to update reactively if\r\n            // the value changes.\r\n            // Commented out on 3/14/2022 by DSH. If no issues show up it can be removed\r\n            // at a later point in time (maybe 6 months later). I do not believe this\r\n            // is needed anymore after the refactoring that was performed.\r\n            //const _ignored = props.attributeValue.value;\r\n\r\n            return props.isCondensed\r\n                ? field.value?.getCondensedFormattedComponent()\r\n                : field.value?.getFormattedComponent();\r\n        });\r\n\r\n        /** The edit component to use to display the value. */\r\n        const editComponent = computed(() => field.value?.getEditComponent());\r\n\r\n        /** The value to display or edit. */\r\n        const value = computed({\r\n            get: () => props.modelValue || \"\",\r\n            set(newValue) {\r\n                emit(\"update:modelValue\", newValue);\r\n            }\r\n        });\r\n\r\n        /** The configuration values for the editor component. */\r\n        const configurationValues = computed(() => {\r\n            return props.attribute.configurationValues ?? {};\r\n        });\r\n\r\n        provide(\"isRequired\", isRequired);\r\n\r\n        return {\r\n            label,\r\n            showValue,\r\n            valueComponent,\r\n            rules,\r\n            isEditMode,\r\n            editComponent,\r\n            value,\r\n            helpText,\r\n            configurationValues\r\n        };\r\n    },\r\n    template: `\r\n<div v-if=\"!isEditMode\">\r\n    <template v-if=\"showLabel\">\r\n        <div v-if=\"showValue\" class=\"form-group static-control\">\r\n            <label class=\"control-label\">\r\n                {{ label }}\r\n            </label>\r\n            <div class=\"control-wrapper\">\r\n                <div class=\"form-control-static\">\r\n                    <component :is=\"valueComponent\" :modelValue=\"value\" :configurationValues=\"configurationValues\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </template>\r\n    <component v-else :is=\"valueComponent\" :modelValue=\"value\" :configurationValues=\"configurationValues\" />\r\n</div>\r\n<div v-else>\r\n    <component :is=\"editComponent\"\r\n        v-model=\"value\"\r\n        :label=\"label\"\r\n        :help=\"helpText\"\r\n        :configurationValues=\"configurationValues\"\r\n        :rules=\"rules\" />\r\n</div>`\r\n});\r\n"],"names":["textField","getFieldType","FieldType","Text","defineComponent","name","props","modelValue","type","String","required","attribute","Object","showEmptyValue","Boolean","default","isEditMode","showLabel","isCondensed","setup","_ref","emit","field","computed","_props$attribute$fiel","fieldType","fieldTypeGuid","showValue","_field$value","_props$modelValue","_props$attribute$conf","value","getTextValue","configurationValues","isRequired","rules","label","helpText","description","valueComponent","_field$value2","_field$value3","getCondensedFormattedComponent","getFormattedComponent","editComponent","_field$value4","getEditComponent","get","set","newValue","_props$attribute$conf2","provide","template"],"mappings":";;;;;;;;;;;;;;;YAqBA,IAAMA,SAAS,GAAGC,YAAY,CAACC,SAAS,CAACC,IAAI,CAAC,CAAA;AAE9C,+CAAeC,eAAe,CAAC;YAC3BC,EAAAA,IAAI,EAAE,WAAW;YACjBC,EAAAA,KAAK,EAAE;YACHC,IAAAA,UAAU,EAAE;YACRC,MAAAA,IAAI,EAAEC,MAA0B;YAChCC,MAAAA,QAAQ,EAAE,KAAA;iBACb;YACDC,IAAAA,SAAS,EAAE;YACPH,MAAAA,IAAI,EAAEI,MAAsC;YAC5CF,MAAAA,QAAQ,EAAE,IAAA;iBACb;YACDG,IAAAA,cAAc,EAAE;YACZL,MAAAA,IAAI,EAAEM,OAA4B;YAClCC,MAAAA,OAAO,EAAE,KAAA;iBACZ;YACDC,IAAAA,UAAU,EAAE;YACRR,MAAAA,IAAI,EAAEM,OAA4B;YAClCC,MAAAA,OAAO,EAAE,KAAA;iBACZ;YACDE,IAAAA,SAAS,EAAE;YACPT,MAAAA,IAAI,EAAEM,OAA4B;YAClCC,MAAAA,OAAO,EAAE,IAAA;iBACZ;YACDG,IAAAA,WAAW,EAAE;YACTV,MAAAA,IAAI,EAAEM,OAA4B;YAClCC,MAAAA,OAAO,EAAE,KAAA;YACb,KAAA;eACH;YACDI,EAAAA,KAAKA,CAACb,KAAK,EAAAc,IAAA,EAAY;YAAA,IAAA,IAARC,IAAI,GAAAD,IAAA,CAAJC,IAAI,CAAA;YACf,IAAA,IAAMC,KAAK,GAAGC,QAAQ,CAAC,MAAM;YAAA,MAAA,IAAAC,qBAAA,CAAA;YACzB,MAAA,IAAMC,SAAS,GAAGxB,YAAY,CAAAuB,CAAAA,qBAAA,GAAClB,KAAK,CAACK,SAAS,CAACe,aAAa,MAAAF,IAAAA,IAAAA,qBAAA,cAAAA,qBAAA,GAAI,EAAE,CAAC,CAAA;YAEnE,MAAA,OAAOC,SAAS,KAATA,IAAAA,IAAAA,SAAS,KAATA,KAAAA,CAAAA,GAAAA,SAAS,GAAIzB,SAAS,CAAA;YACjC,KAAC,CAAC,CAAA;gBAGF,IAAM2B,SAAS,GAAGJ,QAAQ,CAAC,MAAA;YAAA,MAAA,IAAAK,YAAA,EAAAC,iBAAA,EAAAC,qBAAA,CAAA;kBAAA,OAAMxB,KAAK,CAACO,cAAc,IAAI,EAAAe,YAAA,GAAAN,KAAK,CAACS,KAAK,cAAAH,YAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAXA,YAAA,CAAaI,YAAY,EAAAH,iBAAA,GAACvB,KAAK,CAACC,UAAU,cAAAsB,iBAAA,KAAA,KAAA,CAAA,GAAAA,iBAAA,GAAI,EAAE,GAAAC,qBAAA,GAAExB,KAAK,CAACK,SAAS,CAACsB,mBAAmB,MAAA,IAAA,IAAAH,qBAAA,KAAAA,KAAAA,CAAAA,GAAAA,qBAAA,GAAI,EAAE,CAAC,MAAK,EAAE,CAAA;iBAAC,CAAA,CAAA;gBAG7J,IAAMI,UAAU,GAAGX,QAAQ,CAAC,MAAMjB,KAAK,CAACK,SAAS,CAACuB,UAAU,CAAC,CAAA;YAG7D,IAAA,IAAMC,KAAK,GAAGZ,QAAQ,CAAC,MAAMW,UAAU,CAACH,KAAK,GAAG,UAAU,GAAG,EAAE,CAAC,CAAA;gBAGhE,IAAMf,UAAU,GAAGO,QAAQ,CAAC,MAAMjB,KAAK,CAACU,UAAU,CAAC,CAAA;gBAGnD,IAAMoB,KAAK,GAAGb,QAAQ,CAAC,MAAMjB,KAAK,CAACK,SAAS,CAACN,IAAI,CAAC,CAAA;gBAGlD,IAAMgC,QAAQ,GAAGd,QAAQ,CAAC,MAAMjB,KAAK,CAACK,SAAS,CAAC2B,WAAW,CAAC,CAAA;YAG5D,IAAA,IAAMC,cAAc,GAAGhB,QAAQ,CAAC,MAAM;kBAAA,IAAAiB,aAAA,EAAAC,aAAA,CAAA;YAQlC,MAAA,OAAOnC,KAAK,CAACY,WAAW,GAAA,CAAAsB,aAAA,GAClBlB,KAAK,CAACS,KAAK,MAAA,IAAA,IAAAS,aAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAXA,aAAA,CAAaE,8BAA8B,EAAE,GAAAD,CAAAA,aAAA,GAC7CnB,KAAK,CAACS,KAAK,MAAAU,IAAAA,IAAAA,aAAA,KAAXA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,aAAA,CAAaE,qBAAqB,EAAE,CAAA;YAC9C,KAAC,CAAC,CAAA;gBAGF,IAAMC,aAAa,GAAGrB,QAAQ,CAAC,MAAA;YAAA,MAAA,IAAAsB,aAAA,CAAA;kBAAA,OAAAA,CAAAA,aAAA,GAAMvB,KAAK,CAACS,KAAK,MAAAc,IAAAA,IAAAA,aAAA,KAAXA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,aAAA,CAAaC,gBAAgB,EAAE,CAAA;iBAAC,CAAA,CAAA;gBAGrE,IAAMf,KAAK,GAAGR,QAAQ,CAAC;YACnBwB,MAAAA,GAAG,EAAEA,MAAMzC,KAAK,CAACC,UAAU,IAAI,EAAE;kBACjCyC,GAAGA,CAACC,QAAQ,EAAE;YACV5B,QAAAA,IAAI,CAAC,mBAAmB,EAAE4B,QAAQ,CAAC,CAAA;YACvC,OAAA;YACJ,KAAC,CAAC,CAAA;YAGF,IAAA,IAAMhB,mBAAmB,GAAGV,QAAQ,CAAC,MAAM;YAAA,MAAA,IAAA2B,sBAAA,CAAA;YACvC,MAAA,OAAA,CAAAA,sBAAA,GAAO5C,KAAK,CAACK,SAAS,CAACsB,mBAAmB,MAAA,IAAA,IAAAiB,sBAAA,KAAA,KAAA,CAAA,GAAAA,sBAAA,GAAI,EAAE,CAAA;YACpD,KAAC,CAAC,CAAA;YAEFC,IAAAA,OAAO,CAAC,YAAY,EAAEjB,UAAU,CAAC,CAAA;gBAEjC,OAAO;kBACHE,KAAK;kBACLT,SAAS;kBACTY,cAAc;kBACdJ,KAAK;kBACLnB,UAAU;kBACV4B,aAAa;kBACbb,KAAK;kBACLM,QAAQ;YACRJ,MAAAA,mBAAAA;iBACH,CAAA;eACJ;cACDmB,QAAQ,EAAA,+2BAAA;YAwBZ,CAAC,EAAC;;;;;;;;"}