{"version":3,"file":"nmiGatewayControl.js","sources":["../../../Framework/Controls/nmiGatewayControl.ts"],"sourcesContent":["// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\nimport { computed, defineComponent, onMounted, PropType, ref } from \"vue\";\r\nimport LoadingIndicator from \"./loadingIndicator\";\r\nimport { newGuid } from \"@Obsidian/Utility/guid\";\r\nimport { onSubmitPayment } from \"@Obsidian/Core/Controls/financialGateway\";\r\nimport { GatewayEmitStrings } from \"@Obsidian/Enums/Controls/gatewayEmitStrings\";\r\nimport { CollectJSOptions, InputField, ResponseCallback, TimeoutCallback, TokenResponse, ValidationCallback } from \"./nmiGatewayControlTypes\";\r\nimport { FormError } from \"@Obsidian/Utility/form\";\r\n\r\nconst enum NMIPaymentType {\r\n    Card = 0,\r\n\r\n    BankAccount = 1\r\n}\r\n\r\n/**\r\n * The settings we expect to receive from the web server.\r\n */\r\ntype Settings = {\r\n    /** The payment types that are enabled for use. */\r\n    enabledPaymentTypes?: NMIPaymentType[];\r\n\r\n    /** The configured key used to initialize the tokenzier. */\r\n    tokenizationKey?: string;\r\n};\r\n\r\n/**\r\n * The field validation state for the various input fields.\r\n */\r\ntype ValidationField = {\r\n    /** The name of the field. */\r\n    field: string;\r\n\r\n    /** true if the field is valid; otherwise false. */\r\n    status: boolean;\r\n\r\n    /** If status if false this will contain the error message; otherwise an empty string. */\r\n    message: string;\r\n};\r\n\r\nconst standardStyling = `\r\n.nmi-payment-inputs .iframe-input {\r\n  position: relative;\r\n  -ms-flex: 0 0 100%;\r\n  flex: 0 0 100%;\r\n  max-width: 100%;\r\n  height: 42px;\r\n  height: calc(var(--input-height-base) + 5px);\r\n  margin-bottom: 10px;\r\n  padding: 0 3px;\r\n  overflow: hidden;\r\n}\r\n.nmi-payment-inputs .iframe-input::before {\r\n  position: absolute;\r\n  top: 0;\r\n  z-index: -1;\r\n  width: calc(100% - 6px);\r\n  height: 38px;\r\n  height: var(--input-height-base);\r\n  padding: 6px 12px;\r\n  padding: var(--input-padding);\r\n  margin: 0;\r\n  content: \" \";\r\n  background: #f3f3f3;\r\n  background: var(--input-bg-disabled);\r\n  border: 1px solid #d8d8d8;\r\n  border-color: var(--input-border);\r\n  border-radius: var(--input-border-radius);\r\n}\r\n.nmi-payment-inputs .iframe-input .CollectJSInlineIframe {\r\n  height: calc(var(--input-height-base) + 5px) !important;\r\n  height: 42px !important;\r\n}\r\n.nmi-payment-inputs .break {\r\n  -webkit-box-flex: 1;\r\n  -ms-flex: 1 1 100%;\r\n  flex: 1 1 100%;\r\n}\r\n.nmi-payment-inputs .gateway-payment-container {\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -ms-flex-wrap: wrap;\r\n  flex-wrap: wrap;\r\n  margin: 0 -3px;\r\n  overflow-x: hidden;\r\n}\r\n.nmi-payment-inputs .credit-card-input {\r\n  position: relative;\r\n  -webkit-box-flex: 1;\r\n  -ms-flex: 1 1 0;\r\n  flex: 1 1 0;\r\n  min-width: 200px;\r\n}\r\n.nmi-payment-inputs .check-account-number-input,\r\n.nmi-payment-inputs .check-routing-number-input {\r\n  -ms-flex: 0 0 100%;\r\n  flex: 0 0 100%;\r\n  max-width: 100%;\r\n}\r\n.nmi-payment-inputs .credit-card-exp-input,\r\n.nmi-payment-inputs .credit-card-cvv-input {\r\n  -ms-flex: 1 1 50%;\r\n  flex: 1 1 50%;\r\n  min-width: 50px;\r\n}\r\n@media (min-width: 500px) {\r\n  .nmi-payment-inputs .break {\r\n    -webkit-box-flex: 0;\r\n    -ms-flex: 0 0 0%;\r\n    flex: 0 0 0%;\r\n  }\r\n  .nmi-payment-inputs .check-account-number-input,\r\n  .nmi-payment-inputs .check-routing-number-input {\r\n    -ms-flex: 0 0 50%;\r\n    flex: 0 0 50%;\r\n    max-width: 50%;\r\n  }\r\n  .nmi-payment-inputs .credit-card-exp-input,\r\n  .nmi-payment-inputs .credit-card-cvv-input {\r\n    -webkit-box-flex: 0;\r\n    -ms-flex: 0 0 auto;\r\n    flex: 0 0 auto;\r\n    max-width: 100px;\r\n  }\r\n}\r\n`;\r\n\r\n/**\r\n * Ensures the CollectJS script is loaded into the browser.\r\n *\r\n * @param tokenizationKey The tokenization key that will be used to initialize the script.\r\n */\r\nasync function loadCollectJSAsync(tokenizationKey: string): Promise<boolean> {\r\n    if (window.CollectJS === undefined) {\r\n        const script = document.createElement(\"script\");\r\n        script.type = \"text/javascript\";\r\n        script.src = \"https://secure.nmi.com/token/Collect.js\";\r\n        script.setAttribute(\"data-tokenization-key\", tokenizationKey);\r\n        script.setAttribute(\"data-variant\", \"inline\");\r\n        document.getElementsByTagName(\"head\")[0].appendChild(script);\r\n\r\n        try {\r\n            await new Promise<void>((resolve, reject) => {\r\n                script.addEventListener(\"load\", () => resolve());\r\n                script.addEventListener(\"error\", () => reject());\r\n            });\r\n        }\r\n        catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return window.CollectJS !== undefined;\r\n}\r\n\r\n/**\r\n * Ensures the CollectJS script is loaded into the browser.\r\n *\r\n * @param tokenizationKey The tokenization key that will be used to initialize the script.\r\n */\r\nasync function loadStandardStyleTagAsync(): Promise<void> {\r\n    const style = document.createElement(\"style\");\r\n    style.type = \"text/css\";\r\n    style.innerText = standardStyling;\r\n\r\n    await new Promise<void>((resolve, reject) => {\r\n        style.addEventListener(\"load\", () => resolve());\r\n        style.addEventListener(\"error\", () => reject());\r\n\r\n        document.getElementsByTagName(\"head\")[0].appendChild(style);\r\n    });\r\n}\r\n\r\n/**\r\n * Get the standard CollectJS options. This is primarily all the custom CSS\r\n * and control references.\r\n *\r\n * @param controlId The identifier of the parent control that contains all the input fields.\r\n * @param inputStyleHook The element that will be used for standard styling information.\r\n * @param inputInvalidStyleHook The element that will be used for invalid styling information.\r\n *\r\n * @returns An object that contains the standard CollectJS options.\r\n */\r\nfunction getCollectJSOptions(controlId: string, inputStyleHook: HTMLElement | null, inputInvalidStyleHook: HTMLElement | null): CollectJSOptions {\r\n    // Populate our custom CSS to make the fields mostly match standard Rock\r\n    // input fields.\r\n    const customCss: Record<string, string> = {\r\n        \"margin-bottom\": \"5px\",\r\n        \"margin-top\": \"0\"\r\n    };\r\n    if (inputStyleHook) {\r\n        const inputStyles = getComputedStyle(inputStyleHook);\r\n\r\n        customCss[\"color\"] = inputStyles.color;\r\n        customCss[\"border-bottom-color\"] = inputStyles.borderBottomColor;\r\n        customCss[\"border-bottom-left-radius\"] = inputStyles.borderBottomLeftRadius;\r\n        customCss[\"border-bottom-right-radius\"] = inputStyles.borderBottomRightRadius;\r\n        customCss[\"border-bottom-style\"] = inputStyles.borderBottomStyle;\r\n        customCss[\"border-bottom-width\"] = inputStyles.borderBottomWidth;\r\n        customCss[\"border-left-color\"] = inputStyles.borderLeftColor;\r\n        customCss[\"border-left-style\"] = inputStyles.borderLeftStyle;\r\n        customCss[\"border-left-width\"] = inputStyles.borderLeftWidth;\r\n        customCss[\"border-right-color\"] = inputStyles.borderRightColor;\r\n        customCss[\"border-right-style\"] = inputStyles.borderRightStyle;\r\n        customCss[\"border-right-width\"] = inputStyles.borderRightWidth;\r\n        customCss[\"border-top-color\"] = inputStyles.borderTopColor;\r\n        customCss[\"border-top-left-radius\"] = inputStyles.borderTopLeftRadius;\r\n        customCss[\"border-top-right-radius\"] = inputStyles.borderTopRightRadius;\r\n        customCss[\"border-top-style\"] = inputStyles.borderTopStyle;\r\n        customCss[\"border-top-width\"] = inputStyles.borderTopWidth;\r\n        customCss[\"border-width\"] = inputStyles.borderWidth;\r\n        customCss[\"border-style\"] = inputStyles.borderStyle;\r\n        customCss[\"border-radius\"] = inputStyles.borderRadius;\r\n        customCss[\"border-color\"] = inputStyles.borderColor;\r\n        customCss[\"background-color\"] = inputStyles.backgroundColor;\r\n        customCss[\"box-shadow\"] = inputStyles.boxShadow;\r\n        customCss[\"padding\"] = inputStyles.padding;\r\n        customCss[\"font-size\"] = inputStyles.fontSize;\r\n        customCss[\"height\"] = inputStyles.height;\r\n        customCss[\"font-family\"] = inputStyles.fontFamily;\r\n    }\r\n\r\n    // Custom focus CSS to make the input fields match Rock style.\r\n    const focusCss: Record<string, string> = {\r\n        \"border-color\": getComputedStyle(document.documentElement).getPropertyValue(\"--focus-state-border-color\"),\r\n        \"outline-style\": \"none\"\r\n    };\r\n\r\n    // Custom invalid CSS to apply to the field to make it look like a Rock\r\n    // input field.\r\n    const invalidCss: Record<string, string> = {};\r\n    if (inputInvalidStyleHook) {\r\n        invalidCss[\"border-color\"] = getComputedStyle(inputInvalidStyleHook).borderColor;\r\n    }\r\n\r\n    // Custom CSS to apply to the placeholder text.\r\n    const placeholderCss: Record<string, string> = {\r\n        \"color\": getComputedStyle(document.documentElement).getPropertyValue(\"--input-placeholder\")\r\n    };\r\n\r\n    // Build the standard CollectJS options.\r\n    const options: CollectJSOptions = {\r\n        paymentSelector: `${controlId} .js-payment-button`,\r\n        variant: \"inline\",\r\n        fields: {\r\n            ccnumber: {\r\n                selector: `#${controlId} .js-credit-card-input`,\r\n                title: \"Card Number\",\r\n                placeholder: \"0000 0000 0000 0000\"\r\n            },\r\n            ccexp: {\r\n                selector: `#${controlId} .js-credit-card-exp-input`,\r\n                title: \"Card Expiration\",\r\n                placeholder: \"MM / YY\"\r\n            },\r\n            cvv: {\r\n                display: \"show\",\r\n                selector: `#${controlId} .js-credit-card-cvv-input`,\r\n                title: \"CVV Code\",\r\n                placeholder: \"CVV\"\r\n            } as InputField,\r\n            checkaccount: {\r\n                selector: `#${controlId} .js-check-account-number-input`,\r\n                title: \"Account Number\",\r\n                placeholder: \"Account Number\"\r\n            },\r\n            checkaba: {\r\n                selector: `#${controlId} .js-check-routing-number-input`,\r\n                title: \"Routing Number\",\r\n                placeholder: \"Routing Number\"\r\n            },\r\n            checkname: {\r\n                selector: `#${controlId} .js-check-fullname-input`,\r\n                title: \"Name on Checking Account\",\r\n                placeholder: \"Name on Account\"\r\n            }\r\n        },\r\n        styleSniffer: false,\r\n        customCss,\r\n        focusCss,\r\n        invalidCss,\r\n        placeholderCss,\r\n        timeoutDuration: 10000,\r\n        callback: () => { /* Intentionally empty, this will be replaced by the caller. */ }\r\n    };\r\n\r\n    return options;\r\n}\r\n\r\n/**\r\n * Translates the NMI field name into a user friendly one.\r\n *\r\n * @param field The field name as provided by NMI.\r\n *\r\n * @returns A user friendly name for the field.\r\n */\r\nfunction getFieldFriendlyName(field: string): string {\r\n    if (field === \"ccnumber\") {\r\n        return \"Card Number\";\r\n    }\r\n    else if (field === \"ccexp\") {\r\n        return \"Expiration Date\";\r\n    }\r\n    else if (field === \"cvv\") {\r\n        return \"CVV\";\r\n    }\r\n    else if (field === \"checkaccount\") {\r\n        return \"Account Number\";\r\n    }\r\n    else if (field === \"checkaba\") {\r\n        return \"Routing Number\";\r\n    }\r\n    else if (field === \"checkname\") {\r\n        return \"Account Owner's Name\";\r\n    }\r\n    else {\r\n        return \"Payment Information\";\r\n    }\r\n}\r\n\r\nexport default defineComponent({\r\n    name: \"NMIGatewayControl\",\r\n\r\n    components: {\r\n        LoadingIndicator\r\n    },\r\n\r\n    props: {\r\n        settings: {\r\n            type: Object as PropType<Settings>,\r\n            required: true\r\n        }\r\n    },\r\n\r\n    setup(props, { emit }) {\r\n        /**\r\n         * true if we have attempted to submit the payment information to NMI.\r\n         * This is used to determine if validation messages should be emitted\r\n         * since NMI is a little verbose in its validating.\r\n         */\r\n        let hasAttemptedSubmit = false;\r\n\r\n        /** true if we have received a token back from NMI. */\r\n        let hasReceivedToken = false;\r\n\r\n        /** true if there is a payment type of Credit Card; otherwise false. */\r\n        const hasCreditCardPaymentType = computed((): boolean => {\r\n            return props.settings.enabledPaymentTypes?.includes(NMIPaymentType.Card) ?? false;\r\n        });\r\n\r\n        /** true if there is a payment type of Bank Account (ACH); otherwise false. */\r\n        const hasBankAccountPaymentType = computed((): boolean => {\r\n            return props.settings.enabledPaymentTypes?.includes(NMIPaymentType.BankAccount) ?? false;\r\n        });\r\n\r\n        /** true if there are multiple payment types enabled; otherwise false. */\r\n        const hasMultiplePaymentTypes = computed((): boolean => {\r\n            return hasCreditCardPaymentType.value && hasBankAccountPaymentType.value;\r\n        });\r\n\r\n        /** The currently active payment type. */\r\n        const activePaymentType = ref(props.settings.enabledPaymentTypes != null && props.settings.enabledPaymentTypes.length > 0 ? props.settings.enabledPaymentTypes[0] : null);\r\n\r\n        /** true if the currently active payment type is Credit Card; otherwise false. */\r\n        const isCreditCardPaymentTypeActive = computed((): boolean => {\r\n            return activePaymentType.value === NMIPaymentType.Card;\r\n        });\r\n\r\n        /** true if the currently active payment type is Bank Account (ACH); otherwise false. */\r\n        const isBankAccountPaymentTypeActive = computed((): boolean => {\r\n            return activePaymentType.value === NMIPaymentType.BankAccount;\r\n        });\r\n\r\n        /** The CSS classes to apply to the credit card payment type button. */\r\n        const creditCardButtonClasses = computed((): string[] => {\r\n            return isCreditCardPaymentTypeActive.value\r\n                ? [\"btn\", \"btn-default\", \"active\", \"payment-creditcard\"]\r\n                : [\"btn\", \"btn-default\", \"payment-creditcard\"];\r\n        });\r\n\r\n        /** The CSS classes to apply to the bank account (ACH) payment type button. */\r\n        const bankAccountButtonClasses = computed((): string[] => {\r\n            return isBankAccountPaymentTypeActive.value\r\n                ? [\"btn\", \"btn-default\", \"active\", \"payment-ach\"]\r\n                : [\"btn\", \"btn-default\", \"payment-ach\"];\r\n        });\r\n\r\n        /** true while we are still loading data; otherwise false. */\r\n        const loading = ref(true);\r\n\r\n        /** true if we failed to load the CollectJS content. */\r\n        const failedToLoad = ref(false);\r\n\r\n        /** Contains the current validation message to be displayed. */\r\n        const validationMessage = ref(\"\");\r\n\r\n        /** Activates the credit card payment type. */\r\n        const activateCreditCard = (): void => {\r\n            CollectJS?.clearInputs();\r\n            activePaymentType.value = NMIPaymentType.Card;\r\n        };\r\n\r\n        /** Activates the bank account payment type. */\r\n        const activateBankAccount = (): void => {\r\n            CollectJS?.clearInputs();\r\n            activePaymentType.value = NMIPaymentType.BankAccount;\r\n        };\r\n\r\n        /** true if we have already sent a token response to the server; otherwise false. */\r\n        const tokenResponseSent = ref(false);\r\n\r\n        /**\r\n         * Contains a unique identifier that we can use to allow CollectJS\r\n         * to find our input fields.\r\n         */\r\n        const controlId = `nmi_${newGuid()}`;\r\n\r\n        /** Reference to helper element that allows us to get CSS styles. */\r\n        const inputStyleHook = ref<HTMLElement | null>(null);\r\n\r\n        /** Reference to helper element that allows us to get invalid input CSS styles. */\r\n        const inputInvalidStyleHook = ref<HTMLElement | null>(null);\r\n\r\n        const paymentInputs = ref<HTMLElement | null>(null);\r\n\r\n        /** Contains all the field validation states. */\r\n        const validationFieldStatus: Record<string, ValidationField> = {\r\n            ccnumber: { field: getFieldFriendlyName(\"ccnumber\"), status: false, message: \"is required\" },\r\n            ccexp: { field: getFieldFriendlyName(\"ccexp\"), status: false, message: \"is required\" },\r\n            cvv: { field: getFieldFriendlyName(\"cvv\"), status: false, message: \"is required\" },\r\n            checkaccount: { field: getFieldFriendlyName(\"checkaccount\"), status: false, message: \"is required\" },\r\n            checkaba: { field: getFieldFriendlyName(\"checkaba\"), status: false, message: \"is required\" },\r\n            checkname: { field: getFieldFriendlyName(\"checkname\"), status: false, message: \"is required\" }\r\n        };\r\n\r\n        /**\r\n         * Validates all the inputs from CollectJS to see if any visible input\r\n         * fields are invalid.\r\n         *\r\n         * @returns An object that describes if all the inputs are valid.\r\n         */\r\n        const validateInputs = function (): FormError[] {\r\n            const errors: FormError[] = [];\r\n\r\n            for (const validationFieldKey in validationFieldStatus) {\r\n                const validationField = validationFieldStatus[validationFieldKey];\r\n\r\n                // first check visibility. If this is an ACH field, but we are in CC mode (and vice versa), don't validate\r\n                const inputField = document.querySelector(CollectJS?.config.fields[validationFieldKey]?.selector ?? \"\") as HTMLElement;\r\n                const fieldVisible = (inputField?.offsetWidth ?? 0) !== 0 || (inputField?.offsetHeight ?? 0) !== 0;\r\n\r\n                if (fieldVisible && !validationField.status) {\r\n                    const validationFieldTitle = getFieldFriendlyName(validationFieldKey);\r\n\r\n                    errors.push({\r\n                        name: validationFieldTitle,\r\n                        text: validationField.message || \"unknown validation error\"\r\n                    });\r\n                }\r\n            }\r\n\r\n            return errors;\r\n        };\r\n\r\n        /**\r\n         * Callback function that handles the timeout scenario of CollectJS.\r\n         */\r\n        const timeoutCallback: TimeoutCallback = () => {\r\n            // If we got a timeout after sending the response then ignore the error.\r\n            if (tokenResponseSent.value) {\r\n                return;\r\n            }\r\n\r\n            // A timeout callback will fire due to a timeout or incomplete\r\n            // input fields (CollectJS doesn't tell us why).\r\n            console.log(\"The tokenization didn't respond in the expected timeframe. This could be due to an invalid or incomplete field or poor connectivity - \" + Date());\r\n\r\n            // Since we don't know exactly what happened, lets see if it might\r\n            // be invalid inputs by checking them all manually.\r\n            const validationErrors = validateInputs();\r\n\r\n            if (validationErrors.length > 0) {\r\n                emit(GatewayEmitStrings.Validation, validationErrors);\r\n            }\r\n            else {\r\n                // Inputs seem to be valid, so show a message to let them\r\n                // know what seems to be happening.\r\n                console.log(\"Timeout happened for unknown reason, probably poor connectivity since we already validated inputs.\");\r\n\r\n                emit(GatewayEmitStrings.Validation, {\r\n                    \"Payment Timeout\": \"Response from gateway timed out. This could be do to poor connectivity or invalid payment values.\"\r\n                });\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Callback function that handles field validation results from the\r\n         * CollectJS back-end.\r\n         *\r\n         * @param field The name of the field being validated.\r\n         * @param validated true if the field is valid; otherwise false.\r\n         * @param message A message that describes the reason for the validation failure.\r\n         */\r\n        const validationCallback: ValidationCallback = (field: string, validated: boolean, message: string): void => {\r\n            // if there is a validation error, keep the message and field that\r\n            // has the error. Then we'll check it before starting the payment\r\n            // submission.\r\n\r\n            if (message === \"Field is empty\") {\r\n                message = \"is required\";\r\n            }\r\n\r\n            validationFieldStatus[field] = {\r\n                field: field,\r\n                status: validated,\r\n                message: message\r\n            };\r\n\r\n            const validationErrors = validateInputs();\r\n\r\n            if (hasAttemptedSubmit && !(CollectJS?.inSubmission ?? false) && !hasReceivedToken) {\r\n                emit(GatewayEmitStrings.Validation, validationErrors);\r\n            }\r\n        };\r\n\r\n        // Add a callback when the submit payment button is pressed.\r\n        onSubmitPayment(() => {\r\n            if (loading.value || failedToLoad.value) {\r\n                return;\r\n            }\r\n\r\n            tokenResponseSent.value = false;\r\n\r\n            // The delay allows field validation when losing field focus.\r\n            setTimeout(() => {\r\n                const validationErrors = validateInputs();\r\n\r\n                hasAttemptedSubmit = true;\r\n                if (validationErrors.length === 0) {\r\n                    CollectJS?.startPaymentRequest();\r\n                }\r\n                else {\r\n                    emit(GatewayEmitStrings.Validation, validationErrors);\r\n                }\r\n            }, 0);\r\n        });\r\n\r\n        /**\r\n         * Callback method when we receive a validated token from NMI.\r\n         *\r\n         * @param tokenResponse The response data that contains the token.\r\n         */\r\n        const handleTokenResponse: ResponseCallback = (tokenResponse: TokenResponse): void => {\r\n            hasReceivedToken = true;\r\n            emit(GatewayEmitStrings.Success, tokenResponse.token);\r\n        };\r\n\r\n        // Additional processing once our template has been processed and mounted\r\n        // into the DOM. Initialize the CollectJS fields.\r\n        onMounted(async () => {\r\n            await loadStandardStyleTagAsync();\r\n\r\n            if (!(await loadCollectJSAsync(props.settings.tokenizationKey ?? \"\"))) {\r\n                emit(GatewayEmitStrings.Error, \"Error configuring hosted gateway. This could be due to an invalid or missing Tokenization Key. Please verify that Tokenization Key is configured correctly in gateway settings.\");\r\n                return;\r\n            }\r\n\r\n            if (paymentInputs.value) {\r\n                paymentInputs.value.querySelectorAll(\".iframe-input\").forEach(el => {\r\n                    el.innerHTML = \"\";\r\n                });\r\n            }\r\n\r\n            try {\r\n                const options = getCollectJSOptions(controlId, inputStyleHook.value, inputInvalidStyleHook.value);\r\n\r\n                options.timeoutCallback = timeoutCallback;\r\n                options.validationCallback = validationCallback;\r\n                options.callback = handleTokenResponse;\r\n                options.fieldsAvailableCallback = () => {\r\n                    loading.value = false;\r\n                };\r\n\r\n                CollectJS?.configure(options);\r\n            }\r\n            catch {\r\n                failedToLoad.value = true;\r\n                emit(GatewayEmitStrings.Error, \"Error configuring hosted gateway. This could be due to an invalid or missing Tokenization Key. Please verify that Tokenization Key is configured correctly in gateway settings.\");\r\n                return;\r\n            }\r\n        });\r\n\r\n        return {\r\n            controlId,\r\n            loading,\r\n            failedToLoad,\r\n            hasMultiplePaymentTypes,\r\n            hasCreditCardPaymentType,\r\n            hasBankAccountPaymentType,\r\n            isCreditCardPaymentTypeActive,\r\n            isBankAccountPaymentTypeActive,\r\n            creditCardButtonClasses,\r\n            bankAccountButtonClasses,\r\n            validationMessage,\r\n            activateCreditCard,\r\n            activateBankAccount,\r\n            inputStyleHook,\r\n            inputInvalidStyleHook,\r\n            paymentInputs\r\n        };\r\n    },\r\n\r\n    template: `\r\n<div>\r\n    <div v-if=\"loading\" class=\"text-center\">\r\n        <LoadingIndicator />\r\n    </div>\r\n\r\n    <div v-show=\"!loading && !failedToLoad\" style=\"max-width: 600px;\">\r\n        <div v-if=\"hasMultiplePaymentTypes\" class=\"gateway-type-selector btn-group btn-group-xs\" role=\"group\">\r\n            <a :class=\"creditCardButtonClasses\" @click.prevent=\"activateCreditCard\">Card</a>\r\n            <a :class=\"bankAccountButtonClasses\" @click.prevent=\"activateBankAccount\">Bank Account</a>\r\n        </div>\r\n\r\n        <div :id=\"controlId\" class=\"nmi-payment-inputs\" ref=\"paymentInputs\">\r\n            <div v-if=\"hasCreditCardPaymentType\" v-show=\"isCreditCardPaymentTypeActive\" class=\"gateway-creditcard-container gateway-payment-container\">\r\n                <div class=\"iframe-input credit-card-input js-credit-card-input\"></div>\r\n                <div class=\"break\"></div>\r\n                <div class=\"iframe-input credit-card-exp-input js-credit-card-exp-input\"></div>\r\n                <div class=\"iframe-input credit-card-cvv-input js-credit-card-cvv-input\"></div>\r\n            </div>\r\n\r\n            <div v-if=\"hasBankAccountPaymentType\" v-show=\"isBankAccountPaymentTypeActive\" class=\"gateway-ach-container gateway-payment-container\">\r\n                <div class=\"iframe-input check-account-number-input js-check-account-number-input\"></div>\r\n                <div class=\"iframe-input check-routing-number-input js-check-routing-number-input\"></div>\r\n                <div class=\"iframe-input check-fullname-input js-check-fullname-input\"></div>\r\n            </div>\r\n\r\n            <button type=\"button\" style=\"display: none;\" class=\"payment-button js-payment-button\"></button>\r\n        </div>\r\n\r\n        <div v-show=\"validationMessage\" class=\"alert alert-validation\">\r\n            {{ validationMessage }}\r\n        </div>\r\n    </div>\r\n\r\n    <input ref=\"inputStyleHook\" class=\"form-control nmi-input-style-hook form-group\" style=\"display: none;\">\r\n\r\n    <div class=\"form-group has-error\" style=\"display: none;\">\r\n        <input ref=\"inputInvalidStyleHook\" type=\"text\" class=\"form-control\">\r\n    </div>\r\n</div>`\r\n});\r\n"],"names":["NMIPaymentType","standardStyling","loadCollectJSAsync","_x","_loadCollectJSAsync","apply","arguments","_asyncToGenerator","tokenizationKey","window","CollectJS","undefined","script","document","createElement","type","src","setAttribute","getElementsByTagName","appendChild","Promise","resolve","reject","addEventListener","_unused2","loadStandardStyleTagAsync","_loadStandardStyleTagAsync","style","innerText","getCollectJSOptions","controlId","inputStyleHook","inputInvalidStyleHook","customCss","inputStyles","getComputedStyle","color","borderBottomColor","borderBottomLeftRadius","borderBottomRightRadius","borderBottomStyle","borderBottomWidth","borderLeftColor","borderLeftStyle","borderLeftWidth","borderRightColor","borderRightStyle","borderRightWidth","borderTopColor","borderTopLeftRadius","borderTopRightRadius","borderTopStyle","borderTopWidth","borderWidth","borderStyle","borderRadius","borderColor","backgroundColor","boxShadow","padding","fontSize","height","fontFamily","focusCss","documentElement","getPropertyValue","invalidCss","placeholderCss","options","paymentSelector","concat","variant","fields","ccnumber","selector","title","placeholder","ccexp","cvv","display","checkaccount","checkaba","checkname","styleSniffer","timeoutDuration","callback","getFieldFriendlyName","field","defineComponent","name","components","LoadingIndicator","props","settings","Object","required","setup","_ref","emit","hasAttemptedSubmit","hasReceivedToken","hasCreditCardPaymentType","computed","_props$settings$enabl","_props$settings$enabl2","enabledPaymentTypes","includes","Card","hasBankAccountPaymentType","_props$settings$enabl3","_props$settings$enabl4","BankAccount","hasMultiplePaymentTypes","value","activePaymentType","ref","length","isCreditCardPaymentTypeActive","isBankAccountPaymentTypeActive","creditCardButtonClasses","bankAccountButtonClasses","loading","failedToLoad","validationMessage","activateCreditCard","_CollectJS","clearInputs","activateBankAccount","_CollectJS2","tokenResponseSent","newGuid","paymentInputs","validationFieldStatus","status","message","validateInputs","errors","validationFieldKey","_CollectJS$config$fie","_CollectJS3","_CollectJS3$config$fi","_inputField$offsetWid","_inputField$offsetHei","validationField","inputField","querySelector","config","fieldVisible","offsetWidth","offsetHeight","validationFieldTitle","push","text","timeoutCallback","console","log","Date","validationErrors","GatewayEmitStrings","Validation","validationCallback","validated","_CollectJS$inSubmissi","_CollectJS4","inSubmission","onSubmitPayment","setTimeout","_CollectJS5","startPaymentRequest","handleTokenResponse","tokenResponse","Success","token","onMounted","_props$settings$token","Error","querySelectorAll","forEach","el","innerHTML","_CollectJS6","fieldsAvailableCallback","configure","_unused","template"],"mappings":"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"}