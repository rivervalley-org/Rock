{"version":3,"file":"contentDropDownPicker.obs.js","sources":["../../../Framework/Controls/contentDropDownPicker.obs","../../../node_modules/style-inject/dist/style-inject.es.js"],"sourcesContent":["<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <RockFormField :modelValue=\"modelValue\" v-bind=\"formFieldProps\" :name=\"'picker' + id\">\r\n        <template #default=\"{ uniqueId, field }\">\r\n            <div class=\"control-wrapper\">\r\n                <slot name=\"prepend\" :isInputGroupSupported=\"true\" />\r\n                <div :class=\"{ 'input-group': $slots.inputGroupPrepend || $slots.inputGroupAppend }\">\r\n                    <slot name=\"inputGroupPrepend\" :isInputGroupSupported=\"true\" />\r\n                    <div class=\"picker picker-obsidian picker-select rollover-container\" :class=\"additionalPickerClass\">\r\n                        <a class=\"picker-label\" href=\"#\" @click.prevent.stop=\"togglePickerMenu\" :class=\"{ 'has-ig-prepend': $slots.inputGroupPrepend }\">\r\n                            <i :class=\"pickerIconClass\"></i>\r\n                            <slot name=\"innerLabel\"><span class=\"selected-names\">{{ innerLabel }}</span></slot>\r\n                            <b class=\"fa fa-caret-down pull-right\"></b>\r\n                            <b v-if=\"showClear\" class=\"fa fa-times pull-right\" @click.prevent.stop=\"onAction('clear')\"></b>\r\n                        </a>\r\n\r\n                        <Fullscreen v-show=\"internalShowPopup\" v-if=\"internalShowPopup || !forceContentReloadOnOpen\" v-model=\"internalIsFullscreen\" class=\"picker-menu\" :class=\"internalIsFullscreen ? 'is-fullscreen' : 'dropdown-menu'\" :style=\"pickerMenuStyles\">\r\n                            <!-- Optional \"super header\" area for things such as a means to switch between picker types -->\r\n                            <div class=\"picker-mode-options\" v-if=\"$slots.pickerContentSuperHeader\">\r\n                                <slot name=\"pickerContentSuperHeader\"></slot>\r\n                            </div>\r\n\r\n                            <!-- Optional header area for picker header content. If you provide content for the header or enable showing the fullscreen button, this will show -->\r\n                            <div class=\"picker-search-header picker-header\" v-if=\"$slots.pickerContentHeader || $slots.pickerContentHeading || pickerContentHeadingText || showFullscreenButton\">\r\n                                <!-- Override entire header area with `pickerContentHeader` slot -->\r\n                                <slot name=\"pickerContentHeader\">\r\n                                    <!-- Override heading, but keep fullscreen button intact with this `pickerContentHeading` slot, or specify heading text with `pickerContentHeadingText` prop -->\r\n                                    <slot name=\"pickerContentHeading\">\r\n                                        <h4>{{ pickerContentHeadingText }}</h4>\r\n                                    </slot>\r\n                                    <!-- Show this fullscreen button in the header if enabled -->\r\n                                    <RockButton\r\n                                                v-if=\"showFullscreenButton\"\r\n                                                @click=\"internalIsFullscreen = !internalIsFullscreen\"\r\n                                                :btnType=\"fullscreenButtonType\"\r\n                                                class=\"ml-auto w-auto\"\r\n                                                title=\"Toggle Fullscreen\"\r\n                                                aria-label=\"Toggle Fullscreen\"><i class=\"fa fa-expand\"></i></RockButton>\r\n                                </slot>\r\n                            </div>\r\n\r\n                            <!-- Main Picker Content via default slot -->\r\n                            <div class=\"scrollbar-thin picker-body\" :style=\"pickerMenuInnerStyles\">\r\n                                <slot />\r\n                            </div>\r\n\r\n                            <!-- Actions Buttons -->\r\n                            <div class=\"picker-actions\">\r\n                                <!-- Main Action Buttons: Overridable via `mainPickerActions` slot, or just configure with props -->\r\n                                <slot name=\"mainPickerActions\" v-if=\"!hideMainActionButtons\">\r\n                                    <RockButton :btnSize=\"selectButton.size\" :btnType=\"selectButton.type\" class=\"picker-btn\" @click.prevent.stop=\"onAction('primary')\">\r\n                                        <slot name=\"primaryButtonLabel\">{{ primaryButtonLabel }}</slot>\r\n                                    </RockButton>\r\n                                    <RockButton :btnSize=\"cancelButton.size\" :btnType=\"cancelButton.type\" class=\"picker-cancel\" @click.prevent.stop=\"onAction('secondary')\">\r\n                                        <slot name=\"secondaryButtonLabel\">{{ secondaryButtonLabel }}</slot>\r\n                                    </RockButton>\r\n                                </slot>\r\n                                <!-- Custom Action Buttons: `customPickerActions` slot allows you to add additional buttons to the right -->\r\n                                <div v-if=\"$slots.customPickerActions\" class=\"pull-right\">\r\n                                    <slot name=\"customPickerActions\" />\r\n                                </div>\r\n                            </div>\r\n                        </Fullscreen>\r\n                    </div>\r\n                </div>\r\n                <slot name=\"append\" :isInputGroupSupported=\"true\" />\r\n            </div>\r\n        </template>\r\n    </RockFormField>\r\n</template>\r\n\r\n<style scoped>\r\n.scrollbar-thin {\r\n    scrollbar-width: thin;\r\n}\r\n\r\n.scrollbar-thin::-webkit-scrollbar {\r\n    width: 8px;\r\n    border-radius: 4px;\r\n}\r\n\r\n.scrollbar-thin::-webkit-scrollbar-button {\r\n    display: none;\r\n}\r\n\r\n.scrollbar-thin::-webkit-scrollbar-thumb {\r\n    background-color: #858585;\r\n    border-radius: 4px;\r\n}\r\n\r\n.scrollbar-thin::-webkit-scrollbar-thumb:hover {\r\n    background-color: #6b6b6b;\r\n}\r\n\r\n.scrollbar-thin::-webkit-scrollbar-track {\r\n    background-color: #f0f0f0;\r\n    border-radius: 4px;\r\n}\r\n\r\n.picker-menu {\r\n    --body-background: var(--panel-bg);\r\n    overflow-y: visible;\r\n}\r\n\r\n.picker-menu.is-fullscreen {\r\n    display: flex !important;\r\n    flex-direction: column;\r\n}\r\n\r\n.picker-header,\r\n.picker-actions {\r\n    flex: 0;\r\n}\r\n\r\n.picker-body {\r\n    flex: 1;\r\n}\r\n\r\n.has-ig-prepend {\r\n    border-bottom-left-radius: 0;\r\n    border-top-left-radius: 0;\r\n}\r\n</style>\r\n\r\n<script setup lang=\"ts\">\r\n    import { computed, PropType, ref, watch } from \"vue\";\r\n    import RockButton from \"./rockButton\";\r\n    import { BtnType } from \"@Obsidian/Enums/Controls/btnType\";\r\n    import { BtnSize } from \"@Obsidian/Enums/Controls/btnSize\";\r\n    import RockFormField from \"./rockFormField\";\r\n    import { standardRockFormFieldProps, useStandardRockFormFieldProps, useVModelPassthrough } from \"@Obsidian/Utility/component\";\r\n    import { newGuid } from \"@Obsidian/Utility/guid\";\r\n    import Fullscreen from \"@Obsidian/Controls/fullscreen\";\r\n\r\n    const props = defineProps({\r\n        /**\r\n         * Value of the control. Merely passed to the Rock Form Field for validation purposes.\r\n         */\r\n        modelValue: {\r\n            required: false\r\n        },\r\n\r\n        ...standardRockFormFieldProps,\r\n\r\n        /**\r\n         * Text or HTML to show inside the closed picker's box, usually listing selected values.\r\n         */\r\n        innerLabel: {\r\n            type: String as PropType<string>,\r\n            default: \"\"\r\n        },\r\n\r\n        /**\r\n         * Text or HTML string for the label of the select button\r\n         */\r\n        primaryButtonLabel: {\r\n            type: String as PropType<string>,\r\n            default: \"Select\"\r\n        },\r\n\r\n        /**\r\n         * Text or HTML string for the label of the cancel button\r\n         */\r\n        secondaryButtonLabel: {\r\n            type: String as PropType<string>,\r\n            default: \"Cancel\"\r\n        },\r\n\r\n        /**\r\n         * Allow a picker to go without the main buttons if they want to.\r\n         */\r\n        hideMainActionButtons: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        /**\r\n         * Whether the \"X\" button should appear next to the box to clear the value\r\n         */\r\n        showClear: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        /**\r\n         * V-Model to allow external control of whether the popup area is opened. Can also just be\r\n         * used as a means of tracking the open state rather than controlling it. Generally should\r\n         * be ignored, but there are certain use cases that it could be useful for.\r\n         */\r\n        showPopup: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: null\r\n        },\r\n\r\n        /**\r\n         * V-Model to control whether the popup contents are shown in fullscreen.\r\n         * If you want to have an always-fullscreen picker, watch `isFullscreen` to always reset it to true immediately\r\n         * if it gets changed to false. If you never want it to go fullscreen, you can just ignore this and make sure\r\n         * you don't enable the fullscreen button in the header, but for a bit more security, you can pass `false` to\r\n         * this prop and not listen for the `update:isFullscreen`.\r\n         */\r\n        isFullscreen: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        /**\r\n         * Icon to show on the left side of the picker box\r\n         */\r\n        iconCssClass: {\r\n            type: String as PropType<string>,\r\n            default: \"fa fa-folder-open\"\r\n        },\r\n\r\n        /**\r\n         * CSS length value for defining how tall the picker content box is. 200px by default.\r\n         */\r\n        pickerContentBoxHeight: {\r\n            type: String as PropType<string>,\r\n            default: \"200px\"\r\n        },\r\n\r\n        /**\r\n         * CSS length value for defining how wide the picker content box is. By default, the theme CSS sets this width.\r\n         */\r\n        pickerContentBoxWidth: {\r\n            type: String as PropType<string>,\r\n            default: null\r\n        },\r\n\r\n        /**\r\n         * By default, the picker content box is scrollable to allow long lists of options. To Remove the scroll bar,\r\n         * set this to true.\r\n         */\r\n        disablePickerContentBoxScroll: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        /**\r\n         * Class(es) applied to to the picker element specifying type of picker\r\n         */\r\n        pickerClass: {\r\n            type: String as PropType<string>,\r\n            default: null\r\n        },\r\n\r\n        /**\r\n         * There are some cases where we don't want to auto-close the popup when the primary\r\n         * button is clicked (e.g. to validate a form). Set this to false to prevent it from\r\n         * auto-closing.\r\n         */\r\n        disableAutoCloseOnPrimaryAction: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        /**\r\n         * If you have a header for your component, you can specify the text here, or you can use the\r\n         * `pickerContentHeading` to override the HTML used for the heading, or use the `pickerContentHeader` slot to\r\n         * completely override the entire header's HTML.\r\n         */\r\n        pickerContentHeadingText: {\r\n            type: String as PropType<string>,\r\n            default: \"\"\r\n        },\r\n\r\n        /**\r\n         * If you want to enable expanding the picker to fullscreen, you can set this to true to show a button in the\r\n         * header for toggling fullscreen, or you can use your own means of controlling it and use the `isFullscreen`\r\n         * v-model prop.\r\n         */\r\n        showFullscreenButton: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        /**\r\n         * Force the dropdown content to completely reload each time it's opened, rather than just hiding it\r\n         */\r\n        forceContentReloadOnOpen: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        /**\r\n         * When true the picker will take the full width available rather than\r\n         * limiting itself to a standard width.\r\n         */\r\n        fullWidth: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        }\r\n    });\r\n\r\n    const emit = defineEmits<{\r\n        (e: \"primaryButtonClicked\" | \"secondaryButtonClicked\" | \"clearButtonClicked\"): void,\r\n        (e: \"update:showPopup\", v: boolean): void,\r\n        (e: \"update:isFullscreen\", v: boolean): void,\r\n    }>();\r\n\r\n    // #region Values\r\n\r\n    const fullscreenButtonType = BtnType.Link;\r\n    const selectButton = {\r\n        size: BtnSize.ExtraSmall,\r\n        type: BtnType.Primary\r\n    };\r\n    const cancelButton = {\r\n        size: BtnSize.ExtraSmall,\r\n        type: BtnType.Link\r\n    };\r\n    const id = newGuid();\r\n\r\n    const formFieldProps = useStandardRockFormFieldProps(props);\r\n    const internalIsFullscreen = useVModelPassthrough(props, \"isFullscreen\", emit);\r\n\r\n    const internalShowPopup = ref(false);\r\n\r\n    // #endregion\r\n\r\n    // #region Computed Values\r\n\r\n    /** The CSS class to use for the picker icon. */\r\n    const pickerIconClass = computed((): string => `${props.iconCssClass} fa-fw`);\r\n\r\n    const additionalPickerClass = computed((): string => {\r\n        let classes = props.pickerClass ? props.pickerClass : \"\";\r\n\r\n        if (internalShowPopup.value) {\r\n            classes += \" open\";\r\n        }\r\n\r\n        if (props.showClear) {\r\n            classes += \" picker-show-clear\";\r\n        }\r\n\r\n        if (props.fullWidth) {\r\n            classes += \" picker-full-width\";\r\n        }\r\n\r\n        return classes;\r\n    });\r\n\r\n    // Style up the picker content box\r\n    const pickerMenuInnerStyles = computed<string>(() => {\r\n        let height = internalIsFullscreen.value ? \"100%\" : props.pickerContentBoxHeight;\r\n\r\n        return `height: ${height}; overflow-x: visible; overflow-y: ${props.disablePickerContentBoxScroll ? \"visible\" : \"auto\"};`;\r\n    });\r\n\r\n    const pickerMenuStyles = computed<string>(() => {\r\n        // Width is already specified in the stylesheet for .picker-menu, so only set it if we have an override\r\n        if (props.pickerContentBoxWidth) {\r\n            return `width: ${props.pickerContentBoxWidth};`;\r\n        }\r\n\r\n        return \"\";\r\n    });\r\n\r\n    // #endregion\r\n\r\n    // #region Watchers\r\n\r\n    /**\r\n     * If the showPopup prop is null, that means no v-model is being used, so we ignore the prop's value\r\n     * and just treat internalShowPopup like a normal value\r\n     */\r\n    watch(() => props.showPopup, () => {\r\n        if (props.showPopup != null) {\r\n            internalShowPopup.value = props.showPopup;\r\n        }\r\n    }, { immediate: true });\r\n\r\n    watch(internalShowPopup, () => emit(\"update:showPopup\", internalShowPopup.value));\r\n\r\n    // #endregion\r\n\r\n    // #region Event Handlers\r\n\r\n    /**\r\n     * Event handler for when the user clicks on the picker. Show/hide the popup.\r\n     */\r\n    function togglePickerMenu(): void {\r\n        internalShowPopup.value = !internalShowPopup.value;\r\n    }\r\n\r\n    /**\r\n     * Event handler for when the user clicks an action button. Hides the popup (unless\r\n     * disabled for primary button) as well as firing an event on the component.\r\n     */\r\n    function onAction(type: \"primary\" | \"secondary\" | \"clear\"): void {\r\n        if (type !== \"primary\" || !props.disableAutoCloseOnPrimaryAction) {\r\n            // Primary button shouldn't auto-close if auto-close disabled\r\n            internalShowPopup.value = false;\r\n        }\r\n        emit(`${type}ButtonClicked`);\r\n    }\r\n\r\n    // #endregion\r\n\r\n</script>","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n"],"names":["fullscreenButtonType","BtnType","Link","selectButton","size","BtnSize","ExtraSmall","type","Primary","cancelButton","id","newGuid","formFieldProps","useStandardRockFormFieldProps","props","internalIsFullscreen","useVModelPassthrough","emit","internalShowPopup","ref","pickerIconClass","computed","concat","iconCssClass","additionalPickerClass","classes","pickerClass","value","showClear","fullWidth","pickerMenuInnerStyles","height","pickerContentBoxHeight","disablePickerContentBoxScroll","pickerMenuStyles","pickerContentBoxWidth","watch","showPopup","immediate","togglePickerMenu","onAction","disableAutoCloseOnPrimaryAction","styleInject","css","insertAt","document","head","getElementsByTagName","style","createElement","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA+SI,IAAA,IAAMA,oBAAoB,GAAGC,OAAO,CAACC,IAAI,CAAA;MACzC,IAAA,IAAMC,YAAY,GAAG;YACjBC,IAAI,EAAEC,OAAO,CAACC,UAAU;YACxBC,IAAI,EAAEN,OAAO,CAACO,OAAAA;WACjB,CAAA;MACD,IAAA,IAAMC,YAAY,GAAG;YACjBL,IAAI,EAAEC,OAAO,CAACC,UAAU;YACxBC,IAAI,EAAEN,OAAO,CAACC,IAAAA;WACjB,CAAA;UACD,IAAMQ,EAAE,GAAGC,OAAO,EAAE,CAAA;MAEpB,IAAA,IAAMC,cAAc,GAAGC,6BAA6B,CAACC,KAAK,CAAC,CAAA;UAC3D,IAAMC,oBAAoB,GAAGC,oBAAoB,CAACF,KAAK,EAAE,cAAc,EAAEG,IAAI,CAAC,CAAA;MAE9E,IAAA,IAAMC,iBAAiB,GAAGC,GAAG,CAAC,KAAK,CAAC,CAAA;UAOpC,IAAMC,eAAe,GAAGC,QAAQ,CAAC,MAAA,EAAA,CAAAC,MAAA,CAAiBR,KAAK,CAACS,YAAY,EAAA,QAAA,CAAQ,CAAC,CAAA;MAE7E,IAAA,IAAMC,qBAAqB,GAAGH,QAAQ,CAAC,MAAc;YACjD,IAAII,OAAO,GAAGX,KAAK,CAACY,WAAW,GAAGZ,KAAK,CAACY,WAAW,GAAG,EAAE,CAAA;YAExD,IAAIR,iBAAiB,CAACS,KAAK,EAAE;MACzBF,QAAAA,OAAO,IAAI,OAAO,CAAA;MACtB,OAAA;YAEA,IAAIX,KAAK,CAACc,SAAS,EAAE;MACjBH,QAAAA,OAAO,IAAI,oBAAoB,CAAA;MACnC,OAAA;YAEA,IAAIX,KAAK,CAACe,SAAS,EAAE;MACjBJ,QAAAA,OAAO,IAAI,oBAAoB,CAAA;MACnC,OAAA;MAEA,MAAA,OAAOA,OAAO,CAAA;MAClB,KAAC,CAAC,CAAA;MAGF,IAAA,IAAMK,qBAAqB,GAAGT,QAAQ,CAAS,MAAM;YACjD,IAAIU,MAAM,GAAGhB,oBAAoB,CAACY,KAAK,GAAG,MAAM,GAAGb,KAAK,CAACkB,sBAAsB,CAAA;MAE/E,MAAA,OAAA,UAAA,CAAAV,MAAA,CAAkBS,MAAM,EAAA,qCAAA,CAAA,CAAAT,MAAA,CAAsCR,KAAK,CAACmB,6BAA6B,GAAG,SAAS,GAAG,MAAM,EAAA,GAAA,CAAA,CAAA;MAC1H,KAAC,CAAC,CAAA;MAEF,IAAA,IAAMC,gBAAgB,GAAGb,QAAQ,CAAS,MAAM;YAE5C,IAAIP,KAAK,CAACqB,qBAAqB,EAAE;MAC7B,QAAA,OAAA,SAAA,CAAAb,MAAA,CAAiBR,KAAK,CAACqB,qBAAqB,EAAA,GAAA,CAAA,CAAA;MAChD,OAAA;MAEA,MAAA,OAAO,EAAE,CAAA;MACb,KAAC,CAAC,CAAA;MAUFC,IAAAA,KAAK,CAAC,MAAMtB,KAAK,CAACuB,SAAS,EAAE,MAAM;MAC/B,MAAA,IAAIvB,KAAK,CAACuB,SAAS,IAAI,IAAI,EAAE;MACzBnB,QAAAA,iBAAiB,CAACS,KAAK,GAAGb,KAAK,CAACuB,SAAS,CAAA;MAC7C,OAAA;MACJ,KAAC,EAAE;MAAEC,MAAAA,SAAS,EAAE,IAAA;MAAK,KAAC,CAAC,CAAA;MAEvBF,IAAAA,KAAK,CAAClB,iBAAiB,EAAE,MAAMD,IAAI,CAAC,kBAAkB,EAAEC,iBAAiB,CAACS,KAAK,CAAC,CAAC,CAAA;UASjF,SAASY,gBAAgBA,GAAS;MAC9BrB,MAAAA,iBAAiB,CAACS,KAAK,GAAG,CAACT,iBAAiB,CAACS,KAAK,CAAA;MACtD,KAAA;UAMA,SAASa,QAAQA,CAACjC,IAAuC,EAAQ;YAC7D,IAAIA,IAAI,KAAK,SAAS,IAAI,CAACO,KAAK,CAAC2B,+BAA+B,EAAE;cAE9DvB,iBAAiB,CAACS,KAAK,GAAG,KAAK,CAAA;MACnC,OAAA;MACAV,MAAAA,IAAI,CAAAK,EAAAA,CAAAA,MAAA,CAAIf,IAAI,EAAgB,eAAA,CAAA,CAAA,CAAA;MAChC,KAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MC7YJ,SAASmC,WAAWA,CAACC,GAAG,EAAExB,GAAG,EAAE;QAC7B,IAAKA,GAAG,KAAK,KAAK,CAAC,EAAGA,GAAG,GAAG,EAAE,CAAA;MAC9B,EAAA,IAAIyB,QAAQ,GAAGzB,GAAG,CAACyB,QAAQ,CAAA;MAE3B,EAAA,IAAI,CAACD,GAAG,IAAI,OAAOE,QAAQ,KAAK,WAAW,EAAE;MAAE,IAAA,OAAA;MAAQ,GAAA;MAEvD,EAAA,IAAIC,IAAI,GAAGD,QAAQ,CAACC,IAAI,IAAID,QAAQ,CAACE,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;MACpE,EAAA,IAAIC,KAAK,GAAGH,QAAQ,CAACI,aAAa,CAAC,OAAO,CAAC,CAAA;QAC3CD,KAAK,CAACzC,IAAI,GAAG,UAAU,CAAA;QAEvB,IAAIqC,QAAQ,KAAK,KAAK,EAAE;UACtB,IAAIE,IAAI,CAACI,UAAU,EAAE;YACnBJ,IAAI,CAACK,YAAY,CAACH,KAAK,EAAEF,IAAI,CAACI,UAAU,CAAC,CAAA;MAC3C,KAAC,MAAM;MACLJ,MAAAA,IAAI,CAACM,WAAW,CAACJ,KAAK,CAAC,CAAA;MACzB,KAAA;MACF,GAAC,MAAM;MACLF,IAAAA,IAAI,CAACM,WAAW,CAACJ,KAAK,CAAC,CAAA;MACzB,GAAA;QAEA,IAAIA,KAAK,CAACK,UAAU,EAAE;MACpBL,IAAAA,KAAK,CAACK,UAAU,CAACC,OAAO,GAAGX,GAAG,CAAA;MAChC,GAAC,MAAM;UACLK,KAAK,CAACI,WAAW,CAACP,QAAQ,CAACU,cAAc,CAACZ,GAAG,CAAC,CAAC,CAAA;MACjD,GAAA;MACF;;;;;;;;;;;;;;"}