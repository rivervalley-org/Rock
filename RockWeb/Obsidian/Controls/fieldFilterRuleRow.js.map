{"version":3,"file":"fieldFilterRuleRow.js","sources":["../../../Framework/Controls/fieldFilterRuleRow.ts"],"sourcesContent":["// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { computed, defineComponent, PropType, ref, watch } from \"vue\";\r\nimport DropDownList from \"./dropDownList\";\r\nimport TextBox from \"./textBox\";\r\nimport { ComparisonValue } from \"@Obsidian/Types/Reporting/comparisonValue\";\r\nimport { areEqual } from \"@Obsidian/Utility/guid\";\r\nimport { updateRefValue } from \"@Obsidian/Utility/component\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport { PublicAttributeBag } from \"@Obsidian/ViewModels/Utility/publicAttributeBag\";\r\nimport { FieldFilterRuleBag } from \"@Obsidian/ViewModels/Reporting/fieldFilterRuleBag\";\r\nimport { FieldFilterSourceBag } from \"@Obsidian/ViewModels/Reporting/fieldFilterSourceBag\";\r\nimport RockAttributeFilter from \"./rockAttributeFilter\";\r\n\r\nexport const FieldFilterRuleRow = defineComponent({\r\n    name: \"FieldFilterRuleRow\",\r\n\r\n    components: {\r\n        DropDownList,\r\n        TextBox,\r\n        RockAttributeFilter\r\n    },\r\n\r\n    props: {\r\n        modelValue: {\r\n            type: Object as PropType<FieldFilterRuleBag>,\r\n            required: true\r\n        },\r\n        sources: {\r\n            type: Array as PropType<FieldFilterSourceBag[]>,\r\n            required: true\r\n        }\r\n    },\r\n\r\n    emits: [\r\n        \"update:modelValue\",\r\n        \"removeRule\"\r\n    ],\r\n\r\n    setup(props, { emit }) {\r\n        let internalUpdate = false;\r\n\r\n        const attributeGuid = ref(props.modelValue.attributeGuid);\r\n        const comparisonValue = ref<ComparisonValue>({\r\n            comparisonType: props.modelValue.comparisonType,\r\n            value: props.modelValue.value ?? \"\"\r\n        });\r\n\r\n        // Current Selected Attribute/Property\r\n        const currentAttribute = computed<PublicAttributeBag>(() => {\r\n            const source = props.sources.find(source => {\r\n                return areEqual(attributeGuid.value ?? \"\", source.attribute?.attributeGuid ?? \"\");\r\n            }) || props.sources[0];\r\n\r\n            return source.attribute as PublicAttributeBag;\r\n        });\r\n\r\n        // Convert the list of sources into the options you can choose from the\r\n        const attributeList = computed<ListItemBag[]>(() => {\r\n            return props.sources.map(source => {\r\n                return {\r\n                    text: source.attribute?.name as string,\r\n                    value: source.attribute?.attributeGuid as string\r\n                };\r\n            });\r\n        });\r\n\r\n        function onRemoveRuleClick(): void {\r\n            emit(\"removeRule\", props.modelValue);\r\n        }\r\n\r\n        // Watch for changes to the model value and update our internal values.\r\n        watch(() => props.modelValue, () => {\r\n            // Prevent a value reset.\r\n            internalUpdate = true;\r\n\r\n            updateRefValue(attributeGuid, props.modelValue.attributeGuid);\r\n            updateRefValue(comparisonValue, {\r\n                comparisonType: props.modelValue.comparisonType,\r\n                value: props.modelValue.value ?? \"\"\r\n            });\r\n\r\n            internalUpdate = false;\r\n        });\r\n\r\n        // Watch for changes to our internal values and update the model value.\r\n        watch([attributeGuid, comparisonValue], () => {\r\n            const newValue: FieldFilterRuleBag = {\r\n                ...props.modelValue,\r\n                attributeGuid: attributeGuid.value,\r\n                comparisonType: comparisonValue.value.comparisonType ?? 0,\r\n                value: comparisonValue.value.value\r\n            };\r\n\r\n            emit(\"update:modelValue\", newValue);\r\n        });\r\n\r\n        // Reset the rule after a new attribute is chosen\r\n        watch(currentAttribute, () => {\r\n            if (!internalUpdate) {\r\n                comparisonValue.value = {\r\n                    comparisonType: 0,\r\n                    value: \"\"\r\n                };\r\n                attributeGuid.value = currentAttribute.value.attributeGuid;\r\n            }\r\n        });\r\n\r\n        return {\r\n            attributeGuid,\r\n            attributeList,\r\n            comparisonValue,\r\n            currentAttribute,\r\n            onRemoveRuleClick,\r\n        };\r\n    },\r\n\r\n    template: `\r\n    <div class=\"filter-rule\">\r\n        <div class=\"filter-rule-fields row form-row\">\r\n            <div class=\"filter-rule-comparefield col-xs-12 col-md-4\">\r\n                <DropDownList :items=\"attributeList\" v-model=\"attributeGuid\" :show-blank-item=\"false\"  />\r\n            </div>\r\n            <div class=\"filter-rule-fieldfilter col-xs-12 col-md-8\">\r\n                <RockAttributeFilter :attribute=\"currentAttribute\" v-model=\"comparisonValue\" :filter-mode=\"1\" required />\r\n            </div>\r\n        </div>\r\n        <div class=\"filter-rule-remove\">\r\n            <button class=\"btn btn-danger btn-square\" @click.prevent=\"onRemoveRuleClick\"><i class=\"fa fa-times\"></i></button>\r\n        </div>\r\n    </div>\r\n    `\r\n});\r\n"],"names":["FieldFilterRuleRow","defineComponent","name","components","DropDownList","TextBox","RockAttributeFilter","props","modelValue","type","Object","required","sources","Array","emits","setup","_ref","_props$modelValue$val","emit","internalUpdate","attributeGuid","ref","comparisonValue","comparisonType","value","currentAttribute","computed","source","find","_attributeGuid$value","_source$attribute$att","_source$attribute","areEqual","attribute","attributeList","map","_source$attribute2","_source$attribute3","text","onRemoveRuleClick","watch","_props$modelValue$val2","updateRefValue","_comparisonValue$valu","newValue","_objectSpread","template"],"mappings":"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"}