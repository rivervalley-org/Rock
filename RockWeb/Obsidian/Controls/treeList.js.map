{"version":3,"file":"treeList.js","sources":["../../../Framework/Controls/treeList.ts"],"sourcesContent":["// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { computed, defineComponent, PropType, ref, watch } from \"vue\";\r\nimport { ITreeItemProvider } from \"@Obsidian/Utility/treeItemProviders\";\r\nimport { TreeItemBag } from \"@Obsidian/ViewModels/Utility/treeItemBag\";\r\nimport { isPromise } from \"@Obsidian/Utility/promiseUtils\";\r\n\r\n/**\r\n * Internal helper component that renders individual tree items.\r\n */\r\nconst treeItem = defineComponent({\r\n    name: \"TreeList.Item\",\r\n\r\n    props: {\r\n        modelValue: {\r\n            type: Array as PropType<string[]>,\r\n            default: []\r\n        },\r\n\r\n        multiple: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        item: {\r\n            type: Object as PropType<TreeItemBag>,\r\n            default: {}\r\n        },\r\n\r\n        disableFolderSelection: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        /**\r\n         * Automatically open to show children if a selected value is a child of this item\r\n         */\r\n        autoExpand: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        }\r\n    },\r\n\r\n    emits: [\r\n        \"treeitem-expanded\",\r\n        \"update:modelValue\"\r\n    ],\r\n\r\n    setup(props, { emit }) {\r\n        /** The list of child items to this item. */\r\n        const children = computed((): TreeItemBag[] => props.item.children ?? []);\r\n\r\n        /** Determines if we currently have any children to display. */\r\n        const hasChildren = computed((): boolean => children.value.length > 0);\r\n\r\n        /** Determines if this item is a folder that can contain children. */\r\n        const isFolder = computed((): boolean => props.item.isFolder || props.item.hasChildren);\r\n\r\n        /** The display name of the current item. */\r\n        const itemName = computed((): string => props.item.text ?? \"\");\r\n\r\n        /** Contains a value that indicates if the children should be shown. */\r\n        const showChildren = ref(false);\r\n\r\n        /** The CSS class value to use for the list-item element. */\r\n        const listItemClass = computed((): string => {\r\n            return isFolder.value ? \"rocktree-item rocktree-folder\" : \"rocktree-item rocktree-leaf\";\r\n        });\r\n\r\n        /** The CSS class value to use for the folder icon. */\r\n        const folderClass = computed((): string => {\r\n            return showChildren.value\r\n                ? \"rocktree-icon icon-fw fa fa-fw fa-chevron-down\"\r\n                : \"rocktree-icon icon-fw fa fa-fw fa-chevron-right\";\r\n        });\r\n\r\n        /** The CSS class value to use for the item icon. */\r\n        const itemIconClass = computed((): string => {\r\n            return `icon-fw ${props.item.iconCssClass}`;\r\n        });\r\n\r\n        /** The CSS class value to use for the item name. */\r\n        const itemNameClass = computed((): string => {\r\n            const classes = [\"rocktree-name\"];\r\n\r\n            if (props.item.value && props.modelValue.includes(props.item.value)) {\r\n                classes.push(\"selected\");\r\n            }\r\n\r\n            if (!props.item.isActive) {\r\n                classes.push(\"is-inactive\");\r\n            }\r\n\r\n            return classes.join(\" \");\r\n        });\r\n\r\n        // Automatically expand to show selected value deep in the tree\r\n        watch(() => [props.item, props.modelValue], () => {\r\n            if (!props.autoExpand || hasChildren.value == false) {\r\n                return;\r\n            }\r\n\r\n            if (hasSelectedChild(props.item, props.modelValue)) {\r\n                showChildren.value = true;\r\n            }\r\n            else if (children.value.length == 0) {\r\n                showChildren.value = false;\r\n            }\r\n        }, { immediate: true });\r\n\r\n        /**\r\n         * Determine if a child item is a selected value\r\n         *\r\n         * @param item The item potentially with children that are selected\r\n         * @param values The selected values\r\n         *\r\n         * @return Whether or not a child is selected\r\n         */\r\n        function hasSelectedChild(item: TreeItemBag, values: string[]): boolean {\r\n            const children = item.children;\r\n\r\n            if (children && children.length > 0) {\r\n                for (const child of children) {\r\n                    if (values.includes(child.value ?? \"\")) {\r\n                        return true;\r\n                    }\r\n\r\n                    if (child.children && child.children.length > 0 && hasSelectedChild(child, values)) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Event handler for when the folder arrow is clicked.\r\n         */\r\n        const onExpand = (): void => {\r\n            showChildren.value = !showChildren.value;\r\n\r\n            if (showChildren.value) {\r\n                emit(\"treeitem-expanded\", props.item);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * If something changes to make existing children no longer exist in the list,\r\n         * unexpand this item\r\n         */\r\n        watch(hasChildren, () => {\r\n            if (!hasChildren.value && showChildren.value) {\r\n                onExpand();\r\n            }\r\n        });\r\n\r\n        /**\r\n         * Event handler for when a child item is expanded.\r\n         *\r\n         * @param item The item that was expanded.\r\n         */\r\n        const onChildItemExpanded = (item: TreeItemBag): void => {\r\n            emit(\"treeitem-expanded\", item);\r\n        };\r\n\r\n        /**\r\n         * Event handler for when this item is selected or deselected.\r\n         */\r\n        const onSelect = (): void => {\r\n            if (isFolder.value && props.disableFolderSelection) {\r\n                return;\r\n            }\r\n\r\n            if (props.multiple) {\r\n                if (props.item.value && !props.modelValue.includes(props.item.value)) {\r\n                    emit(\"update:modelValue\", [...props.modelValue, props.item.value]);\r\n                }\r\n                else if (props.item.value && props.modelValue.includes(props.item.value)) {\r\n                    emit(\"update:modelValue\", [...props.modelValue.filter(v => v !== props.item.value)]);\r\n                }\r\n            }\r\n            else {\r\n                if (props.item.value && !props.modelValue.includes(props.item.value)) {\r\n                    emit(\"update:modelValue\", [props.item.value]);\r\n                }\r\n                else if (props.item.value && props.modelValue.includes(props.item.value)) {\r\n                    emit(\"update:modelValue\", []);\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Event handler for when a child item has modified the selected values.\r\n         *\r\n         * @param values The new selected values.\r\n         */\r\n        const onUpdateSelectedValues = (values: string[]): void => {\r\n            emit(\"update:modelValue\", values);\r\n        };\r\n\r\n        return {\r\n            children,\r\n            hasChildren,\r\n            folderClass,\r\n            isFolder,\r\n            itemIconClass,\r\n            itemName,\r\n            itemNameClass,\r\n            listItemClass,\r\n            onChildItemExpanded,\r\n            onExpand,\r\n            onSelect,\r\n            onUpdateSelectedValues,\r\n            showChildren\r\n        };\r\n    },\r\n\r\n    template: `\r\n<li :class=\"listItemClass\">\r\n    <i v-if=\"isFolder\" :class=\"folderClass\" @click.prevent.stop=\"onExpand\"></i>\r\n    <span :class=\"itemNameClass\" :title=\"itemName\" @click.prevent.stop=\"onSelect\">\r\n        <i :class=\"itemIconClass\"></i>\r\n        {{ itemName }}\r\n    </span>\r\n    <ul v-if=\"hasChildren\" v-show=\"showChildren\" class=\"rocktree-children\" v-for=\"child in children\">\r\n        <TreeList.Item :modelValue=\"modelValue\" @update:modelValue=\"onUpdateSelectedValues\" @treeitem-expanded=\"onChildItemExpanded\" :item=\"child\" :multiple=\"multiple\" :disableFolderSelection=\"disableFolderSelection\" :autoExpand=\"autoExpand\" />\r\n    </ul>\r\n</li>\r\n`\r\n});\r\n\r\nexport default defineComponent({\r\n    name: \"TreeList\",\r\n\r\n    components: {\r\n        TreeItem: treeItem\r\n    },\r\n\r\n    props: {\r\n        modelValue: {\r\n            type: Array as PropType<string[]>,\r\n            default: []\r\n        },\r\n\r\n        multiple: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        items: {\r\n            type: Array as PropType<TreeItemBag[]>,\r\n            default: []\r\n        },\r\n\r\n        provider: {\r\n            type: Object as PropType<ITreeItemProvider>\r\n        },\r\n\r\n        disableFolderSelection: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        /**\r\n         * Automatically expand parents who have (sub)children that are selected\r\n         */\r\n        autoExpand: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        }\r\n    },\r\n\r\n    emits: [\r\n        \"update:modelValue\",\r\n        \"update:items\",\r\n        \"treeitem-expanded\"\r\n    ],\r\n\r\n    setup(props, { emit }) {\r\n        /** The list of items currently being displayed in the tree list. */\r\n        const internalItems = ref<TreeItemBag[]>(props.items ?? []);\r\n\r\n        /**\r\n         * Get the root items from the provider as an asynchronous operation.\r\n         */\r\n        const getRootItems = async (): Promise<void> => {\r\n            if (props.provider) {\r\n                const result = props.provider.getRootItems();\r\n                const rootItems = isPromise(result) ? await result : result;\r\n\r\n                internalItems.value = JSON.parse(JSON.stringify(rootItems)) as TreeItemBag[];\r\n\r\n                emit(\"update:items\", internalItems.value);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Event handler for when a child item has updated the selected values.\r\n         *\r\n         * @param values The new selected values.\r\n         */\r\n        const onUpdateSelectedValues = (values: string[]): void => {\r\n            // Pass the event up to the parent so it knows about the new selection.\r\n            if (props.multiple) {\r\n                emit(\"update:modelValue\", values);\r\n            }\r\n            else {\r\n                emit(\"update:modelValue\", values.length > 0 ? [values[0]] : []);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Event handler for when an item has been expanded.\r\n         *\r\n         * @param item The item that was expanded.\r\n         */\r\n        const onItemExpanded = async (item: TreeItemBag): Promise<void> => {\r\n            if (props.provider) {\r\n                // We have a provider, check if the item needs it's children\r\n                // loaded still.\r\n                if (item.hasChildren && item.children === null) {\r\n                    const result = props.provider.getChildItems(item);\r\n                    const children = isPromise(result) ? await result : result;\r\n\r\n                    item.children = JSON.parse(JSON.stringify(children)) as TreeItemBag[];\r\n\r\n                    emit(\"update:items\", internalItems.value);\r\n                }\r\n            }\r\n            else {\r\n                // No provider, simply pass the event to the parent in case it\r\n                // wants to make any changes to the tree.\r\n                emit(\"treeitem-expanded\", item);\r\n            }\r\n        };\r\n\r\n        // Watch for a change in our passed items and update our internal list.\r\n        watch(() => props.items, () => {\r\n            // Only update if we don't have a provider.\r\n            if (!props.provider) {\r\n                internalItems.value = props.items ?? [];\r\n            }\r\n        });\r\n\r\n        // If we have a provider, then request the root items.\r\n        if (props.provider) {\r\n            getRootItems();\r\n        }\r\n\r\n        watch(() => props.provider, () => {\r\n            if (props.provider) {\r\n                getRootItems();\r\n            }\r\n        });\r\n\r\n        return {\r\n            internalItems,\r\n            onItemExpanded,\r\n            onUpdateSelectedValues\r\n        };\r\n    },\r\n\r\n    template: `\r\n<div style=\"overflow-x: hidden; max-width: 100%;\">\r\n    <ul class=\"rocktree\">\r\n        <TreeItem v-for=\"child in internalItems\" :modelValue=\"modelValue\" @update:modelValue=\"onUpdateSelectedValues\" @treeitem-expanded=\"onItemExpanded\" :item=\"child\" :multiple=\"multiple\" :disableFolderSelection=\"disableFolderSelection\" :autoExpand=\"autoExpand\" />\r\n    </ul>\r\n</div>\r\n`\r\n});\r\n"],"names":["treeItem","defineComponent","name","props","modelValue","type","Array","default","multiple","Boolean","item","Object","disableFolderSelection","autoExpand","emits","setup","_ref","emit","children","computed","_props$item$children","hasChildren","value","length","isFolder","itemName","_props$item$text","text","showChildren","ref","listItemClass","folderClass","itemIconClass","concat","iconCssClass","itemNameClass","classes","includes","push","isActive","join","watch","hasSelectedChild","immediate","values","_iterator","_createForOfIteratorHelper","_step","s","n","done","_child$value","child","err","e","f","onExpand","onChildItemExpanded","onSelect","filter","v","onUpdateSelectedValues","template","components","TreeItem","items","provider","_ref2","_props$items","internalItems","getRootItems","_ref3","_asyncToGenerator","result","rootItems","isPromise","JSON","parse","stringify","apply","arguments","onItemExpanded","_ref4","getChildItems","_x","_props$items2"],"mappings":"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"}