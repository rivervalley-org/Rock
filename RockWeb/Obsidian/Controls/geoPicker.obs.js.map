{"version":3,"file":"geoPicker.obs.js","sources":["../../../Framework/Controls/geoPicker.obs"],"sourcesContent":["<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <ContentDropDownPicker\r\n                           v-bind=\"formFieldProps\"\r\n                           :modelValue=\"pickerValue\"\r\n                           iconCssClass=\"fa fa-map-marker\"\r\n                           pickerClass=\"picker-geography\"\r\n                           :showClear=\"!!pickerValue\"\r\n                           primaryButtonLabel=\"Done\"\r\n                           v-model:isFullscreen=\"isFullscreen\"\r\n                           @primaryButtonClicked=\"select\"\r\n                           @secondaryButtonClicked=\"cancel\"\r\n                           @clearButtonClicked=\"clear\"\r\n                           @update:showPopup=\"toggledPopup\"\r\n                           pickerContentBoxHeight=\"auto\"\r\n                           pickerContentHeadingText=\"Geography Picker\"\r\n                           disablePickerContentBoxScroll\r\n                           showFullscreenButton\r\n                           forceContentReloadOnOpen>\r\n\r\n        <template #innerLabel>\r\n            <span class=\"selected-names\" v-html=\"pickerLabel\"></span>\r\n        </template>\r\n\r\n        <GeoPickerMap\r\n                      class=\"geo-picker-map\"\r\n                      v-model=\"mapValue\"\r\n                      :drawingMode=\"drawingMode\"\r\n                      :isExpanded=\"isFullscreen\"\r\n                      :mapStyleValueGuid=\"mapStyleValueGuid\"\r\n                      :centerLatitude=\"centerLatitude\"\r\n                      :centerLongitude=\"centerLongitude\" />\r\n\r\n        <template #pickerContentSuperHeader v-if=\"$slots.pickerContentSuperHeader\">\r\n            <slot name=\"pickerContentSuperHeader\" />\r\n        </template>\r\n        <template #prepend=\"{ isInputGroupSupported }\" v-if=\"$slots.prepend\">\r\n            <slot name=\"prepend\" :isInputGroupSupported=\"isInputGroupSupported\" />\r\n        </template>\r\n        <template #inputGroupPrepend=\"{ isInputGroupSupported }\" v-if=\"$slots.inputGroupPrepend\">\r\n            <slot name=\"inputGroupPrepend\" :isInputGroupSupported=\"isInputGroupSupported\" />\r\n        </template>\r\n        <template #append=\"{ isInputGroupSupported }\" v-if=\"$slots.append\">\r\n            <slot name=\"append\" :isInputGroupSupported=\"isInputGroupSupported\" />\r\n        </template>\r\n    </ContentDropDownPicker>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { PropType, ref, watch, onBeforeMount } from \"vue\";\r\n    import { standardRockFormFieldProps, useStandardRockFormFieldProps } from \"@Obsidian/Utility/component\";\r\n    import ContentDropDownPicker from \"@Obsidian/Controls/contentDropDownPicker.obs\";\r\n    import GeoPickerMap from \"@Obsidian/Controls/geoPickerMap.obs\";\r\n    import { DrawingMode } from \"@Obsidian/Types/Controls/geo\";\r\n    import { wellKnownToCoordinates, nearAddressForCoordinates, loadMapResources } from \"@Obsidian/Utility/geo\";\r\n    import { Guid } from \"@Obsidian/Types\";\r\n    import { DefinedValue } from \"@Obsidian/SystemGuids/definedValue\";\r\n\r\n    const props = defineProps({\r\n        ...standardRockFormFieldProps,\r\n\r\n        /**\r\n         * Geographical Point or Polygon coordinates in Well Known Text format\r\n         */\r\n        modelValue: {\r\n            type: String as PropType<string>,\r\n            default: \"\"\r\n        },\r\n\r\n        /**\r\n         * GUID of a DefinedValue of the Map Styles DefinedType. Determines the way the map looks.\r\n         */\r\n        mapStyleValueGuid: {\r\n            type: String as PropType<Guid>,\r\n            default: DefinedValue.MapStyleRock\r\n        },\r\n\r\n        /**\r\n         * Latitude coordinate to center map on if not initialized with a shape. This prop is not reactive.\r\n         */\r\n        centerLatitude: {\r\n            type: Number as PropType<number>,\r\n            default: null\r\n        },\r\n\r\n        /**\r\n         * Longitude coordinate to center map on if not initialized with a shape. This prop is not reactive.\r\n         */\r\n        centerLongitude: {\r\n            type: Number as PropType<number>,\r\n            default: null\r\n        },\r\n\r\n        /**\r\n         * What are we drawing? Point or Polygon? This prop is not reactive.\r\n         */\r\n        drawingMode: {\r\n            type: String as PropType<DrawingMode>,\r\n            required: true\r\n        },\r\n    });\r\n\r\n    const emit = defineEmits<{\r\n        (e: \"update:modelValue\", value: string): void\r\n    }>();\r\n\r\n    // #region Values\r\n\r\n    const mapValue = ref(props.modelValue);\r\n\r\n    const pickerValue = ref(props.modelValue);\r\n    const pickerLabel = ref(\"\");\r\n\r\n    const isFullscreen = ref(false);\r\n    const formFieldProps = useStandardRockFormFieldProps(props);\r\n\r\n    // #endregion\r\n\r\n    // #region Functions\r\n\r\n    async function getAddress(): Promise<void> {\r\n        if (pickerValue.value) {\r\n            pickerLabel.value = \"<i>Selected</i>\"; // temporarily while we get the new value\r\n            const address = await nearAddressForCoordinates(wellKnownToCoordinates(pickerValue.value, props.drawingMode));\r\n            if (address) {\r\n                pickerLabel.value = address;\r\n            }\r\n        }\r\n        else {\r\n            pickerLabel.value = \"\";\r\n        }\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Event Handlers\r\n\r\n    function select(): void {\r\n        pickerValue.value = mapValue.value;\r\n    }\r\n\r\n    function cancel(): void {\r\n        // Reset the map values to the picker values when selection is cancelled\r\n        mapValue.value = pickerValue.value;\r\n    }\r\n\r\n    function clear(): void {\r\n        pickerValue.value = \"\";\r\n        pickerLabel.value = \"\";\r\n    }\r\n\r\n    // If we close the popup when it was fullscreen, take it out of fullscreen\r\n    function toggledPopup(isShowing): void {\r\n        if (!isShowing) {\r\n            isFullscreen.value = false;\r\n        }\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Watchers\r\n\r\n    watch(() => props.modelValue, () => {\r\n        mapValue.value = props.modelValue;\r\n        pickerValue.value = props.modelValue;\r\n    });\r\n\r\n    watch(pickerValue, () => {\r\n        emit(\"update:modelValue\", pickerValue.value);\r\n        getAddress();\r\n    });\r\n\r\n    // #endregion\r\n\r\n    // #region Life Cycle\r\n\r\n    /*\r\n    * Load Google Maps and grab data needed from the server\r\n    */\r\n    onBeforeMount(async (): Promise<void> => {\r\n        await loadMapResources();\r\n        getAddress();\r\n    });\r\n\r\n    // #endregion\r\n</script>\r\n"],"names":["mapValue","ref","props","modelValue","pickerValue","pickerLabel","isFullscreen","formFieldProps","useStandardRockFormFieldProps","getAddress","_getAddress","apply","arguments","_asyncToGenerator","value","address","nearAddressForCoordinates","wellKnownToCoordinates","drawingMode","select","cancel","clear","toggledPopup","isShowing","watch","emit","onBeforeMount","loadMapResources"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA4GI,IAAA,IAAMA,QAAQ,GAAGC,GAAG,CAACC,KAAK,CAACC,UAAU,CAAC,CAAA;MAEtC,IAAA,IAAMC,WAAW,GAAGH,GAAG,CAACC,KAAK,CAACC,UAAU,CAAC,CAAA;MACzC,IAAA,IAAME,WAAW,GAAGJ,GAAG,CAAC,EAAE,CAAC,CAAA;MAE3B,IAAA,IAAMK,YAAY,GAAGL,GAAG,CAAC,KAAK,CAAC,CAAA;MAC/B,IAAA,IAAMM,cAAc,GAAGC,6BAA6B,CAACN,KAAK,CAAC,CAAA;MAAC,IAAA,SAM7CO,UAAUA,GAAA;MAAA,MAAA,OAAAC,WAAA,CAAAC,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;MAAA,KAAA;MAAA,IAAA,SAAAF,WAAA,GAAA;YAAAA,WAAA,GAAAG,iBAAA,CAAzB,aAA2C;cACvC,IAAIT,WAAW,CAACU,KAAK,EAAE;gBACnBT,WAAW,CAACS,KAAK,GAAG,iBAAiB,CAAA;MACrC,UAAA,IAAMC,OAAO,GAAA,MAASC,yBAAyB,CAACC,sBAAsB,CAACb,WAAW,CAACU,KAAK,EAAEZ,KAAK,CAACgB,WAAW,CAAC,CAAC,CAAA;MAC7G,UAAA,IAAIH,OAAO,EAAE;kBACTV,WAAW,CAACS,KAAK,GAAGC,OAAO,CAAA;MAC/B,WAAA;MACJ,SAAC,MACI;gBACDV,WAAW,CAACS,KAAK,GAAG,EAAE,CAAA;MAC1B,SAAA;aACH,CAAA,CAAA;MAAA,MAAA,OAAAJ,WAAA,CAAAC,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;MAAA,KAAA;UAMD,SAASO,MAAMA,GAAS;MACpBf,MAAAA,WAAW,CAACU,KAAK,GAAGd,QAAQ,CAACc,KAAK,CAAA;MACtC,KAAA;UAEA,SAASM,MAAMA,GAAS;MAEpBpB,MAAAA,QAAQ,CAACc,KAAK,GAAGV,WAAW,CAACU,KAAK,CAAA;MACtC,KAAA;UAEA,SAASO,KAAKA,GAAS;YACnBjB,WAAW,CAACU,KAAK,GAAG,EAAE,CAAA;YACtBT,WAAW,CAACS,KAAK,GAAG,EAAE,CAAA;MAC1B,KAAA;UAGA,SAASQ,YAAYA,CAACC,SAAS,EAAQ;YACnC,IAAI,CAACA,SAAS,EAAE;cACZjB,YAAY,CAACQ,KAAK,GAAG,KAAK,CAAA;MAC9B,OAAA;MACJ,KAAA;MAMAU,IAAAA,KAAK,CAAC,MAAMtB,KAAK,CAACC,UAAU,EAAE,MAAM;MAChCH,MAAAA,QAAQ,CAACc,KAAK,GAAGZ,KAAK,CAACC,UAAU,CAAA;MACjCC,MAAAA,WAAW,CAACU,KAAK,GAAGZ,KAAK,CAACC,UAAU,CAAA;MACxC,KAAC,CAAC,CAAA;UAEFqB,KAAK,CAACpB,WAAW,EAAE,MAAM;MACrBqB,MAAAA,IAAI,CAAC,mBAAmB,EAAErB,WAAW,CAACU,KAAK,CAAC,CAAA;MAC5CL,MAAAA,UAAU,EAAE,CAAA;MAChB,KAAC,CAAC,CAAA;UASFiB,aAAa,CAAAb,iBAAA,CAAC,aAA2B;MACrC,MAAA,MAAMc,gBAAgB,EAAE,CAAA;MACxBlB,MAAAA,UAAU,EAAE,CAAA;MAChB,KAAC,CAAC,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}