{"version":3,"file":"Reporting.js","sources":["../../../Framework/Enums/Reporting/comparisonType.ts","../../../Framework/Enums/Reporting/fieldFilterSourceType.ts","../../../Framework/Enums/Reporting/filterExpressionType.ts","../../../Framework/Enums/Reporting/metricNumericDataType.ts","../../../Framework/Enums/Reporting/metricValueType.ts","../../../Framework/Enums/Reporting/reportFieldType.ts","../../../Framework/Enums/Reporting/unitType.ts"],"sourcesContent":["// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\n/**\r\n * The type of comparison operations that can be used when building custom\r\n * filtering logic.\r\n */\r\nexport const ComparisonType = {\r\n    /* No comparison performed. */\r\n    None: 0x0,\r\n\r\n    /** The two values must be equal to each other. */\r\n    EqualTo: 0x1,\r\n\r\n    /** The two values must not be equal to each other. */\r\n    NotEqualTo: 0x2,\r\n\r\n    /** The left value must start with the right value. */\r\n    StartsWith: 0x4,\r\n\r\n    /** The left value must contain the right value. */\r\n    Contains: 0x8,\r\n\r\n    /** The left value must not contain the right value. */\r\n    DoesNotContain: 0x10,\r\n\r\n    /** The left value must be a blank-like value. */\r\n    IsBlank: 0x20,\r\n\r\n    /** The left value must not be a blank-like value. */\r\n    IsNotBlank: 0x40,\r\n\r\n    /** The left value must be greater than the right value. */\r\n    GreaterThan: 0x80,\r\n\r\n    /** The left value must be greater than or equal to the right value. */\r\n    GreaterThanOrEqualTo: 0x100,\r\n\r\n    /** The left value must be less than the right value. */\r\n    LessThan: 0x200,\r\n\r\n    /** The left value must be less than or equal to the right value. */\r\n    LessThanOrEqualTo: 0x400,\r\n\r\n    /** The left value must end with the right value. */\r\n    EndsWith: 0x800,\r\n\r\n    /** The left value must fall between a set of values specified by the right value. */\r\n    Between: 0x1000,\r\n\r\n    /** The left value must match the regular expression defined in the right value. */\r\n    RegularExpression: 0x2000\r\n};\r\n\r\n/**\r\n * The type of comparison operations that can be used when building custom\r\n * filtering logic.\r\n */\r\nexport type ComparisonType = number;\r\n","//------------------------------------------------------------------------------\r\n// <auto-generated>\r\n//     This code was generated by the Rock.CodeGeneration project\r\n//     Changes to this file will be lost when the code is regenerated.\r\n// </auto-generated>\r\n//------------------------------------------------------------------------------\r\n// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\n/**\r\n * The sources of current value that can be used when building custom\r\n * filtering logic.This currently has only Attribute, but would later be\r\n * expanded to include other sources (such as properties).\r\n */\r\nexport const FieldFilterSourceType = {\r\n    /** The value will be read from an entity attribute value. */\r\n    Attribute: 0\r\n} as const;\r\n\r\n/**\r\n * The sources of current value that can be used when building custom\r\n * filtering logic.This currently has only Attribute, but would later be\r\n * expanded to include other sources (such as properties).\r\n */\r\nexport const FieldFilterSourceTypeDescription: Record<number, string> = {\r\n    0: \"Attribute\"\r\n};\r\n\r\n/**\r\n * The sources of current value that can be used when building custom\r\n * filtering logic.This currently has only Attribute, but would later be\r\n * expanded to include other sources (such as properties).\r\n */\r\nexport type FieldFilterSourceType = typeof FieldFilterSourceType[keyof typeof FieldFilterSourceType];\r\n","//------------------------------------------------------------------------------\r\n// <auto-generated>\r\n//     This code was generated by the Rock.CodeGeneration project\r\n//     Changes to this file will be lost when the code is regenerated.\r\n// </auto-generated>\r\n//------------------------------------------------------------------------------\r\n// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\n/** Type of Filter entry */\r\nexport const FilterExpressionType = {\r\n    /** Expression filter */\r\n    Filter: 0,\r\n\r\n    /** A collection of expressions/conditions that must match and should be \"and'd\" together. */\r\n    GroupAll: 1,\r\n\r\n    /** A collection of expressions/conditions where at least one condition/expression must match.  Expressions are \"or'd\" together. */\r\n    GroupAny: 2,\r\n\r\n    /** A collection of expressions/conditions where all conditions must be false.  Expressions are combined using a logical OR and the group result must be FALSE. */\r\n    GroupAllFalse: 3,\r\n\r\n    /** A collection of expressions/conditions where at least one condition must be false.  Expressions are combined using a logical AND and the group result must be FALSE. */\r\n    GroupAnyFalse: 4\r\n} as const;\r\n\r\n/** Type of Filter entry */\r\nexport const FilterExpressionTypeDescription: Record<number, string> = {\r\n    0: \"Filter\",\r\n\r\n    1: \"Group All\",\r\n\r\n    2: \"Group Any\",\r\n\r\n    3: \"Group All False\",\r\n\r\n    4: \"Group Any False\"\r\n};\r\n\r\n/** Type of Filter entry */\r\nexport type FilterExpressionType = typeof FilterExpressionType[keyof typeof FilterExpressionType];\r\n","//------------------------------------------------------------------------------\r\n// <auto-generated>\r\n//     This code was generated by the Rock.CodeGeneration project\r\n//     Changes to this file will be lost when the code is regenerated.\r\n// </auto-generated>\r\n//------------------------------------------------------------------------------\r\n// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\n/** The gender of a person */\r\nexport const MetricNumericDataType = {\r\n    /** Integer */\r\n    Integer: 0,\r\n\r\n    /** Decimal */\r\n    Decimal: 1,\r\n\r\n    /** Currency */\r\n    Currency: 2\r\n} as const;\r\n\r\n/** The gender of a person */\r\nexport const MetricNumericDataTypeDescription: Record<number, string> = {\r\n    0: \"Integer\",\r\n\r\n    1: \"Decimal\",\r\n\r\n    2: \"Currency\"\r\n};\r\n\r\n/** The gender of a person */\r\nexport type MetricNumericDataType = typeof MetricNumericDataType[keyof typeof MetricNumericDataType];\r\n","//------------------------------------------------------------------------------\r\n// <auto-generated>\r\n//     This code was generated by the Rock.CodeGeneration project\r\n//     Changes to this file will be lost when the code is regenerated.\r\n// </auto-generated>\r\n//------------------------------------------------------------------------------\r\n// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\n/** The type of Metric Value that a Metric Value represents */\r\nexport const MetricValueType = {\r\n    /** Metric Value represents something that was measured (for example: Fundraising Total) */\r\n    Measure: 0,\r\n\r\n    /** Metric Value represents a goal (for example: Fundraising Goal) */\r\n    Goal: 1\r\n} as const;\r\n\r\n/** The type of Metric Value that a Metric Value represents */\r\nexport const MetricValueTypeDescription: Record<number, string> = {\r\n    0: \"Measure\",\r\n\r\n    1: \"Goal\"\r\n};\r\n\r\n/** The type of Metric Value that a Metric Value represents */\r\nexport type MetricValueType = typeof MetricValueType[keyof typeof MetricValueType];\r\n","//------------------------------------------------------------------------------\r\n// <auto-generated>\r\n//     This code was generated by the Rock.CodeGeneration project\r\n//     Changes to this file will be lost when the code is regenerated.\r\n// </auto-generated>\r\n//------------------------------------------------------------------------------\r\n// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nexport const ReportFieldType = {\r\n    /** The field is one of the properties of the entity */\r\n    Property: 0,\r\n\r\n    /** The field is one of the attributes of the entity */\r\n    Attribute: 1,\r\n\r\n    /** The field(s) that result from a DataSelectComponent */\r\n    DataSelectComponent: 2\r\n} as const;\r\n\r\nexport const ReportFieldTypeDescription: Record<number, string> = {\r\n    0: \"Property\",\r\n\r\n    1: \"Attribute\",\r\n\r\n    2: \"Data Select Component\"\r\n};\r\n\r\nexport type ReportFieldType = typeof ReportFieldType[keyof typeof ReportFieldType];\r\n","//------------------------------------------------------------------------------\r\n// <auto-generated>\r\n//     This code was generated by the Rock.CodeGeneration project\r\n//     Changes to this file will be lost when the code is regenerated.\r\n// </auto-generated>\r\n//------------------------------------------------------------------------------\r\n// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\n/** The unit type for a metric */\r\nexport const UnitType = {\r\n    /** Numeric */\r\n    Numeric: 0,\r\n\r\n    /** Currency */\r\n    Currency: 1,\r\n\r\n    /** Percentage */\r\n    Percentage: 2\r\n} as const;\r\n\r\n/** The unit type for a metric */\r\nexport const UnitTypeDescription: Record<number, string> = {\r\n    0: \"Numeric\",\r\n\r\n    1: \"Currency\",\r\n\r\n    2: \"Percentage\"\r\n};\r\n\r\n/** The unit type for a metric */\r\nexport type UnitType = typeof UnitType[keyof typeof UnitType];\r\n"],"names":["ComparisonType","None","EqualTo","NotEqualTo","StartsWith","Contains","DoesNotContain","IsBlank","IsNotBlank","GreaterThan","GreaterThanOrEqualTo","LessThan","LessThanOrEqualTo","EndsWith","Between","RegularExpression","FieldFilterSourceType","Attribute","FieldFilterSourceTypeDescription","FilterExpressionType","Filter","GroupAll","GroupAny","GroupAllFalse","GroupAnyFalse","FilterExpressionTypeDescription","MetricNumericDataType","Integer","Decimal","Currency","MetricNumericDataTypeDescription","MetricValueType","Measure","Goal","MetricValueTypeDescription","ReportFieldType","Property","DataSelectComponent","ReportFieldTypeDescription","UnitType","Numeric","Percentage","UnitTypeDescription"],"mappings":";;;;;YAoBO,IAAMA,cAAc,GAAG;YAE1BC,EAAAA,IAAI,EAAE,GAAG;YAGTC,EAAAA,OAAO,EAAE,GAAG;YAGZC,EAAAA,UAAU,EAAE,GAAG;YAGfC,EAAAA,UAAU,EAAE,GAAG;YAGfC,EAAAA,QAAQ,EAAE,GAAG;YAGbC,EAAAA,cAAc,EAAE,IAAI;YAGpBC,EAAAA,OAAO,EAAE,IAAI;YAGbC,EAAAA,UAAU,EAAE,IAAI;YAGhBC,EAAAA,WAAW,EAAE,IAAI;YAGjBC,EAAAA,oBAAoB,EAAE,KAAK;YAG3BC,EAAAA,QAAQ,EAAE,KAAK;YAGfC,EAAAA,iBAAiB,EAAE,KAAK;YAGxBC,EAAAA,QAAQ,EAAE,KAAK;YAGfC,EAAAA,OAAO,EAAE,MAAM;YAGfC,EAAAA,iBAAiB,EAAE,MAAA;YACvB,CAAC;;;;;;;;YCrCM,IAAMC,qBAAqB,GAAG;YAEjCC,EAAAA,SAAS,EAAE,CAAA;YACf,CAAU,CAAA;YAOH,IAAMC,gCAAwD,GAAG;YACpE,EAAA,CAAC,EAAE,WAAA;YACP,CAAC;;;;;;;;;YChBM,IAAMC,oBAAoB,GAAG;YAEhCC,EAAAA,MAAM,EAAE,CAAC;YAGTC,EAAAA,QAAQ,EAAE,CAAC;YAGXC,EAAAA,QAAQ,EAAE,CAAC;YAGXC,EAAAA,aAAa,EAAE,CAAC;YAGhBC,EAAAA,aAAa,EAAE,CAAA;YACnB,CAAU,CAAA;YAGH,IAAMC,+BAAuD,GAAG;YACnE,EAAA,CAAC,EAAE,QAAQ;YAEX,EAAA,CAAC,EAAE,WAAW;YAEd,EAAA,CAAC,EAAE,WAAW;YAEd,EAAA,CAAC,EAAE,iBAAiB;YAEpB,EAAA,CAAC,EAAE,iBAAA;YACP,CAAC;;;;;;;;;YC5BM,IAAMC,qBAAqB,GAAG;YAEjCC,EAAAA,OAAO,EAAE,CAAC;YAGVC,EAAAA,OAAO,EAAE,CAAC;YAGVC,EAAAA,QAAQ,EAAE,CAAA;YACd,CAAU,CAAA;YAGH,IAAMC,gCAAwD,GAAG;YACpE,EAAA,CAAC,EAAE,SAAS;YAEZ,EAAA,CAAC,EAAE,SAAS;YAEZ,EAAA,CAAC,EAAE,UAAA;YACP,CAAC;;;;;;;;;YClBM,IAAMC,eAAe,GAAG;YAE3BC,EAAAA,OAAO,EAAE,CAAC;YAGVC,EAAAA,IAAI,EAAE,CAAA;YACV,CAAU,CAAA;YAGH,IAAMC,0BAAkD,GAAG;YAC9D,EAAA,CAAC,EAAE,SAAS;YAEZ,EAAA,CAAC,EAAE,MAAA;YACP,CAAC;;;;;;;;;YCdM,IAAMC,eAAe,GAAG;YAE3BC,EAAAA,QAAQ,EAAE,CAAC;YAGXnB,EAAAA,SAAS,EAAE,CAAC;YAGZoB,EAAAA,mBAAmB,EAAE,CAAA;YACzB,CAAU,CAAA;YAEH,IAAMC,0BAAkD,GAAG;YAC9D,EAAA,CAAC,EAAE,UAAU;YAEb,EAAA,CAAC,EAAE,WAAW;YAEd,EAAA,CAAC,EAAE,uBAAA;YACP,CAAC;;;;;;;;;YChBM,IAAMC,QAAQ,GAAG;YAEpBC,EAAAA,OAAO,EAAE,CAAC;YAGVX,EAAAA,QAAQ,EAAE,CAAC;YAGXY,EAAAA,UAAU,EAAE,CAAA;YAChB,CAAU,CAAA;YAGH,IAAMC,mBAA2C,GAAG;YACvD,EAAA,CAAC,EAAE,SAAS;YAEZ,EAAA,CAAC,EAAE,UAAU;YAEb,EAAA,CAAC,EAAE,YAAA;YACP,CAAC;;;;;;;;;;;;;;;"}