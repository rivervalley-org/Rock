{"version":3,"file":"experienceVisualizer.obs.js","sources":["../../../src/Event/InteractiveExperiences/ExperienceVisualizer/util.partial.ts","../../../src/Event/InteractiveExperiences/ExperienceVisualizer/barChart.partial.obs","../../../../Rock.JavaScript.Obsidian/node_modules/style-inject/dist/style-inject.es.js","../../../src/Event/InteractiveExperiences/ExperienceVisualizer/wordCloud.partial.obs","../../../src/Event/InteractiveExperiences/experienceVisualizer.obs"],"sourcesContent":["// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { VisualizerRenderConfigurationBag } from \"@Obsidian/ViewModels/Event/InteractiveExperiences/visualizerRenderConfigurationBag\";\r\nimport { ExperienceAnswerBag } from \"@Obsidian/ViewModels/Event/InteractiveExperiences/experienceAnswerBag\";\r\nimport { PropType } from \"vue\";\r\n\r\ntype VisualizerPropsType = {\r\n    /** The configuration to use when rendering this visualizer. */\r\n    renderConfiguration: {\r\n        type: PropType<VisualizerRenderConfigurationBag>,\r\n        required: true\r\n    },\r\n\r\n    /** The responses that should be displayed. */\r\n    responses: {\r\n        type: PropType<ExperienceAnswerBag[]>,\r\n        required: true\r\n    }\r\n};\r\n\r\n/** The properties that will be passed to every visualizer component. */\r\nexport const visualizerProps: VisualizerPropsType = {\r\n    renderConfiguration: {\r\n        type: Object as PropType<VisualizerRenderConfigurationBag>,\r\n        required: true\r\n    },\r\n\r\n    responses: {\r\n        type: Array as PropType<ExperienceAnswerBag[]>,\r\n        required: true\r\n    }\r\n};\r\n","<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <div class=\"experience-visualizer experience-visualizer-type-b1dfd377-9ef7-407f-9097-6206b98aec0d\" :class=\"additionalVisualizerClasses\">\r\n        <div v-if=\"renderConfiguration.title\" class=\"visualizer-title\">{{ renderConfiguration.title }}</div>\r\n        <div class=\"chart-container\">\r\n            <canvas ref=\"canvasElement\"></canvas>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<!--\r\n    Available CSS variable names that can be set. The major axis\r\n    is considered the one with the titles on it.\r\n\r\n    --major-axis-color = The color of the axis with the titles.\r\n    --major-axis-font-size = The font size of the axis with the titles.\r\n    --minor-axis-color = The color of the axis with the values.\r\n    --minor-axis-font-size = The font size of the axis with the values.\r\n\r\n-->\r\n<!-- Cannot use scoped here otherwise it becomes very difficult to override by custom CSS. -->\r\n<style>\r\n.experience-visualizer-type-b1dfd377-9ef7-407f-9097-6206b98aec0d {\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.experience-visualizer-type-b1dfd377-9ef7-407f-9097-6206b98aec0d .visualizer-title {\r\n    margin-bottom: 12px;\r\n    font-size: 36px;\r\n    color: var(--experience-visualizer-primary-color);\r\n    text-align: center;\r\n    font-weight: 700;\r\n}\r\n\r\n.experience-visualizer-type-b1dfd377-9ef7-407f-9097-6206b98aec0d .chart-container {\r\n    flex-grow: 1;\r\n}\r\n</style>\r\n\r\n<script setup lang=\"ts\">\r\n    import { computed, onMounted, shallowRef, watch } from \"vue\";\r\n    import { visualizerProps } from \"./util.partial\";\r\n    import { Chart, ChartConfiguration, ChartData, ChartTypeRegistry, ScaleOptions } from \"@Obsidian/Libs/chart\";\r\n    import { toNumber } from \"@Obsidian/Utility/numberUtils\";\r\n\r\n    type Rgba = {\r\n        r: number;\r\n        g: number;\r\n        b: number;\r\n        a: number;\r\n    };\r\n\r\n    const props = defineProps(visualizerProps);\r\n\r\n    // #region Values\r\n\r\n    const canvasElement = shallowRef<HTMLCanvasElement | null>(null);\r\n    const colorConsumer = createSequentialConsumer(getColors(), 0);\r\n    let chart: Chart<keyof ChartTypeRegistry, number[]> | null = null;\r\n\r\n    // #endregion\r\n\r\n    // #region Computed Values\r\n\r\n    const additionalVisualizerClasses = computed((): string => {\r\n        return `experience-visualizer-${props.renderConfiguration.actionId}`;\r\n    });\r\n\r\n    const borderWidth = computed((): number => {\r\n        const value = toNumber(props.renderConfiguration.configurationValues?.borderWidth || \"4\");\r\n\r\n        return Math.min(100, Math.max(0, value));\r\n    });\r\n\r\n    const fillOpacity = computed((): number => {\r\n        const value = toNumber(props.renderConfiguration.configurationValues?.fillOpacity || \"0.5\");\r\n\r\n        return Math.min(1.0, Math.max(0, value));\r\n    });\r\n\r\n    // #endregion\r\n\r\n    // #region Functions\r\n\r\n    function getColors(): Rgba[] {\r\n        let barColors = (props.renderConfiguration.configurationValues?.colors ?? \"\")\r\n        .split(\",\")\r\n        .map(c => c.trim())\r\n        .filter(c => c !== \"\");\r\n\r\n        if (barColors.length === 0) {\r\n            barColors = [\"#709ac7\", \"#80bb7c\", \"#f26863\", \"#80afcb\", \"#e48480\", \"#c48cb2\", \"#ea872e\", \"#f4cf68\", \"#968e8b\", \"#489b98\", \"#b18772\", \"#d67493\"];\r\n        }\r\n\r\n        return barColors.map(c => parseCssColor(c));\r\n    }\r\n\r\n    /**\r\n     * Parses a CSS color string into the individual RGBA components. This\r\n     * supports any color string that can be used in a CSS property.\r\n     *\r\n     * @param str The CSS color string to be parsed.\r\n     *\r\n     * @returns An object that contains the individual red, green, blue and alpha components.\r\n     */\r\n    function parseCssColor(str: string): Rgba {\r\n        const div = document.createElement(\"div\");\r\n        document.body.appendChild(div);\r\n        div.style.color = str;\r\n\r\n        const res = getComputedStyle(div).color.match(/[.\\d]+/g)?.map(Number);\r\n        div.remove();\r\n\r\n        if (!res) {\r\n            return { r: 0, g: 0, b: 0, a: 0 };\r\n        }\r\n\r\n        return res.length === 3\r\n            ? { r: res[0], g: res[1], b: res[2], a: 1 }\r\n            : { r: res[0], g: res[1], b: res[2], a: res[3] };\r\n    }\r\n\r\n    /**\r\n     * Creates a consumer in the form of a function that will take the next\r\n     * item in the list of values each time it is called. When the end is\r\n     * reached then it starts over from the beginning.\r\n     *\r\n     * @param values The values to be sequentially consumed.\r\n     * @param seed The starting index to use when creating the consumer.\r\n     */\r\n    function createSequentialConsumer<T>(values: T[], seed: number): (() => T) {\r\n        const items: T[] = [...values];\r\n        let index = seed % items.length;\r\n\r\n        return (): T => {\r\n            if (items.length === 0) {\r\n                throw new Error(\"No values were provided to consumer.\");\r\n            }\r\n\r\n            if (index >= items.length) {\r\n                index = 0;\r\n            }\r\n\r\n            return items[index++];\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets a font size that is scaled to match the screen. If the baseSize\r\n     * is 18 and the screen is 3840 pixels wide then the returned value is 36.\r\n     *\r\n     * @param baseSize The base font size to use if the screen is 1920 pixels wide.\r\n     *\r\n     * @returns The font size scaled to match the screen.\r\n     */\r\n    function getScaledFontSize(baseSize: number): number {\r\n        const ratio = document.body.clientWidth / 1920.0;\r\n\r\n        return baseSize * ratio;\r\n    }\r\n\r\n    /**\r\n     * Gets the value of a CSS variable or returns the default value if it\r\n     * couldn't be determined.\r\n     *\r\n     * @param style The style object that should be searched.\r\n     * @param variableName The CSS variable name, without the double hyphen prefix.\r\n     * @param defaultValue The value to use if the CSS variable wasn't found.\r\n     *\r\n     * @returns The CSS variable value or the default value.\r\n     */\r\n    function getStyleValue(style: CSSStyleDeclaration, variableName: string, defaultValue?: undefined | string): string | undefined {\r\n        const value = style.getPropertyValue(`--${variableName}`);\r\n\r\n        if (value !== \"\") {\r\n            return value;\r\n        }\r\n\r\n        return defaultValue;\r\n    }\r\n\r\n    /**\r\n     * Gets the font size of a CSS variable ore returns the scaled default value.\r\n     *\r\n     * @param style The style object that should be searched.\r\n     * @param variableName The CSS variabl ename, without the double hyphen prefix.\r\n     * @param defaultSize The default font size to use if the CSS variable wasn't found.\r\n     *\r\n     * @returns The CSS variable font size or the scaled font size from the default size.\r\n     */\r\n    function getStyleFontSize(style: CSSStyleDeclaration, variableName: string, defaultSize: number): number {\r\n        const value = style.getPropertyValue(`--${variableName}`);\r\n\r\n        if (value !== \"\" && !isNaN(parseFloat(value))) {\r\n            return parseFloat(value);\r\n        }\r\n\r\n        return getScaledFontSize(defaultSize);\r\n    }\r\n\r\n    /**\r\n     * Converts the response data into an array of objects that contain the\r\n     * response text and the number of times it has appeared.\r\n     *\r\n     * @returns An array of response counts.\r\n     */\r\n    function getResponseData(): { text: string, count: number }[] {\r\n        const words: Record<string, number> = {};\r\n\r\n        for (const response of props.responses) {\r\n            if (!response.response) {\r\n                continue;\r\n            }\r\n\r\n            if (typeof words[response.response] === \"undefined\") {\r\n                words[response.response] = 1;\r\n            }\r\n            else {\r\n                words[response.response] += 1;\r\n            }\r\n        }\r\n\r\n        return Object.keys(words)\r\n            .map(k => ({ text: k, count: words[k] }))\r\n            .sort((a, b) => a.text.localeCompare(b.text));\r\n    }\r\n\r\n    /**\r\n     * Converts an RGBA value into a CSS rgba(r,g,b,a) string. If the alphaAdjust\r\n     * is supplied then the RGBA alpha value is multiplied by the alphaAdjust\r\n     * to get the final alpha value.\r\n     *\r\n     * @param color The RGBA color values.\r\n     * @param alphaAdjust The adjustment value to be multiplied with the RGBA alpha component.\r\n     *\r\n     * @returns A string that represents the RGBA value as a CSS string.\r\n     */\r\n    function toCssRgba(color: Rgba, alphaAdjust?: undefined | number): string {\r\n        return `rgba(${color.r}, ${color.g}, ${color.b}, ${color.a * (alphaAdjust ?? 1)})`;\r\n    }\r\n\r\n    /**\r\n     * Gets the initial chart data to be used when building the chart for the\r\n     * first time.\r\n     *\r\n     * @returns The chart data object for Chart.JS.\r\n     */\r\n    function getChartData(): ChartData<keyof ChartTypeRegistry, number[]> {\r\n        const backgroundColors: string[] = [];\r\n        const borderColors: string[] = [];\r\n        const values: number[] = [];\r\n        const labels: string[] = [];\r\n\r\n        const words = getResponseData();\r\n\r\n        for (const word of words) {\r\n            const color = colorConsumer();\r\n\r\n            labels.push(word.text);\r\n            values.push(word.count);\r\n            backgroundColors.push(toCssRgba(color, fillOpacity.value));\r\n            borderColors.push(toCssRgba(color));\r\n        }\r\n\r\n        const data: ChartData<keyof ChartTypeRegistry, number[]> = {\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    data: values,\r\n                    backgroundColor: backgroundColors,\r\n                    borderColor: borderColors,\r\n                    borderWidth: fillOpacity.value < 1 ? borderWidth.value : 0\r\n                }\r\n            ]\r\n        };\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Gets the configuration data that will be used to draw the chart.\r\n     *\r\n     * @param style The style declaration that will be used to resolve CSS variables.\r\n     *\r\n     * @returns The chart configuration data that can be passed to Chart.JS.\r\n     */\r\n    function getChartConfig(style: CSSStyleDeclaration): ChartConfiguration<keyof ChartTypeRegistry, number[]> {\r\n        const axisDefaultColor = getStyleValue(style, \"experience-visualizer-primary-color\", \"#000\");\r\n        const xAxisFontSize = getStyleFontSize(style, \"major-axis-font-size\", 24);\r\n        const yAxisFontSize = getStyleFontSize(style, \"minor-axis-font-size\", 36);\r\n        const xAxisColor = getStyleValue(style, \"major-axis-color\", axisDefaultColor);\r\n        const yAxisColor = getStyleValue(style, \"minor-axis-color\", axisDefaultColor);\r\n        const isHorizontal = props.renderConfiguration.configurationValues?.orientation === \"horizontal\";\r\n\r\n        const majorScale: ScaleOptions = {\r\n            grid: {\r\n                display: false\r\n            },\r\n            ticks: {\r\n                color: yAxisColor,\r\n                font: {\r\n                    size: xAxisFontSize\r\n                }\r\n            }\r\n        };\r\n\r\n        const minorScale: ScaleOptions = {\r\n            type: \"linear\",\r\n            beginAtZero: true,\r\n            grid: {\r\n                display: false\r\n            },\r\n            ticks: {\r\n                color: xAxisColor,\r\n                font: {\r\n                    size: yAxisFontSize\r\n                },\r\n                precision: 0\r\n            }\r\n        };\r\n\r\n        const config: ChartConfiguration<keyof ChartTypeRegistry, number[]> = {\r\n            type: \"bar\",\r\n            data: getChartData(),\r\n            options: {\r\n                indexAxis: isHorizontal ? \"y\" : \"x\",\r\n                maintainAspectRatio: false,\r\n                responsive: true,\r\n                animation: {\r\n                    duration: 350\r\n                },\r\n                scales: {\r\n                    x: isHorizontal ? minorScale : majorScale,\r\n                    y: isHorizontal ? majorScale : minorScale\r\n                },\r\n                plugins: {\r\n                    legend: {\r\n                        display: false\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        return config;\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Event Handlers\r\n\r\n    /**\r\n     * Event handler for when the responses property has changed.\r\n     */\r\n    function onResponsesChanged(): void {\r\n        if (!chart || !chart.data.labels) {\r\n            return;\r\n        }\r\n\r\n        const responses = getResponseData();\r\n\r\n        // Update or add any responses.\r\n        for (const response of responses) {\r\n            const existingIndex = chart.data.labels.indexOf(response.text);\r\n\r\n            if (existingIndex !== -1) {\r\n                chart.data.datasets[0].data[existingIndex] = response.count;\r\n            }\r\n            else {\r\n                let insertIndex: number;\r\n                const color = colorConsumer();\r\n\r\n                // Find the position in the chart to insert this new response\r\n                // in alphabetical order.\r\n                for (insertIndex = 0; insertIndex < chart.data.labels.length; insertIndex++) {\r\n                    if (response.text.localeCompare((chart.data.labels as string[])[insertIndex]) < 0) {\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                chart.data.labels.splice(insertIndex, 0, response.text);\r\n                chart.data.datasets[0].data.splice(insertIndex, 0, response.count);\r\n                (chart.data.datasets[0].backgroundColor as string[]).splice(insertIndex, 0, toCssRgba(color, 0.5));\r\n                (chart.data.datasets[0].borderColor as string[]).splice(insertIndex, 0, toCssRgba(color));\r\n            }\r\n        }\r\n\r\n        // Find any responses in the chart that need to be removed.\r\n        const validResponseTexts = responses.map(r => r.text);\r\n        for (let index = 0; index < chart.data.labels.length;) {\r\n            if (validResponseTexts.includes((chart.data.labels as string[])[index])) {\r\n                index++;\r\n                continue;\r\n            }\r\n\r\n            chart.data.labels.splice(index, 1);\r\n            chart.data.datasets[0].data.splice(index, 1);\r\n            (chart.data.datasets[0].backgroundColor as string[]).splice(index, 1);\r\n            (chart.data.datasets[0].borderColor as string[]).splice(index, 1);\r\n        }\r\n\r\n        chart.update();\r\n    }\r\n\r\n    // #endregion\r\n\r\n    watch(() => props.responses, onResponsesChanged);\r\n\r\n    onMounted(() => {\r\n        if (!canvasElement.value) {\r\n            return;\r\n        }\r\n\r\n        const style = window.getComputedStyle(canvasElement.value);\r\n        chart = new Chart(canvasElement.value, getChartConfig(style));\r\n    });\r\n\r\n    onResponsesChanged();\r\n</script>\r\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <div class=\"experience-visualizer experience-visualizer-type-dc35f0f7-83e5-47d8-aa27-b448962b60dd\" :class=\"additionalVisualizerClasses\">\r\n        <div v-if=\"renderConfiguration.title\" class=\"visualizer-title\">{{ renderConfiguration.title }}</div>\r\n        <WordCloud :words=\"responses\"\r\n                   :angleCount=\"angleCount\"\r\n                   :fontName=\"fontName\"\r\n                   :colors=\"colors\"\r\n                   :minimumUpdateInterval=\"minimumUpdateInterval\"\r\n                   width=\"100%\"\r\n                   height=\"100%\" />\r\n    </div>\r\n</template>\r\n\r\n<!-- Cannot use scoped here otherwise it becomes very difficult to override by custom CSS. -->\r\n<style>\r\n.experience-visualizer-type-dc35f0f7-83e5-47d8-aa27-b448962b60dd {\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.experience-visualizer-type-dc35f0f7-83e5-47d8-aa27-b448962b60dd .visualizer-title {\r\n    margin-bottom: 12px;\r\n    font-size: 36px;\r\n    color: var(--experience-visualizer-primary-color);\r\n    text-align: center;\r\n    font-weight: 700;\r\n}\r\n\r\n.experience-visualizer-type-dc35f0f7-83e5-47d8-aa27-b448962b60dd .rock-word-cloud {\r\n    flex-grow: 1;\r\n}\r\n</style>\r\n\r\n<script setup lang=\"ts\">\r\n    import WordCloud from \"@Obsidian/Controls/wordCloud.obs\";\r\n    import { toNumber } from \"@Obsidian/Utility/numberUtils\";\r\n    import { computed, ref, watch } from \"vue\";\r\n    import { visualizerProps } from \"./util.partial\";\r\n\r\n    const props = defineProps(visualizerProps);\r\n\r\n    // #region Values\r\n\r\n    const responses = ref<string[]>([]);\r\n\r\n    // #endregion\r\n\r\n    // #region Computed Values\r\n\r\n    const additionalVisualizerClasses = computed((): string => {\r\n        return `experience-visualizer-${props.renderConfiguration.actionId}`;\r\n    });\r\n\r\n    const colors = computed((): string[] | undefined => {\r\n        const colorStrings = props.renderConfiguration.configurationValues\r\n            ?.colors\r\n            ?.split(\",\")\r\n            .map(c => c.trim())\r\n            .filter(c => c !== \"\")\r\n            ?? [];\r\n\r\n        return colorStrings.length > 0 ? colorStrings : undefined;\r\n    });\r\n\r\n    const angleCount = computed((): number => {\r\n        const value = toNumber(props.renderConfiguration.configurationValues?.angleCount || \"5\");\r\n\r\n        return Math.min(100, Math.max(1, Math.floor(value)));\r\n    });\r\n\r\n    const fontName = computed((): string | undefined => {\r\n        return props.renderConfiguration.configurationValues?.fontName || undefined;\r\n    });\r\n\r\n    const minimumUpdateInterval = computed((): number => {\r\n        return toNumber(props.renderConfiguration.configurationValues?.minimumUpdateInterval ?? 0) * 1_000;\r\n    });\r\n\r\n    // #endregion\r\n\r\n    // #region Functions\r\n\r\n    function updateResponses(): void {\r\n        responses.value = props.responses.filter(r => r.response).map(r => r.response as string);\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Event Handlers\r\n\r\n    // #endregion\r\n\r\n    watch(() => props.responses, updateResponses);\r\n\r\n    updateResponses();\r\n</script>\r\n","<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <NotificationBox v-if=\"config.errorMessage\" alertType=\"warning\">\r\n        {{ config.errorMessage }}\r\n    </NotificationBox>\r\n\r\n    <div v-else class=\"experience-visualizer-body\" :style=\"experienceStyles\">\r\n        <component v-if=\"activeVisualizerComponent\"\r\n                   :is=\"activeVisualizerComponent\"\r\n                   :renderConfiguration=\"activeRenderConfiguration\"\r\n                   :responses=\"activeResponses\" />\r\n    </div>\r\n</template>\r\n\r\n<!-- Cannot use scoped here otherwise it becomes very difficult to override by custom CSS. -->\r\n<style>\r\n.experience-visualizer-body {\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    left: 0;\r\n    bottom: 0;\r\n    padding: 18px;\r\n    color: var(--experience-visualizer-color);\r\n    background-color: var(--experience-visualizer-bg, inherit);\r\n    background-image: var(--experience-visualizer-bg-image, initial);\r\n}\r\n\r\n.experience-visualizer-body .experience-visualizer {\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n</style>\r\n\r\n<script setup lang=\"ts\">\r\n    import NotificationBox from \"@Obsidian/Controls/notificationBox.obs\";\r\n    import BarChart from \"./ExperienceVisualizer/barChart.partial.obs\";\r\n    import WordCloud from \"./ExperienceVisualizer/wordCloud.partial.obs\";\r\n    import { Component as VueComponent, reactive, ref, watch } from \"vue\";\r\n    import { getTopic, ITopic } from \"@Obsidian/Utility/realTime\";\r\n    import { IParticipantTopic } from \"./types.partial\";\r\n    import { ExperienceVisualizerInitializationBox } from \"@Obsidian/ViewModels/Blocks/Event/InteractiveExperiences/ExperienceVisualizer/experienceVisualizerInitializationBox\";\r\n    import { VisualizerOccurrenceBag } from \"@Obsidian/ViewModels/Blocks/Event/InteractiveExperiences/ExperienceVisualizer/visualizerOccurrenceBag\";\r\n    import { VisualizerRenderConfigurationBag } from \"@Obsidian/ViewModels/Event/InteractiveExperiences/visualizerRenderConfigurationBag\";\r\n    import { onConfigurationValuesChanged, useConfigurationValues, useInvokeBlockAction, useReloadBlock } from \"@Obsidian/Utility/block\";\r\n    import { Guid } from \"@Obsidian/Types\";\r\n    import { ExperienceAnswerBag } from \"@Obsidian/ViewModels/Event/InteractiveExperiences/experienceAnswerBag\";\r\n    import { InteractiveExperienceApprovalStatus } from \"@Obsidian/Enums/Event/interactiveExperienceApprovalStatus\";\r\n    import { updateRefValue } from \"@Obsidian/Utility/component\";\r\n    import { ExperienceStyleBag } from \"@Obsidian/ViewModels/Event/InteractiveExperiences/experienceStyleBag\";\r\n    import { RockDateTime } from \"@Obsidian/Utility/rockDateTime\";\r\n\r\n    const config = useConfigurationValues<ExperienceVisualizerInitializationBox>();\r\n    const invokeBlockAction = useInvokeBlockAction();\r\n\r\n    const actionTypeLookup: Record<Guid, VueComponent> = {\r\n        \"b1dfd377-9ef7-407f-9097-6206b98aec0d\": BarChart,\r\n        \"dc35f0f7-83e5-47d8-aa27-b448962b60dd\": WordCloud\r\n    };\r\n\r\n    // #region Values\r\n\r\n    const experienceToken = ref<string | null>(null);\r\n    const experienceStyles = ref(getExperienceStyles(null));\r\n    const eventId = ref<string | null>(null);\r\n    const activeActionId = ref<string | null>(null);\r\n    const activeVisualizerComponent = ref<VueComponent | null>(null);\r\n    const activeRenderConfiguration = ref<VisualizerRenderConfigurationBag | null>(null);\r\n    const occurrenceResponses = reactive<ExperienceAnswerBag[]>([]);\r\n    const activeResponses = ref<ExperienceAnswerBag[]>([]);\r\n\r\n    let realTimeTopic: ITopic<IParticipantTopic> | null = null;\r\n    let occurrenceEndDateTime: RockDateTime | null = null;\r\n    let checkForNewOccurrenceTimeout: NodeJS.Timeout | null = null;\r\n\r\n    const styleNode = document.createElement(\"style\");\r\n    styleNode.textContent = \"\";\r\n    document.head.appendChild(styleNode);\r\n\r\n    // #endregion\r\n\r\n    // #region Computed Values\r\n\r\n    // #endregion\r\n\r\n    // #region Functions\r\n\r\n    async function startRealTime(isReconnecting: boolean): Promise<void> {\r\n        var topic = await getTopic<IParticipantTopic>(\"Rock.RealTime.Topics.InteractiveExperienceParticipantTopic\");\r\n\r\n        topic.onDisconnected(async () => {\r\n            await startRealTime(true);\r\n            await clearExperience();\r\n            checkForNewOccurrence();\r\n        });\r\n\r\n        setupTopicListeners(topic);\r\n\r\n        realTimeTopic = topic;\r\n\r\n        if (!isReconnecting) {\r\n            setTimeout(onPingTimer, config.keepAliveInterval * 1_000);\r\n        }\r\n    }\r\n\r\n    async function joinExperience(token: string): Promise<void> {\r\n        if (!realTimeTopic) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Clear out any existing responses.\r\n            occurrenceResponses.slice();\r\n\r\n            const response = await realTimeTopic.server.joinExperience(token);\r\n\r\n            eventId.value = response.occurrenceIdKey ?? null;\r\n\r\n            // If there is already a visualizer active then show it.\r\n            if (response.currentVisualizerActionIdKey && response.currentVisualizerConfiguration) {\r\n                setupVisualizerComponent(response.currentVisualizerActionIdKey, response.currentVisualizerConfiguration);\r\n            }\r\n\r\n            await getAllAnswers(token);\r\n        }\r\n        catch (error) {\r\n            eventId.value = null;\r\n            experienceToken.value = null;\r\n            activeVisualizerComponent.value = null;\r\n            activeActionId.value = null;\r\n            activeRenderConfiguration.value = null;\r\n\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    function setupVisualizerComponent(actionId: string | null, renderConfiguration: VisualizerRenderConfigurationBag | null): void {\r\n        if (renderConfiguration === null || !renderConfiguration.visualizerTypeGuid || !actionTypeLookup[renderConfiguration.visualizerTypeGuid]) {\r\n            activeVisualizerComponent.value = null;\r\n            activeActionId.value = null;\r\n            activeRenderConfiguration.value = null;\r\n            return;\r\n        }\r\n\r\n        activeVisualizerComponent.value = actionTypeLookup[renderConfiguration.visualizerTypeGuid];\r\n        activeActionId.value = actionId;\r\n        activeRenderConfiguration.value = renderConfiguration;\r\n    }\r\n\r\n    function getExperienceStyles(style: ExperienceStyleBag | null | undefined): Record<string, string> {\r\n        const styles: Record<string, string> = {};\r\n\r\n        if (style?.visualizer?.backgroundColor) {\r\n            styles[\"--experience-visualizer-bg\"] = style.visualizer.backgroundColor;\r\n        }\r\n\r\n        if (style?.visualizer?.backgroundImage) {\r\n            styles[\"--experience-visualizer-bg-image\"] = `url('${style.visualizer.backgroundImage}')`;\r\n        }\r\n\r\n        if (style?.visualizer?.textColor) {\r\n            styles[\"--experience-visualizer-color\"] = style.visualizer.textColor;\r\n        }\r\n        else {\r\n            styles[\"--experience-visualizer-color\"] = \"var(--text-color)\";\r\n        }\r\n\r\n        if (style?.visualizer?.primaryColor) {\r\n            styles[\"--experience-visualizer-primary-bg\"] = style.visualizer.primaryColor;\r\n        }\r\n        else {\r\n            styles[\"--experience-visualizer-primary-bg\"] = \"var(--brand-primary)\";\r\n        }\r\n\r\n        if (style?.visualizer?.secondaryColor) {\r\n            styles[\"--experience-visualizer-secondary-color\"] = style.visualizer.secondaryColor;\r\n        }\r\n        else {\r\n            styles[\"--experience-visualizer-secondary-color\"] = \"var(--brand-success)\";\r\n        }\r\n\r\n        if (style?.visualizer?.accentColor) {\r\n            styles[\"--experience-visualizer-accent-color\"] = style.visualizer.accentColor;\r\n        }\r\n        else {\r\n            styles[\"--experience-visualizer-accent-color\"] = \"var(--brand-info)\";\r\n        }\r\n\r\n        return styles;\r\n    }\r\n\r\n    function setupCustomStyles(style: ExperienceStyleBag | null | undefined): void {\r\n        styleNode.textContent = style?.visualizer?.customCss ?? \"\";\r\n    }\r\n\r\n    /**\r\n     * Called during startup as well as anytime the realTimeTopic prop\r\n     * value changes. Add all the listeners needed to the topic.\r\n     */\r\n    function setupTopicListeners(topic: ITopic<IParticipantTopic>): void {\r\n        topic.on(\"showVisualizer\", onShowVisualizer);\r\n        topic.on(\"clearVisualizer\", onClearVisualizer);\r\n        topic.on(\"answerSubmitted\", onAnswerSubmitted);\r\n        topic.on(\"answerUpdated\", onAnswerUpdated);\r\n        topic.on(\"answerRemoved\", onAnswerRemoved);\r\n    }\r\n\r\n    /**\r\n     * Updates an existing answer. If the answer is found it is replaced with\r\n     * the new answer data. Otherwise it is appended to the list of answers.\r\n     *\r\n     * @param answer The answer details that were updated.\r\n     */\r\n    function updateAnswer(answer: ExperienceAnswerBag): void {\r\n        const answerIndex = occurrenceResponses.findIndex(a => a.idKey === answer.idKey);\r\n\r\n        if (answerIndex !== -1) {\r\n            occurrenceResponses.splice(answerIndex, 1, answer);\r\n        }\r\n        else {\r\n            occurrenceResponses.push(answer);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes an answer from the list of answers.\r\n     *\r\n     * @param answerIdKey The identifier key of the answer to be removed.\r\n     */\r\n    function removeAnswer(answerIdKey: string): void {\r\n        const answerIndex = occurrenceResponses.findIndex(a => a.idKey === answerIdKey);\r\n\r\n        if (answerIndex !== -1) {\r\n            occurrenceResponses.splice(answerIndex, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets all answers from the server. This will also clear the existing\r\n     * list of answers. Otherwise we might still get out of sync when the\r\n     * results come back due to a RealTime message arriving before the\r\n     * results are returned.\r\n     *\r\n     * @param token The token to retrieve answers for.\r\n     */\r\n    async function getAllAnswers(token: string): Promise<void> {\r\n        // Clear the array.\r\n        occurrenceResponses.slice();\r\n\r\n        const response = await invokeBlockAction<ExperienceAnswerBag[]>(\"GetExperienceAnswers\", { token: token });\r\n\r\n        if (response.isSuccess && response.data) {\r\n            for (const answer of response.data) {\r\n                updateAnswer(answer);\r\n            }\r\n        }\r\n    }\r\n\r\n    async function clearExperience(): Promise<void> {\r\n        if (eventId.value && realTimeTopic) {\r\n            try {\r\n                await realTimeTopic.server.leaveExperience(eventId.value);\r\n            }\r\n            catch {\r\n                // Intentionally ignored. This throws an error if we are\r\n                // reconnecting.\r\n            }\r\n        }\r\n\r\n        experienceToken.value = null;\r\n        experienceStyles.value = getExperienceStyles(null);\r\n        occurrenceEndDateTime = null;\r\n        eventId.value = null;\r\n\r\n        setupVisualizerComponent(null, null);\r\n    }\r\n\r\n    async function checkForNewOccurrence(): Promise<void> {\r\n        if (checkForNewOccurrenceTimeout) {\r\n            clearTimeout(checkForNewOccurrenceTimeout);\r\n            checkForNewOccurrenceTimeout = null;\r\n        }\r\n\r\n        try {\r\n            // If we already have an occurrence and it hasn't ended yet then\r\n            // don't check for a new one. Otherwise we might switch visualizers\r\n            // in the middle of an experience.\r\n            if (occurrenceEndDateTime) {\r\n                if (RockDateTime.now().toMilliseconds() < occurrenceEndDateTime.toMilliseconds()) {\r\n                    return;\r\n                }\r\n                else {\r\n                    return clearExperience();\r\n                }\r\n            }\r\n\r\n            const result = await invokeBlockAction<VisualizerOccurrenceBag | null>(\"GetCurrentOccurrence\");\r\n\r\n            if (result.isSuccess) {\r\n                await updateOccurrence(result.data);\r\n            }\r\n            else {\r\n                console.error(result.errorMessage ?? \"Unknown error trying to get current occurrence.\");\r\n            }\r\n        }\r\n        finally {\r\n            // Re-check every minute.\r\n            checkForNewOccurrenceTimeout = setTimeout(checkForNewOccurrence, 60_000);\r\n        }\r\n    }\r\n\r\n    async function updateOccurrence(occurrence: VisualizerOccurrenceBag | null): Promise<void> {\r\n        if (realTimeTopic == null) {\r\n            experienceToken.value = occurrence?.experienceToken ?? null;\r\n            experienceStyles.value = getExperienceStyles(occurrence?.style);\r\n            occurrenceEndDateTime = RockDateTime.parseISO(occurrence?.occurrenceEndDateTime ?? \"\");\r\n\r\n            return;\r\n        }\r\n\r\n        await clearExperience();\r\n\r\n        if (!occurrence) {\r\n            return;\r\n        }\r\n\r\n        experienceStyles.value = getExperienceStyles(occurrence.style);\r\n        occurrenceEndDateTime = RockDateTime.parseISO(occurrence.occurrenceEndDateTime ?? \"\");\r\n\r\n        if (occurrence.experienceToken) {\r\n            await joinExperience(occurrence.experienceToken);\r\n        }\r\n    }\r\n\r\n    async function startup(): Promise<void> {\r\n        await startRealTime(false);\r\n        await checkForNewOccurrence();\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Event Handlers\r\n\r\n    async function onShowVisualizer(id: string, actionId: string, renderConfiguration: VisualizerRenderConfigurationBag | null): Promise<void> {\r\n        if (eventId.value === id) {\r\n            setupVisualizerComponent(actionId, renderConfiguration);\r\n        }\r\n    }\r\n\r\n    function onClearVisualizer(id: string): void {\r\n        if (eventId.value === id) {\r\n            activeVisualizerComponent.value = null;\r\n            activeActionId.value = null;\r\n            activeRenderConfiguration.value = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Event handler for when a new answer has been submitted via the RealTime engine.\r\n     *\r\n     * @param idKey The identifier key of the occurrence the answer was submitted to.\r\n     * @param answer The answer details that were submitted.\r\n     */\r\n    function onAnswerSubmitted(idKey: string, answer: ExperienceAnswerBag): void {\r\n        if (idKey !== eventId.value) {\r\n            return;\r\n        }\r\n\r\n        updateAnswer(answer);\r\n    }\r\n\r\n    /**\r\n     * Event handler for when an existing answer has been updated via the\r\n     * RealTime engine.\r\n     *\r\n     * @param idKey The identifier key of the occurrence the answer was updated for.\r\n     * @param answer The answer details that were updated.\r\n     */\r\n    function onAnswerUpdated(idKey: string, answer: ExperienceAnswerBag): void {\r\n        if (idKey !== eventId.value) {\r\n            return;\r\n        }\r\n\r\n        updateAnswer(answer);\r\n    }\r\n\r\n    /**\r\n     * Event handler for when an existing answer has been removed via the\r\n     * RealTime engine.\r\n     *\r\n     * @param idKey The identifier key of the occurrence the answer was removed from.\r\n     * @param answerIdKey The identifier key of the answer that was removed.\r\n     */\r\n    function onAnswerRemoved(idKey: string, answerIdKey: string): void {\r\n        if (idKey !== eventId.value) {\r\n            return;\r\n        }\r\n\r\n        removeAnswer(answerIdKey);\r\n    }\r\n\r\n    /**\r\n     * Call every keepAliveInterval duration to inform the server that we\r\n     * are still here and listening for events.\r\n     */\r\n    async function onPingTimer(): Promise<void> {\r\n        try {\r\n            if (realTimeTopic && eventId.value) {\r\n                await realTimeTopic.server.pingExperience(eventId.value);\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.error(error instanceof Error ? error.message : error);\r\n        }\r\n        finally {\r\n            setTimeout(onPingTimer, config.keepAliveInterval * 1000);\r\n        }\r\n    }\r\n\r\n    // #endregion\r\n\r\n    watch([activeActionId, occurrenceResponses], () => {\r\n        updateRefValue(activeResponses, occurrenceResponses.filter(r => r.actionIdKey === activeActionId.value && r.status === InteractiveExperienceApprovalStatus.Approved));\r\n    });\r\n\r\n    onConfigurationValuesChanged(useReloadBlock());\r\n\r\n    setupCustomStyles(null);\r\n    startup();\r\n</script>\r\n"],"names":["visualizerProps","renderConfiguration","type","Object","required","responses","Array","canvasElement","shallowRef","colorConsumer","createSequentialConsumer","getColors","chart","additionalVisualizerClasses","computed","concat","props","actionId","borderWidth","_props$renderConfigur","value","toNumber","configurationValues","Math","min","max","fillOpacity","_props$renderConfigur2","_props$renderConfigur3","_props$renderConfigur4","barColors","colors","split","map","c","trim","filter","length","parseCssColor","str","_getComputedStyle$col","div","document","createElement","body","appendChild","style","color","res","getComputedStyle","match","Number","remove","r","g","b","a","values","seed","items","index","Error","getScaledFontSize","baseSize","ratio","clientWidth","getStyleValue","variableName","defaultValue","getPropertyValue","getStyleFontSize","defaultSize","isNaN","parseFloat","getResponseData","words","_iterator","_createForOfIteratorHelper","_step","s","n","done","response","err","e","f","keys","k","text","count","sort","localeCompare","toCssRgba","alphaAdjust","getChartData","backgroundColors","borderColors","labels","_iterator2","_step2","word","push","data","datasets","backgroundColor","borderColor","getChartConfig","_props$renderConfigur5","axisDefaultColor","xAxisFontSize","yAxisFontSize","xAxisColor","yAxisColor","isHorizontal","orientation","majorScale","grid","display","ticks","font","size","minorScale","beginAtZero","precision","config","options","indexAxis","maintainAspectRatio","responsive","animation","duration","scales","x","y","plugins","legend","onResponsesChanged","_iterator3","_step3","existingIndex","indexOf","insertIndex","splice","validResponseTexts","includes","update","watch","onMounted","window","Chart","styleInject","css","ref","insertAt","head","getElementsByTagName","firstChild","insertBefore","styleSheet","cssText","createTextNode","colorStrings","undefined","angleCount","floor","fontName","minimumUpdateInterval","_props$renderConfigur6","_props$renderConfigur7","updateResponses","useConfigurationValues","invokeBlockAction","useInvokeBlockAction","actionTypeLookup","BarChart","WordCloud","experienceToken","experienceStyles","getExperienceStyles","eventId","activeActionId","activeVisualizerComponent","activeRenderConfiguration","occurrenceResponses","reactive","activeResponses","realTimeTopic","occurrenceEndDateTime","checkForNewOccurrenceTimeout","styleNode","textContent","startRealTime","_x","_startRealTime","apply","arguments","_asyncToGenerator","isReconnecting","topic","getTopic","onDisconnected","clearExperience","checkForNewOccurrence","setupTopicListeners","setTimeout","onPingTimer","keepAliveInterval","joinExperience","_x2","_joinExperience","token","_response$occurrenceI","slice","server","occurrenceIdKey","currentVisualizerActionIdKey","currentVisualizerConfiguration","setupVisualizerComponent","getAllAnswers","error","visualizerTypeGuid","_style$visualizer","_style$visualizer2","_style$visualizer3","_style$visualizer4","_style$visualizer5","_style$visualizer6","styles","visualizer","backgroundImage","textColor","primaryColor","secondaryColor","accentColor","setupCustomStyles","_style$visualizer$cus","_style$visualizer7","customCss","on","onShowVisualizer","onClearVisualizer","onAnswerSubmitted","onAnswerUpdated","onAnswerRemoved","updateAnswer","answer","answerIndex","findIndex","idKey","removeAnswer","answerIdKey","_x3","_getAllAnswers","isSuccess","_clearExperience","leaveExperience","_unused","_checkForNewOccurrence","clearTimeout","RockDateTime","now","toMilliseconds","result","updateOccurrence","_result$errorMessage","console","errorMessage","_x4","_updateOccurrence","occurrence","_occurrence$occurrenc2","_occurrence$experienc","_occurrence$occurrenc","parseISO","startup","_startup","_x5","_x6","_x7","_onShowVisualizer","id","_onPingTimer","pingExperience","message","updateRefValue","actionIdKey","status","InteractiveExperienceApprovalStatus","Approved","onConfigurationValuesChanged","useReloadBlock"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAoCO,IAAMA,eAAoC,GAAG;MAChDC,EAAAA,mBAAmB,EAAE;MACjBC,IAAAA,IAAI,EAAEC,MAAoD;MAC1DC,IAAAA,QAAQ,EAAE,IAAA;SACb;MAEDC,EAAAA,SAAS,EAAE;MACPH,IAAAA,IAAI,EAAEI,KAAwC;MAC9CF,IAAAA,QAAQ,EAAE,IAAA;MACd,GAAA;MACJ,CAAC;;;;;;;;;;;;;;MCWG,IAAA,IAAMG,aAAa,GAAGC,UAAU,CAA2B,IAAI,CAAC,CAAA;UAChE,IAAMC,aAAa,GAAGC,wBAAwB,CAACC,SAAS,EAAE,EAAE,CAAC,CAAC,CAAA;UAC9D,IAAIC,KAAsD,GAAG,IAAI,CAAA;MAMjE,IAAA,IAAMC,2BAA2B,GAAGC,QAAQ,CAAC,MAAc;MACvD,MAAA,OAAA,wBAAA,CAAAC,MAAA,CAAgCC,KAAK,CAACf,mBAAmB,CAACgB,QAAQ,CAAA,CAAA;MACtE,KAAC,CAAC,CAAA;MAEF,IAAA,IAAMC,WAAW,GAAGJ,QAAQ,CAAC,MAAc;MAAA,MAAA,IAAAK,qBAAA,CAAA;YACvC,IAAMC,KAAK,GAAGC,QAAQ,CAAC,EAAAF,qBAAA,GAAAH,KAAK,CAACf,mBAAmB,CAACqB,mBAAmB,MAAA,IAAA,IAAAH,qBAAA,KAA7CA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,qBAAA,CAA+CD,WAAW,KAAI,GAAG,CAAC,CAAA;MAEzF,MAAA,OAAOK,IAAI,CAACC,GAAG,CAAC,GAAG,EAAED,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEL,KAAK,CAAC,CAAC,CAAA;MAC5C,KAAC,CAAC,CAAA;MAEF,IAAA,IAAMM,WAAW,GAAGZ,QAAQ,CAAC,MAAc;MAAA,MAAA,IAAAa,sBAAA,CAAA;YACvC,IAAMP,KAAK,GAAGC,QAAQ,CAAC,EAAAM,sBAAA,GAAAX,KAAK,CAACf,mBAAmB,CAACqB,mBAAmB,MAAA,IAAA,IAAAK,sBAAA,KAA7CA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,sBAAA,CAA+CD,WAAW,KAAI,KAAK,CAAC,CAAA;MAE3F,MAAA,OAAOH,IAAI,CAACC,GAAG,CAAC,GAAG,EAAED,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEL,KAAK,CAAC,CAAC,CAAA;MAC5C,KAAC,CAAC,CAAA;UAMF,SAAST,SAASA,GAAW;YAAA,IAAAiB,sBAAA,EAAAC,sBAAA,CAAA;YACzB,IAAIC,SAAS,GAAG,CAAAF,CAAAA,sBAAA,IAAAC,sBAAA,GAACb,KAAK,CAACf,mBAAmB,CAACqB,mBAAmB,MAAA,IAAA,IAAAO,sBAAA,KAA7CA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,sBAAA,CAA+CE,MAAM,MAAA,IAAA,IAAAH,sBAAA,KAAA,KAAA,CAAA,GAAAA,sBAAA,GAAI,EAAE,EAC3EI,KAAK,CAAC,GAAG,CAAC,CACVC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,EAAE,CAAC,CAClBC,MAAM,CAACF,CAAC,IAAIA,CAAC,KAAK,EAAE,CAAC,CAAA;MAEtB,MAAA,IAAIJ,SAAS,CAACO,MAAM,KAAK,CAAC,EAAE;cACxBP,SAAS,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAA;MACpJ,OAAA;YAEA,OAAOA,SAAS,CAACG,GAAG,CAACC,CAAC,IAAII,aAAa,CAACJ,CAAC,CAAC,CAAC,CAAA;MAC/C,KAAA;UAUA,SAASI,aAAaA,CAACC,GAAW,EAAQ;MAAA,MAAA,IAAAC,qBAAA,CAAA;MACtC,MAAA,IAAMC,GAAG,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC,CAAA;MACzCD,MAAAA,QAAQ,CAACE,IAAI,CAACC,WAAW,CAACJ,GAAG,CAAC,CAAA;MAC9BA,MAAAA,GAAG,CAACK,KAAK,CAACC,KAAK,GAAGR,GAAG,CAAA;YAErB,IAAMS,GAAG,IAAAR,qBAAA,GAAGS,gBAAgB,CAACR,GAAG,CAAC,CAACM,KAAK,CAACG,KAAK,CAAC,SAAS,CAAC,MAAA,IAAA,IAAAV,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAA5CA,qBAAA,CAA8CP,GAAG,CAACkB,MAAM,CAAC,CAAA;YACrEV,GAAG,CAACW,MAAM,EAAE,CAAA;YAEZ,IAAI,CAACJ,GAAG,EAAE;cACN,OAAO;MAAEK,UAAAA,CAAC,EAAE,CAAC;MAAEC,UAAAA,CAAC,EAAE,CAAC;MAAEC,UAAAA,CAAC,EAAE,CAAC;MAAEC,UAAAA,CAAC,EAAE,CAAA;eAAG,CAAA;MACrC,OAAA;MAEA,MAAA,OAAOR,GAAG,CAACX,MAAM,KAAK,CAAC,GACjB;MAAEgB,QAAAA,CAAC,EAAEL,GAAG,CAAC,CAAC,CAAC;MAAEM,QAAAA,CAAC,EAAEN,GAAG,CAAC,CAAC,CAAC;MAAEO,QAAAA,CAAC,EAAEP,GAAG,CAAC,CAAC,CAAC;MAAEQ,QAAAA,CAAC,EAAE,CAAA;MAAE,OAAC,GACzC;MAAEH,QAAAA,CAAC,EAAEL,GAAG,CAAC,CAAC,CAAC;MAAEM,QAAAA,CAAC,EAAEN,GAAG,CAAC,CAAC,CAAC;MAAEO,QAAAA,CAAC,EAAEP,GAAG,CAAC,CAAC,CAAC;cAAEQ,CAAC,EAAER,GAAG,CAAC,CAAC,CAAA;aAAG,CAAA;MACxD,KAAA;MAUA,IAAA,SAAStC,wBAAwBA,CAAI+C,MAAW,EAAEC,IAAY,EAAa;MACvE,MAAA,IAAMC,KAAU,GAAG,CAAC,GAAGF,MAAM,CAAC,CAAA;MAC9B,MAAA,IAAIG,KAAK,GAAGF,IAAI,GAAGC,KAAK,CAACtB,MAAM,CAAA;MAE/B,MAAA,OAAO,MAAS;MACZ,QAAA,IAAIsB,KAAK,CAACtB,MAAM,KAAK,CAAC,EAAE;MACpB,UAAA,MAAM,IAAIwB,KAAK,CAAC,sCAAsC,CAAC,CAAA;MAC3D,SAAA;MAEA,QAAA,IAAID,KAAK,IAAID,KAAK,CAACtB,MAAM,EAAE;MACvBuB,UAAAA,KAAK,GAAG,CAAC,CAAA;MACb,SAAA;MAEA,QAAA,OAAOD,KAAK,CAACC,KAAK,EAAE,CAAC,CAAA;aACxB,CAAA;MACL,KAAA;UAUA,SAASE,iBAAiBA,CAACC,QAAgB,EAAU;YACjD,IAAMC,KAAK,GAAGtB,QAAQ,CAACE,IAAI,CAACqB,WAAW,GAAG,MAAM,CAAA;YAEhD,OAAOF,QAAQ,GAAGC,KAAK,CAAA;MAC3B,KAAA;MAYA,IAAA,SAASE,aAAaA,CAACpB,KAA0B,EAAEqB,YAAoB,EAAEC,YAAiC,EAAsB;YAC5H,IAAMhD,KAAK,GAAG0B,KAAK,CAACuB,gBAAgB,CAAAtD,IAAAA,CAAAA,MAAA,CAAMoD,YAAY,CAAG,CAAA,CAAA;YAEzD,IAAI/C,KAAK,KAAK,EAAE,EAAE;MACd,QAAA,OAAOA,KAAK,CAAA;MAChB,OAAA;MAEA,MAAA,OAAOgD,YAAY,CAAA;MACvB,KAAA;MAWA,IAAA,SAASE,gBAAgBA,CAACxB,KAA0B,EAAEqB,YAAoB,EAAEI,WAAmB,EAAU;YACrG,IAAMnD,KAAK,GAAG0B,KAAK,CAACuB,gBAAgB,CAAAtD,IAAAA,CAAAA,MAAA,CAAMoD,YAAY,CAAG,CAAA,CAAA;MAEzD,MAAA,IAAI/C,KAAK,KAAK,EAAE,IAAI,CAACoD,KAAK,CAACC,UAAU,CAACrD,KAAK,CAAC,CAAC,EAAE;cAC3C,OAAOqD,UAAU,CAACrD,KAAK,CAAC,CAAA;MAC5B,OAAA;YAEA,OAAO0C,iBAAiB,CAACS,WAAW,CAAC,CAAA;MACzC,KAAA;UAQA,SAASG,eAAeA,GAAsC;YAC1D,IAAMC,KAA6B,GAAG,EAAE,CAAA;MAAC,MAAA,IAAAC,SAAA,GAAAC,0BAAA,CAElB7D,KAAK,CAACX,SAAS,CAAA;cAAAyE,KAAA,CAAA;MAAA,MAAA,IAAA;cAAtC,KAAAF,SAAA,CAAAG,CAAA,EAAAD,EAAAA,CAAAA,CAAAA,KAAA,GAAAF,SAAA,CAAAI,CAAA,EAAAC,EAAAA,IAAA,GAAwC;MAAA,UAAA,IAA7BC,QAAQ,GAAAJ,KAAA,CAAA1D,KAAA,CAAA;MACf,UAAA,IAAI,CAAC8D,QAAQ,CAACA,QAAQ,EAAE;MACpB,YAAA,SAAA;MACJ,WAAA;gBAEA,IAAI,OAAOP,KAAK,CAACO,QAAQ,CAACA,QAAQ,CAAC,KAAK,WAAW,EAAE;MACjDP,YAAAA,KAAK,CAACO,QAAQ,CAACA,QAAQ,CAAC,GAAG,CAAC,CAAA;MAChC,WAAC,MACI;MACDP,YAAAA,KAAK,CAACO,QAAQ,CAACA,QAAQ,CAAC,IAAI,CAAC,CAAA;MACjC,WAAA;MACJ,SAAA;MAAC,OAAA,CAAA,OAAAC,GAAA,EAAA;cAAAP,SAAA,CAAAQ,CAAA,CAAAD,GAAA,CAAA,CAAA;MAAA,OAAA,SAAA;MAAAP,QAAAA,SAAA,CAAAS,CAAA,EAAA,CAAA;MAAA,OAAA;YAED,OAAOlF,MAAM,CAACmF,IAAI,CAACX,KAAK,CAAC,CACpB1C,GAAG,CAACsD,CAAC,KAAK;MAAEC,QAAAA,IAAI,EAAED,CAAC;cAAEE,KAAK,EAAEd,KAAK,CAACY,CAAC,CAAA;aAAG,CAAC,CAAC,CACxCG,IAAI,CAAC,CAAClC,CAAC,EAAED,CAAC,KAAKC,CAAC,CAACgC,IAAI,CAACG,aAAa,CAACpC,CAAC,CAACiC,IAAI,CAAC,CAAC,CAAA;MACrD,KAAA;MAYA,IAAA,SAASI,SAASA,CAAC7C,KAAW,EAAE8C,WAAgC,EAAU;MACtE,MAAA,OAAA,OAAA,CAAA9E,MAAA,CAAegC,KAAK,CAACM,CAAC,EAAA,IAAA,CAAA,CAAAtC,MAAA,CAAKgC,KAAK,CAACO,CAAC,EAAA,IAAA,CAAA,CAAAvC,MAAA,CAAKgC,KAAK,CAACQ,CAAC,EAAAxC,IAAAA,CAAAA,CAAAA,MAAA,CAAKgC,KAAK,CAACS,CAAC,IAAIqC,WAAW,KAAA,IAAA,IAAXA,WAAW,KAAA,KAAA,CAAA,GAAXA,WAAW,GAAI,CAAC,CAAC,EAAA,GAAA,CAAA,CAAA;MACnF,KAAA;UAQA,SAASC,YAAYA,GAAiD;YAClE,IAAMC,gBAA0B,GAAG,EAAE,CAAA;YACrC,IAAMC,YAAsB,GAAG,EAAE,CAAA;YACjC,IAAMvC,MAAgB,GAAG,EAAE,CAAA;YAC3B,IAAMwC,MAAgB,GAAG,EAAE,CAAA;YAE3B,IAAMtB,KAAK,GAAGD,eAAe,EAAE,CAAA;MAAC,MAAA,IAAAwB,UAAA,GAAArB,0BAAA,CAEbF,KAAK,CAAA;cAAAwB,MAAA,CAAA;MAAA,MAAA,IAAA;cAAxB,KAAAD,UAAA,CAAAnB,CAAA,EAAAoB,EAAAA,CAAAA,CAAAA,MAAA,GAAAD,UAAA,CAAAlB,CAAA,EAAAC,EAAAA,IAAA,GAA0B;MAAA,UAAA,IAAfmB,IAAI,GAAAD,MAAA,CAAA/E,KAAA,CAAA;gBACX,IAAM2B,KAAK,GAAGtC,aAAa,EAAE,CAAA;MAE7BwF,UAAAA,MAAM,CAACI,IAAI,CAACD,IAAI,CAACZ,IAAI,CAAC,CAAA;MACtB/B,UAAAA,MAAM,CAAC4C,IAAI,CAACD,IAAI,CAACX,KAAK,CAAC,CAAA;gBACvBM,gBAAgB,CAACM,IAAI,CAACT,SAAS,CAAC7C,KAAK,EAAErB,WAAW,CAACN,KAAK,CAAC,CAAC,CAAA;MAC1D4E,UAAAA,YAAY,CAACK,IAAI,CAACT,SAAS,CAAC7C,KAAK,CAAC,CAAC,CAAA;MACvC,SAAA;MAAC,OAAA,CAAA,OAAAoC,GAAA,EAAA;cAAAe,UAAA,CAAAd,CAAA,CAAAD,GAAA,CAAA,CAAA;MAAA,OAAA,SAAA;MAAAe,QAAAA,UAAA,CAAAb,CAAA,EAAA,CAAA;MAAA,OAAA;MAED,MAAA,IAAMiB,IAAkD,GAAG;MACvDL,QAAAA,MAAM,EAAEA,MAAM;MACdM,QAAAA,QAAQ,EAAE,CACN;MACID,UAAAA,IAAI,EAAE7C,MAAM;MACZ+C,UAAAA,eAAe,EAAET,gBAAgB;MACjCU,UAAAA,WAAW,EAAET,YAAY;gBACzB9E,WAAW,EAAEQ,WAAW,CAACN,KAAK,GAAG,CAAC,GAAGF,WAAW,CAACE,KAAK,GAAG,CAAA;eAC5D,CAAA;aAER,CAAA;MAED,MAAA,OAAOkF,IAAI,CAAA;MACf,KAAA;UASA,SAASI,cAAcA,CAAC5D,KAA0B,EAAyD;MAAA,MAAA,IAAA6D,sBAAA,CAAA;YACvG,IAAMC,gBAAgB,GAAG1C,aAAa,CAACpB,KAAK,EAAE,qCAAqC,EAAE,MAAM,CAAC,CAAA;YAC5F,IAAM+D,aAAa,GAAGvC,gBAAgB,CAACxB,KAAK,EAAE,sBAAsB,EAAE,EAAE,CAAC,CAAA;YACzE,IAAMgE,aAAa,GAAGxC,gBAAgB,CAACxB,KAAK,EAAE,sBAAsB,EAAE,EAAE,CAAC,CAAA;YACzE,IAAMiE,UAAU,GAAG7C,aAAa,CAACpB,KAAK,EAAE,kBAAkB,EAAE8D,gBAAgB,CAAC,CAAA;YAC7E,IAAMI,UAAU,GAAG9C,aAAa,CAACpB,KAAK,EAAE,kBAAkB,EAAE8D,gBAAgB,CAAC,CAAA;MAC7E,MAAA,IAAMK,YAAY,GAAG,CAAA,CAAAN,sBAAA,GAAA3F,KAAK,CAACf,mBAAmB,CAACqB,mBAAmB,cAAAqF,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAA7CA,sBAAA,CAA+CO,WAAW,MAAK,YAAY,CAAA;MAEhG,MAAA,IAAMC,UAAwB,GAAG;MAC7BC,QAAAA,IAAI,EAAE;MACFC,UAAAA,OAAO,EAAE,KAAA;eACZ;MACDC,QAAAA,KAAK,EAAE;MACHvE,UAAAA,KAAK,EAAEiE,UAAU;MACjBO,UAAAA,IAAI,EAAE;MACFC,YAAAA,IAAI,EAAEX,aAAAA;MACV,WAAA;MACJ,SAAA;aACH,CAAA;MAED,MAAA,IAAMY,UAAwB,GAAG;MAC7BvH,QAAAA,IAAI,EAAE,QAAQ;MACdwH,QAAAA,WAAW,EAAE,IAAI;MACjBN,QAAAA,IAAI,EAAE;MACFC,UAAAA,OAAO,EAAE,KAAA;eACZ;MACDC,QAAAA,KAAK,EAAE;MACHvE,UAAAA,KAAK,EAAEgE,UAAU;MACjBQ,UAAAA,IAAI,EAAE;MACFC,YAAAA,IAAI,EAAEV,aAAAA;iBACT;MACDa,UAAAA,SAAS,EAAE,CAAA;MACf,SAAA;aACH,CAAA;MAED,MAAA,IAAMC,MAA6D,GAAG;MAClE1H,QAAAA,IAAI,EAAE,KAAK;cACXoG,IAAI,EAAER,YAAY,EAAE;MACpB+B,QAAAA,OAAO,EAAE;MACLC,UAAAA,SAAS,EAAEb,YAAY,GAAG,GAAG,GAAG,GAAG;MACnCc,UAAAA,mBAAmB,EAAE,KAAK;MAC1BC,UAAAA,UAAU,EAAE,IAAI;MAChBC,UAAAA,SAAS,EAAE;MACPC,YAAAA,QAAQ,EAAE,GAAA;iBACb;MACDC,UAAAA,MAAM,EAAE;MACJC,YAAAA,CAAC,EAAEnB,YAAY,GAAGQ,UAAU,GAAGN,UAAU;MACzCkB,YAAAA,CAAC,EAAEpB,YAAY,GAAGE,UAAU,GAAGM,UAAAA;iBAClC;MACDa,UAAAA,OAAO,EAAE;MACLC,YAAAA,MAAM,EAAE;MACJlB,cAAAA,OAAO,EAAE,KAAA;MACb,aAAA;MACJ,WAAA;MACJ,SAAA;aACH,CAAA;MAED,MAAA,OAAOO,MAAM,CAAA;MACjB,KAAA;UASA,SAASY,kBAAkBA,GAAS;YAChC,IAAI,CAAC5H,KAAK,IAAI,CAACA,KAAK,CAAC0F,IAAI,CAACL,MAAM,EAAE;MAC9B,QAAA,OAAA;MACJ,OAAA;YAEA,IAAM5F,SAAS,GAAGqE,eAAe,EAAE,CAAA;MAAC,MAAA,IAAA+D,UAAA,GAAA5D,0BAAA,CAGbxE,SAAS,CAAA;cAAAqI,MAAA,CAAA;MAAA,MAAA,IAAA;cAAhC,KAAAD,UAAA,CAAA1D,CAAA,EAAA2D,EAAAA,CAAAA,CAAAA,MAAA,GAAAD,UAAA,CAAAzD,CAAA,EAAAC,EAAAA,IAAA,GAAkC;MAAA,UAAA,IAAvBC,QAAQ,GAAAwD,MAAA,CAAAtH,KAAA,CAAA;MACf,UAAA,IAAMuH,aAAa,GAAG/H,KAAK,CAAC0F,IAAI,CAACL,MAAM,CAAC2C,OAAO,CAAC1D,QAAQ,CAACM,IAAI,CAAC,CAAA;MAE9D,UAAA,IAAImD,aAAa,KAAK,CAAC,CAAC,EAAE;MACtB/H,YAAAA,KAAK,CAAC0F,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC,CAACD,IAAI,CAACqC,aAAa,CAAC,GAAGzD,QAAQ,CAACO,KAAK,CAAA;MAC/D,WAAC,MACI;MACD,YAAA,IAAIoD,WAAmB,GAAA,KAAA,CAAA,CAAA;kBACvB,IAAM9F,KAAK,GAAGtC,aAAa,EAAE,CAAA;MAI7B,YAAA,KAAKoI,WAAW,GAAG,CAAC,EAAEA,WAAW,GAAGjI,KAAK,CAAC0F,IAAI,CAACL,MAAM,CAAC5D,MAAM,EAAEwG,WAAW,EAAE,EAAE;MACzE,cAAA,IAAI3D,QAAQ,CAACM,IAAI,CAACG,aAAa,CAAE/E,KAAK,CAAC0F,IAAI,CAACL,MAAM,CAAc4C,WAAW,CAAC,CAAC,GAAG,CAAC,EAAE;MAC/E,gBAAA,MAAA;MACJ,eAAA;MACJ,aAAA;MAEAjI,YAAAA,KAAK,CAAC0F,IAAI,CAACL,MAAM,CAAC6C,MAAM,CAACD,WAAW,EAAE,CAAC,EAAE3D,QAAQ,CAACM,IAAI,CAAC,CAAA;MACvD5E,YAAAA,KAAK,CAAC0F,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC,CAACD,IAAI,CAACwC,MAAM,CAACD,WAAW,EAAE,CAAC,EAAE3D,QAAQ,CAACO,KAAK,CAAC,CAAA;kBACjE7E,KAAK,CAAC0F,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC,CAACC,eAAe,CAAcsC,MAAM,CAACD,WAAW,EAAE,CAAC,EAAEjD,SAAS,CAAC7C,KAAK,EAAE,GAAG,CAAC,CAAC,CAAA;kBACjGnC,KAAK,CAAC0F,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC,CAACE,WAAW,CAAcqC,MAAM,CAACD,WAAW,EAAE,CAAC,EAAEjD,SAAS,CAAC7C,KAAK,CAAC,CAAC,CAAA;MAC7F,WAAA;MACJ,SAAA;MAAC,OAAA,CAAA,OAAAoC,GAAA,EAAA;cAAAsD,UAAA,CAAArD,CAAA,CAAAD,GAAA,CAAA,CAAA;MAAA,OAAA,SAAA;MAAAsD,QAAAA,UAAA,CAAApD,CAAA,EAAA,CAAA;MAAA,OAAA;YAGD,IAAM0D,kBAAkB,GAAG1I,SAAS,CAAC4B,GAAG,CAACoB,CAAC,IAAIA,CAAC,CAACmC,IAAI,CAAC,CAAA;MACrD,MAAA,KAAK,IAAI5B,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGhD,KAAK,CAAC0F,IAAI,CAACL,MAAM,CAAC5D,MAAM,GAAG;MACnD,QAAA,IAAI0G,kBAAkB,CAACC,QAAQ,CAAEpI,KAAK,CAAC0F,IAAI,CAACL,MAAM,CAAcrC,KAAK,CAAC,CAAC,EAAE;MACrEA,UAAAA,KAAK,EAAE,CAAA;MACP,UAAA,SAAA;MACJ,SAAA;cAEAhD,KAAK,CAAC0F,IAAI,CAACL,MAAM,CAAC6C,MAAM,CAAClF,KAAK,EAAE,CAAC,CAAC,CAAA;MAClChD,QAAAA,KAAK,CAAC0F,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC,CAACD,IAAI,CAACwC,MAAM,CAAClF,KAAK,EAAE,CAAC,CAAC,CAAA;MAC3ChD,QAAAA,KAAK,CAAC0F,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC,CAACC,eAAe,CAAcsC,MAAM,CAAClF,KAAK,EAAE,CAAC,CAAC,CAAA;MACpEhD,QAAAA,KAAK,CAAC0F,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC,CAACE,WAAW,CAAcqC,MAAM,CAAClF,KAAK,EAAE,CAAC,CAAC,CAAA;MACrE,OAAA;YAEAhD,KAAK,CAACqI,MAAM,EAAE,CAAA;MAClB,KAAA;MAIAC,IAAAA,KAAK,CAAC,MAAMlI,KAAK,CAACX,SAAS,EAAEmI,kBAAkB,CAAC,CAAA;MAEhDW,IAAAA,SAAS,CAAC,MAAM;MACZ,MAAA,IAAI,CAAC5I,aAAa,CAACa,KAAK,EAAE;MACtB,QAAA,OAAA;MACJ,OAAA;YAEA,IAAM0B,KAAK,GAAGsG,MAAM,CAACnG,gBAAgB,CAAC1C,aAAa,CAACa,KAAK,CAAC,CAAA;MAC1DR,MAAAA,KAAK,GAAG,IAAIyI,KAAK,CAAC9I,aAAa,CAACa,KAAK,EAAEsF,cAAc,CAAC5D,KAAK,CAAC,CAAC,CAAA;MACjE,KAAC,CAAC,CAAA;MAEF0F,IAAAA,kBAAkB,EAAE,CAAA;;;;;;;;;;;;MCjaxB,SAASc,WAAWA,CAACC,GAAG,EAAEC,GAAG,EAAE;QAC7B,IAAKA,GAAG,KAAK,KAAK,CAAC,EAAGA,GAAG,GAAG,EAAE,CAAA;MAC9B,EAAA,IAAIC,QAAQ,GAAGD,GAAG,CAACC,QAAQ,CAAA;MAE3B,EAAA,IAAI,CAACF,GAAG,IAAI,OAAO7G,QAAQ,KAAK,WAAW,EAAE;MAAE,IAAA,OAAA;MAAQ,GAAA;MAEvD,EAAA,IAAIgH,IAAI,GAAGhH,QAAQ,CAACgH,IAAI,IAAIhH,QAAQ,CAACiH,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;MACpE,EAAA,IAAI7G,KAAK,GAAGJ,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC,CAAA;QAC3CG,KAAK,CAAC5C,IAAI,GAAG,UAAU,CAAA;QAEvB,IAAIuJ,QAAQ,KAAK,KAAK,EAAE;UACtB,IAAIC,IAAI,CAACE,UAAU,EAAE;YACnBF,IAAI,CAACG,YAAY,CAAC/G,KAAK,EAAE4G,IAAI,CAACE,UAAU,CAAC,CAAA;MAC3C,KAAC,MAAM;MACLF,MAAAA,IAAI,CAAC7G,WAAW,CAACC,KAAK,CAAC,CAAA;MACzB,KAAA;MACF,GAAC,MAAM;MACL4G,IAAAA,IAAI,CAAC7G,WAAW,CAACC,KAAK,CAAC,CAAA;MACzB,GAAA;QAEA,IAAIA,KAAK,CAACgH,UAAU,EAAE;MACpBhH,IAAAA,KAAK,CAACgH,UAAU,CAACC,OAAO,GAAGR,GAAG,CAAA;MAChC,GAAC,MAAM;UACLzG,KAAK,CAACD,WAAW,CAACH,QAAQ,CAACsH,cAAc,CAACT,GAAG,CAAC,CAAC,CAAA;MACjD,GAAA;MACF;;;;;;;;;;;;;;;;MCmBI,IAAA,IAAMlJ,SAAS,GAAGmJ,GAAG,CAAW,EAAE,CAAC,CAAA;MAMnC,IAAA,IAAM3I,2BAA2B,GAAGC,QAAQ,CAAC,MAAc;MACvD,MAAA,OAAA,wBAAA,CAAAC,MAAA,CAAgCC,KAAK,CAACf,mBAAmB,CAACgB,QAAQ,CAAA,CAAA;MACtE,KAAC,CAAC,CAAA;MAEF,IAAA,IAAMc,MAAM,GAAGjB,QAAQ,CAAC,MAA4B;MAAA,MAAA,IAAAK,qBAAA,EAAAQ,sBAAA,EAAAC,sBAAA,CAAA;YAChD,IAAMqI,YAAY,GAAA9I,CAAAA,qBAAA,GAAAQ,CAAAA,sBAAA,GAAGX,KAAK,CAACf,mBAAmB,CAACqB,mBAAmB,MAAA,IAAA,IAAAK,sBAAA,KAAAC,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,CAAAA,sBAAA,GAA7CD,sBAAA,CACfI,MAAM,cAAAH,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GADSA,sBAAA,CAEfI,KAAK,CAAC,GAAG,CAAC,CACXC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,EAAE,CAAC,CAClBC,MAAM,CAACF,CAAC,IAAIA,CAAC,KAAK,EAAE,CAAC,cAAAf,qBAAA,KAAA,KAAA,CAAA,GAAAA,qBAAA,GACnB,EAAE,CAAA;YAET,OAAO8I,YAAY,CAAC5H,MAAM,GAAG,CAAC,GAAG4H,YAAY,GAAGC,SAAS,CAAA;MAC7D,KAAC,CAAC,CAAA;MAEF,IAAA,IAAMC,UAAU,GAAGrJ,QAAQ,CAAC,MAAc;MAAA,MAAA,IAAAe,sBAAA,CAAA;YACtC,IAAMT,KAAK,GAAGC,QAAQ,CAAC,EAAAQ,sBAAA,GAAAb,KAAK,CAACf,mBAAmB,CAACqB,mBAAmB,MAAA,IAAA,IAAAO,sBAAA,KAA7CA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,sBAAA,CAA+CsI,UAAU,KAAI,GAAG,CAAC,CAAA;MAExF,MAAA,OAAO5I,IAAI,CAACC,GAAG,CAAC,GAAG,EAAED,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEF,IAAI,CAAC6I,KAAK,CAAChJ,KAAK,CAAC,CAAC,CAAC,CAAA;MACxD,KAAC,CAAC,CAAA;MAEF,IAAA,IAAMiJ,QAAQ,GAAGvJ,QAAQ,CAAC,MAA0B;MAAA,MAAA,IAAA6F,sBAAA,CAAA;MAChD,MAAA,OAAO,CAAAA,CAAAA,sBAAA,GAAA3F,KAAK,CAACf,mBAAmB,CAACqB,mBAAmB,MAAA,IAAA,IAAAqF,sBAAA,KAA7CA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,sBAAA,CAA+C0D,QAAQ,KAAIH,SAAS,CAAA;MAC/E,KAAC,CAAC,CAAA;MAEF,IAAA,IAAMI,qBAAqB,GAAGxJ,QAAQ,CAAC,MAAc;YAAA,IAAAyJ,sBAAA,EAAAC,sBAAA,CAAA;YACjD,OAAOnJ,QAAQ,CAAAkJ,CAAAA,sBAAA,GAAAC,CAAAA,sBAAA,GAACxJ,KAAK,CAACf,mBAAmB,CAACqB,mBAAmB,MAAA,IAAA,IAAAkJ,sBAAA,KAA7CA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,sBAAA,CAA+CF,qBAAqB,MAAAC,IAAAA,IAAAA,sBAAA,KAAAA,KAAAA,CAAAA,GAAAA,sBAAA,GAAI,CAAC,CAAC,GAAG,IAAK,CAAA;MACtG,KAAC,CAAC,CAAA;UAMF,SAASE,eAAeA,GAAS;YAC7BpK,SAAS,CAACe,KAAK,GAAGJ,KAAK,CAACX,SAAS,CAAC+B,MAAM,CAACiB,CAAC,IAAIA,CAAC,CAAC6B,QAAQ,CAAC,CAACjD,GAAG,CAACoB,CAAC,IAAIA,CAAC,CAAC6B,QAAkB,CAAC,CAAA;MAC5F,KAAA;MAQAgE,IAAAA,KAAK,CAAC,MAAMlI,KAAK,CAACX,SAAS,EAAEoK,eAAe,CAAC,CAAA;MAE7CA,IAAAA,eAAe,EAAE,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;UC3CjB,IAAM7C,MAAM,GAAG8C,sBAAsB,EAAyC,CAAA;UAC9E,IAAMC,iBAAiB,GAAGC,oBAAoB,EAAE,CAAA;MAEhD,IAAA,IAAMC,gBAA4C,GAAG;MACjD,MAAA,sCAAsC,EAAEC,QAAQ;MAChD,MAAA,sCAAsC,EAAEC,QAAAA;WAC3C,CAAA;MAID,IAAA,IAAMC,eAAe,GAAGxB,GAAG,CAAgB,IAAI,CAAC,CAAA;UAChD,IAAMyB,gBAAgB,GAAGzB,GAAG,CAAC0B,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAA;MACvD,IAAA,IAAMC,OAAO,GAAG3B,GAAG,CAAgB,IAAI,CAAC,CAAA;MACxC,IAAA,IAAM4B,cAAc,GAAG5B,GAAG,CAAgB,IAAI,CAAC,CAAA;MAC/C,IAAA,IAAM6B,yBAAyB,GAAG7B,GAAG,CAAsB,IAAI,CAAC,CAAA;MAChE,IAAA,IAAM8B,yBAAyB,GAAG9B,GAAG,CAA0C,IAAI,CAAC,CAAA;MACpF,IAAA,IAAM+B,mBAAmB,GAAGC,QAAQ,CAAwB,EAAE,CAAC,CAAA;MAC/D,IAAA,IAAMC,eAAe,GAAGjC,GAAG,CAAwB,EAAE,CAAC,CAAA;UAEtD,IAAIkC,aAA+C,GAAG,IAAI,CAAA;UAC1D,IAAIC,qBAA0C,GAAG,IAAI,CAAA;UACrD,IAAIC,4BAAmD,GAAG,IAAI,CAAA;MAE9D,IAAA,IAAMC,SAAS,GAAGnJ,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC,CAAA;UACjDkJ,SAAS,CAACC,WAAW,GAAG,EAAE,CAAA;MAC1BpJ,IAAAA,QAAQ,CAACgH,IAAI,CAAC7G,WAAW,CAACgJ,SAAS,CAAC,CAAA;UAAC,SAUtBE,aAAaA,CAAAC,EAAA,EAAA;MAAA,MAAA,OAAAC,cAAA,CAAAC,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;MAAA,KAAA;MAAA,IAAA,SAAAF,cAAA,GAAA;MAAAA,MAAAA,cAAA,GAAAG,iBAAA,CAA5B,WAA6BC,cAAuB,EAAiB;MACjE,QAAA,IAAIC,KAAK,GAAA,MAASC,QAAQ,CAAoB,4DAA4D,CAAC,CAAA;MAE3GD,QAAAA,KAAK,CAACE,cAAc,CAAAJ,iBAAA,CAAC,aAAY;gBAC7B,MAAML,aAAa,CAAC,IAAI,CAAC,CAAA;MACzB,UAAA,MAAMU,eAAe,EAAE,CAAA;MACvBC,UAAAA,qBAAqB,EAAE,CAAA;MAC3B,SAAC,CAAC,CAAA,CAAA;cAEFC,mBAAmB,CAACL,KAAK,CAAC,CAAA;MAE1BZ,QAAAA,aAAa,GAAGY,KAAK,CAAA;cAErB,IAAI,CAACD,cAAc,EAAE;gBACjBO,UAAU,CAACC,WAAW,EAAEjF,MAAM,CAACkF,iBAAiB,GAAG,IAAK,CAAC,CAAA;MAC7D,SAAA;aACH,CAAA,CAAA;MAAA,MAAA,OAAAb,cAAA,CAAAC,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;MAAA,KAAA;UAAA,SAEcY,cAAcA,CAAAC,GAAA,EAAA;MAAA,MAAA,OAAAC,eAAA,CAAAf,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;MAAA,KAAA;MAAA,IAAA,SAAAc,eAAA,GAAA;MAAAA,MAAAA,eAAA,GAAAb,iBAAA,CAA7B,WAA8Bc,KAAa,EAAiB;cACxD,IAAI,CAACxB,aAAa,EAAE;MAChB,UAAA,OAAA;MACJ,SAAA;cAEA,IAAI;MAAA,UAAA,IAAAyB,qBAAA,CAAA;gBAEA5B,mBAAmB,CAAC6B,KAAK,EAAE,CAAA;gBAE3B,IAAMlI,QAAQ,SAASwG,aAAa,CAAC2B,MAAM,CAACN,cAAc,CAACG,KAAK,CAAC,CAAA;MAEjE/B,UAAAA,OAAO,CAAC/J,KAAK,GAAA+L,CAAAA,qBAAA,GAAGjI,QAAQ,CAACoI,eAAe,MAAAH,IAAAA,IAAAA,qBAAA,KAAAA,KAAAA,CAAAA,GAAAA,qBAAA,GAAI,IAAI,CAAA;MAGhD,UAAA,IAAIjI,QAAQ,CAACqI,4BAA4B,IAAIrI,QAAQ,CAACsI,8BAA8B,EAAE;kBAClFC,wBAAwB,CAACvI,QAAQ,CAACqI,4BAA4B,EAAErI,QAAQ,CAACsI,8BAA8B,CAAC,CAAA;MAC5G,WAAA;gBAEA,MAAME,aAAa,CAACR,KAAK,CAAC,CAAA;eAC7B,CACD,OAAOS,KAAK,EAAE;gBACVxC,OAAO,CAAC/J,KAAK,GAAG,IAAI,CAAA;gBACpB4J,eAAe,CAAC5J,KAAK,GAAG,IAAI,CAAA;gBAC5BiK,yBAAyB,CAACjK,KAAK,GAAG,IAAI,CAAA;gBACtCgK,cAAc,CAAChK,KAAK,GAAG,IAAI,CAAA;gBAC3BkK,yBAAyB,CAAClK,KAAK,GAAG,IAAI,CAAA;MAEtC,UAAA,MAAMuM,KAAK,CAAA;MACf,SAAA;aACH,CAAA,CAAA;MAAA,MAAA,OAAAV,eAAA,CAAAf,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;MAAA,KAAA;MAED,IAAA,SAASsB,wBAAwBA,CAACxM,QAAuB,EAAEhB,mBAA4D,EAAQ;MAC3H,MAAA,IAAIA,mBAAmB,KAAK,IAAI,IAAI,CAACA,mBAAmB,CAAC2N,kBAAkB,IAAI,CAAC/C,gBAAgB,CAAC5K,mBAAmB,CAAC2N,kBAAkB,CAAC,EAAE;cACtIvC,yBAAyB,CAACjK,KAAK,GAAG,IAAI,CAAA;cACtCgK,cAAc,CAAChK,KAAK,GAAG,IAAI,CAAA;cAC3BkK,yBAAyB,CAAClK,KAAK,GAAG,IAAI,CAAA;MACtC,QAAA,OAAA;MACJ,OAAA;YAEAiK,yBAAyB,CAACjK,KAAK,GAAGyJ,gBAAgB,CAAC5K,mBAAmB,CAAC2N,kBAAkB,CAAC,CAAA;YAC1FxC,cAAc,CAAChK,KAAK,GAAGH,QAAQ,CAAA;YAC/BqK,yBAAyB,CAAClK,KAAK,GAAGnB,mBAAmB,CAAA;MACzD,KAAA;UAEA,SAASiL,mBAAmBA,CAACpI,KAA4C,EAA0B;YAAA,IAAA+K,iBAAA,EAAAC,kBAAA,EAAAC,kBAAA,EAAAC,kBAAA,EAAAC,kBAAA,EAAAC,kBAAA,CAAA;YAC/F,IAAMC,MAA8B,GAAG,EAAE,CAAA;MAEzC,MAAA,IAAIrL,KAAK,KAAA,IAAA,IAALA,KAAK,KAAA,KAAA,CAAA,IAAA,CAAA+K,iBAAA,GAAL/K,KAAK,CAAEsL,UAAU,cAAAP,iBAAA,KAAA,KAAA,CAAA,IAAjBA,iBAAA,CAAmBrH,eAAe,EAAE;cACpC2H,MAAM,CAAC,4BAA4B,CAAC,GAAGrL,KAAK,CAACsL,UAAU,CAAC5H,eAAe,CAAA;MAC3E,OAAA;MAEA,MAAA,IAAI1D,KAAK,KAAA,IAAA,IAALA,KAAK,KAAA,KAAA,CAAA,IAAA,CAAAgL,kBAAA,GAALhL,KAAK,CAAEsL,UAAU,cAAAN,kBAAA,KAAA,KAAA,CAAA,IAAjBA,kBAAA,CAAmBO,eAAe,EAAE;cACpCF,MAAM,CAAC,kCAAkC,CAAC,GAAApN,OAAAA,CAAAA,MAAA,CAAW+B,KAAK,CAACsL,UAAU,CAACC,eAAe,EAAI,IAAA,CAAA,CAAA;MAC7F,OAAA;MAEA,MAAA,IAAIvL,KAAK,KAAA,IAAA,IAALA,KAAK,KAAA,KAAA,CAAA,IAAA,CAAAiL,kBAAA,GAALjL,KAAK,CAAEsL,UAAU,cAAAL,kBAAA,KAAA,KAAA,CAAA,IAAjBA,kBAAA,CAAmBO,SAAS,EAAE;cAC9BH,MAAM,CAAC,+BAA+B,CAAC,GAAGrL,KAAK,CAACsL,UAAU,CAACE,SAAS,CAAA;MACxE,OAAC,MACI;MACDH,QAAAA,MAAM,CAAC,+BAA+B,CAAC,GAAG,mBAAmB,CAAA;MACjE,OAAA;MAEA,MAAA,IAAIrL,KAAK,KAAA,IAAA,IAALA,KAAK,KAAA,KAAA,CAAA,IAAA,CAAAkL,kBAAA,GAALlL,KAAK,CAAEsL,UAAU,cAAAJ,kBAAA,KAAA,KAAA,CAAA,IAAjBA,kBAAA,CAAmBO,YAAY,EAAE;cACjCJ,MAAM,CAAC,oCAAoC,CAAC,GAAGrL,KAAK,CAACsL,UAAU,CAACG,YAAY,CAAA;MAChF,OAAC,MACI;MACDJ,QAAAA,MAAM,CAAC,oCAAoC,CAAC,GAAG,sBAAsB,CAAA;MACzE,OAAA;MAEA,MAAA,IAAIrL,KAAK,KAAA,IAAA,IAALA,KAAK,KAAA,KAAA,CAAA,IAAA,CAAAmL,kBAAA,GAALnL,KAAK,CAAEsL,UAAU,cAAAH,kBAAA,KAAA,KAAA,CAAA,IAAjBA,kBAAA,CAAmBO,cAAc,EAAE;cACnCL,MAAM,CAAC,yCAAyC,CAAC,GAAGrL,KAAK,CAACsL,UAAU,CAACI,cAAc,CAAA;MACvF,OAAC,MACI;MACDL,QAAAA,MAAM,CAAC,yCAAyC,CAAC,GAAG,sBAAsB,CAAA;MAC9E,OAAA;MAEA,MAAA,IAAIrL,KAAK,KAAA,IAAA,IAALA,KAAK,KAAA,KAAA,CAAA,IAAA,CAAAoL,kBAAA,GAALpL,KAAK,CAAEsL,UAAU,cAAAF,kBAAA,KAAA,KAAA,CAAA,IAAjBA,kBAAA,CAAmBO,WAAW,EAAE;cAChCN,MAAM,CAAC,sCAAsC,CAAC,GAAGrL,KAAK,CAACsL,UAAU,CAACK,WAAW,CAAA;MACjF,OAAC,MACI;MACDN,QAAAA,MAAM,CAAC,sCAAsC,CAAC,GAAG,mBAAmB,CAAA;MACxE,OAAA;MAEA,MAAA,OAAOA,MAAM,CAAA;MACjB,KAAA;UAEA,SAASO,iBAAiBA,CAAC5L,KAA4C,EAAQ;YAAA,IAAA6L,qBAAA,EAAAC,kBAAA,CAAA;YAC3E/C,SAAS,CAACC,WAAW,GAAA,CAAA6C,qBAAA,GAAG7L,KAAK,KAALA,IAAAA,IAAAA,KAAK,KAAA8L,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,CAAAA,kBAAA,GAAL9L,KAAK,CAAEsL,UAAU,MAAA,IAAA,IAAAQ,kBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAjBA,kBAAA,CAAmBC,SAAS,MAAA,IAAA,IAAAF,qBAAA,KAAA,KAAA,CAAA,GAAAA,qBAAA,GAAI,EAAE,CAAA;MAC9D,KAAA;UAMA,SAAShC,mBAAmBA,CAACL,KAAgC,EAAQ;MACjEA,MAAAA,KAAK,CAACwC,EAAE,CAAC,gBAAgB,EAAEC,gBAAgB,CAAC,CAAA;MAC5CzC,MAAAA,KAAK,CAACwC,EAAE,CAAC,iBAAiB,EAAEE,iBAAiB,CAAC,CAAA;MAC9C1C,MAAAA,KAAK,CAACwC,EAAE,CAAC,iBAAiB,EAAEG,iBAAiB,CAAC,CAAA;MAC9C3C,MAAAA,KAAK,CAACwC,EAAE,CAAC,eAAe,EAAEI,eAAe,CAAC,CAAA;MAC1C5C,MAAAA,KAAK,CAACwC,EAAE,CAAC,eAAe,EAAEK,eAAe,CAAC,CAAA;MAC9C,KAAA;UAQA,SAASC,YAAYA,CAACC,MAA2B,EAAQ;MACrD,MAAA,IAAMC,WAAW,GAAG/D,mBAAmB,CAACgE,SAAS,CAAC/L,CAAC,IAAIA,CAAC,CAACgM,KAAK,KAAKH,MAAM,CAACG,KAAK,CAAC,CAAA;MAEhF,MAAA,IAAIF,WAAW,KAAK,CAAC,CAAC,EAAE;cACpB/D,mBAAmB,CAACzC,MAAM,CAACwG,WAAW,EAAE,CAAC,EAAED,MAAM,CAAC,CAAA;MACtD,OAAC,MACI;MACD9D,QAAAA,mBAAmB,CAAClF,IAAI,CAACgJ,MAAM,CAAC,CAAA;MACpC,OAAA;MACJ,KAAA;UAOA,SAASI,YAAYA,CAACC,WAAmB,EAAQ;MAC7C,MAAA,IAAMJ,WAAW,GAAG/D,mBAAmB,CAACgE,SAAS,CAAC/L,CAAC,IAAIA,CAAC,CAACgM,KAAK,KAAKE,WAAW,CAAC,CAAA;MAE/E,MAAA,IAAIJ,WAAW,KAAK,CAAC,CAAC,EAAE;MACpB/D,QAAAA,mBAAmB,CAACzC,MAAM,CAACwG,WAAW,EAAE,CAAC,CAAC,CAAA;MAC9C,OAAA;MACJ,KAAA;UAAC,SAUc5B,aAAaA,CAAAiC,GAAA,EAAA;MAAA,MAAA,OAAAC,cAAA,CAAA1D,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;MAAA,KAAA;MAAA,IAAA,SAAAyD,cAAA,GAAA;MAAAA,MAAAA,cAAA,GAAAxD,iBAAA,CAA5B,WAA6Bc,KAAa,EAAiB;cAEvD3B,mBAAmB,CAAC6B,KAAK,EAAE,CAAA;MAE3B,QAAA,IAAMlI,QAAQ,GAAA,MAASyF,iBAAiB,CAAwB,sBAAsB,EAAE;MAAEuC,UAAAA,KAAK,EAAEA,KAAAA;MAAM,SAAC,CAAC,CAAA;MAEzG,QAAA,IAAIhI,QAAQ,CAAC2K,SAAS,IAAI3K,QAAQ,CAACoB,IAAI,EAAE;MAAA,UAAA,IAAA1B,SAAA,GAAAC,0BAAA,CAChBK,QAAQ,CAACoB,IAAI,CAAA;kBAAAxB,KAAA,CAAA;MAAA,UAAA,IAAA;kBAAlC,KAAAF,SAAA,CAAAG,CAAA,EAAAD,EAAAA,CAAAA,CAAAA,KAAA,GAAAF,SAAA,CAAAI,CAAA,EAAAC,EAAAA,IAAA,GAAoC;MAAA,cAAA,IAAzBoK,MAAM,GAAAvK,KAAA,CAAA1D,KAAA,CAAA;oBACbgO,YAAY,CAACC,MAAM,CAAC,CAAA;MACxB,aAAA;MAAC,WAAA,CAAA,OAAAlK,GAAA,EAAA;kBAAAP,SAAA,CAAAQ,CAAA,CAAAD,GAAA,CAAA,CAAA;MAAA,WAAA,SAAA;MAAAP,YAAAA,SAAA,CAAAS,CAAA,EAAA,CAAA;MAAA,WAAA;MACL,SAAA;aACH,CAAA,CAAA;MAAA,MAAA,OAAAuK,cAAA,CAAA1D,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;MAAA,KAAA;MAAA,IAAA,SAEcM,eAAeA,GAAA;MAAA,MAAA,OAAAqD,gBAAA,CAAA5D,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;MAAA,KAAA;MAAA,IAAA,SAAA2D,gBAAA,GAAA;YAAAA,gBAAA,GAAA1D,iBAAA,CAA9B,aAAgD;MAC5C,QAAA,IAAIjB,OAAO,CAAC/J,KAAK,IAAIsK,aAAa,EAAE;gBAChC,IAAI;kBACA,MAAMA,aAAa,CAAC2B,MAAM,CAAC0C,eAAe,CAAC5E,OAAO,CAAC/J,KAAK,CAAC,CAAA;MAC7D,WAAC,CACD,OAAA4O,OAAA,EAAM,EAGN;MACJ,SAAA;cAEAhF,eAAe,CAAC5J,KAAK,GAAG,IAAI,CAAA;MAC5B6J,QAAAA,gBAAgB,CAAC7J,KAAK,GAAG8J,mBAAmB,CAAC,IAAI,CAAC,CAAA;MAClDS,QAAAA,qBAAqB,GAAG,IAAI,CAAA;cAC5BR,OAAO,CAAC/J,KAAK,GAAG,IAAI,CAAA;MAEpBqM,QAAAA,wBAAwB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;aACvC,CAAA,CAAA;MAAA,MAAA,OAAAqC,gBAAA,CAAA5D,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;MAAA,KAAA;MAAA,IAAA,SAEcO,qBAAqBA,GAAA;MAAA,MAAA,OAAAuD,sBAAA,CAAA/D,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;MAAA,KAAA;MAAA,IAAA,SAAA8D,sBAAA,GAAA;YAAAA,sBAAA,GAAA7D,iBAAA,CAApC,aAAsD;MAClD,QAAA,IAAIR,4BAA4B,EAAE;gBAC9BsE,YAAY,CAACtE,4BAA4B,CAAC,CAAA;MAC1CA,UAAAA,4BAA4B,GAAG,IAAI,CAAA;MACvC,SAAA;cAEA,IAAI;MAIA,UAAA,IAAID,qBAAqB,EAAE;MACvB,YAAA,IAAIwE,YAAY,CAACC,GAAG,EAAE,CAACC,cAAc,EAAE,GAAG1E,qBAAqB,CAAC0E,cAAc,EAAE,EAAE;MAC9E,cAAA,OAAA;MACJ,aAAC,MACI;MACD,cAAA,OAAO5D,eAAe,EAAE,CAAA;MAC5B,aAAA;MACJ,WAAA;MAEA,UAAA,IAAM6D,MAAM,GAAA,MAAS3F,iBAAiB,CAAiC,sBAAsB,CAAC,CAAA;gBAE9F,IAAI2F,MAAM,CAACT,SAAS,EAAE;MAClB,YAAA,MAAMU,gBAAgB,CAACD,MAAM,CAAChK,IAAI,CAAC,CAAA;MACvC,WAAC,MACI;MAAA,YAAA,IAAAkK,oBAAA,CAAA;MACDC,YAAAA,OAAO,CAAC9C,KAAK,CAAA6C,CAAAA,oBAAA,GAACF,MAAM,CAACI,YAAY,MAAA,IAAA,IAAAF,oBAAA,KAAA,KAAA,CAAA,GAAAA,oBAAA,GAAI,iDAAiD,CAAC,CAAA;MAC3F,WAAA;MACJ,SAAC,SACO;MAEJ5E,UAAAA,4BAA4B,GAAGgB,UAAU,CAACF,qBAAqB,EAAE,KAAM,CAAC,CAAA;MAC5E,SAAA;aACH,CAAA,CAAA;MAAA,MAAA,OAAAuD,sBAAA,CAAA/D,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;MAAA,KAAA;UAAA,SAEcoE,gBAAgBA,CAAAI,GAAA,EAAA;MAAA,MAAA,OAAAC,iBAAA,CAAA1E,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;MAAA,KAAA;MAAA,IAAA,SAAAyE,iBAAA,GAAA;MAAAA,MAAAA,iBAAA,GAAAxE,iBAAA,CAA/B,WAAgCyE,UAA0C,EAAiB;MAAA,QAAA,IAAAC,sBAAA,CAAA;cACvF,IAAIpF,aAAa,IAAI,IAAI,EAAE;gBAAA,IAAAqF,qBAAA,EAAAC,qBAAA,CAAA;MACvBhG,UAAAA,eAAe,CAAC5J,KAAK,GAAA,CAAA2P,qBAAA,GAAGF,UAAU,KAAVA,IAAAA,IAAAA,UAAU,KAAVA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,UAAU,CAAE7F,eAAe,MAAA,IAAA,IAAA+F,qBAAA,KAAAA,KAAAA,CAAAA,GAAAA,qBAAA,GAAI,IAAI,CAAA;MAC3D9F,UAAAA,gBAAgB,CAAC7J,KAAK,GAAG8J,mBAAmB,CAAC2F,UAAU,KAAVA,IAAAA,IAAAA,UAAU,KAAVA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,UAAU,CAAE/N,KAAK,CAAC,CAAA;gBAC/D6I,qBAAqB,GAAGwE,YAAY,CAACc,QAAQ,EAAAD,qBAAA,GAACH,UAAU,KAAVA,IAAAA,IAAAA,UAAU,uBAAVA,UAAU,CAAElF,qBAAqB,MAAAqF,IAAAA,IAAAA,qBAAA,cAAAA,qBAAA,GAAI,EAAE,CAAC,CAAA;MAEtF,UAAA,OAAA;MACJ,SAAA;MAEA,QAAA,MAAMvE,eAAe,EAAE,CAAA;cAEvB,IAAI,CAACoE,UAAU,EAAE;MACb,UAAA,OAAA;MACJ,SAAA;cAEA5F,gBAAgB,CAAC7J,KAAK,GAAG8J,mBAAmB,CAAC2F,UAAU,CAAC/N,KAAK,CAAC,CAAA;MAC9D6I,QAAAA,qBAAqB,GAAGwE,YAAY,CAACc,QAAQ,CAAA,CAAAH,sBAAA,GAACD,UAAU,CAAClF,qBAAqB,cAAAmF,sBAAA,KAAA,KAAA,CAAA,GAAAA,sBAAA,GAAI,EAAE,CAAC,CAAA;cAErF,IAAID,UAAU,CAAC7F,eAAe,EAAE;MAC5B,UAAA,MAAM+B,cAAc,CAAC8D,UAAU,CAAC7F,eAAe,CAAC,CAAA;MACpD,SAAA;aACH,CAAA,CAAA;MAAA,MAAA,OAAA4F,iBAAA,CAAA1E,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;MAAA,KAAA;MAAA,IAAA,SAEc+E,OAAOA,GAAA;MAAA,MAAA,OAAAC,QAAA,CAAAjF,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;MAAA,KAAA;MAAA,IAAA,SAAAgF,QAAA,GAAA;YAAAA,QAAA,GAAA/E,iBAAA,CAAtB,aAAwC;cACpC,MAAML,aAAa,CAAC,KAAK,CAAC,CAAA;MAC1B,QAAA,MAAMW,qBAAqB,EAAE,CAAA;aAChC,CAAA,CAAA;MAAA,MAAA,OAAAyE,QAAA,CAAAjF,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;MAAA,KAAA;MAAA,IAAA,SAMc4C,gBAAgBA,CAAAqC,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAA;MAAA,MAAA,OAAAC,iBAAA,CAAArF,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;MAAA,KAAA;MAAA,IAAA,SAAAoF,iBAAA,GAAA;YAAAA,iBAAA,GAAAnF,iBAAA,CAA/B,WAAgCoF,EAAU,EAAEvQ,QAAgB,EAAEhB,mBAA4D,EAAiB;MACvI,QAAA,IAAIkL,OAAO,CAAC/J,KAAK,KAAKoQ,EAAE,EAAE;MACtB/D,UAAAA,wBAAwB,CAACxM,QAAQ,EAAEhB,mBAAmB,CAAC,CAAA;MAC3D,SAAA;aACH,CAAA,CAAA;MAAA,MAAA,OAAAsR,iBAAA,CAAArF,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;MAAA,KAAA;UAED,SAAS6C,iBAAiBA,CAACwC,EAAU,EAAQ;MACzC,MAAA,IAAIrG,OAAO,CAAC/J,KAAK,KAAKoQ,EAAE,EAAE;cACtBnG,yBAAyB,CAACjK,KAAK,GAAG,IAAI,CAAA;cACtCgK,cAAc,CAAChK,KAAK,GAAG,IAAI,CAAA;cAC3BkK,yBAAyB,CAAClK,KAAK,GAAG,IAAI,CAAA;MAC1C,OAAA;MACJ,KAAA;MAQA,IAAA,SAAS6N,iBAAiBA,CAACO,KAAa,EAAEH,MAA2B,EAAQ;MACzE,MAAA,IAAIG,KAAK,KAAKrE,OAAO,CAAC/J,KAAK,EAAE;MACzB,QAAA,OAAA;MACJ,OAAA;YAEAgO,YAAY,CAACC,MAAM,CAAC,CAAA;MACxB,KAAA;MASA,IAAA,SAASH,eAAeA,CAACM,KAAa,EAAEH,MAA2B,EAAQ;MACvE,MAAA,IAAIG,KAAK,KAAKrE,OAAO,CAAC/J,KAAK,EAAE;MACzB,QAAA,OAAA;MACJ,OAAA;YAEAgO,YAAY,CAACC,MAAM,CAAC,CAAA;MACxB,KAAA;MASA,IAAA,SAASF,eAAeA,CAACK,KAAa,EAAEE,WAAmB,EAAQ;MAC/D,MAAA,IAAIF,KAAK,KAAKrE,OAAO,CAAC/J,KAAK,EAAE;MACzB,QAAA,OAAA;MACJ,OAAA;YAEAqO,YAAY,CAACC,WAAW,CAAC,CAAA;MAC7B,KAAA;MAAC,IAAA,SAMc7C,WAAWA,GAAA;MAAA,MAAA,OAAA4E,YAAA,CAAAvF,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;MAAA,KAAA;MAAA,IAAA,SAAAsF,YAAA,GAAA;YAAAA,YAAA,GAAArF,iBAAA,CAA1B,aAA4C;cACxC,IAAI;MACA,UAAA,IAAIV,aAAa,IAAIP,OAAO,CAAC/J,KAAK,EAAE;kBAChC,MAAMsK,aAAa,CAAC2B,MAAM,CAACqE,cAAc,CAACvG,OAAO,CAAC/J,KAAK,CAAC,CAAA;MAC5D,WAAA;eACH,CACD,OAAOuM,KAAK,EAAE;MACV8C,UAAAA,OAAO,CAAC9C,KAAK,CAACA,KAAK,YAAY9J,KAAK,GAAG8J,KAAK,CAACgE,OAAO,GAAGhE,KAAK,CAAC,CAAA;MACjE,SAAC,SACO;gBACJf,UAAU,CAACC,WAAW,EAAEjF,MAAM,CAACkF,iBAAiB,GAAG,IAAI,CAAC,CAAA;MAC5D,SAAA;aACH,CAAA,CAAA;MAAA,MAAA,OAAA2E,YAAA,CAAAvF,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;MAAA,KAAA;MAIDjD,IAAAA,KAAK,CAAC,CAACkC,cAAc,EAAEG,mBAAmB,CAAC,EAAE,MAAM;YAC/CqG,cAAc,CAACnG,eAAe,EAAEF,mBAAmB,CAACnJ,MAAM,CAACiB,CAAC,IAAIA,CAAC,CAACwO,WAAW,KAAKzG,cAAc,CAAChK,KAAK,IAAIiC,CAAC,CAACyO,MAAM,KAAKC,mCAAmC,CAACC,QAAQ,CAAC,CAAC,CAAA;MACzK,KAAC,CAAC,CAAA;UAEFC,4BAA4B,CAACC,cAAc,EAAE,CAAC,CAAA;UAE9CxD,iBAAiB,CAAC,IAAI,CAAC,CAAA;MACvBwC,IAAAA,OAAO,EAAE,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}