{"version":3,"file":"interactiveExperienceDetail.obs.js","sources":["../../../src/Event/InteractiveExperiences/InteractiveExperienceDetail/actionsPanel.partial.obs","../../../../Rock.JavaScript.Obsidian/node_modules/style-inject/dist/style-inject.es.js","../../../src/Event/InteractiveExperiences/InteractiveExperienceDetail/editPanel.partial.obs","../../../src/Event/InteractiveExperiences/InteractiveExperienceDetail/viewPanel.partial.obs","../../../src/Event/InteractiveExperiences/InteractiveExperienceDetail/types.partial.ts","../../../src/Event/InteractiveExperiences/interactiveExperienceDetail.obs"],"sourcesContent":["<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <Panel title=\"Actions\">\r\n        <SectionHeader :title=\"actionHeaderTitle\"\r\n                       :description=\"actionHeaderDescription\">\r\n            <template #actions>\r\n                <a class=\"btn btn-default btn-sm btn-square\" href=\"#\" @click.prevent=\"onAddActionClick\">\r\n                    <i class=\"fa fa-plus\"></i>\r\n                </a>\r\n            </template>\r\n        </SectionHeader>\r\n\r\n        <div v-dragSource=\"dragOptions\"\r\n             v-dragTarget=\"dragOptions\"\r\n             class=\"actions-list\">\r\n            <div v-for=\"(action, index) in internalValue\" class=\"action-item\" :key=\"action.guid!\">\r\n                <div class=\"action-item-count\">{{ index + 1 }}</div>\r\n                <div class=\"action-item-body\">\r\n                    <span class=\"reorder-handle\">\r\n                        <i class=\"fa fa-bars\"></i>\r\n                    </span>\r\n\r\n                    <div class=\"action-item-icon\">\r\n                        <i :class=\"getActionTypeIconClass(action)\"></i>\r\n                    </div>\r\n                    <div class=\"action-item-content\">\r\n                        <div class=\"title text-lg\">{{ action.title }}</div>\r\n                        <div class=\"subtitle text-sm text-muted\">{{ getActionTypeName(action) }}</div>\r\n                    </div>\r\n                    <div class=\"action-columncommand\">\r\n                        <a href=\"#\" class=\"btn btn-default btn-sm btn-square mr-2\" @click.prevent=\"onEditActionClick(action)\">\r\n                            <i class=\"fa fa-pencil\"></i>\r\n                        </a>\r\n\r\n                        <a href=\"#\" class=\"btn btn-danger btn-sm btn-square\" @click.prevent=\"onActionRemoveClick(action)\">\r\n                            <i class=\"fa fa-times\"></i>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </Panel>\r\n\r\n    <Modal v-model=\"isModalVisible\"\r\n           :title=\"modalTitle\"\r\n           saveText=\"Save\"\r\n           @save=\"onActionSave\">\r\n        <NotificationBox v-if=\"modalErrorMessage\" alertType=\"warning\">\r\n            {{ modalErrorMessage }}\r\n        </NotificationBox>\r\n\r\n        <DropDownList v-model=\"actionType\"\r\n                      label=\"Action Type\"\r\n                      rules=\"required\"\r\n                      :items=\"actionTypeItems\" />\r\n\r\n        <AttributeValuesContainer v-model=\"attributeValues\"\r\n                                  :attributes=\"actionAttributes\"\r\n                                  isEditMode\r\n                                  :showCategoryLabel=\"false\" />\r\n\r\n        <div class=\"row\">\r\n            <div v-if=\"isRequiresModerationVisible\" class=\"col-md-4\">\r\n                <CheckBox v-model=\"requiresModeration\"\r\n                          label=\"Requires Moderation\" />\r\n            </div>\r\n\r\n            <div v-if=\"isMultipleSubmissionsVisible\" class=\"col-md-4\">\r\n                <CheckBox v-model=\"allowMultipleSubmissions\"\r\n                          label=\"Allow Multiple Submissions\" />\r\n            </div>\r\n\r\n            <div class=\"col-md-4\">\r\n                <CheckBox v-model=\"anonymousResponses\"\r\n                          label=\"Anonymous Responses\" />\r\n            </div>\r\n        </div>\r\n\r\n        <DropDownList v-model=\"responseVisual\"\r\n                      label=\"Response Visual\"\r\n                      :items=\"responseVisualItems\" />\r\n\r\n        <AttributeValuesContainer v-model=\"attributeValues\"\r\n                                  :attributes=\"visualizerAttributes\"\r\n                                  isEditMode\r\n                                  :showCategoryLabel=\"false\" />\r\n\r\n    </Modal>\r\n</template>\r\n\r\n<style scoped>\r\n.action-item {\r\n    display: flex;\r\n    align-items: stretch;\r\n    margin-bottom: 12px;\r\n    overflow: hidden;\r\n    border: 1px solid #c4c4c4;\r\n    border-radius: 8px;\r\n}\r\n\r\n.action-item-count {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    min-width: 35px;\r\n    padding: 8px 0;\r\n    color: #fff;\r\n    background-color: var(--brand-info);\r\n}\r\n\r\n.action-item-body {\r\n    display: flex;\r\n    flex: 1 0 0;\r\n    align-items: center;\r\n    padding: 8px 0;\r\n}\r\n\r\n.action-item-body > * {\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 0 12px;\r\n}\r\n\r\n.action-item-body > *:last-child {\r\n    display: block;\r\n    padding-right: 16px;\r\n}\r\n\r\n.action-item .action-item-icon {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 36px;\r\n    height: 36px;\r\n    padding: 0;\r\n    color: #fff;\r\n    background-color: var(--brand-info);\r\n    border-radius: 50%;\r\n}\r\n\r\n.action-item .action-item-content {\r\n    flex: 1 0;\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    justify-content: center;\r\n}\r\n\r\n.action-item .reorder-handle {\r\n    cursor: grab;\r\n}\r\n\r\n.action-item .action-columncommand {\r\n    visibility: hidden;\r\n    opacity: 0;\r\n    transition: opacity .2s ease-in-out;\r\n}\r\n\r\n.action-item .title {\r\n    font-weight: 600;\r\n}\r\n\r\n.action-item:hover .action-columncommand {\r\n    visibility: visible;\r\n    opacity: 1;\r\n}\r\n</style>\r\n\r\n<script setup lang=\"ts\">\r\n    import NotificationBox from \"@Obsidian/Controls/notificationBox.obs\";\r\n    import AttributeValuesContainer from \"@Obsidian/Controls/attributeValuesContainer\";\r\n    import CheckBox from \"@Obsidian/Controls/checkBox\";\r\n    import DropDownList from \"@Obsidian/Controls/dropDownList\";\r\n    import Modal from \"@Obsidian/Controls/modal\";\r\n    import Panel from \"@Obsidian/Controls/panel\";\r\n    import SectionHeader from \"@Obsidian/Controls/sectionHeader\";\r\n    import { DragSource as vDragSource, DragTarget as vDragTarget, useDragReorder } from \"@Obsidian/Directives/dragDrop\";\r\n    import { useVModelPassthrough } from \"@Obsidian/Utility/component\";\r\n    import { setPropertiesBoxValue, useInvokeBlockAction } from \"@Obsidian/Utility/block\";\r\n    import { areEqual, newGuid } from \"@Obsidian/Utility/guid\";\r\n    import { ValidPropertiesBox } from \"@Obsidian/ViewModels/Utility/validPropertiesBox\";\r\n    import { InteractiveExperienceActionBag } from \"@Obsidian/ViewModels/Blocks/Event/InteractiveExperiences/InteractiveExperienceDetail/interactiveExperienceActionBag\";\r\n    import { InteractiveExperienceActionTypeBag } from \"@Obsidian/ViewModels/Blocks/Event/InteractiveExperiences/InteractiveExperienceDetail/interactiveExperienceActionTypeBag\";\r\n    import { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\n    import { computed, PropType, ref, watch } from \"vue\";\r\n    import { Guid } from \"@Obsidian/Types\";\r\n    import { PublicAttributeBag } from \"@Obsidian/ViewModels/Utility/publicAttributeBag\";\r\n    import { alert, confirmDelete } from \"@Obsidian/Utility/dialogs\";\r\n    import { InteractiveExperienceVisualizerTypeBag } from \"@Obsidian/ViewModels/Blocks/Event/InteractiveExperiences/InteractiveExperienceDetail/interactiveExperienceVisualizerTypeBag\";\r\n\r\n    const props = defineProps({\r\n        /** An array of actions that are currently configured. */\r\n        modelValue: {\r\n            type: Array as PropType<InteractiveExperienceActionBag[]>,\r\n            required: true\r\n        },\r\n\r\n        /** The name of the experience currently displayed. */\r\n        name: {\r\n            type: String as PropType<string>,\r\n            required: true\r\n        },\r\n\r\n        /** The identifier key of the interactive experience these actions are for. */\r\n        interactiveExperienceIdKey: {\r\n            type: String as PropType<string>,\r\n            required: true\r\n        },\r\n\r\n        /** The action types that are supported by the server. */\r\n        actionTypes: {\r\n            type: Array as PropType<InteractiveExperienceActionTypeBag[]>,\r\n            default: []\r\n        },\r\n\r\n        /** The visualizer types that are supported by the server. */\r\n        visualizerTypes: {\r\n            type: Array as PropType<ListItemBag[]>,\r\n            default: []\r\n        }\r\n    });\r\n\r\n    const emit = defineEmits<{\r\n        (e: \"update:modelValue\", value: InteractiveExperienceActionBag): void\r\n    }>();\r\n\r\n    // #region Values\r\n\r\n    const invokeBlockAction = useInvokeBlockAction();\r\n    const internalValue = useVModelPassthrough(props, \"modelValue\", emit);\r\n\r\n    const isModalVisible = ref(false);\r\n    const modalTitle = ref(\"\");\r\n    const modalErrorMessage = ref(\"\");\r\n    const existingActionGuid = ref<Guid | null>(null);\r\n    const actionType = ref(\"\");\r\n    const requiresModeration = ref(false);\r\n    const allowMultipleSubmissions = ref(false);\r\n    const anonymousResponses = ref(false);\r\n    const responseVisual = ref(\"\");\r\n    const attributeValues = ref<Record<string, string>>({});\r\n\r\n    // #endregion\r\n\r\n    // #region Computed Values\r\n\r\n    const actionHeaderTitle = computed((): string => {\r\n        return `Actions for ${props.name}`;\r\n    });\r\n\r\n    const actionHeaderDescription = computed((): string => {\r\n        return `The actions below are configured for the ${props.name} experience.`;\r\n    });\r\n\r\n    const actionTypeItems = computed((): ListItemBag[] => {\r\n        return props.actionTypes.map(at => ({\r\n            value: at.value,\r\n            text: at.text\r\n        }));\r\n    });\r\n\r\n    const responseVisualItems = computed((): ListItemBag[] => {\r\n        return props.visualizerTypes;\r\n    });\r\n\r\n    const selectedActionType = computed((): InteractiveExperienceActionTypeBag | null => {\r\n        return props.actionTypes.find(at => areEqual(at.value, actionType.value)) ?? null;\r\n    });\r\n\r\n    const actionAttributes = computed((): Record<string, PublicAttributeBag> => {\r\n        return selectedActionType.value?.attributes ?? {};\r\n    });\r\n\r\n    const selectedVisualizerType = computed((): InteractiveExperienceVisualizerTypeBag | null => {\r\n        return props.visualizerTypes.find(at => areEqual(at.value, responseVisual.value)) ?? null;\r\n    });\r\n\r\n    const visualizerAttributes = computed((): Record<string, PublicAttributeBag> => {\r\n        return selectedVisualizerType.value?.attributes ?? {};\r\n    });\r\n\r\n    const isRequiresModerationVisible = computed((): boolean => {\r\n        return selectedActionType.value?.isModerationSupported === true;\r\n    });\r\n\r\n    const isMultipleSubmissionsVisible = computed((): boolean => {\r\n        return selectedActionType.value?.isMultipleSubmissionSupported === true;\r\n    });\r\n\r\n    // #endregion\r\n\r\n    // #region Functions\r\n\r\n    /**\r\n     * Gets the name of the action type that the action is using.\r\n     *\r\n     * @param action The action whose type name is being requested.\r\n     *\r\n     * @returns The name of the action type or an empty string if not found.\r\n     */\r\n    function getActionTypeName(action: InteractiveExperienceActionBag): string {\r\n        return props.actionTypes.find(at => areEqual(at.value, action.actionType?.value))?.text ?? \"\";\r\n    }\r\n\r\n    /**\r\n     * Gets the icon CSS class to use for the requested action.\r\n     *\r\n     * @param action The aciton whose icon class is being requested.\r\n     *\r\n     * @returns The CSS class value to use to display the icon.\r\n     */\r\n    function getActionTypeIconClass(action: InteractiveExperienceActionBag): string {\r\n        return props.actionTypes.find(at => areEqual(at.value, action.actionType?.value))?.iconCssClass ?? \"\";\r\n    }\r\n\r\n    /**\r\n     * Updates the attribute values with any missing default values from the\r\n     * currently selected action type and visualizer type.\r\n     */\r\n    function updateDefaultAttributeValues(): void {\r\n        const newValues = { ...attributeValues.value };\r\n        let isChanged = false;\r\n\r\n        if (selectedActionType.value && selectedActionType.value.defaultAttributeValues) {\r\n            for (const key in selectedActionType.value.defaultAttributeValues) {\r\n                if (!newValues[key]) {\r\n                    newValues[key] = selectedActionType.value.defaultAttributeValues[key];\r\n                    isChanged = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (selectedVisualizerType.value && selectedVisualizerType.value.defaultAttributeValues) {\r\n            for (const key in selectedVisualizerType.value.defaultAttributeValues) {\r\n                if (!newValues[key]) {\r\n                    newValues[key] = selectedVisualizerType.value.defaultAttributeValues[key];\r\n                    isChanged = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (isChanged) {\r\n            attributeValues.value = newValues;\r\n        }\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Event Handlers\r\n\r\n    /**\r\n     * Event handler for when the Add button is clicked. Begin the process of\r\n     * adding a new action to the experience.\r\n     */\r\n    function onAddActionClick(): void {\r\n        actionType.value = \"\";\r\n        requiresModeration.value = false;\r\n        allowMultipleSubmissions.value = false;\r\n        anonymousResponses.value = false;\r\n        responseVisual.value = \"\";\r\n        attributeValues.value = {};\r\n\r\n        existingActionGuid.value = null;\r\n        modalTitle.value = \"Add Action\";\r\n        isModalVisible.value = true;\r\n    }\r\n\r\n    /**\r\n     * Event handler for when an existing action's edit button has been clicked.\r\n     * Begin the process of editing the action.\r\n     *\r\n     * @param action The action that should be edited.\r\n     */\r\n    function onEditActionClick(action: InteractiveExperienceActionBag): void {\r\n        actionType.value = action.actionType?.value ?? \"\";\r\n        requiresModeration.value = action.isModerationRequired;\r\n        allowMultipleSubmissions.value = action.isMultipleSubmissionsAllowed;\r\n        anonymousResponses.value = action.isResponseAnonymous;\r\n        responseVisual.value = action.responseVisualizer?.value ?? \"\";\r\n        attributeValues.value = action.attributeValues ?? {};\r\n\r\n        existingActionGuid.value = action.guid ?? null;\r\n        modalTitle.value = \"Edit Action\";\r\n        isModalVisible.value = true;\r\n    }\r\n\r\n    /**\r\n     * Event handler for when the Save button in the modal is clicked and the\r\n     * action should be saved. Send the request to the server and then update\r\n     * the list of known actions.\r\n     */\r\n    async function onActionSave(): Promise<void> {\r\n        modalErrorMessage.value = \"\";\r\n\r\n        const box: ValidPropertiesBox<InteractiveExperienceActionBag> = {};\r\n\r\n        setPropertiesBoxValue(box, \"guid\", existingActionGuid.value ?? newGuid());\r\n        setPropertiesBoxValue(box, \"actionType\", { value: actionType.value });\r\n        setPropertiesBoxValue(box, \"isModerationRequired\", requiresModeration.value);\r\n        setPropertiesBoxValue(box, \"isMultipleSubmissionsAllowed\", allowMultipleSubmissions.value);\r\n        setPropertiesBoxValue(box, \"isResponseAnonymous\", anonymousResponses.value);\r\n        setPropertiesBoxValue(box, \"attributeValues\", attributeValues.value);\r\n        setPropertiesBoxValue(box, \"responseVisualizer\", responseVisual.value ? { value: responseVisual.value } : null);\r\n\r\n        const result = await invokeBlockAction<InteractiveExperienceActionBag>(\"SaveAction\", {\r\n            idKey: props.interactiveExperienceIdKey,\r\n            box: box\r\n        });\r\n\r\n        if (!result.isSuccess || !result.data) {\r\n            modalErrorMessage.value = result.errorMessage ?? \"Unknown error while trying to save action.\";\r\n\r\n            return;\r\n        }\r\n\r\n        const action = result.data;\r\n        const existingActionIndex = internalValue.value.findIndex(a => areEqual(a.guid, action.guid));\r\n\r\n        if (existingActionIndex !== -1) {\r\n            const newValue = [...internalValue.value];\r\n\r\n            newValue.splice(existingActionIndex, 1, action);\r\n\r\n            internalValue.value = newValue;\r\n        }\r\n        else {\r\n            internalValue.value = [...internalValue.value, action];\r\n        }\r\n\r\n        isModalVisible.value = false;\r\n    }\r\n\r\n    /**\r\n     * Event handler for when the remove button for an action is clicked.\r\n     * Confirm with the individual that they really wanted to remove the\r\n     * action and then remove it from the server.\r\n     *\r\n     * @param action The action that is to be removed.\r\n     */\r\n    async function onActionRemoveClick(action: InteractiveExperienceActionBag): Promise<void> {\r\n        if (!await confirmDelete(\"Action\")) {\r\n            return;\r\n        }\r\n\r\n        const result = await invokeBlockAction<void>(\"DeleteAction\", {\r\n            idKey: props.interactiveExperienceIdKey,\r\n            actionGuid: action.guid\r\n        });\r\n\r\n        if (!result.isSuccess) {\r\n            alert(result.errorMessage || \"Unable to delete the action.\");\r\n        }\r\n        else {\r\n            const index = internalValue.value.findIndex(a => areEqual(a.guid, action.guid));\r\n\r\n            if (index !== -1) {\r\n                const newValue = [...internalValue.value];\r\n\r\n                newValue.splice(index, 1);\r\n\r\n                internalValue.value = newValue;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Event handler for when the person has dragged one of the actions to\r\n     * reorder it in the action list.\r\n     *\r\n     * @param action The action that was dragged.\r\n     * @param beforeAction The action it should be placed before, or null if at the end.\r\n     */\r\n    async function onActionReorder(action: InteractiveExperienceActionBag, beforeAction: InteractiveExperienceActionBag | null): Promise<void> {\r\n        // Force an update so the detail block updates the value.\r\n        internalValue.value = [...internalValue.value];\r\n\r\n        const result = await invokeBlockAction<void>(\"ReorderAction\", {\r\n            idKey: props.interactiveExperienceIdKey,\r\n            actionGuid: action.guid,\r\n            beforeActionGuid: beforeAction?.guid ?? null\r\n        });\r\n\r\n        if (!result.isSuccess) {\r\n            alert(result.errorMessage || \"Unable to re-order actions, you might need to reload the page.\");\r\n            return;\r\n        }\r\n    }\r\n\r\n    // #endregion\r\n\r\n    watch([actionType, responseVisual], () => {\r\n        updateDefaultAttributeValues();\r\n    });\r\n\r\n    const dragOptions = useDragReorder(internalValue, onActionReorder);\r\n\r\n    updateDefaultAttributeValues();\r\n</script>\r\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <fieldset>\r\n        <div class=\"row\">\r\n            <div class=\"col-md-6\">\r\n                <TextBox v-model=\"name\"\r\n                         label=\"Name\"\r\n                         rules=\"required\" />\r\n            </div>\r\n\r\n            <div class=\"col-md-6\">\r\n                <CheckBox v-model=\"isActive\"\r\n                          label=\"Active\" />\r\n            </div>\r\n        </div>\r\n\r\n        <TextBox v-model=\"description\"\r\n                 label=\"Description\"\r\n                 textMode=\"multiline\" />\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-md-6\">\r\n                <TextBox v-model=\"publicLabel\"\r\n                         label=\"Public Label\"\r\n                         rules=\"required\"\r\n                         help=\"The experience name that will be shown publicly.\" />\r\n            </div>\r\n\r\n            <div class=\"col-md-6\">\r\n                <ImageUploader v-model=\"experiencePhoto\"\r\n                               label=\"Experience Photo\"\r\n                               help=\"An optional photo to be used when displaying information about the experience.\"\r\n                               :binaryFileTypeGuid=\"binaryFileTypeGuid\" />\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"mb-5\">\r\n            <RadioButtonList v-model=\"pushNotificationConfiguration\"\r\n                             label=\"Push Notification Configuration\"\r\n                             help=\"Detemines when push notifications should be sent when launching actions.\"\r\n                             :items=\"pushNotificationConfigurationItems\"\r\n                             horizontal />\r\n\r\n            <TransitionVerticalCollapse>\r\n                <div v-if=\"isPushActive\" class=\"row\">\r\n                    <div class=\"col-md-6\">\r\n                        <TextBox v-model=\"pushNotificationTitle\"\r\n                                 label=\"Push Notification Title\"\r\n                                 help=\"The title to use on any push notifications when actions are posted.\"\r\n                                 rules=\"required\"\r\n                                 :maxLength=\"200\" />\r\n                    </div>\r\n\r\n                    <div class=\"col-md-6\">\r\n                        <TextBox v-model=\"pushNotificationDetail\"\r\n                                 label=\"Push Notification Detail\"\r\n                                 help=\"The detail message to use on any push notifications when actions are posted.\"\r\n                                 rules=\"required\"\r\n                                 :maxLength=\"1000\" />\r\n                    </div>\r\n                </div>\r\n            </TransitionVerticalCollapse>\r\n\r\n            <AttributeValuesContainer v-model=\"attributeValues\" :attributes=\"attributes\" isEditMode :numberOfColumns=\"2\" />\r\n        </div>\r\n\r\n        <SectionContainer title=\"Schedules\"\r\n                          description=\"Schedules determine when and where the experience occurs. You can also configure filters to determine who should be allowed to view an experience. These filters require that the individual is logged in.\">\r\n            <RadioButtonList v-model=\"campusBehavior\"\r\n                             label=\"Campus Behavior\"\r\n                             :items=\"campusBehaviorItems\"\r\n                             rules=\"required\"\r\n                             horizontal\r\n                             help=\"&lt;p&gt;Determines the role of campus with the experience.&lt;/p&gt;&lt;p&gt;Filter Schedules will only show the schedules that match the individual's location using the geofence of the campuses. It will also use the geofence to determine which campus to use for the individual's interactions.&lt;/p&gt;&lt;p&gt;Dermine Campus will use the campus geofence to determine which campus to use for the individual's interactions.&lt;/p&gt;&lt;p&gt;Use Individual's Campus will not consider campus geofences and simply use the campus set on the individual.&lt;/p&gt;\" />\r\n\r\n            <TransitionVerticalCollapse>\r\n                <div v-if=\"isDefaultCampusVisible\" class=\"row\">\r\n                    <div class=\"col-md-6\">\r\n                        <CampusPicker v-model=\"defaultCampus\"\r\n                                      label=\"Default Campus\"\r\n                                      forceVisible\r\n                                      showBlankItem\r\n                                      help=\"The campus to use if no campus can be determined.\" />\r\n                    </div>\r\n                </div>\r\n            </TransitionVerticalCollapse>\r\n\r\n            <table class=\"grid-table table table-condensed table-light\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Schedule</th>\r\n                        <th>Campus</th>\r\n                        <th>Data View</th>\r\n                        <th>Group</th>\r\n                        <th class=\"grid-columncommand\"></th>\r\n                        <th class=\"grid-columncommand\"></th>\r\n                    </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                    <tr v-for=\"row in schedules\">\r\n                        <td>{{ row.schedule?.text }}</td>\r\n                        <td>{{ getScheduleCampusNames(row) }}</td>\r\n                        <td>{{ row.dataView?.text }}</td>\r\n                        <td>{{ row.group?.text }}</td>\r\n                        <td class=\"grid-columncommand\" align=\"center\">\r\n                            <a class=\"btn btn-sm grid-edit-button\" @click.prevent=\"onEditScheduleClick(row)\">\r\n                                <i class=\"fa fa-pencil\"></i>\r\n                            </a>\r\n                        </td>\r\n                        <td class=\"grid-columncommand\" align=\"center\">\r\n                            <a class=\"btn btn-danger btn-sm grid-delete-button\" @click.prevent=\"onDeleteScheduleClick(row)\">\r\n                                <i class=\"fa fa-times\"></i>\r\n                            </a>\r\n                        </td>\r\n                    </tr>\r\n\r\n                    <tr v-if=\"!schedules.length\">\r\n                        <td colspan=\"6\">No schedules defined.</td>\r\n                    </tr>\r\n                </tbody>\r\n\r\n                <tfoot>\r\n                    <tr>\r\n                        <td class=\"grid-actions\" colspan=\"6\">\r\n                            <a class=\"btn btn-grid-action btn-add btn-default btn-sm\"\r\n                               accesskey=\"n\"\r\n                               title=\"Alt+N\"\r\n                               href=\"#\"\r\n                               @click.prevent=\"onAddScheduleClick\">\r\n                                <i class=\"fa fa-plus-circle fa-fw\"></i>\r\n                            </a>\r\n                        </td>\r\n                    </tr>\r\n                </tfoot>\r\n            </table>\r\n        </SectionContainer>\r\n\r\n        <SectionContainer title=\"Welcome Content\"\r\n                          description=\"This optional content will be shown before the first action is displayed. It allows you to welcome your guest to the environment and let them know what to expect.\">\r\n            <div class=\"row\">\r\n                <div class=\"col-md-6\">\r\n                    <TextBox v-model=\"welcomeTitle\"\r\n                             label=\"Title\" />\r\n\r\n                    <TextBox v-model=\"welcomeMessage\"\r\n                             label=\"Message\"\r\n                             textMode=\"multiline\" />\r\n                </div>\r\n\r\n                <div class=\"col-md-6\">\r\n                    <ImageUploader v-model=\"welcomeHeaderImage\"\r\n                                   label=\"Header Image\"\r\n                                   :binaryFileTypeGuid=\"binaryFileTypeGuid\" />\r\n                </div>\r\n            </div>\r\n        </SectionContainer>\r\n\r\n        <SectionContainer title=\"No Actions Content\"\r\n                          description=\"This optional content will be shown when there are no active actions being displayed.\">\r\n            <div class=\"row\">\r\n                <div class=\"col-md-6\">\r\n                    <TextBox v-model=\"noActionsTitle\"\r\n                             label=\"Title\" />\r\n\r\n                    <TextBox v-model=\"noActionsMessage\"\r\n                             label=\"Message\"\r\n                             textMode=\"multiline\" />\r\n                </div>\r\n\r\n                <div class=\"col-md-6\">\r\n                    <ImageUploader v-model=\"noActionsHeaderImage\"\r\n                                   label=\"Header Image\"\r\n                                   :binaryFileTypeGuid=\"binaryFileTypeGuid\" />\r\n                </div>\r\n            </div>\r\n        </SectionContainer>\r\n\r\n        <SectionContainer title=\"Action Appearance\"\r\n                          description=\"The settings below can help override the default appearance on the individual devices to provide a custom theme for the experience.\">\r\n            <div class=\"row\">\r\n                <div class=\"col-lg-3 col-sm-6\">\r\n                    <ColorPicker v-model=\"actionBackgroundColor\"\r\n                                 label=\"Background Color\" />\r\n                </div>\r\n\r\n                <div class=\"col-lg-3 col-sm-6\">\r\n                    <ColorPicker v-model=\"actionTextColor\"\r\n                                 label=\"Text Color\" />\r\n                </div>\r\n\r\n                <div class=\"col-lg-3 col-sm-6\">\r\n                    <ColorPicker v-model=\"actionPrimaryButtonColor\"\r\n                                 label=\"Primary Button Background Color\" />\r\n                </div>\r\n\r\n                <div class=\"col-lg-3 col-sm-6\">\r\n                    <ColorPicker v-model=\"actionPrimaryButtonTextColor\"\r\n                                 label=\"Primary Button Text Color\" />\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n                <div class=\"col-sm-6\"></div>\r\n\r\n                <div class=\"col-lg-3 col-sm-6\">\r\n                    <ColorPicker v-model=\"actionSecondaryButtonColor\"\r\n                                 label=\"Secondary Button Background Color\" />\r\n                </div>\r\n\r\n                <div class=\"col-lg-3 col-sm-6\">\r\n                    <ColorPicker v-model=\"actionSecondaryButtonTextColor\"\r\n                                 label=\"Secondary Button Text Color\" />\r\n                </div>\r\n            </div>\r\n\r\n            <ImageUploader v-model=\"actionBackgroundImage\"\r\n                           label=\"Background Image\"\r\n                           :binaryFileTypeGuid=\"binaryFileTypeGuid\" />\r\n\r\n            <div class=\"mt-2 text-right\">\r\n                <a href=\"#\" class=\"text-xs\" @click.prevent=\"onActionAdvancedOptionsClick\">\r\n                    Advanced Options\r\n                    <i v-if=\"isActionAdvancedOptionsVisible\" class=\"fa fa-angle-up\"></i>\r\n                    <i v-else class=\"fa fa-angle-down\"></i>\r\n                </a>\r\n            </div>\r\n\r\n            <TransitionVerticalCollapse>\r\n                <div v-if=\"isActionAdvancedOptionsVisible\">\r\n                    <CodeEditor v-model=\"actionCustomCss\"\r\n                                label=\"Custom CSS\"\r\n                                mode=\"css\" />\r\n                </div>\r\n            </TransitionVerticalCollapse>\r\n        </SectionContainer>\r\n\r\n        <SectionContainer title=\"Audience Appearance\"\r\n                          description=\"The settings below can help override the default appearance on the audience visuals to provide a custom theme for the experience.\">\r\n            <div class=\"row\">\r\n                <div class=\"col-lg-3 col-sm-6\">\r\n                    <ColorPicker v-model=\"audienceBackgroundColor\"\r\n                                 label=\"Background Color\" />\r\n                </div>\r\n\r\n                <div class=\"col-lg-3 col-sm-6\">\r\n                    <ColorPicker v-model=\"audienceTextColor\"\r\n                                 label=\"Text Color\" />\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n                <div class=\"col-lg-3 col-sm-6\">\r\n                    <ColorPicker v-model=\"audiencePrimaryColor\"\r\n                                 label=\"Primary Color\" />\r\n                </div>\r\n\r\n                <div class=\"col-lg-3 col-sm-6\">\r\n                    <ColorPicker v-model=\"audienceSecondaryColor\"\r\n                                 label=\"Secondary Color\" />\r\n                </div>\r\n\r\n                <div class=\"col-lg-3 col-sm-6\">\r\n                    <ColorPicker v-model=\"audienceAccentColor\"\r\n                                 label=\"Accent Color\" />\r\n                </div>\r\n            </div>\r\n\r\n            <ImageUploader v-model=\"audienceBackgroundImage\"\r\n                           label=\"Background Image\"\r\n                           :binaryFileTypeGuid=\"binaryFileTypeGuid\" />\r\n\r\n            <div class=\"mt-2 text-right\">\r\n                <a href=\"#\" class=\"text-xs\" @click.prevent=\"onAudienceAdvancedOptionsClick\">\r\n                    Advanced Options\r\n                    <i v-if=\"isAudienceAdvancedOptionsVisible\" class=\"fa fa-angle-up\"></i>\r\n                    <i v-else class=\"fa fa-angle-down\"></i>\r\n                </a>\r\n            </div>\r\n\r\n            <TransitionVerticalCollapse>\r\n                <div v-if=\"isAudienceAdvancedOptionsVisible\">\r\n                    <CodeEditor v-model=\"audienceCustomCss\"\r\n                                label=\"Custom CSS\"\r\n                                mode=\"css\" />\r\n                </div>\r\n            </TransitionVerticalCollapse>\r\n        </SectionContainer>\r\n    </fieldset>\r\n\r\n    <Modal v-model=\"isScheduleModalVisible\"\r\n           :title=\"scheduleModalTitle\"\r\n           saveText=\"OK\"\r\n           @save=\"onSaveSchedule\">\r\n        <ScheduleBuilder v-model=\"scheduleContent\"\r\n                         label=\"Schedule\"\r\n                         help=\"The schedule of when the experience is active.\"\r\n                         rules=\"required\" />\r\n\r\n        <SectionHeader title=\"Filters\"\r\n                       description=\"Filters help to limit who will see experiences on the list those that are available.\" />\r\n\r\n        <CampusPicker v-model=\"scheduleCampuses\"\r\n                      label=\"Campus\"\r\n                      help=\"Which campuses the experience is for. Leave blank to show for all campuses.\"\r\n                      forceVisible\r\n                      multiple />\r\n\r\n        <DataViewPicker v-model=\"scheduleDataView\"\r\n                        label=\"Data View\"\r\n                        help=\"A data view that the individual must be in to see the environment. It is highly encouraged that this data view be persisted for performance.\" />\r\n\r\n        <GroupPicker v-model=\"scheduleGroup\"\r\n                     label=\"Group\"\r\n                     help=\"A group that the individual must be in to see the environment.\" />\r\n    </Modal>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { computed, PropType, ref, shallowRef, watch } from \"vue\";\r\n    import AttributeValuesContainer from \"@Obsidian/Controls/attributeValuesContainer\";\r\n    import CampusPicker from \"@Obsidian/Controls/campusPicker.obs\";\r\n    import CheckBox from \"@Obsidian/Controls/checkBox\";\r\n    import CodeEditor from \"@Obsidian/Controls/codeEditor\";\r\n    import ColorPicker from \"@Obsidian/Controls/colorPicker\";\r\n    import DataViewPicker from \"@Obsidian/Controls/dataViewPicker\";\r\n    import ImageUploader from \"@Obsidian/Controls/imageUploader\";\r\n    import GroupPicker from \"@Obsidian/Controls/groupPicker\";\r\n    import Modal from \"@Obsidian/Controls/modal\";\r\n    import RadioButtonList from \"@Obsidian/Controls/radioButtonList\";\r\n    import ScheduleBuilder from \"@Obsidian/Controls/scheduleBuilder.obs\";\r\n    import SectionContainer from \"@Obsidian/Controls/sectionContainer\";\r\n    import SectionHeader from \"@Obsidian/Controls/sectionHeader\";\r\n    import TextBox from \"@Obsidian/Controls/textBox\";\r\n    import TransitionVerticalCollapse from \"@Obsidian/Controls/transitionVerticalCollapse\";\r\n    import { watchPropertyChanges } from \"@Obsidian/Utility/block\";\r\n    import { propertyRef, updateRefValue } from \"@Obsidian/Utility/component\";\r\n    import { BinaryFiletype } from \"@Obsidian/SystemGuids/binaryFiletype\";\r\n    import { InteractiveExperienceBag } from \"@Obsidian/ViewModels/Blocks/Event/InteractiveExperiences/InteractiveExperienceDetail/interactiveExperienceBag\";\r\n    import { InteractiveExperienceDetailOptionsBag } from \"@Obsidian/ViewModels/Blocks/Event/InteractiveExperiences/InteractiveExperienceDetail/interactiveExperienceDetailOptionsBag\";\r\n    import { toNumber } from \"@Obsidian/Utility/numberUtils\";\r\n    import { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\n    import { InteractiveExperiencePushNotificationType } from \"@Obsidian/Enums/Event/interactiveExperiencePushNotificationType\";\r\n    import { InteractiveExperienceScheduleBag } from \"@Obsidian/ViewModels/Blocks/Event/InteractiveExperiences/InteractiveExperienceDetail/interactiveExperienceScheduleBag\";\r\n    import { Calendar } from \"@Obsidian/Utility/internetCalendar\";\r\n    import { InteractiveExperienceCampusBehavior } from \"@Obsidian/Enums/Event/interactiveExperienceCampusBehavior\";\r\n    import { confirmDelete } from \"@Obsidian/Utility/dialogs\";\r\n    import { areEqual, newGuid } from \"@Obsidian/Utility/guid\";\r\n\r\n    const props = defineProps({\r\n        modelValue: {\r\n            type: Object as PropType<InteractiveExperienceBag>,\r\n            required: true\r\n        },\r\n\r\n        options: {\r\n            type: Object as PropType<InteractiveExperienceDetailOptionsBag>,\r\n            required: true\r\n        }\r\n    });\r\n\r\n    const emit = defineEmits<{\r\n        (e: \"update:modelValue\", value: InteractiveExperienceBag): void,\r\n        (e: \"propertyChanged\", value: string): void\r\n    }>();\r\n\r\n    // #region Values\r\n\r\n    const attributes = ref(props.modelValue.attributes ?? {});\r\n    const attributeValues = ref(props.modelValue.attributeValues ?? {});\r\n    const campusBehavior = ref(props.modelValue.campusBehavior.toString());\r\n    const defaultCampus = ref(props.modelValue.defaultCampus);\r\n    const description = propertyRef(props.modelValue.description ?? \"\", \"Description\");\r\n    const isActive = propertyRef(props.modelValue.isActive ?? false, \"IsActive\");\r\n    const name = propertyRef(props.modelValue.name ?? \"\", \"Name\");\r\n    const publicLabel = propertyRef(props.modelValue.publicLabel ?? \"\", \"PublicLabel\");\r\n    const experiencePhoto = propertyRef(props.modelValue.photoBinaryFile ?? null, \"PhotoBinaryFileId\");\r\n    const pushNotificationConfiguration = propertyRef(props.modelValue.pushNotificationType.toString(), \"PushNotificationType\");\r\n    const pushNotificationTitle = propertyRef(props.modelValue.pushNotificationTitle ?? \"\", \"PushNotificationTitle\");\r\n    const pushNotificationDetail = propertyRef(props.modelValue.pushNotificationDetail ?? \"\", \"PushNotificationDetail\");\r\n    const schedules = ref(props.modelValue.schedules ?? []);\r\n    const welcomeTitle = propertyRef(props.modelValue.welcomeTitle ?? \"\", \"WelcomeTitle\");\r\n    const welcomeMessage = propertyRef(props.modelValue.welcomeMessage ?? \"\", \"WelcomeMessage\");\r\n    const welcomeHeaderImage = propertyRef(props.modelValue.welcomeHeaderImageBinaryFile ?? null, \"WelcomeHeaderImageBinaryFileId\");\r\n    const noActionsTitle = propertyRef(props.modelValue.noActionTitle ?? \"\", \"NoActionTitle\");\r\n    const noActionsMessage = propertyRef(props.modelValue.noActionMessage ?? \"\", \"NoActionMessage\");\r\n    const noActionsHeaderImage = propertyRef(props.modelValue.noActionHeaderImageBinaryFile ?? null, \"NoActionHeaderImageBinaryFileId\");\r\n    const actionBackgroundColor = propertyRef(props.modelValue.actionBackgroundColor ?? \"\", \"ActionBackgroundColor\");\r\n    const actionTextColor = propertyRef(props.modelValue.actionTextColor ?? \"\", \"ActionTextColor\");\r\n    const actionPrimaryButtonColor = propertyRef(props.modelValue.actionPrimaryButtonColor ?? \"\", \"ActionPrimaryButtonColor\");\r\n    const actionPrimaryButtonTextColor = propertyRef(props.modelValue.actionPrimaryButtonTextColor ?? \"\", \"ActionPrimaryButtonTextColor\");\r\n    const actionSecondaryButtonColor = propertyRef(props.modelValue.actionSecondaryButtonColor ?? \"\", \"ActionSecondaryButtonColor\");\r\n    const actionSecondaryButtonTextColor = propertyRef(props.modelValue.actionSecondaryButtonTextColor ?? \"\", \"ActionSecondaryButtonTextColor\");\r\n    const actionBackgroundImage = propertyRef(props.modelValue.actionBackgroundImageBinaryFile ?? null, \"ActionBackgroundImageBinaryFileId\");\r\n    const actionCustomCss = propertyRef(props.modelValue.actionCustomCss ?? \"\", \"ActionCustomCss\");\r\n    const audienceBackgroundColor = propertyRef(props.modelValue.audienceBackgroundColor ?? \"\", \"ActionBackgroundColor\");\r\n    const audienceTextColor = propertyRef(props.modelValue.audienceTextColor ?? \"\", \"ActionTextColor\");\r\n    const audiencePrimaryColor = propertyRef(props.modelValue.audiencePrimaryColor ?? \"\", \"AudiencePrimaryColor\");\r\n    const audienceSecondaryColor = propertyRef(props.modelValue.audienceSecondaryColor ?? \"\", \"AudienceSecondaryColor\");\r\n    const audienceAccentColor = propertyRef(props.modelValue.audienceAccentColor ?? \"\", \"AudienceAccentColor\");\r\n    const audienceBackgroundImage = propertyRef(props.modelValue.audienceBackgroundImageBinaryFile ?? null, \"AudienceBackgroundImageBinaryFileId\");\r\n    const audienceCustomCss = propertyRef(props.modelValue.audienceCustomCss ?? \"\", \"AudienceCustomCss\");\r\n\r\n    const isScheduleModalVisible = ref(false);\r\n    let editingSchedule: InteractiveExperienceScheduleBag | null = null;\r\n    const scheduleModalTitle = ref(\"\");\r\n    const scheduleContent = ref(\"\");\r\n    const scheduleCampuses = shallowRef<ListItemBag[]>([]);\r\n    const scheduleDataView = shallowRef<ListItemBag | null>(null);\r\n    const scheduleGroup = shallowRef<ListItemBag | null>(null);\r\n\r\n    // The properties that are being edited. This should only contain\r\n    // objects returned by propertyRef().\r\n    const propRefs = [description,\r\n        isActive,\r\n        name,\r\n        publicLabel,\r\n        experiencePhoto,\r\n        pushNotificationConfiguration,\r\n        pushNotificationTitle,\r\n        pushNotificationDetail,\r\n        welcomeTitle,\r\n        welcomeMessage,\r\n        welcomeHeaderImage,\r\n        noActionsTitle,\r\n        noActionsMessage,\r\n        noActionsHeaderImage,\r\n        actionBackgroundColor,\r\n        actionTextColor,\r\n        actionPrimaryButtonColor,\r\n        actionPrimaryButtonTextColor,\r\n        actionSecondaryButtonColor,\r\n        actionSecondaryButtonTextColor,\r\n        actionBackgroundImage,\r\n        actionCustomCss,\r\n        audienceBackgroundColor,\r\n        audienceTextColor,\r\n        audiencePrimaryColor,\r\n        audienceSecondaryColor,\r\n        audienceAccentColor,\r\n        audienceBackgroundImage,\r\n        audienceCustomCss];\r\n\r\n    const binaryFileTypeGuid = BinaryFiletype.Default;\r\n    const isActionAdvancedOptionsVisible = ref(false);\r\n    const isAudienceAdvancedOptionsVisible = ref(false);\r\n\r\n    const pushNotificationConfigurationItems: ListItemBag[] = [\r\n        {\r\n            value: InteractiveExperiencePushNotificationType.Never.toString(),\r\n            text: \"Never\"\r\n        },\r\n        {\r\n            value: InteractiveExperiencePushNotificationType.EveryAction.toString(),\r\n            text: \"Every Action\"\r\n        },\r\n        {\r\n            value: InteractiveExperiencePushNotificationType.SpecificActions.toString(),\r\n            text: \"Specific Actions\"\r\n        }\r\n    ];\r\n\r\n    const campusBehaviorItems: ListItemBag[] = [\r\n        {\r\n            value: InteractiveExperienceCampusBehavior.FilterSchedulesByCampusGeofences.toString(),\r\n            text: \"Filter Schedules by Campus Geofences\"\r\n        },\r\n        {\r\n            value: InteractiveExperienceCampusBehavior.DetermineCampusFromGeofence.toString(),\r\n            text: \"Determine Campus from Geofence\",\r\n        },\r\n        {\r\n            value: InteractiveExperienceCampusBehavior.UseIndividualsCampus.toString(),\r\n            text: \"Use Individual's Campus\"\r\n        }\r\n    ];\r\n\r\n    // #endregion\r\n\r\n    // #region Computed Values\r\n\r\n    const isPushActive = computed((): boolean => {\r\n        return pushNotificationConfiguration.value === InteractiveExperiencePushNotificationType.EveryAction.toString()\r\n            || pushNotificationConfiguration.value === InteractiveExperiencePushNotificationType.SpecificActions.toString();\r\n    });\r\n\r\n    const isDefaultCampusVisible = computed((): boolean => {\r\n        return campusBehavior.value === InteractiveExperienceCampusBehavior.DetermineCampusFromGeofence.toString()\r\n            || campusBehavior.value === InteractiveExperienceCampusBehavior.UseIndividualsCampus.toString();\r\n    });\r\n\r\n    // #endregion\r\n\r\n    // #region Functions\r\n\r\n    /**\r\n     * Gets the campus names for a schedule as a comma separated string.\r\n     *\r\n     * @param schedule The schedule whose campus names are to be returned.\r\n     *\r\n     * @returns A string that represents the campuses tied to the schedule.\r\n     */\r\n    function getScheduleCampusNames(schedule: InteractiveExperienceScheduleBag): string {\r\n        if (schedule.campuses && schedule.campuses.length) {\r\n            return schedule.campuses.map(c => c.text ?? \"\").join(\", \");\r\n        }\r\n        else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Event Handlers\r\n\r\n    /**\r\n     * Called when the \"+\" add button on the schedule grid is clicked.\r\n     */\r\n    function onAddScheduleClick(): void {\r\n        scheduleModalTitle.value = \"Add Schedule\";\r\n        editingSchedule = null;\r\n        scheduleContent.value = \"\";\r\n        scheduleCampuses.value = [];\r\n        scheduleDataView.value = null;\r\n        scheduleGroup.value = null;\r\n        isScheduleModalVisible.value = true;\r\n    }\r\n\r\n    /**\r\n     * Called when the pencil/edit button on the schedule grid is clicked.\r\n     *\r\n     * @param schedule The schedule to be edited.\r\n     */\r\n    function onEditScheduleClick(schedule: InteractiveExperienceScheduleBag): void {\r\n        scheduleModalTitle.value = \"Edit Schedule\";\r\n        editingSchedule = schedule;\r\n        scheduleContent.value = schedule.schedule?.value ?? \"\";\r\n        scheduleCampuses.value = schedule.campuses ?? [];\r\n        scheduleDataView.value = schedule.dataView ?? null;\r\n        scheduleGroup.value = schedule.group ?? null;\r\n        isScheduleModalVisible.value = true;\r\n    }\r\n\r\n    /**\r\n     * Called when the delete button on the schedule grid is clicked.\r\n     *\r\n     * @param schedule The schedule to be edited.\r\n     */\r\n    async function onDeleteScheduleClick(schedule: InteractiveExperienceScheduleBag): Promise<void> {\r\n        if (!(await confirmDelete(\"Schedule\"))) {\r\n            return;\r\n        }\r\n\r\n        const index = schedules.value.findIndex(s => areEqual(s.guid, schedule.guid));\r\n\r\n        if (index >= 0) {\r\n            schedules.value.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called when a schedule is ready to be saved.\r\n     */\r\n    function onSaveSchedule(): void {\r\n        const calendar = new Calendar(scheduleContent.value);\r\n\r\n        let schedule = editingSchedule ?? {\r\n            guid: newGuid()\r\n        };\r\n\r\n        schedule.schedule = {\r\n            value: scheduleContent.value,\r\n            text: calendar.events[0].toFriendlyText()\r\n        };\r\n        schedule.campuses = scheduleCampuses.value;\r\n        schedule.dataView = scheduleDataView.value;\r\n        schedule.group = scheduleGroup.value;\r\n\r\n        if (!editingSchedule) {\r\n            schedules.value.push(schedule);\r\n        }\r\n\r\n        isScheduleModalVisible.value = false;\r\n    }\r\n\r\n    /**\r\n     * Called when the advanced options of the action section should be\r\n     * expaned or collapsed.\r\n     */\r\n    function onActionAdvancedOptionsClick(): void {\r\n        isActionAdvancedOptionsVisible.value = !isActionAdvancedOptionsVisible.value;\r\n    }\r\n\r\n    /**\r\n     * Called when the advanced options of the audience section should be\r\n     * expaned or collapsed.\r\n     */\r\n    function onAudienceAdvancedOptionsClick(): void {\r\n        isAudienceAdvancedOptionsVisible.value = !isAudienceAdvancedOptionsVisible.value;\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // Watch for parental changes in our model value and update all our values.\r\n    watch(() => props.modelValue, () => {\r\n        updateRefValue(attributes, props.modelValue.attributes ?? {});\r\n        updateRefValue(attributeValues, props.modelValue.attributeValues ?? {});\r\n        updateRefValue(campusBehavior, props.modelValue.campusBehavior.toString());\r\n        updateRefValue(defaultCampus, props.modelValue.defaultCampus);\r\n        updateRefValue(description, props.modelValue.description ?? \"\");\r\n        updateRefValue(isActive, props.modelValue.isActive ?? false);\r\n        updateRefValue(name, props.modelValue.name ?? \"\");\r\n        updateRefValue(publicLabel, props.modelValue.publicLabel ?? \"\");\r\n        updateRefValue(experiencePhoto, props.modelValue.photoBinaryFile ?? null);\r\n        updateRefValue(pushNotificationConfiguration, props.modelValue.pushNotificationType.toString());\r\n        updateRefValue(pushNotificationTitle, props.modelValue.pushNotificationTitle ?? \"\");\r\n        updateRefValue(pushNotificationDetail, props.modelValue.pushNotificationDetail ?? \"\");\r\n        updateRefValue(welcomeTitle, props.modelValue.welcomeTitle ?? \"\");\r\n        updateRefValue(welcomeMessage, props.modelValue.welcomeMessage ?? \"\");\r\n        updateRefValue(welcomeHeaderImage, props.modelValue.welcomeHeaderImageBinaryFile ?? null);\r\n        updateRefValue(noActionsTitle, props.modelValue.noActionTitle ?? \"\");\r\n        updateRefValue(noActionsMessage, props.modelValue.noActionMessage ?? \"\");\r\n        updateRefValue(noActionsHeaderImage, props.modelValue.noActionHeaderImageBinaryFile ?? null);\r\n        updateRefValue(actionBackgroundColor, props.modelValue.actionBackgroundColor ?? \"\");\r\n        updateRefValue(actionTextColor, props.modelValue.actionTextColor ?? \"\");\r\n        updateRefValue(actionPrimaryButtonColor, props.modelValue.actionPrimaryButtonColor ?? \"\");\r\n        updateRefValue(actionPrimaryButtonTextColor, props.modelValue.actionPrimaryButtonTextColor ?? \"\");\r\n        updateRefValue(actionSecondaryButtonColor, props.modelValue.actionSecondaryButtonColor ?? \"\");\r\n        updateRefValue(actionSecondaryButtonTextColor, props.modelValue.actionSecondaryButtonTextColor ?? \"\");\r\n        updateRefValue(actionBackgroundImage, props.modelValue.actionBackgroundImageBinaryFile ?? null);\r\n        updateRefValue(actionCustomCss, props.modelValue.actionCustomCss ?? \"\");\r\n        updateRefValue(audienceBackgroundColor, props.modelValue.audienceBackgroundColor ?? \"\");\r\n        updateRefValue(audienceTextColor, props.modelValue.audienceTextColor ?? \"\");\r\n        updateRefValue(audiencePrimaryColor, props.modelValue.audiencePrimaryColor ?? \"\");\r\n        updateRefValue(audienceSecondaryColor, props.modelValue.audienceSecondaryColor ?? \"\");\r\n        updateRefValue(audienceAccentColor, props.modelValue.audienceAccentColor ?? \"\");\r\n        updateRefValue(audienceBackgroundImage, props.modelValue.audienceBackgroundImageBinaryFile ?? null);\r\n        updateRefValue(audienceCustomCss, props.modelValue.audienceCustomCss ?? \"\");\r\n    });\r\n\r\n    // Determines which values we want to track changes on (defined in the\r\n    // array) and then emit a new object defined as newValue.\r\n    watch([attributeValues, campusBehavior, defaultCampus, schedules, ...propRefs], () => {\r\n        const newValue: InteractiveExperienceBag = {\r\n            ...props.modelValue,\r\n            attributeValues: attributeValues.value,\r\n            campusBehavior: toNumber(campusBehavior.value) as InteractiveExperienceCampusBehavior,\r\n            defaultCampus: defaultCampus.value,\r\n            description: description.value,\r\n            isActive: isActive.value,\r\n            name: name.value,\r\n            publicLabel: publicLabel.value,\r\n            photoBinaryFile: experiencePhoto.value,\r\n            pushNotificationType: toNumber(pushNotificationConfiguration.value) as InteractiveExperiencePushNotificationType,\r\n            pushNotificationTitle: pushNotificationTitle.value,\r\n            pushNotificationDetail: pushNotificationDetail.value,\r\n            welcomeTitle: welcomeTitle.value,\r\n            welcomeMessage: welcomeMessage.value,\r\n            welcomeHeaderImageBinaryFile: welcomeHeaderImage.value,\r\n            noActionTitle: noActionsTitle.value,\r\n            noActionMessage: noActionsMessage.value,\r\n            noActionHeaderImageBinaryFile: noActionsHeaderImage.value,\r\n            actionBackgroundColor: actionBackgroundColor.value,\r\n            actionTextColor: actionTextColor.value,\r\n            actionPrimaryButtonColor: actionPrimaryButtonColor.value,\r\n            actionPrimaryButtonTextColor: actionPrimaryButtonTextColor.value,\r\n            actionSecondaryButtonColor: actionSecondaryButtonColor.value,\r\n            actionSecondaryButtonTextColor: actionSecondaryButtonTextColor.value,\r\n            actionBackgroundImageBinaryFile: actionBackgroundImage.value,\r\n            actionCustomCss: actionCustomCss.value,\r\n            audienceBackgroundColor: audienceBackgroundColor.value,\r\n            audienceTextColor: audienceTextColor.value,\r\n            audiencePrimaryColor: audiencePrimaryColor.value,\r\n            audienceSecondaryColor: audienceSecondaryColor.value,\r\n            audienceAccentColor: audienceAccentColor.value,\r\n            audienceBackgroundImageBinaryFile: audienceBackgroundImage.value,\r\n            audienceCustomCss: audienceCustomCss.value\r\n        };\r\n\r\n        emit(\"update:modelValue\", newValue);\r\n    });\r\n\r\n    // Watch for any changes to props that represent properties and then\r\n    // automatically emit which property changed.\r\n    watchPropertyChanges(propRefs, emit);\r\n\r\n    // Watch for changes to name, and if the old value matches the public name\r\n    // then update the public name to the new value.\r\n    watch(name, (newValue, oldValue) => {\r\n        if (oldValue === publicLabel.value) {\r\n            publicLabel.value = newValue;\r\n        }\r\n    });\r\n</script>\r\n","<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <fieldset>\r\n        <ValueDetailList :modelValue=\"topValues\" />\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-md-6\">\r\n                <ValueDetailList :modelValue=\"leftSideValues\" />\r\n            </div>\r\n\r\n            <div class=\"col-md-6\">\r\n                <ValueDetailList :modelValue=\"rightSideValues\" />\r\n            </div>\r\n        </div>\r\n\r\n        <AttributeValuesContainer :modelValue=\"attributeValues\" :attributes=\"attributes\" :numberOfColumns=\"2\" />\r\n    </fieldset>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { computed, PropType, ref } from \"vue\";\r\n    import AttributeValuesContainer from \"@Obsidian/Controls/attributeValuesContainer\";\r\n    import ValueDetailList from \"@Obsidian/Controls/valueDetailList\";\r\n    import { ValueDetailListItemBuilder } from \"@Obsidian/Core/Controls/valueDetailListItemBuilder\";\r\n    import { ValueDetailListItem } from \"@Obsidian/Types/Controls/valueDetailListItem\";\r\n    import { InteractiveExperienceBag } from \"@Obsidian/ViewModels/Blocks/Event/InteractiveExperiences/InteractiveExperienceDetail/interactiveExperienceBag\";\r\n    import { InteractiveExperienceDetailOptionsBag } from \"@Obsidian/ViewModels/Blocks/Event/InteractiveExperiences/InteractiveExperienceDetail/interactiveExperienceDetailOptionsBag\";\r\n    import { InteractiveExperienceScheduleBag } from \"@Obsidian/ViewModels/Blocks/Event/InteractiveExperiences/InteractiveExperienceDetail/interactiveExperienceScheduleBag\";\r\n    import { escapeHtml } from \"@Obsidian/Utility/stringUtils\";\r\n\r\n    const props = defineProps({\r\n        modelValue: {\r\n            type: Object as PropType<InteractiveExperienceBag | null>,\r\n            required: false\r\n        },\r\n\r\n        options: {\r\n            type: Object as PropType<InteractiveExperienceDetailOptionsBag>,\r\n            required: true\r\n        }\r\n    });\r\n\r\n    // #region Values\r\n\r\n    const attributes = ref(props.modelValue?.attributes ?? {});\r\n    const attributeValues = ref(props.modelValue?.attributeValues ?? {});\r\n\r\n    // #endregion\r\n\r\n    // #region Computed Values\r\n\r\n    /** The values to display full-width at the top of the block. */\r\n    const topValues = computed((): ValueDetailListItem[] => {\r\n        const valueBuilder = new ValueDetailListItemBuilder();\r\n\r\n        if (!props.modelValue) {\r\n            return valueBuilder.build();\r\n        }\r\n\r\n        if (props.modelValue.description) {\r\n            valueBuilder.addTextValue(\"Description\", props.modelValue.description);\r\n        }\r\n\r\n        return valueBuilder.build();\r\n    });\r\n\r\n    /** The values to display at half-width on the left side of the block. */\r\n    const leftSideValues = computed((): ValueDetailListItem[] => {\r\n        const valueBuilder = new ValueDetailListItemBuilder();\r\n\r\n        if (!props.modelValue) {\r\n            return valueBuilder.build();\r\n        }\r\n\r\n        valueBuilder.addHtmlValue(\"Schedules\", getSchedulesHtml(props.modelValue.schedules ?? []));\r\n\r\n        return valueBuilder.build();\r\n    });\r\n\r\n    /** The values to display at half-width on the left side of the block. */\r\n    const rightSideValues = computed((): ValueDetailListItem[] => {\r\n        const valueBuilder = new ValueDetailListItemBuilder();\r\n\r\n        if (!props.modelValue) {\r\n            return valueBuilder.build();\r\n        }\r\n\r\n        return valueBuilder.build();\r\n    });\r\n\r\n    // #endregion\r\n\r\n    // #region Functions\r\n\r\n    /**\r\n     * Gets an HTML string that describes the schedules and any filtering options.\r\n     *\r\n     * @param schedules The schedules to be turned into descriptive text.\r\n     *\r\n     * @returns An HTML string that represents the information about the schedules.\r\n     */\r\n    function getSchedulesHtml(schedules: InteractiveExperienceScheduleBag[]): string {\r\n        if (schedules.length === 0) {\r\n            return \"\";\r\n        }\r\n\r\n        return `<ul>${schedules.map(s => getScheduleHtml(s)).join(\"\")}</ul>`;\r\n    }\r\n\r\n    /**\r\n     * Gets an HTML string that describes the schedule and any filtering options.\r\n     *\r\n     * @param schedule The schedule to be turned into descriptive text.\r\n     *\r\n     * @returns An HTML string that represents the information about the schedule.\r\n     */\r\n    function getScheduleHtml(schedule: InteractiveExperienceScheduleBag): string {\r\n        let html = schedule.schedule?.text || \"No Schedule\";\r\n\r\n        if (schedule.campuses && schedule.campuses.length > 0) {\r\n            const campusNames = schedule.campuses.map(c => escapeHtml(c.text ?? \"\")).join(\", \");\r\n\r\n            html += `<br /><span class=\"text-muted\">${campusNames}</span>`;\r\n        }\r\n\r\n        if (schedule.dataView && schedule.dataView.text) {\r\n            html += `<br /><span class=\"text-muted\">Data View: ${escapeHtml(schedule.dataView.text)}</span>`;\r\n        }\r\n\r\n        if (schedule.group && schedule.group.text) {\r\n            html += `<br /><span class=\"text-muted\">Group: ${escapeHtml(schedule.group.text)}</span>`;\r\n        }\r\n\r\n        return `<li>${html}</li>`;\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Event Handlers\r\n\r\n    // #endregion\r\n</script>\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nexport const enum NavigationUrlKey {\r\n    ParentPage = \"ParentPage\"\r\n}\r\n","<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <NotificationBox v-if=\"blockError\" alertType=\"warning\">{{ blockError }}</NotificationBox>\r\n\r\n    <NotificationBox v-if=\"errorMessage\" alertType=\"danger\">{{ errorMessage }}</NotificationBox>\r\n\r\n    <DetailBlock v-if=\"!blockError\"\r\n                 v-model:mode=\"panelMode\"\r\n                 :name=\"panelName\"\r\n                 :labels=\"blockLabels\"\r\n                 :entityKey=\"entityKey\"\r\n                 :entityTypeGuid=\"entityTypeGuid\"\r\n                 entityTypeName=\"InteractiveExperience\"\r\n                 :isAuditHidden=\"false\"\r\n                 :isBadgesVisible=\"true\"\r\n                 :isDeleteVisible=\"isEditable\"\r\n                 :isEditVisible=\"isEditable\"\r\n                 :isFollowVisible=\"false\"\r\n                 :isSecurityHidden=\"true\"\r\n                 @cancelEdit=\"onCancelEdit\"\r\n                 @delete=\"onDelete\"\r\n                 @edit=\"onEdit\"\r\n                 @save=\"onSave\">\r\n        <template #view>\r\n            <ViewPanel :modelValue=\"interactiveExperienceViewBag\" :options=\"options\" />\r\n        </template>\r\n\r\n        <template #edit>\r\n            <EditPanel v-model=\"interactiveExperienceEditBag\" :options=\"options\" @propertyChanged=\"onPropertyChanged\" />\r\n        </template>\r\n    </DetailBlock>\r\n\r\n    <ActionsPanel v-if=\"isActionListVisible\"\r\n                  v-model=\"interactiveExperienceActions\"\r\n                  :name=\"interactiveExperienceViewBag!.name!\"\r\n                  :interactiveExperienceIdKey=\"interactiveExperienceViewBag!.idKey!\"\r\n                  :actionTypes=\"actionTypes\"\r\n                  :visualizerTypes=\"visualizerTypes\" />\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { computed, ref } from \"vue\";\r\n    import NotificationBox from \"@Obsidian/Controls/notificationBox.obs\";\r\n    import { EntityType } from \"@Obsidian/SystemGuids/entityType\";\r\n    import DetailBlock from \"@Obsidian/Templates/detailBlock\";\r\n    import { DetailPanelMode } from \"@Obsidian/Enums/Controls/detailPanelMode\";\r\n    import { PanelAction } from \"@Obsidian/Types/Controls/panelAction\";\r\n    import ActionsPanel from \"./InteractiveExperienceDetail/actionsPanel.partial.obs\";\r\n    import EditPanel from \"./InteractiveExperienceDetail/editPanel.partial.obs\";\r\n    import ViewPanel from \"./InteractiveExperienceDetail/viewPanel.partial.obs\";\r\n    import { getSecurityGrant, provideSecurityGrant, refreshDetailAttributes, useConfigurationValues, useInvokeBlockAction } from \"@Obsidian/Utility/block\";\r\n    import { debounce } from \"@Obsidian/Utility/util\";\r\n    import { NavigationUrlKey } from \"./InteractiveExperienceDetail/types.partial\";\r\n    import { DetailBlockBox } from \"@Obsidian/ViewModels/Blocks/detailBlockBox\";\r\n    import { InteractiveExperienceBag } from \"@Obsidian/ViewModels/Blocks/Event/InteractiveExperiences/InteractiveExperienceDetail/interactiveExperienceBag\";\r\n    import { InteractiveExperienceDetailOptionsBag } from \"@Obsidian/ViewModels/Blocks/Event/InteractiveExperiences/InteractiveExperienceDetail/interactiveExperienceDetailOptionsBag\";\r\n    import { InteractiveExperienceActionTypeBag } from \"@Obsidian/ViewModels/Blocks/Event/InteractiveExperiences/InteractiveExperienceDetail/interactiveExperienceActionTypeBag\";\r\n    import { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\n\r\n    const config = useConfigurationValues<DetailBlockBox<InteractiveExperienceBag, InteractiveExperienceDetailOptionsBag>>();\r\n    const invokeBlockAction = useInvokeBlockAction();\r\n    const securityGrant = getSecurityGrant(config.securityGrantToken);\r\n\r\n    // #region Values\r\n\r\n    const blockError = ref(\"\");\r\n    const errorMessage = ref(\"\");\r\n\r\n    const interactiveExperienceViewBag = ref(config.entity);\r\n    const interactiveExperienceEditBag = ref<InteractiveExperienceBag>({} as InteractiveExperienceBag);\r\n    const interactiveExperienceActions = ref(interactiveExperienceViewBag.value?.actions ?? []);\r\n\r\n    const entityTypeGuid = EntityType.InteractiveExperience;\r\n\r\n    const panelMode = ref<DetailPanelMode>(DetailPanelMode.View);\r\n\r\n    // The properties that are being edited in the UI. This is used to\r\n    // inform the server which incoming values have valid data in them.\r\n    const validProperties: (keyof InteractiveExperienceBag)[] = [\r\n        \"attributeValues\",\r\n        \"campusBehavior\",\r\n        \"defaultCampus\",\r\n        \"actionBackgroundColor\",\r\n        \"actionBackgroundImageBinaryFile\",\r\n        \"actionCustomCss\",\r\n        \"actionPrimaryButtonColor\",\r\n        \"actionPrimaryButtonTextColor\",\r\n        \"actionSecondaryButtonColor\",\r\n        \"actionSecondaryButtonTextColor\",\r\n        \"actionTextColor\",\r\n        \"audienceAccentColor\",\r\n        \"audienceBackgroundColor\",\r\n        \"audienceBackgroundImageBinaryFile\",\r\n        \"audienceCustomCss\",\r\n        \"audiencePrimaryColor\",\r\n        \"audienceSecondaryColor\",\r\n        \"audienceTextColor\",\r\n        \"description\",\r\n        \"isActive\",\r\n        \"name\",\r\n        \"noActionHeaderImageBinaryFile\",\r\n        \"noActionMessage\",\r\n        \"noActionTitle\",\r\n        \"photoBinaryFile\",\r\n        \"publicLabel\",\r\n        \"pushNotificationType\",\r\n        \"pushNotificationTitle\",\r\n        \"pushNotificationDetail\",\r\n        \"schedules\",\r\n        \"welcomeHeaderImageBinaryFile\",\r\n        \"welcomeMessage\",\r\n        \"welcomeTitle\"\r\n    ];\r\n\r\n    const refreshAttributesDebounce = debounce(() => refreshDetailAttributes(interactiveExperienceEditBag, validProperties, invokeBlockAction), undefined, true);\r\n\r\n    // #endregion\r\n\r\n    // #region Computed Values\r\n\r\n    /**\r\n     * The entity name to display in the block panel.\r\n     */\r\n    const panelName = computed((): string => {\r\n        return interactiveExperienceViewBag.value?.name ?? \"\";\r\n    });\r\n\r\n    /**\r\n     * The identifier key value for this entity.\r\n     */\r\n    const entityKey = computed((): string => {\r\n        return interactiveExperienceViewBag.value?.idKey ?? \"\";\r\n    });\r\n\r\n    /**\r\n     * Additional labels to display in the block panel.\r\n     */\r\n    const blockLabels = computed((): PanelAction[] | undefined => {\r\n        const labels: PanelAction[] = [];\r\n\r\n        if (panelMode.value !== DetailPanelMode.View) {\r\n            return undefined;\r\n        }\r\n\r\n        if (interactiveExperienceViewBag.value?.isActive === true) {\r\n            labels.push({\r\n                iconCssClass: \"fa fa-lightbulb\",\r\n                title: \"Active\",\r\n                type: \"success\"\r\n            });\r\n        }\r\n        else {\r\n            labels.push({\r\n                iconCssClass: \"far fa-lightbulb\",\r\n                title: \"Inactive\",\r\n                type: \"danger\"\r\n            });\r\n        }\r\n\r\n        return labels;\r\n    });\r\n\r\n    const isEditable = computed((): boolean => {\r\n        return config.isEditable === true;\r\n    });\r\n\r\n    const options = computed((): InteractiveExperienceDetailOptionsBag => {\r\n        return config.options ?? {};\r\n    });\r\n\r\n    const isActionListVisible = computed((): boolean => {\r\n        return !blockError.value && panelMode.value === DetailPanelMode.View && !!interactiveExperienceViewBag.value;\r\n    });\r\n\r\n    const actionTypes = computed((): InteractiveExperienceActionTypeBag[] => {\r\n        return config.options?.actionTypes ?? [];\r\n    });\r\n\r\n    const visualizerTypes = computed((): ListItemBag[] => {\r\n        return config.options?.visualizerTypes ?? [];\r\n    });\r\n\r\n    // #endregion\r\n\r\n    // #region Functions\r\n\r\n    // #endregion\r\n\r\n    // #region Event Handlers\r\n\r\n    /**\r\n     * Event handler for the Cancel button being clicked while in Edit mode.\r\n     * Handles redirect to parent page if creating a new entity.\r\n     *\r\n     * @returns true if the panel should leave edit mode; false if it should stay in edit mode; or a string containing a redirect URL.\r\n     */\r\n    async function onCancelEdit(): Promise<boolean | string> {\r\n        if (!interactiveExperienceEditBag.value?.idKey) {\r\n            if (config.navigationUrls?.[NavigationUrlKey.ParentPage]) {\r\n                return config.navigationUrls[NavigationUrlKey.ParentPage];\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Event handler for the Delete button being clicked. Sends the\r\n     * delete request to the server and then redirects to the target page.\r\n     *\r\n     * @returns false if it should stay on the page; or a string containing a redirect URL.\r\n     */\r\n    async function onDelete(): Promise<false | string> {\r\n        errorMessage.value = \"\";\r\n\r\n        const result = await invokeBlockAction<string>(\"Delete\", {\r\n            key: interactiveExperienceViewBag.value?.idKey\r\n        });\r\n\r\n        if (result.isSuccess && result.data) {\r\n            return result.data;\r\n        }\r\n        else {\r\n            errorMessage.value = result.errorMessage ?? \"Unknown error while trying to delete interactive experience.\";\r\n\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Event handler for the Edit button being clicked. Request the edit\r\n     * details from the server and then enter edit mode.\r\n     *\r\n     * @returns true if the panel should enter edit mode; otherwise false.\r\n     */\r\n    async function onEdit(): Promise<boolean> {\r\n        const result = await invokeBlockAction<DetailBlockBox<InteractiveExperienceBag, InteractiveExperienceDetailOptionsBag>>(\"Edit\", {\r\n            key: interactiveExperienceViewBag.value?.idKey\r\n        });\r\n\r\n        if (result.isSuccess && result.data && result.data.entity) {\r\n            interactiveExperienceEditBag.value = result.data.entity;\r\n\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Event handler for when a value has changed that has an associated\r\n     * C# property name. This is used to detect changes to values that\r\n     * might cause qualified attributes to either show up or not show up.\r\n     *\r\n     * @param propertyName The name of the C# property that was changed.\r\n     */\r\n    function onPropertyChanged(propertyName: string): void {\r\n        // If we don't have any qualified attribute properties or this property\r\n        // is not one of them then do nothing.\r\n        if (!config.qualifiedAttributeProperties || !config.qualifiedAttributeProperties.some(n => n.toLowerCase() === propertyName.toLowerCase())) {\r\n            return;\r\n        }\r\n\r\n        refreshAttributesDebounce();\r\n    }\r\n\r\n    /**\r\n     * Event handler for the panel's Save event. Send the data to the server\r\n     * to be saved and then leave edit mode or redirect to target page.\r\n     *\r\n     * @returns true if the panel should leave edit mode; false if it should stay in edit mode; or a string containing a redirect URL.\r\n     */\r\n    async function onSave(): Promise<boolean | string> {\r\n        errorMessage.value = \"\";\r\n\r\n        const data: DetailBlockBox<InteractiveExperienceBag, InteractiveExperienceDetailOptionsBag> = {\r\n            entity: interactiveExperienceEditBag.value,\r\n            isEditable: true,\r\n            validProperties: validProperties\r\n        };\r\n\r\n        const result = await invokeBlockAction<InteractiveExperienceBag | string>(\"Save\", {\r\n            box: data\r\n        });\r\n\r\n        if (result.isSuccess && result.data) {\r\n            if (result.statusCode === 200 && typeof result.data === \"object\") {\r\n                interactiveExperienceViewBag.value = result.data;\r\n                interactiveExperienceActions.value = interactiveExperienceViewBag.value.actions ?? [];\r\n\r\n                return true;\r\n            }\r\n            else if (result.statusCode === 201 && typeof result.data === \"string\") {\r\n                return result.data;\r\n            }\r\n        }\r\n\r\n        errorMessage.value = result.errorMessage ?? \"Unknown error while trying to save interactive experience.\";\r\n\r\n        return false;\r\n    }\r\n\r\n    // #endregion\r\n\r\n    provideSecurityGrant(securityGrant);\r\n\r\n    // Handle any initial error conditions or the need to go into edit mode.\r\n    if (config.errorMessage) {\r\n        blockError.value = config.errorMessage;\r\n    }\r\n    else if (!config.entity) {\r\n        blockError.value = \"The specified interactive experience could not be viewed.\";\r\n    }\r\n    else if (!config.entity.idKey) {\r\n        interactiveExperienceEditBag.value = config.entity;\r\n        panelMode.value = DetailPanelMode.Add;\r\n    }\r\n</script>\r\n"],"names":["invokeBlockAction","useInvokeBlockAction","internalValue","useVModelPassthrough","props","emit","isModalVisible","ref","modalTitle","modalErrorMessage","existingActionGuid","actionType","requiresModeration","allowMultipleSubmissions","anonymousResponses","responseVisual","attributeValues","actionHeaderTitle","computed","concat","name","actionHeaderDescription","actionTypeItems","actionTypes","map","at","value","text","responseVisualItems","visualizerTypes","selectedActionType","_props$actionTypes$fi","find","areEqual","actionAttributes","_selectedActionType$v","_selectedActionType$v2","attributes","selectedVisualizerType","_props$visualizerType","visualizerAttributes","_selectedVisualizerTy","_selectedVisualizerTy2","isRequiresModerationVisible","_selectedActionType$v3","isModerationSupported","isMultipleSubmissionsVisible","_selectedActionType$v4","isMultipleSubmissionSupported","getActionTypeName","action","_props$actionTypes$fi2","_props$actionTypes$fi3","_action$actionType","getActionTypeIconClass","_props$actionTypes$fi4","_props$actionTypes$fi5","_action$actionType2","iconCssClass","updateDefaultAttributeValues","newValues","_objectSpread","isChanged","defaultAttributeValues","key","onAddActionClick","onEditActionClick","_action$actionType$va","_action$actionType3","_action$responseVisua","_action$responseVisua2","_action$attributeValu","_action$guid","isModerationRequired","isMultipleSubmissionsAllowed","isResponseAnonymous","responseVisualizer","guid","onActionSave","_onActionSave","apply","arguments","_asyncToGenerator","_existingActionGuid$v","box","setPropertiesBoxValue","newGuid","result","idKey","interactiveExperienceIdKey","isSuccess","data","_result$errorMessage","errorMessage","existingActionIndex","findIndex","a","newValue","splice","onActionRemoveClick","_x","_onActionRemoveClick","confirmDelete","actionGuid","alert","index","onActionReorder","_x2","_x3","_onActionReorder","beforeAction","_beforeAction$guid","beforeActionGuid","watch","dragOptions","useDragReorder","styleInject","css","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","_props$modelValue$att","modelValue","_props$modelValue$att2","campusBehavior","toString","defaultCampus","description","propertyRef","_props$modelValue$des","isActive","_props$modelValue$isA","_props$modelValue$nam","publicLabel","_props$modelValue$pub","experiencePhoto","_props$modelValue$pho","photoBinaryFile","pushNotificationConfiguration","pushNotificationType","pushNotificationTitle","_props$modelValue$pus","pushNotificationDetail","_props$modelValue$pus2","schedules","_props$modelValue$sch","welcomeTitle","_props$modelValue$wel","welcomeMessage","_props$modelValue$wel2","welcomeHeaderImage","_props$modelValue$wel3","welcomeHeaderImageBinaryFile","noActionsTitle","_props$modelValue$noA","noActionTitle","noActionsMessage","_props$modelValue$noA2","noActionMessage","noActionsHeaderImage","_props$modelValue$noA3","noActionHeaderImageBinaryFile","actionBackgroundColor","_props$modelValue$act","actionTextColor","_props$modelValue$act2","actionPrimaryButtonColor","_props$modelValue$act3","actionPrimaryButtonTextColor","_props$modelValue$act4","actionSecondaryButtonColor","_props$modelValue$act5","actionSecondaryButtonTextColor","_props$modelValue$act6","actionBackgroundImage","_props$modelValue$act7","actionBackgroundImageBinaryFile","actionCustomCss","_props$modelValue$act8","audienceBackgroundColor","_props$modelValue$aud","audienceTextColor","_props$modelValue$aud2","audiencePrimaryColor","_props$modelValue$aud3","audienceSecondaryColor","_props$modelValue$aud4","audienceAccentColor","_props$modelValue$aud5","audienceBackgroundImage","_props$modelValue$aud6","audienceBackgroundImageBinaryFile","audienceCustomCss","_props$modelValue$aud7","isScheduleModalVisible","editingSchedule","scheduleModalTitle","scheduleContent","scheduleCampuses","shallowRef","scheduleDataView","scheduleGroup","propRefs","binaryFileTypeGuid","BinaryFiletype","Default","isActionAdvancedOptionsVisible","isAudienceAdvancedOptionsVisible","pushNotificationConfigurationItems","InteractiveExperiencePushNotificationType","Never","EveryAction","SpecificActions","campusBehaviorItems","InteractiveExperienceCampusBehavior","FilterSchedulesByCampusGeofences","DetermineCampusFromGeofence","UseIndividualsCampus","isPushActive","isDefaultCampusVisible","getScheduleCampusNames","schedule","campuses","length","c","_c$text","join","onAddScheduleClick","onEditScheduleClick","_schedule$schedule$va","_schedule$schedule","_schedule$campuses","_schedule$dataView","_schedule$group","dataView","group","onDeleteScheduleClick","_onDeleteScheduleClick","s","onSaveSchedule","_editingSchedule","calendar","Calendar","events","toFriendlyText","push","onActionAdvancedOptionsClick","onAudienceAdvancedOptionsClick","_props$modelValue$att3","_props$modelValue$att4","_props$modelValue$des2","_props$modelValue$isA2","_props$modelValue$nam2","_props$modelValue$pub2","_props$modelValue$pho2","_props$modelValue$pus3","_props$modelValue$pus4","_props$modelValue$wel4","_props$modelValue$wel5","_props$modelValue$wel6","_props$modelValue$noA4","_props$modelValue$noA5","_props$modelValue$noA6","_props$modelValue$act9","_props$modelValue$act10","_props$modelValue$act11","_props$modelValue$act12","_props$modelValue$act13","_props$modelValue$act14","_props$modelValue$act15","_props$modelValue$act16","_props$modelValue$aud8","_props$modelValue$aud9","_props$modelValue$aud10","_props$modelValue$aud11","_props$modelValue$aud12","_props$modelValue$aud13","_props$modelValue$aud14","updateRefValue","toNumber","watchPropertyChanges","oldValue","_props$modelValue","_props$modelValue2","topValues","valueBuilder","ValueDetailListItemBuilder","build","addTextValue","leftSideValues","addHtmlValue","getSchedulesHtml","rightSideValues","getScheduleHtml","html","campusNames","escapeHtml","NavigationUrlKey","config","useConfigurationValues","securityGrant","getSecurityGrant","securityGrantToken","blockError","interactiveExperienceViewBag","entity","interactiveExperienceEditBag","interactiveExperienceActions","_interactiveExperienc","_interactiveExperienc2","actions","entityTypeGuid","EntityType","InteractiveExperience","panelMode","DetailPanelMode","View","validProperties","refreshAttributesDebounce","debounce","refreshDetailAttributes","undefined","panelName","_interactiveExperienc3","_interactiveExperienc4","entityKey","_interactiveExperienc5","_interactiveExperienc6","blockLabels","_interactiveExperienc7","labels","title","isEditable","options","_config$options","isActionListVisible","_config$options$actio","_config$options2","_config$options$visua","_config$options3","onCancelEdit","_onCancelEdit","_interactiveExperienc8","_config$navigationUrl","navigationUrls","ParentPage","onDelete","_onDelete","_interactiveExperienc9","onEdit","_onEdit","_interactiveExperienc10","onPropertyChanged","propertyName","qualifiedAttributeProperties","some","n","toLowerCase","onSave","_onSave","_result$errorMessage2","statusCode","_interactiveExperienc11","provideSecurityGrant","Add"],"mappings":"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"}