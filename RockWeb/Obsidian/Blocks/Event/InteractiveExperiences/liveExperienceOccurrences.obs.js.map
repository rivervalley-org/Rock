{"version":3,"file":"liveExperienceOccurrences.obs.js","sources":["../../../src/Event/InteractiveExperiences/liveExperienceOccurrences.obs"],"sourcesContent":["<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <NotificationBox v-if=\"blockErrorMessage\"\r\n                     alertType=\"warning\">\r\n        {{ blockErrorMessage }}\r\n    </NotificationBox>\r\n\r\n    <div ref=\"contentElement\"></div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import NotificationBox from \"@Obsidian/Controls/notificationBox.obs\";\r\n    import { useConfigurationValues, useReloadBlock, onConfigurationValuesChanged, useInvokeBlockAction } from \"@Obsidian/Utility/block\";\r\n    import { LiveExperienceOccurrencesInitializationBox } from \"@Obsidian/ViewModels/Blocks/Event/InteractiveExperiences/LiveExperienceOccurrences/liveExperienceOccurrencesInitializationBox\";\r\n    import { computed, ref } from \"vue\";\r\n    import { PromiseCompletionSource } from \"@Obsidian/Utility/promiseUtils\";\r\n\r\n    const config = useConfigurationValues<LiveExperienceOccurrencesInitializationBox>();\r\n    const invokeBlockAction = useInvokeBlockAction();\r\n\r\n    // #region Values\r\n\r\n    const contentElement = ref<HTMLElement | null>(null);\r\n\r\n    // #endregion\r\n\r\n    // #region Computed Values\r\n\r\n    const blockErrorMessage = computed((): string | undefined | null => {\r\n        return config.errorMessage;\r\n    });\r\n\r\n    // #endregion\r\n\r\n    // #region Functions\r\n\r\n    /**\r\n     * Get the device's current location.\r\n     *\r\n     * @param alwaysRequest If false then we only get the location if we already have permission.\r\n     */\r\n    async function getDeviceLocation(alwaysRequest: boolean): Promise<GeolocationCoordinates | null> {\r\n        // If we are not configured to always request permissions\r\n        // then check first.\r\n        if (!alwaysRequest) {\r\n            // Check if we already have permission. If it is an older browser\r\n            // that doesn't support determining existing permissions values then\r\n            // just continue and ask.\r\n            if (navigator.permissions) {\r\n                const status = await navigator.permissions.query({ name: \"geolocation\" });\r\n\r\n                if (status.state !== \"granted\") {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n\r\n        // getCurrentPosition is does not follow the async pattern and uses\r\n        // callbacks instead, so we have to fake it.\r\n        const completionSource = new PromiseCompletionSource<GeolocationCoordinates | null>();\r\n\r\n        navigator.geolocation.getCurrentPosition(position => {\r\n            completionSource.resolve(position.coords);\r\n        }, () => {\r\n            completionSource.reject(new Error(\"Unable to get device location.\"));\r\n        });\r\n\r\n        try {\r\n            return await completionSource.promise;\r\n        }\r\n        catch (error) {\r\n            console.error(error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the content by requesting new HTML results from the server.\r\n     *\r\n     * @param alwaysRequestLocation If true then the location will be requested even if we haven't already been granted permission.\r\n     */\r\n    async function updateContent(alwaysRequestLocation: boolean): Promise<void> {\r\n        const location = await getDeviceLocation(alwaysRequestLocation);\r\n\r\n        const result = await invokeBlockAction<{ content: string }>(\"GetContent\", {\r\n            latitude: location?.latitude ?? null,\r\n            longitude: location?.longitude ?? null\r\n        });\r\n\r\n        if (contentElement.value && result.data?.content) {\r\n            contentElement.value.innerHTML = result.data.content;\r\n        }\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Event Handlers\r\n\r\n    // #endregion\r\n\r\n    onConfigurationValuesChanged(useReloadBlock());\r\n\r\n    if (config.provideLocationKey) {\r\n        window[config.provideLocationKey] = () => updateContent(true);\r\n    }\r\n\r\n    updateContent(config.alwaysRequestLocation);\r\n</script>\r\n"],"names":["config","useConfigurationValues","invokeBlockAction","useInvokeBlockAction","contentElement","ref","blockErrorMessage","computed","errorMessage","getDeviceLocation","_x","_getDeviceLocation","apply","arguments","_asyncToGenerator","alwaysRequest","navigator","permissions","status","query","name","state","completionSource","PromiseCompletionSource","geolocation","getCurrentPosition","position","resolve","coords","reject","Error","promise","error","console","updateContent","_x2","_updateContent","alwaysRequestLocation","_location$latitude","_location$longitude","_result$data","location","result","latitude","longitude","value","data","content","innerHTML","onConfigurationValuesChanged","useReloadBlock","provideLocationKey","window"],"mappings":"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"}