{"version":3,"file":"experienceManager.obs.js","sources":["../../../src/Event/InteractiveExperiences/ExperienceManager/experienceActionButtons.partial.obs","../../../../Rock.JavaScript.Obsidian/node_modules/style-inject/dist/style-inject.es.js","../../../src/Event/InteractiveExperiences/ExperienceManager/types.partial.ts","../../../src/Event/InteractiveExperiences/ExperienceManager/liveEventTab.partial.obs","../../../src/Event/InteractiveExperiences/ExperienceManager/liveQuestionsTab.partial.obs","../../../src/Event/InteractiveExperiences/ExperienceManager/moderationTab.partial.obs","../../../src/Event/InteractiveExperiences/ExperienceManager/panelNavigationBar.partial.obs","../../../src/Event/InteractiveExperiences/experienceManager.obs"],"sourcesContent":["<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <div v-for=\"(action, index) in actions\" class=\"action-item\" :class=\"getActionItemClass(action)\"\r\n         href=\"#\"\r\n         @click.prevent=\"onActionClick(action)\">\r\n        <div class=\"action-item-icon\">\r\n            <span>{{ index + 1 }}</span>\r\n            <span class=\"icon\">\r\n                <i :class=\"action.category\"></i>\r\n            </span>\r\n        </div>\r\n\r\n        <div class=\"action-item-content\">\r\n            {{ action.text }}\r\n        </div>\r\n\r\n        <div class=\"action-item-selected-icon\">\r\n            <i :class=\"getActionSelectedIconClass(action)\"></i>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<style scoped>\r\n.action-item {\r\n    display: flex;\r\n    align-items: stretch;\r\n    margin-bottom: 12px;\r\n    cursor: pointer;\r\n}\r\n\r\n.action-item > * {\r\n    display: flex;\r\n    align-items: center;\r\n    align-self: stretch;\r\n    padding: 12px;\r\n    color: var(--text-color);\r\n    background-color: #fff;\r\n    border-top: 1px solid #c4c4c4;\r\n    border-bottom: 1px solid #c4c4c4;\r\n    transition: background-color .25s ease-in-out, border-color .25s ease-in-out;\r\n}\r\n\r\n.action-item > *:first-child {\r\n    justify-content: center;\r\n    min-width: 64px;\r\n    padding-right: 8px;\r\n    padding-left: 8px;\r\n    border-right: 1px solid #c4c4c4;\r\n    border-left: 1px solid #c4c4c4;\r\n    border-radius: 8px 0 0 8px;\r\n}\r\n\r\n.action-item > *:last-child {\r\n    padding-right: 16px;\r\n    border-right: 1px solid #c4c4c4;\r\n    border-radius: 0 8px 8px 0;\r\n}\r\n\r\n.action-item > .action-item-icon,\r\n.action-item > .action-item-selected-icon {\r\n    color: #777;\r\n}\r\n\r\n.action-item > .action-item-icon > .icon {\r\n    margin-left: 8px;\r\n}\r\n\r\n.action-item > .action-item-content {\r\n    flex: 1 0;\r\n}\r\n\r\n.action-item:hover > * {\r\n    background-color: rgba(85, 150, 230, .1);\r\n}\r\n\r\n.action-item.selected > * {\r\n    color: #0079b0;\r\n    background-color: #d9f2fe;\r\n    border-color: #009ce3;\r\n}\r\n\r\n.action-item.selected > .action-item-selected-icon {\r\n    color: #009ce3;\r\n}\r\n</style>\r\n\r\n<script setup lang=\"ts\">\r\n    import { useVModelPassthrough } from \"@Obsidian/Utility/component\";\r\n    import { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\n    import { PropType } from \"vue\";\r\n\r\n    const props = defineProps({\r\n        modelValue: {\r\n            type: String as PropType<string | null>,\r\n            default: null\r\n        },\r\n\r\n        actions: {\r\n            type: Array as PropType<ListItemBag[]>,\r\n            default: []\r\n        }\r\n    });\r\n\r\n    const emit = defineEmits<{\r\n        (e: \"update:modelValue\", value: string | null): void\r\n    }>();\r\n\r\n    // #region Values\r\n\r\n    const internalValue = useVModelPassthrough(props, \"modelValue\", emit);\r\n\r\n    // #endregion\r\n\r\n    // #region Computed Values\r\n\r\n    // #endregion\r\n\r\n    // #region Functions\r\n\r\n    function getActionItemClass(action: ListItemBag): string {\r\n        return action.value === internalValue.value ? \"selected\" : \"\";\r\n    }\r\n\r\n    function getActionSelectedIconClass(action: ListItemBag): string {\r\n        return action.value === internalValue.value ? \"fa fa-check-circle\" : \"fa fa-check-circle-o\";\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Event Handlers\r\n\r\n    function onActionClick(action: ListItemBag): void {\r\n        if (internalValue.value === action.value) {\r\n            internalValue.value = null;\r\n        }\r\n        else {\r\n            internalValue.value = action.value ?? null;\r\n        }\r\n    }\r\n\r\n    // #endregion\r\n</script>\r\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nexport const enum NavigationUrlKey {\r\n    LiveExperiencePage = \"LiveExperiencePage\"\r\n}\r\n","<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <div class=\"live-event\">\r\n        <div class=\"row\">\r\n            <div class=\"col-xs-12 col-md-4 col-lg-3 col-md-4\">\r\n                <Kpi class=\"ml-0\"\r\n                     color=\"blue\"\r\n                     :colorShade=\"600\"\r\n                     :value=\"participantCount\"\r\n                     label=\"Current Participants\"\r\n                     iconCssClass=\"fa fa-user\"\r\n                     isCard\r\n                     tooltip=\"The number of individuals that are currently participating in the experience.\" />\r\n            </div>\r\n        </div>\r\n\r\n        <NotificationBox v-if=\"isExperienceInactive\" alertType=\"warning\">\r\n            This experience event has ended.\r\n        </NotificationBox>\r\n\r\n        <div class=\"experience-body row d-flex flex-wrap\" :class=\"{ inactive: isExperienceInactive }\">\r\n            <div class=\"col-xs-12 col-md-6 col-lg-7 mb-3 mb-md-0\">\r\n                <div class=\"experience-actions-panel panel panel-section h-100 mb-sm-0\">\r\n                    <div class=\"panel-heading\">\r\n                        <h4 class=\"panel-title\">Experience Actions</h4>\r\n                        <a v-if=\"isNotificationAvailable\" href=\"#\" :class=\"notificationStateClass\" @click.prevent=\"onNotificationStateClick\">\r\n                            <i :class=\"notificationStateIconClass\"></i>\r\n                        </a>\r\n                    </div>\r\n                    <div class=\"panel-body\">\r\n                        <ExperienceActionButtons :modelValue=\"activeAction\"\r\n                                                 :actions=\"experienceActions\"\r\n                                                 @update:modelValue=\"onUpdateActiveAction\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"col-xs-12 col-md-6 col-lg-5\">\r\n                <div class=\"preview-panel\">\r\n                    <iframe v-if=\"previewPageUrl\" class=\"invisible\" :src=\"previewPageUrl\" @load=\"onPreviewLoad\" />\r\n                    <NotificationBox v-else alertType=\"info\">\r\n                        Live experience preview has not been configured.\r\n                    </NotificationBox>\r\n                    <div>\r\n                        <RockLabel>Visualizer</RockLabel>\r\n                        <div class=\"d-flex\">\r\n                            <div class=\"mr-3\">\r\n                                <InlineCheckBox v-model=\"isVisualizerAutomatic\" label=\"Automatic\" />\r\n                            </div>\r\n                            <div class=\"flex-grow-1 overflow-hidden\">\r\n                                <DropDownList :modelValue=\"activeVisualizer\"\r\n                                              @update:modelValue=\"onUpdateActiveVisualizer\"\r\n                                              :items=\"visualizerItems\"\r\n                                              showBlankItem\r\n                                              :disabled=\"isVisualizerAutomatic\" />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<style scoped>\r\n.experience-body.inactive {\r\n    cursor: not-allowed;\r\n    opacity: .5;\r\n    pointer-events: none;\r\n}\r\n\r\n.experience-actions-panel {\r\n    background-color: var(--panel-heading-bg);\r\n}\r\n\r\n.preview-panel {\r\n    display: flex;\r\n    flex-direction: column;\r\n    min-height: 480px;\r\n}\r\n\r\n.preview-panel iframe {\r\n    flex-grow: 1;\r\n    overflow: hidden;\r\n    border: 1px solid #dfe0e1;\r\n    border-radius: 4px;\r\n}\r\n</style>\r\n\r\n<script setup lang=\"ts\">\r\n    import NotificationBox from \"@Obsidian/Controls/notificationBox.obs\";\r\n    import DropDownList from \"@Obsidian/Controls/dropDownList\";\r\n    import Kpi from \"@Obsidian/Controls/kpi.obs\";\r\n    import ExperienceActionButtons from \"./experienceActionButtons.partial.obs\";\r\n    import InlineCheckBox from \"@Obsidian/Controls/inlineCheckBox\";\r\n    import RockLabel from \"@Obsidian/Controls/rockLabel\";\r\n    import { computed, PropType, ref, watch } from \"vue\";\r\n    import { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\n    import { ITopic } from \"@Obsidian/Utility/realTime\";\r\n    import { IParticipantTopic } from \"../types.partial\";\r\n    import { ExperienceManagerInitializationBox } from \"@Obsidian/ViewModels/Blocks/Event/InteractiveExperiences/ExperienceManager/experienceManagerInitializationBox\";\r\n    import { NavigationUrlKey } from \"./types.partial\";\r\n\r\n    const props = defineProps({\r\n        /** The identifier of the occurrence we have joined. */\r\n        occurrenceIdKey: {\r\n            type: String as PropType<string | null>,\r\n            default: null\r\n        },\r\n\r\n        /** The topic proxy for the experience we have joined. */\r\n        realTimeTopic: {\r\n            type: Object as PropType<ITopic<IParticipantTopic> | null>,\r\n            default: null\r\n        },\r\n\r\n        /** The block configuration data. */\r\n        configuration: {\r\n            type: Object as PropType<ExperienceManagerInitializationBox>,\r\n            required: true\r\n        },\r\n\r\n        /** The identifier of the initial action being displayed, read-only. */\r\n        initialActionIdKey: {\r\n            type: String as PropType<string | null>,\r\n            required: true\r\n        },\r\n\r\n        /** The identifier of the initial action visualizer being displayed, read-only. */\r\n        initialVisualizerActionIdKey: {\r\n            type: String as PropType<string | null>,\r\n            required: true\r\n        }\r\n    });\r\n\r\n    // const emit = defineEmits<{\r\n    // }>();\r\n\r\n    // #region Values\r\n\r\n    const isNotificationsEnabled = ref(false);\r\n    const activeAction = ref<string | null>(props.initialActionIdKey ?? null);\r\n    const participantCount = ref(props.configuration.participantCount);\r\n    const isExperienceInactive = ref(props.configuration.isExperienceInactive);\r\n\r\n    const experienceActions: ListItemBag[] = props.configuration.actions ?? [];\r\n    const isNotificationAvailable = props.configuration.isNotificationAvailable;\r\n\r\n    const activeVisualizer = ref(props.initialVisualizerActionIdKey ?? \"\");\r\n    const isVisualizerAutomatic = ref(true);\r\n\r\n    // #endregion\r\n\r\n    // #region Computed Values\r\n\r\n    const notificationStateClass = computed((): string => {\r\n        return isNotificationsEnabled.value ? \"btn btn-info btn-xs\" : \"btn btn-default btn-xs\";\r\n    });\r\n\r\n    const notificationStateIconClass = computed((): string => {\r\n        return isNotificationsEnabled.value ? \"fa fa-fw fa-bell\" : \"fa fa-fw fa-bell-slash\";\r\n    });\r\n\r\n    const previewPageUrl = computed((): string => {\r\n        return props.configuration.navigationUrls?.[NavigationUrlKey.LiveExperiencePage] ?? \"\";\r\n    });\r\n\r\n    const visualizerItems = computed((): ListItemBag[] => {\r\n        return (props.configuration.actions ?? []).map((a, idx) => ({\r\n            value: a.value,\r\n            text: `${idx + 1}. ${a.text}`\r\n        }));\r\n    });\r\n\r\n    // #endregion\r\n\r\n    // #region Functions\r\n\r\n    // #endregion\r\n\r\n    // #region Event Handlers\r\n\r\n    /**\r\n     * Event handler for when the notification bell is clicked. Toggle the\r\n     * flag which determines if we are sending push notifications.\r\n     */\r\n    function onNotificationStateClick(ev: Event): void {\r\n        isNotificationsEnabled.value = !isNotificationsEnabled.value;\r\n\r\n        if (ev.target instanceof HTMLElement) {\r\n            ev.target.blur();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called when the preview IFrame has loaded. Hide the admin bar and then\r\n     * show the frame.\r\n     *\r\n     * @param ev The event.\r\n     */\r\n    function onPreviewLoad(ev: Event): void {\r\n        if (ev.target instanceof HTMLIFrameElement) {\r\n            const adminFooter = ev.target.contentDocument?.querySelector(\"#cms-admin-footer\") as HTMLElement;\r\n\r\n            if (adminFooter) {\r\n                adminFooter.style.display = \"none\";\r\n            }\r\n\r\n            ev.target.classList.remove(\"invisible\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Event handler for when the individual manually changes selection of the\r\n     * activeAction value. Notify the server of the change.\r\n     *\r\n     * @param value The new value to set activeAction to.\r\n     */\r\n    async function onUpdateActiveAction(value: string | null): Promise<void> {\r\n        if (activeAction.value === value || !props.realTimeTopic || !props.occurrenceIdKey) {\r\n            return;\r\n        }\r\n\r\n        activeAction.value = value;\r\n\r\n        if (activeAction.value) {\r\n            await props.realTimeTopic.server.showAction(props.occurrenceIdKey, activeAction.value, isNotificationsEnabled.value);\r\n\r\n            if (isVisualizerAutomatic.value) {\r\n                await props.realTimeTopic.server.showVisualizer(props.occurrenceIdKey, activeAction.value);\r\n            }\r\n        }\r\n        else {\r\n            await props.realTimeTopic.server.clearActions(props.occurrenceIdKey);\r\n\r\n            if (isVisualizerAutomatic.value) {\r\n                await props.realTimeTopic.server.clearVisualizer(props.occurrenceIdKey);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Event handler for when the server notifies us that an action should\r\n     * be shown.\r\n     *\r\n     * @param idKey The occurrence identifier key.\r\n     * @param actionIdKey The action identifier that should be shown.\r\n     */\r\n    function onShowAction(idKey: string, actionIdKey: string): void {\r\n        if (idKey === props.occurrenceIdKey) {\r\n            activeAction.value = actionIdKey;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Event handler for when the server notifies us that all actions\r\n     * should be cleared.\r\n     *\r\n     * @param idKey The occurrence identifier key.\r\n     */\r\n    function onClearActions(idKey: string): void {\r\n        if (idKey === props.occurrenceIdKey) {\r\n            activeAction.value = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Event handler for when the server notifies us that a visualizer should\r\n     * be shown.\r\n     *\r\n     * @param idKey The occurrence identifier key.\r\n     * @param actionIdKey The action identifier that should be shown.\r\n     */\r\n    function onShowVisualizer(idKey: string, actionIdKey: string): void {\r\n        if (idKey === props.occurrenceIdKey) {\r\n            activeVisualizer.value = actionIdKey;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Event handler for when the server notifies us that the visualizer\r\n     * should be cleared.\r\n     *\r\n     * @param idKey The occurrence identifier key.\r\n     */\r\n    function onClearVisualizer(idKey: string): void {\r\n        if (idKey === props.occurrenceIdKey) {\r\n            activeVisualizer.value = \"\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Event handler for when the individual manually changes selection of the\r\n     * activeVisualizer value. Notify the server of the change.\r\n     *\r\n     * @param value The new value to set activeVisualizer to.\r\n     */\r\n    async function onUpdateActiveVisualizer(value: string | string[]): Promise<void> {\r\n        const newValue = typeof value === \"string\" ? value : \"\";\r\n\r\n        if (activeVisualizer.value === newValue) {\r\n            return;\r\n        }\r\n\r\n        activeVisualizer.value = newValue;\r\n\r\n        if (props.realTimeTopic && props.occurrenceIdKey) {\r\n            if (activeVisualizer.value) {\r\n                await props.realTimeTopic.server.showVisualizer(props.occurrenceIdKey, activeVisualizer.value);\r\n            }\r\n            else {\r\n                await props.realTimeTopic.server.clearVisualizer(props.occurrenceIdKey);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Event handler for a timer that causes us to update the participant\r\n     * count in the UI.\r\n     */\r\n    async function onUpdateParticipantCountTimer(): Promise<void> {\r\n        try {\r\n            if (props.realTimeTopic && props.occurrenceIdKey) {\r\n                participantCount.value = await props.realTimeTopic.server.getParticipantCount(props.occurrenceIdKey);\r\n            }\r\n        }\r\n        finally {\r\n            setTimeout(onUpdateParticipantCountTimer, props.configuration.participantCountUpdateInterval * 1_000);\r\n        }\r\n    }\r\n\r\n    // #endregion\r\n\r\n    watch(() => props.realTimeTopic, () => {\r\n        if (props.realTimeTopic) {\r\n            props.realTimeTopic.on(\"showAction\", onShowAction);\r\n            props.realTimeTopic.on(\"clearActions\", onClearActions);\r\n            props.realTimeTopic.on(\"showVisualizer\", onShowVisualizer);\r\n            props.realTimeTopic.on(\"clearVisualizer\", onClearVisualizer);\r\n        }\r\n    });\r\n\r\n    watch(() => props.initialActionIdKey, () => {\r\n        activeAction.value = props.initialActionIdKey;\r\n    });\r\n\r\n    watch(() => props.initialVisualizerActionIdKey, () => {\r\n        activeVisualizer.value = props.initialVisualizerActionIdKey ?? \"\";\r\n    });\r\n\r\n    setTimeout(onUpdateParticipantCountTimer, props.configuration.participantCountUpdateInterval * 1_000);\r\n</script>\r\n","<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <div class=\"live-questions\">\r\n        <div class=\"row d-flex flex-wrap\">\r\n            <div class=\"col-xs-12 col-sm-6 col-md-4 col-lg-3 mb-2\">\r\n                <DropDownList v-model=\"selectedAction\"\r\n                              :showBlankItem=\"false\"\r\n                              :items=\"actionItems\" />\r\n            </div>\r\n\r\n            <div class=\"col-xs-12 col-sm-6 col-md-4 col-lg-3 mb-2 ml-md-auto\">\r\n                <CampusPicker v-model=\"selectedCampus\"\r\n                              forceVisible\r\n                              showBlankItem\r\n                              displayStyle=\"condensed\" />\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"table-responsive\">\r\n            <table class=\"grid-table table table-condensed table-light\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Campus</th>\r\n                        <th>Response</th>\r\n                    </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                    <tr v-for=\"row in filteredAnswers\">\r\n                        <td>{{ row.submitterName }}</td>\r\n                        <td>{{ row.campusName }}</td>\r\n                        <td>{{ row.response }}</td>\r\n                    </tr>\r\n\r\n                    <tr v-if=\"!filteredAnswers.length\">\r\n                        <td colspan=\"3\">No matching responses.</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { computed, PropType, reactive, ref, watch } from \"vue\";\r\n    import { ITopic } from \"@Obsidian/Utility/realTime\";\r\n    import { IParticipantTopic } from \"../types.partial\";\r\n    import DropDownList from \"@Obsidian/Controls/dropDownList\";\r\n    import { InteractiveExperienceApprovalStatus } from \"@Obsidian/Enums/Event/interactiveExperienceApprovalStatus\";\r\n    import { ExperienceManagerInitializationBox } from \"@Obsidian/ViewModels/Blocks/Event/InteractiveExperiences/ExperienceManager/experienceManagerInitializationBox\";\r\n    import { ExperienceAnswerBag } from \"@Obsidian/ViewModels/Event/InteractiveExperiences/experienceAnswerBag\";\r\n    import { useInvokeBlockAction } from \"@Obsidian/Utility/block\";\r\n    import { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\n    import { areEqual } from \"@Obsidian/Utility/guid\";\r\n    import CampusPicker from \"@Obsidian/Controls/campusPicker.obs\";\r\n\r\n    type ActionAnswer = ExperienceAnswerBag & {\r\n    };\r\n\r\n    const props = defineProps({\r\n        /** The identifier of the occurrence we have joined. */\r\n        occurrenceIdKey: {\r\n            type: String as PropType<string | null>,\r\n            default: null\r\n        },\r\n\r\n        /** The topic proxy for the experience we have joined. */\r\n        realTimeTopic: {\r\n            type: Object as PropType<ITopic<IParticipantTopic> | null>,\r\n            default: null\r\n        },\r\n\r\n        /** The block configuration data. */\r\n        configuration: {\r\n            type: Object as PropType<ExperienceManagerInitializationBox>,\r\n            required: true\r\n        }\r\n    });\r\n\r\n    // #region Values\r\n\r\n    const invokeBlockAction = useInvokeBlockAction();\r\n    const occurrenceAnswers = reactive<ActionAnswer[]>([]);\r\n    const selectedAction = ref(\"\");\r\n    const selectedCampus = ref<ListItemBag | null>(null);\r\n\r\n    // #endregion\r\n\r\n    // #region Computed Values\r\n\r\n    const filteredAnswers = computed((): ActionAnswer[] => {\r\n        return occurrenceAnswers\r\n            .filter(a => a.status === InteractiveExperienceApprovalStatus.Approved)\r\n            .filter(a => selectedAction.value === a.actionIdKey)\r\n            .filter(a => !selectedCampus.value || areEqual(selectedCampus.value.value, a.campusGuid))\r\n            .reverse();\r\n    });\r\n\r\n    const actionItems = computed((): ListItemBag[] => {\r\n        return (props.configuration.actions ?? []).map((a, idx) => ({\r\n            value: a.value,\r\n            text: `${idx + 1}. ${a.text}`\r\n        }));\r\n    });\r\n\r\n    // #endregion\r\n\r\n    // #region Functions\r\n\r\n    /**\r\n     * Called during startup as well as anytime the realTimeTopic prop\r\n     * value changes. Add all the listeners needed to the topic.\r\n     */\r\n    function setupTopicListeners(): void {\r\n        if (props.realTimeTopic) {\r\n            props.realTimeTopic.on(\"answerSubmitted\", onAnswerSubmitted);\r\n            props.realTimeTopic.on(\"answerUpdated\", onAnswerUpdated);\r\n            props.realTimeTopic.on(\"answerRemoved\", onAnswerRemoved);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates an existing answer. If the answer is found it is replaced with\r\n     * the new answer data. Otherwise it is appended to the list of answers.\r\n     *\r\n     * @param answer The answer details that were updated.\r\n     */\r\n    function updateAnswer(answer: ExperienceAnswerBag): void {\r\n        const answerIndex = occurrenceAnswers.findIndex(a => a.idKey === answer.idKey);\r\n\r\n        const actionAnswer: ActionAnswer = {\r\n            ...answer\r\n        };\r\n\r\n        if (answerIndex !== -1) {\r\n            // Remove the answer and insert it at the beginning so it at the end.\r\n            occurrenceAnswers.splice(answerIndex, 1);\r\n        }\r\n\r\n        occurrenceAnswers.push(actionAnswer);\r\n    }\r\n\r\n    /**\r\n     * Removes an answer from the list of answers.\r\n     *\r\n     * @param answerIdKey The identifier key of the answer to be removed.\r\n     */\r\n    function removeAnswer(answerIdKey: string): void {\r\n        const answerIndex = occurrenceAnswers.findIndex(a => a.idKey === answerIdKey);\r\n\r\n        if (answerIndex !== -1) {\r\n            occurrenceAnswers.splice(answerIndex, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets all answers from the server. This will also clear the existing\r\n     * list of answers. Otherwise we might still get out of sync when the\r\n     * results come back due to a RealTime message arriving before the\r\n     * results are returned.\r\n     */\r\n    async function getAllAnswers(): Promise<void> {\r\n        // Clear the array.\r\n        occurrenceAnswers.slice();\r\n\r\n        const response = await invokeBlockAction<ExperienceAnswerBag[]>(\"GetExperienceAnswers\", { occurrenceKey: props.configuration.occurrenceIdKey });\r\n\r\n        if (response.isSuccess && response.data) {\r\n            for (const answer of response.data) {\r\n                updateAnswer(answer);\r\n            }\r\n        }\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Event Handlers\r\n\r\n    /**\r\n     * Event handler for when a new answer has been submitted via the RealTime engine.\r\n     *\r\n     * @param idKey The identifier key of the occurrence the answer was submitted to.\r\n     * @param answer The answer details that were submitted.\r\n     */\r\n    function onAnswerSubmitted(idKey: string, answer: ExperienceAnswerBag): void {\r\n        if (idKey !== props.occurrenceIdKey) {\r\n            return;\r\n        }\r\n\r\n        updateAnswer(answer);\r\n    }\r\n\r\n    /**\r\n     * Event handler for when an existing answer has been updated via the\r\n     * RealTime engine.\r\n     *\r\n     * @param idKey The identifier key of the occurrence the answer was updated for.\r\n     * @param answer The answer details that were updated.\r\n     */\r\n    function onAnswerUpdated(idKey: string, answer: ExperienceAnswerBag): void {\r\n        if (idKey !== props.occurrenceIdKey) {\r\n            return;\r\n        }\r\n\r\n        updateAnswer(answer);\r\n    }\r\n\r\n    /**\r\n     * Event handler for when an existing answer has been removed via the\r\n     * RealTime engine.\r\n     *\r\n     * @param idKey The identifier key of the occurrence the answer was removed from.\r\n     * @param answerIdKey The identifier key of the answer that was removed.\r\n     */\r\n    function onAnswerRemoved(idKey: string, answerIdKey: string): void {\r\n        if (idKey !== props.occurrenceIdKey) {\r\n            return;\r\n        }\r\n\r\n        removeAnswer(answerIdKey);\r\n    }\r\n\r\n    // #endregion\r\n\r\n    getAllAnswers();\r\n    setupTopicListeners();\r\n\r\n    watch(() => props.realTimeTopic, () => setupTopicListeners());\r\n\r\n    if (actionItems.value.length > 0 && actionItems.value[0].value) {\r\n        selectedAction.value = actionItems.value[0].value;\r\n    }\r\n</script>\r\n","<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <div class=\"moderation\">\r\n        <div class=\"well\">\r\n            <div class=\"row\">\r\n                <div class=\"col-md-6\">\r\n                    <DropDownList v-model=\"filterAction\"\r\n                                  label=\"Action\"\r\n                                  :items=\"filterActionItems\" />\r\n                </div>\r\n\r\n                <div class=\"col-md-6\">\r\n                    <CampusPicker v-model=\"filterCampus\"\r\n                                  label=\"Campus\"\r\n                                  displayStyle=\"condensed\"\r\n                                  forceVisible\r\n                                  multiple />\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n                <div class=\"col-md-6\">\r\n                    <CheckBoxList v-model=\"filterStatus\"\r\n                                  label=\"Statuses\"\r\n                                  horizontal\r\n                                  :items=\"filterStatusItems\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"table-responsive\">\r\n            <table class=\"grid-table table table-condensed table-light table-hover\">\r\n                <thead>\r\n                    <tr>\r\n                        <th></th>\r\n                        <th>Response</th>\r\n                        <th>Campus</th>\r\n                        <th>Status</th>\r\n                        <th class=\"grid-columncommand\">Approve</th>\r\n                        <th class=\"grid-columncommand\">Reject</th>\r\n                        <th class=\"grid-columncommand\"></th>\r\n                    </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                    <tr v-for=\"row in filteredAnswers\">\r\n                        <td style=\"width: 1px;\">\r\n                            <span class=\"badge badge-default\">{{ row.actionIndex }}</span>\r\n                        </td>\r\n                        <td>{{ row.response }}</td>\r\n                        <td>{{ row.campusName }}</td>\r\n                        <td v-html=\"getStatusLabelHtml(row.status)\"></td>\r\n                        <td class=\"grid-columncommand\" align=\"center\">\r\n                            <a v-if=\"row.status !== approvedStatus\" class=\"btn btn-success btn-sm btn-square grid-approve-button\" @click.prevent=\"onApproveAnswer(row)\">\r\n                                <i class=\"fa fa-thumbs-up\"></i>\r\n                            </a>\r\n                        </td>\r\n                        <td class=\"grid-columncommand\" align=\"center\">\r\n                            <a v-if=\"row.status !== rejectedStatus\" class=\"btn btn-danger btn-sm btn-square grid-reject-button\" @click.prevent=\"onRejectAnswer(row)\">\r\n                                <i class=\"fa fa-thumbs-down\"></i>\r\n                            </a>\r\n                        </td>\r\n                        <td class=\"grid-columncommand\" align=\"center\">\r\n                            <a class=\"btn btn-danger btn-sm btn-square grid-delete-button\" @click.prevent=\"onDeleteAnswer(row)\">\r\n                                <i class=\"fa fa-times\"></i>\r\n                            </a>\r\n                        </td>\r\n                    </tr>\r\n\r\n                    <tr v-if=\"!filteredAnswers.length\" align=\"left\">\r\n                        <td colspan=\"7\">No matching responses.</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { computed, PropType, reactive, ref, watch } from \"vue\";\r\n    import { ITopic } from \"@Obsidian/Utility/realTime\";\r\n    import { IParticipantTopic } from \"../types.partial\";\r\n    import { InteractiveExperienceApprovalStatus } from \"@Obsidian/Enums/Event/interactiveExperienceApprovalStatus\";\r\n    import { ExperienceManagerInitializationBox } from \"@Obsidian/ViewModels/Blocks/Event/InteractiveExperiences/ExperienceManager/experienceManagerInitializationBox\";\r\n    import { ExperienceAnswerBag } from \"@Obsidian/ViewModels/Event/InteractiveExperiences/experienceAnswerBag\";\r\n    import { useInvokeBlockAction } from \"@Obsidian/Utility/block\";\r\n    import { alert, confirm } from \"@Obsidian/Utility/dialogs\";\r\n    import CampusPicker from \"@Obsidian/Controls/campusPicker.obs\";\r\n    import CheckBoxList from \"@Obsidian/Controls/checkBoxList\";\r\n    import DropDownList from \"@Obsidian/Controls/dropDownList\";\r\n    import { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\n    import { areEqual } from \"@Obsidian/Utility/guid\";\r\n\r\n    type ActionAnswer = ExperienceAnswerBag & {\r\n        actionIndex: number;\r\n    };\r\n\r\n    const props = defineProps({\r\n        /** The identifier of the occurrence we have joined. */\r\n        occurrenceIdKey: {\r\n            type: String as PropType<string | null>,\r\n            default: null\r\n        },\r\n\r\n        /** The topic proxy for the experience we have joined. */\r\n        realTimeTopic: {\r\n            type: Object as PropType<ITopic<IParticipantTopic> | null>,\r\n            default: null\r\n        },\r\n\r\n        /** The block configuration data. */\r\n        configuration: {\r\n            type: Object as PropType<ExperienceManagerInitializationBox>,\r\n            required: true\r\n        }\r\n    });\r\n\r\n    // const emit = defineEmits<{\r\n    // }>();\r\n\r\n    // #region Values\r\n\r\n    const invokeBlockAction = useInvokeBlockAction();\r\n    const occurrenceAnswers = reactive<ActionAnswer[]>([]);\r\n\r\n    const filterAction = ref(\"\");\r\n    const filterCampus = ref<ListItemBag[]>([]);\r\n    const filterStatus = ref<string[]>([]);\r\n\r\n    const approvedStatus = InteractiveExperienceApprovalStatus.Approved;\r\n    const rejectedStatus = InteractiveExperienceApprovalStatus.Rejected;\r\n    const filterStatusItems: ListItemBag[] = [\r\n        {\r\n            value: InteractiveExperienceApprovalStatus.Pending.toString(),\r\n            text: \"Pending\"\r\n        },\r\n        {\r\n            value: InteractiveExperienceApprovalStatus.Approved.toString(),\r\n            text: \"Approved\"\r\n        },\r\n        {\r\n            value: InteractiveExperienceApprovalStatus.Rejected.toString(),\r\n            text: \"Rejected\"\r\n        }\r\n    ];\r\n\r\n    // #endregion\r\n\r\n    // #region Computed Values\r\n\r\n    const filteredAnswers = computed((): ActionAnswer[] => {\r\n        return occurrenceAnswers\r\n            .filter(a => !filterAction.value || filterAction.value === a.actionIdKey)\r\n            .filter(a => !filterCampus.value.length || filterCampus.value.some(c => areEqual(c.value, a.campusGuid)))\r\n            .filter(a => !filterStatus.value.length || filterStatus.value.some(s => a.status.toString() === s));\r\n    });\r\n\r\n    const filterActionItems = computed((): ListItemBag[] => {\r\n        return (props.configuration.actions ?? []).map((a, idx) => ({\r\n            value: a.value,\r\n            text: `${idx+1}. ${a.text}`\r\n        }));\r\n    });\r\n\r\n    // #endregion\r\n\r\n    // #region Functions\r\n\r\n    /**\r\n     * Called during startup as well as anytime the realTimeTopic prop\r\n     * value changes. Add all the listeners needed to the topic.\r\n     */\r\n    function setupTopicListeners(): void {\r\n        if (props.realTimeTopic) {\r\n            props.realTimeTopic.on(\"answerSubmitted\", onAnswerSubmitted);\r\n            props.realTimeTopic.on(\"answerUpdated\", onAnswerUpdated);\r\n            props.realTimeTopic.on(\"answerRemoved\", onAnswerRemoved);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the index number of the action. This is used to display the\r\n     * number in the grid of answers.\r\n     *\r\n     * @param actionId The identifier of the action whose index is to be determined.\r\n     *\r\n     * @returns The index number of the action, with 1 being the first index. Will return 0 if the action was not found.\r\n     */\r\n    function getActionIndex(actionId?: string | null): number {\r\n        if (!actionId) {\r\n            return 0;\r\n        }\r\n\r\n        const index = (props.configuration.actions ?? []).findIndex(a => a.value === actionId);\r\n\r\n        return index < 0 ? 0 : index + 1;\r\n    }\r\n\r\n    /**\r\n     * Gets the HTML used to render the status label for the given answer status.\r\n     *\r\n     * @param status The status to be represented by the label.\r\n     *\r\n     * @returns An HTML string that represents the answer status.\r\n     */\r\n    function getStatusLabelHtml(status: InteractiveExperienceApprovalStatus): string {\r\n        if (status === InteractiveExperienceApprovalStatus.Approved) {\r\n            return `<span class=\"label label-success\">Approved</span>`;\r\n        }\r\n        else if (status === InteractiveExperienceApprovalStatus.Rejected) {\r\n            return `<span class=\"label label-danger\">Rejected</span>`;\r\n        }\r\n        else {\r\n            return `<span class=\"label label-default\">Pending</span>`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates an existing answer. If the answer is found it is replaced with\r\n     * the new answer data. Otherwise it is appended to the list of answers.\r\n     *\r\n     * @param answer The answer details that were updated.\r\n     */\r\n    function updateAnswer(answer: ExperienceAnswerBag): void {\r\n        const answerIndex = occurrenceAnswers.findIndex(a => a.idKey === answer.idKey);\r\n\r\n        const actionAnswer: ActionAnswer = {\r\n            actionIndex: getActionIndex(answer.actionIdKey),\r\n            ...answer\r\n        };\r\n\r\n        if (answerIndex !== -1) {\r\n            occurrenceAnswers.splice(answerIndex, 1, actionAnswer);\r\n        }\r\n        else {\r\n            occurrenceAnswers.push(actionAnswer);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes an answer from the list of answers.\r\n     *\r\n     * @param answerIdKey The identifier key of the answer to be removed.\r\n     */\r\n    function removeAnswer(answerIdKey: string): void {\r\n        const answerIndex = occurrenceAnswers.findIndex(a => a.idKey === answerIdKey);\r\n\r\n        if (answerIndex !== -1) {\r\n            occurrenceAnswers.splice(answerIndex, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets all answers from the server. This will also clear the existing\r\n     * list of answers. Otherwise we might still get out of sync when the\r\n     * results come back due to a RealTime message arriving before the\r\n     * results are returned.\r\n     */\r\n    async function getAllAnswers(): Promise<void> {\r\n        // Clear the array.\r\n        occurrenceAnswers.slice();\r\n\r\n        const response = await invokeBlockAction<ExperienceAnswerBag[]>(\"GetExperienceAnswers\", { occurrenceKey: props.configuration.occurrenceIdKey });\r\n\r\n        if (response.isSuccess && response.data) {\r\n            for (const answer of response.data) {\r\n                updateAnswer(answer);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates an answer's approval status. This does not update the UI\r\n     * directly. Instead the RealTime message from the server will cause\r\n     * the UI to update.\r\n     *\r\n     * @param answerIdKey The identifier key of the answer to be updated.\r\n     * @param status The new approval status to set the answer to.\r\n     */\r\n    async function updateAnswerStatus(answerIdKey: string, status: InteractiveExperienceApprovalStatus): Promise<void> {\r\n        const response = await invokeBlockAction(\"UpdateExperienceAnswerStatus\", { key: answerIdKey, status: status });\r\n\r\n        if (response.isError) {\r\n            await alert(response.errorMessage || \"Response could not be updated.\");\r\n        }\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Event Handlers\r\n\r\n    /**\r\n     * Event handler for when a new answer has been submitted via the RealTime engine.\r\n     *\r\n     * @param idKey The identifier key of the occurrence the answer was submitted to.\r\n     * @param answer The answer details that were submitted.\r\n     */\r\n    function onAnswerSubmitted(idKey: string, answer: ExperienceAnswerBag): void {\r\n        if (idKey !== props.occurrenceIdKey) {\r\n            return;\r\n        }\r\n\r\n        updateAnswer(answer);\r\n    }\r\n\r\n    /**\r\n     * Event handler for when an existing answer has been updated via the\r\n     * RealTime engine.\r\n     *\r\n     * @param idKey The identifier key of the occurrence the answer was updated for.\r\n     * @param answer The answer details that were updated.\r\n     */\r\n    function onAnswerUpdated(idKey: string, answer: ExperienceAnswerBag): void {\r\n        if (idKey !== props.occurrenceIdKey) {\r\n            return;\r\n        }\r\n\r\n        updateAnswer(answer);\r\n    }\r\n\r\n    /**\r\n     * Event handler for when an existing answer has been removed via the\r\n     * RealTime engine.\r\n     *\r\n     * @param idKey The identifier key of the occurrence the answer was removed from.\r\n     * @param answerIdKey The identifier key of the answer that was removed.\r\n     */\r\n    function onAnswerRemoved(idKey: string, answerIdKey: string): void {\r\n        if (idKey !== props.occurrenceIdKey) {\r\n            return;\r\n        }\r\n\r\n        removeAnswer(answerIdKey);\r\n    }\r\n\r\n    /**\r\n     * Event handler for when the moderator wants approve an answer.\r\n     *\r\n     * @param answer The answer that is to be approved.\r\n     */\r\n    function onApproveAnswer(answer: ActionAnswer): void {\r\n        if (answer.idKey) {\r\n            updateAnswerStatus(answer.idKey, InteractiveExperienceApprovalStatus.Approved);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Event handler for when the moderator wants reject an answer.\r\n     *\r\n     * @param answer The answer that is to be rejected.\r\n     */\r\n    function onRejectAnswer(answer: ActionAnswer): void {\r\n        if (answer.idKey) {\r\n            updateAnswerStatus(answer.idKey, InteractiveExperienceApprovalStatus.Rejected);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Event handler for when the moderator wants delete an answer.\r\n     *\r\n     * @param answer The answer that is to be deleted.\r\n     */\r\n    async function onDeleteAnswer(answer: ActionAnswer): Promise<void> {\r\n        if (!answer.idKey) {\r\n            return;\r\n        }\r\n\r\n        const confirmed = await confirm(`Do you wish to delete< this response?\\n\\n${answer.response}`);\r\n\r\n        if (!confirmed) {\r\n            return;\r\n        }\r\n\r\n        const response = await invokeBlockAction(\"DeleteExperienceAnswer\", { key: answer.idKey });\r\n\r\n        if (response.isError) {\r\n            await alert(response.errorMessage || \"Response could not be deleted.\");\r\n        }\r\n    }\r\n\r\n    // #endregion\r\n\r\n    getAllAnswers();\r\n    setupTopicListeners();\r\n\r\n    watch(() => props.realTimeTopic, () => setupTopicListeners());\r\n</script>\r\n","<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <div class=\"panel-navigation-bar\">\r\n        <div class=\"panel-toolbar panel-toolbar-shadow\">\r\n            <ul class=\"nav nav-pills nav-sm\">\r\n                <li v-for=\"item in items\"\r\n                    role=\"presentation\"\r\n                    :class=\"getItemClass(item)\">\r\n                    <a href=\"#\" @click.prevent=\"onItemClicked(item)\">{{ item.text }}</a>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<style scoped>\r\n.panel-navigation-bar {\r\n    overflow-x: clip;\r\n    background-color: var(--panel-bg);\r\n}\r\n</style>\r\n\r\n<script setup lang=\"ts\">\r\n    import { PropType } from \"vue\";\r\n    import { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\n    import { useVModelPassthrough } from \"@Obsidian/Utility/component\";\r\n\r\n    const props = defineProps({\r\n        modelValue: {\r\n            type: String as PropType<string | null>,\r\n            required: false\r\n        },\r\n\r\n        items: {\r\n            type: Array as PropType<ListItemBag[]>,\r\n            default: []\r\n        }\r\n    });\r\n\r\n    const emit = defineEmits<{\r\n        (e: \"update:modelValue\", value: string): void\r\n    }>();\r\n\r\n    // #region Values\r\n\r\n    const internalValue = useVModelPassthrough(props, \"modelValue\", emit);\r\n\r\n    // #endregion\r\n\r\n    // #region Computed Values\r\n\r\n    // #endregion\r\n\r\n    // #region Functions\r\n\r\n    function getItemClass(item: ListItemBag): string {\r\n        if (internalValue.value === item.value) {\r\n            return \"active\";\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Event Handlers\r\n\r\n    function onItemClicked(item: ListItemBag): void {\r\n        internalValue.value = item.value;\r\n    }\r\n\r\n    // #endregion\r\n</script>\r\n","<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <NotificationBox v-if=\"config.errorMessage\"\r\n                     alertType=\"warning\">\r\n        {{ config.errorMessage }}\r\n    </NotificationBox>\r\n\r\n    <Panel v-else type=\"block\" :title=\"panelTitle\" hasFullscreen>\r\n        <template v-if=\"isTabBarVisible\" #preBody>\r\n            <PanelNavigationBar v-model=\"selectedTab\"\r\n                                :items=\"navigationTabs\" />\r\n        </template>\r\n\r\n        <LiveEventTab v-show=\"isLiveEventTab\"\r\n                      :configuration=\"config\"\r\n                      :occurrenceIdKey=\"occurrenceIdKey\"\r\n                      :realTimeTopic=\"realTimeTopic\"\r\n                      :initialActionIdKey=\"initialActionIdKey\"\r\n                      :initialVisualizerActionIdKey=\"initialVisualizerActionIdKey\" />\r\n\r\n        <ModerationTab v-show=\"isModerationTab\"\r\n                       :configuration=\"config\"\r\n                       :occurrenceIdKey=\"occurrenceIdKey\"\r\n                       :realTimeTopic=\"realTimeTopic\" />\r\n\r\n        <LiveQuestionsTab v-show=\"isLiveQuestionsTab\"\r\n                          :configuration=\"config\"\r\n                          :occurrenceIdKey=\"occurrenceIdKey\"\r\n                          :realTimeTopic=\"realTimeTopic\" />\r\n\r\n        <div v-show=\"isLiveQuestionsTab\"></div>\r\n    </Panel>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import NotificationBox from \"@Obsidian/Controls/notificationBox.obs\";\r\n    import LiveEventTab from \"./ExperienceManager/liveEventTab.partial.obs\";\r\n    import LiveQuestionsTab from \"./ExperienceManager/liveQuestionsTab.partial.obs\";\r\n    import ModerationTab from \"./ExperienceManager/moderationTab.partial.obs\";\r\n    import Panel from \"@Obsidian/Controls/panel\";\r\n    import PanelNavigationBar from \"./ExperienceManager/panelNavigationBar.partial.obs\";\r\n    import { useConfigurationValues, useReloadBlock, onConfigurationValuesChanged } from \"@Obsidian/Utility/block\";\r\n    import { ExperienceManagerInitializationBox } from \"@Obsidian/ViewModels/Blocks/Event/InteractiveExperiences/ExperienceManager/experienceManagerInitializationBox\";\r\n    import { computed, provide, ref } from \"vue\";\r\n    import { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\n    import { getTopic, ITopic } from \"@Obsidian/Utility/realTime\";\r\n    import { IParticipantTopic } from \"./types.partial\";\r\n\r\n    const config = useConfigurationValues<ExperienceManagerInitializationBox>();\r\n\r\n    // #region Values\r\n\r\n    const availableTabs = (config.tabsToShow ?? [\"Live Event\", \"Moderation\", \"Live Questions\"]) as (\"Live Event\" | \"Moderation\" | \"Live Questions\")[];\r\n    const isTabBarVisible = availableTabs.length > 1;\r\n    const navigationTabs: ListItemBag[] = (availableTabs ?? []).map(s => ({ value: s, text: s }));\r\n    const selectedTab = ref<\"Live Event\" | \"Moderation\" | \"Live Questions\">(availableTabs[0]);\r\n    const realTimeTopic = ref<ITopic<IParticipantTopic> | null>(null);\r\n    const occurrenceIdKey = ref<string | null>(null);\r\n    const initialActionIdKey = ref<string | null>(null);\r\n    const initialVisualizerActionIdKey = ref<string | null>(null);\r\n\r\n    // #endregion\r\n\r\n    // #region Computed Values\r\n\r\n    const panelTitle = computed((): string => {\r\n        return `${config.experienceName}`;\r\n    });\r\n\r\n    const isLiveEventTab = computed((): boolean => {\r\n        return selectedTab.value === \"Live Event\";\r\n    });\r\n\r\n    const isModerationTab = computed((): boolean => {\r\n        return selectedTab.value === \"Moderation\";\r\n    });\r\n\r\n    const isLiveQuestionsTab = computed((): boolean => {\r\n        return selectedTab.value === \"Live Questions\";\r\n    });\r\n\r\n    // #endregion\r\n\r\n    // #region Functions\r\n\r\n    async function startRealTime(): Promise<void> {\r\n        if (!config.experienceToken) {\r\n            throw new Error(\"Missing experience token from server.\");\r\n        }\r\n\r\n        var topic = await getTopic<IParticipantTopic>(\"Rock.RealTime.Topics.InteractiveExperienceParticipantTopic\");\r\n\r\n        topic.onDisconnected(startRealTime);\r\n\r\n        const response = await topic.server.joinExperience(config.experienceToken);\r\n\r\n        occurrenceIdKey.value = response.occurrenceIdKey ?? null;\r\n        initialActionIdKey.value = response.currentActionIdKey ?? null;\r\n        initialVisualizerActionIdKey.value = response.currentVisualizerActionIdKey ?? null;\r\n        realTimeTopic.value = topic;\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Event Handlers\r\n\r\n    // #endregion\r\n\r\n    onConfigurationValuesChanged(useReloadBlock());\r\n\r\n    startRealTime();\r\n\r\n    provide(\"ExperienceManagerRealTimeTopic\", realTimeTopic);\r\n</script>\r\n"],"names":["internalValue","useVModelPassthrough","props","emit","getActionItemClass","action","value","getActionSelectedIconClass","onActionClick","_action$value","styleInject","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","NavigationUrlKey","isNotificationsEnabled","activeAction","_props$initialActionI","initialActionIdKey","participantCount","configuration","isExperienceInactive","experienceActions","_props$configuration$","actions","isNotificationAvailable","activeVisualizer","_props$initialVisuali","initialVisualizerActionIdKey","isVisualizerAutomatic","notificationStateClass","computed","notificationStateIconClass","previewPageUrl","_props$configuration$2","_props$configuration$3","navigationUrls","LiveExperiencePage","visualizerItems","_props$configuration$4","map","a","idx","text","concat","onNotificationStateClick","ev","target","HTMLElement","blur","onPreviewLoad","HTMLIFrameElement","_ev$target$contentDoc","adminFooter","contentDocument","querySelector","display","classList","remove","onUpdateActiveAction","_x","_onUpdateActiveAction","apply","arguments","_asyncToGenerator","realTimeTopic","occurrenceIdKey","server","showAction","showVisualizer","clearActions","clearVisualizer","onShowAction","idKey","actionIdKey","onClearActions","onShowVisualizer","onClearVisualizer","onUpdateActiveVisualizer","_x2","_onUpdateActiveVisualizer","newValue","onUpdateParticipantCountTimer","_onUpdateParticipantCountTimer","getParticipantCount","setTimeout","participantCountUpdateInterval","watch","on","_props$initialVisuali2","invokeBlockAction","useInvokeBlockAction","occurrenceAnswers","reactive","selectedAction","selectedCampus","filteredAnswers","filter","status","InteractiveExperienceApprovalStatus","Approved","areEqual","campusGuid","reverse","actionItems","setupTopicListeners","onAnswerSubmitted","onAnswerUpdated","onAnswerRemoved","updateAnswer","answer","answerIndex","findIndex","actionAnswer","_objectSpread","splice","push","removeAnswer","answerIdKey","getAllAnswers","_getAllAnswers","slice","response","occurrenceKey","isSuccess","data","_iterator","_createForOfIteratorHelper","_step","s","n","done","err","e","f","length","filterAction","filterCampus","filterStatus","approvedStatus","rejectedStatus","Rejected","filterStatusItems","Pending","toString","some","c","filterActionItems","getActionIndex","actionId","index","getStatusLabelHtml","actionIndex","updateAnswerStatus","_updateAnswerStatus","key","isError","alert","errorMessage","onApproveAnswer","onRejectAnswer","onDeleteAnswer","_x3","_onDeleteAnswer","confirmed","confirm","getItemClass","item","onItemClicked","config","useConfigurationValues","availableTabs","_config$tabsToShow","tabsToShow","isTabBarVisible","navigationTabs","selectedTab","panelTitle","experienceName","isLiveEventTab","isModerationTab","isLiveQuestionsTab","startRealTime","_startRealTime","_response$occurrenceI","_response$currentActi","_response$currentVisu","experienceToken","Error","topic","getTopic","onDisconnected","joinExperience","currentActionIdKey","currentVisualizerActionIdKey","onConfigurationValuesChanged","useReloadBlock","provide"],"mappings":"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"}