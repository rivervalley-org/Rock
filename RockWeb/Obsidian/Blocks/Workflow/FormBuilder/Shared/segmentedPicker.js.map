{"version":3,"file":"segmentedPicker.js","sources":["../../../../src/WorkFlow/FormBuilder/Shared/segmentedPicker.ts"],"sourcesContent":["// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { defineComponent, PropType } from \"vue\";\r\nimport { useVModelPassthrough } from \"@Obsidian/Utility/component\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\n\r\nexport default defineComponent({\r\n    name: \"SegmentedPicker\",\r\n\r\n    props: {\r\n        modelValue: {\r\n            type: String as PropType<string>,\r\n            default: \"\"\r\n        },\r\n\r\n        items: {\r\n            type: Array as PropType<ListItemBag[]>,\r\n            default: []\r\n        }\r\n    },\r\n\r\n    emits: [\r\n        \"update:modelValue\"\r\n    ],\r\n\r\n    setup(props, { emit }) {\r\n        const internalValue = useVModelPassthrough(props, \"modelValue\", emit);\r\n\r\n        /**\r\n         * Gets the classes to apply to the button.\r\n         * \r\n         * @param item The ListItem that represents the button.\r\n         *\r\n         * @returns A collection of CSS class names.\r\n         */\r\n        const getButtonClass = (item: ListItemBag): string[] => {\r\n            return [\"btn\", item.value === internalValue.value ? \"btn-primary\" : \"btn-default\"];\r\n        };\r\n\r\n        /**\r\n         * Event handler for then a button item is clicked.\r\n         * \r\n         * @param item The ListItem that represents the button that was clicked.\r\n         */\r\n        const onItemClick = (item: ListItemBag): void => {\r\n            internalValue.value = item.value ?? \"\";\r\n        };\r\n\r\n        return {\r\n            getButtonClass,\r\n            internalValue,\r\n            onItemClick\r\n        };\r\n    },\r\n\r\n    template: `\r\n<div class=\"btn-group btn-group-xs mb-2\" role=\"group\">\r\n    <button v-for=\"item in items\" :class=\"getButtonClass(item)\" :key=\"item.value\" type=\"button\" @click=\"onItemClick(item)\">{{ item.text }}</button>\r\n</div>\r\n`\r\n});\r\n"],"names":["defineComponent","name","props","modelValue","type","String","default","items","Array","emits","setup","_ref","emit","internalValue","useVModelPassthrough","getButtonClass","item","value","onItemClick","_item$value","template"],"mappings":";;;;;;;;;;;AAqBA,qDAAeA,eAAe,CAAC;YAC3BC,EAAAA,IAAI,EAAE,iBAAiB;YAEvBC,EAAAA,KAAK,EAAE;YACHC,IAAAA,UAAU,EAAE;YACRC,MAAAA,IAAI,EAAEC,MAA0B;YAChCC,MAAAA,OAAO,EAAE,EAAA;iBACZ;YAEDC,IAAAA,KAAK,EAAE;YACHH,MAAAA,IAAI,EAAEI,KAAgC;YACtCF,MAAAA,OAAO,EAAE,EAAA;YACb,KAAA;eACH;cAEDG,KAAK,EAAE,CACH,mBAAmB,CACtB;YAEDC,EAAAA,KAAKA,CAACR,KAAK,EAAAS,IAAA,EAAY;YAAA,IAAA,IAARC,IAAI,GAAAD,IAAA,CAAJC,IAAI,CAAA;gBACf,IAAMC,aAAa,GAAGC,oBAAoB,CAACZ,KAAK,EAAE,YAAY,EAAEU,IAAI,CAAC,CAAA;gBASrE,IAAMG,cAAc,GAAIC,IAAiB,IAAe;YACpD,MAAA,OAAO,CAAC,KAAK,EAAEA,IAAI,CAACC,KAAK,KAAKJ,aAAa,CAACI,KAAK,GAAG,aAAa,GAAG,aAAa,CAAC,CAAA;iBACrF,CAAA;gBAOD,IAAMC,WAAW,GAAIF,IAAiB,IAAW;YAAA,MAAA,IAAAG,WAAA,CAAA;YAC7CN,MAAAA,aAAa,CAACI,KAAK,GAAAE,CAAAA,WAAA,GAAGH,IAAI,CAACC,KAAK,MAAAE,IAAAA,IAAAA,WAAA,KAAAA,KAAAA,CAAAA,GAAAA,WAAA,GAAI,EAAE,CAAA;iBACzC,CAAA;gBAED,OAAO;kBACHJ,cAAc;kBACdF,aAAa;YACbK,MAAAA,WAAAA;iBACH,CAAA;eACJ;cAEDE,QAAQ,EAAA,uOAAA;YAKZ,CAAC,EAAC;;;;;;;;"}