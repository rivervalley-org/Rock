{"version":3,"file":"emailSource.js","sources":["../../../../src/WorkFlow/FormBuilder/Shared/types.partial.ts","../../../../src/WorkFlow/FormBuilder/Shared/emailSource.ts"],"sourcesContent":["// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { Guid } from \"@Obsidian/Types\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport { FieldFilterGroupBag } from \"@Obsidian/ViewModels/Reporting/fieldFilterGroupBag\";\r\n\r\n// #region Enums\r\n\r\n/**\r\n * The state of the field being shown on the page and if it should be required.\r\n */\r\nexport const enum FormFieldVisibility {\r\n    /** Don't show the control. */\r\n    Hidden = 0,\r\n\r\n    /** Control is visible, but a value is not required. */\r\n    Optional = 1,\r\n\r\n    /** Control is visible, and a value is required. */\r\n    Required = 2\r\n}\r\n\r\n/**\r\n * The possible sources that can be used when generating an e-mail in the\r\n * FormBuilder system.\r\n */\r\nexport const enum FormEmailSourceType {\r\n    /**\r\n     * A template will be used that contains all the information required to\r\n     * generate the e-mail contents.\r\n     */\r\n    UseTemplate = 0,\r\n\r\n    /** Custom properties will be used to generate the e-mail contents. */\r\n    Custom = 1\r\n}\r\n\r\n/**\r\n * The possible destination options for a form notification e-mail.\r\n */\r\nexport const enum FormNotificationEmailDestination {\r\n    /** A specific individual in the database will be sent the notification e-mail. */\r\n    SpecificIndividual = 0,\r\n\r\n    /** One or more raw e-mail adresses will be sent the notification e-mail. */\r\n    EmailAddress = 1,\r\n\r\n    /**\r\n     * A secondary lookup will be performed using CampusTopic to determine\r\n     * the final recipient of the notification e-mail.\r\n     */\r\n    CampusTopic = 2\r\n}\r\n\r\n/**\r\n * The possible actions that can be performed after the form has been submitted.\r\n */\r\nexport const enum FormCompletionActionType {\r\n    /** A message is displayed to the user after the form has been submitted. */\r\n    DisplayMessage = 0,\r\n\r\n    /** The individual will be redirected to a specific URL. */\r\n    Redirect = 1\r\n}\r\n\r\n/**\r\n * Defines the way the campus context is set when a form is processed.\r\n */\r\nexport const enum CampusSetFrom {\r\n    /** Use the campus of the current person who is logged in while filling out the form. */\r\n    CurrentPerson = 0,\r\n\r\n    /** Use the campus of the person in the Person attribute. */\r\n    WorkflowPerson = 1,\r\n\r\n    /** Use the campus from the \"Campus\" query string which could be an Id or Guid. */\r\n    QueryString = 2\r\n}\r\n\r\n// #endregion\r\n\r\n// #region Types\r\n\r\n/**\r\n * All the settings related to a single section on the form.\r\n */\r\nexport type FormSection = {\r\n    /** The unique identifier of this section. */\r\n    guid: Guid;\r\n\r\n    /** The title that will be displayed above this section. */\r\n    title?: string | null;\r\n\r\n    /** The additional descriptive text that will be displayed under the title. */\r\n    description?: string | null;\r\n\r\n    /**\r\n     * Determines if the heading separator will be visible when the form is\r\n     * displayed.\r\n     */\r\n    showHeadingSeparator?: boolean;\r\n\r\n    /**\r\n     * The unique identifier of the type that controls how the section is\r\n     * rendered.\r\n     */\r\n    type?: string | null;\r\n\r\n    /** The list of fields that are contained within this section. */\r\n    fields?: FormField[] | null;\r\n\r\n    /** The rule that controls when this section is visible. */\r\n    visibilityRule?: FieldFilterGroupBag | null;\r\n};\r\n\r\n/**\r\n * Identifies a single form field that has been placed on the form.\r\n */\r\nexport type FormField = {\r\n    /** The unique identifier for this form field. */\r\n    guid: Guid;\r\n\r\n    /**\r\n     * The unique identifier of the field type used to render the edit control\r\n     * of this field.\r\n     */\r\n    fieldTypeGuid: Guid;\r\n\r\n    /** The display name of this field. */\r\n    name: string;\r\n\r\n    /** The descriptive help text that will be rendered along with the name. */\r\n    description?: string | null;\r\n\r\n    /** The unique key used to identify this field in Lava operations. */\r\n    key: string;\r\n\r\n    /**\r\n     * The width of this field in display columns. This should be a value\r\n     * between 1 and 12 inclusive.\r\n     */\r\n    size: number;\r\n\r\n    /**\r\n     * Determines if this field will be considered required in order to submit\r\n     * the form.\r\n     */\r\n    isRequired?: boolean;\r\n\r\n    /** Determines if the label (name) should be hidden when this field is displayed. */\r\n    isHideLabel?: boolean;\r\n\r\n    /**\r\n     * Determines if this field will be included in the results grid displayed\r\n     * to staff when examining the submissions.\r\n     */\r\n    isShowOnGrid?: boolean;\r\n\r\n    /** The configuration values that have been set for this field. */\r\n    configurationValues?: Record<string, string> | null;\r\n\r\n    /** The rule that controls when this field is visible. */\r\n    visibilityRule?: FieldFilterGroupBag | null;\r\n\r\n    /** The default value that will be used when the field is initially displayed. */\r\n    defaultValue?: string | null;\r\n};\r\n\r\n/**\r\n * Identifies a single field type that can be used when designing the form.\r\n */\r\nexport type FormFieldType = {\r\n    /** The unique identifier of the field type. */\r\n    guid: Guid;\r\n\r\n    /** The text that represents the display name of the field type. */\r\n    text: string;\r\n\r\n    /**\r\n     * The SVG content that is used to provide an iconic representation of this\r\n     * field type.\r\n     */\r\n    svg: string;\r\n\r\n    /**\r\n     * Determines if this field type is considered common and should be made\r\n     * readily accessible.\r\n     */\r\n    isCommon: boolean;\r\n};\r\n\r\n/**\r\n * Contains details about a confirmation e-mail for a Form Builder form. This\r\n * specifies if one should be sent, who receives it and the content it will\r\n * contain.\r\n */\r\nexport type FormConfirmationEmail = {\r\n    /** Specifies if the confirmation e-mail has been enabled and should be sent. */\r\n    enabled?: boolean;\r\n\r\n    /**\r\n     * Specifies which workflow attribute will be used to determine the\r\n     * recipient of the confirmation e-mail.\r\n     */\r\n    recipientAttributeGuid?: string | null;\r\n\r\n    /** Determines how the content of the e-mail will be generated. */\r\n    source?: FormEmailSource | null;\r\n};\r\n\r\n/**\r\n * Specifies how an e-mail used by the FormBuilder system will be generated.\r\n */\r\nexport type FormEmailSource = {\r\n    /** The source type that will be used to generate the contents of the e-mail. */\r\n    type?: FormEmailSourceType;\r\n\r\n    /**\r\n     * The template unique identifier that should be used to generate the\r\n     * e-mail contents.\r\n     */\r\n    template?: string | null;\r\n\r\n    /** The plain text to use for the custom subject of the e-mail. */\r\n    subject?: string | null;\r\n\r\n    /** The e-mail address to be used as the reply-to address for the custom e-mail. */\r\n    replyTo?: string | null;\r\n\r\n    /** The HTML content to use for the custom e-mail body. */\r\n    body?: string | null;\r\n\r\n    /**\r\n     * Determines if the standard organization header and footer should be\r\n     * prepended and appended to the custom body.\r\n     */\r\n    appendOrgHeaderAndFooter?: boolean;\r\n};\r\n\r\n/**\r\n * Contains details about a notification e-mail for a Form Builder form.\r\n * This specifies if one should be sent, who receives it and the content\r\n * it will contain.\r\n */\r\nexport type FormNotificationEmail = {\r\n    /** Specifies if the notification e-mail has been enabled and should be sent. */\r\n    enabled?: boolean;\r\n\r\n    /**\r\n     * Determines the destination recipient type for this notification e-mail.\r\n     * This also determines which other properties are valid.\r\n     */\r\n    destination?: FormNotificationEmailDestination;\r\n\r\n    /**\r\n     * The ListItemBag that identifies the current person that will receive\r\n     * the e-mail.\r\n     */\r\n    recipient?: ListItemBag | null;\r\n\r\n    /**\r\n     * Contains the e-mail address that will receive the notification e-mail.\r\n     * Multiple addresses may be separated with a comma.\r\n     */\r\n    emailAddress?: string | null;\r\n\r\n    /**\r\n     * Contains the campus topic DefinedValue unique identifier that will\r\n     * determine who receives the e-mail. This is used in conjunction with\r\n     * the campus specified on the workflow to find the specific recipient.\r\n     */\r\n    campusTopicGuid?: Guid | null;\r\n\r\n    /** Determines how the content of the e-mail will be generated. */\r\n    source?: FormEmailSource;\r\n};\r\n\r\n/**\r\n * Contains the general settings about this form. These loosely correlate\r\n * to the UI of the General tab when viewing the form.\r\n */\r\nexport type FormGeneral = {\r\n    /**\r\n     * The name of the form. This is used internally to identify the form\r\n     * and not normally displayed to the user filling out the form.\r\n     */\r\n    name?: string | null;\r\n\r\n    /**\r\n     * A description of the purpose this form fills and the reason it exists.\r\n     * This is primarily for internal use by staff.\r\n     */\r\n    description?: string | null;\r\n\r\n    /**\r\n     * The unique identifier of the template that is being used by this form\r\n     * to provided a set of overrides.\r\n     */\r\n    template?: Guid | null;\r\n\r\n    /** The category that this form belongs to for organization purposes. */\r\n    category?: ListItemBag | null;\r\n\r\n    /** The date and time this form will begin to allow entries. */\r\n    entryStarts?: string | null;\r\n\r\n    /** The date and time at which point this form will no longer accept new entries. */\r\n    entryEnds?: string | null;\r\n\r\n    /**\r\n     * Determines if this form requires the person to be logged in before they\r\n     * can begin filling it out.\r\n     */\r\n    isLoginRequired?: boolean;\r\n};\r\n\r\n/**\r\n * Identifies the action that should be taken after the form has been submitted\r\n * by the individual.\r\n */\r\nexport type FormCompletionAction = {\r\n    /**\r\n     * The type of action that should be performed after the form has been\r\n     * submitted.\r\n     */\r\n    type?: FormCompletionActionType;\r\n\r\n    /**\r\n     * contains the HTML message content that should be displayed to the\r\n     * individual after the form has been submitted.\r\n     */\r\n    message?: string | null;\r\n\r\n    /**\r\n     * Contains the URL to redirect the individual to after the form has been\r\n     * submitted.\r\n     */\r\n    redirectUrl?: string | null;\r\n};\r\n\r\n/**\r\n * The settings that describe a single form.\r\n */\r\nexport type FormSettings = {\r\n    /**\r\n     * The HTML content that will be displayed before all the sections of\r\n     * the form.\r\n     */\r\n    headerContent?: string | null;\r\n\r\n    /**\r\n     * The HTML content that will be displayed after all the sections of the\r\n     * form.\r\n     */\r\n    footerContent?: string | null;\r\n\r\n    /** The list of sections that exist in this form, including all of the fields. */\r\n    sections?: FormSection[] | null;\r\n\r\n    /** The general settings about this form. */\r\n    general?: FormGeneral | null;\r\n\r\n    /**\r\n     * The settings that describe the confirmation e-mail to be sent when\r\n     * this form is submitted.\r\n     */\r\n    confirmationEmail?: FormConfirmationEmail | null;\r\n\r\n    /**\r\n     * The settings that describe the notification e-mail to be sent when\r\n     * this form is submitted.\r\n     */\r\n    notificationEmail?: FormNotificationEmail | null;\r\n\r\n    /** The action to perform after this form is submitted. */\r\n    completion?: FormCompletionAction | null;\r\n\r\n    /** Determines how the form's campus context will be set when it first runs. */\r\n    campusSetFrom?: CampusSetFrom;\r\n\r\n    /**\r\n     * Determines if the person entry section should be displayed at the top\r\n     * of the form.\r\n     */\r\n    allowPersonEntry?: boolean;\r\n\r\n    /** The settings that describe how the person entry section will be displayed. */\r\n    personEntry?: FormPersonEntry | null;\r\n};\r\n\r\n/**\r\n * Identifies all the settings related to configuring hte Person Entry\r\n * section of a FormBuilder form.\r\n */\r\nexport type FormPersonEntry = {\r\n    /**\r\n     * Indicates if the form should auto-fill values from the Person that is\r\n     * currently logged in.\r\n     */\r\n    autofillCurrentPerson?: boolean;\r\n\r\n    /**\r\n     * Indicates if the form should be hidden when a Person is already\r\n     * logged in and known.\r\n     */\r\n    hideIfCurrentPersonKnown?: boolean;\r\n\r\n    /**\r\n     * The DefinedValue unique identifier that specifies the value used\r\n     * for Person.RecordStatusValue when a new Person is created.\r\n     */\r\n    recordStatus?: Guid | null;\r\n\r\n    /**\r\n     * The DefinedValue unique identifier that specifies the value used for\r\n     * Person.ConnectionStatusValue when a new Person is created.\r\n     */\r\n    connectionStatus?: Guid | null;\r\n\r\n    /**\r\n     * Indicates if the campus picker should be shown on the person entry form.\r\n     * The campus picker will always be required if it is visible.\r\n     */\r\n    showCampus?: boolean;\r\n\r\n    /**\r\n     * The DefinedValue unique identifier for the campus type used to filter\r\n     * Campuses when displaying the campus picker.\r\n     */\r\n    campusType?: Guid | null;\r\n\r\n    /**\r\n     * The DefinedValue unique identifier for the campus status used to filter\r\n     * Campuses when displaying the campus picker.\r\n     */\r\n    campusStatus?: Guid | null;\r\n\r\n    /**\r\n     * Determines if the gender control should be hidden, optional or required\r\n     * when displaying the person entry form.\r\n     */\r\n    gender?: FormFieldVisibility;\r\n\r\n    /**\r\n     * Determines if the e-mail control should be hidden, optional or required\r\n     * when displaying the person entry form.\r\n     */\r\n    email?: FormFieldVisibility;\r\n\r\n    /**\r\n     * Determines if the mobile phone control should be hidden, optional or required\r\n     * when displaying the person entry form.\r\n     */\r\n    mobilePhone?: FormFieldVisibility;\r\n\r\n    /**\r\n     * Determines if the birthdate control should be hidden, optional or required\r\n     * when displaying the person entry form.\r\n     */\r\n    birthdate?: FormFieldVisibility;\r\n\r\n    /**\r\n     * Determines if the address control should be hidden, optional or required\r\n     * when displaying the person entry form.\r\n     */\r\n    address?: FormFieldVisibility;\r\n\r\n    /**\r\n     * The DefinedValue unique identifier that specifies which address type\r\n     * will be used on the person entry form.\r\n     */\r\n    addressType?: Guid | null;\r\n\r\n    /**\r\n     * Determines if the marital status control should be hidden, optional or required\r\n     * when displaying the person entry form.\r\n     */\r\n    maritalStatus?: FormFieldVisibility;\r\n\r\n    /**\r\n     * Determines if the spouse controls should be hidden, optional or required\r\n     * when displaying the person entry form.\r\n     */\r\n    spouseEntry?: FormFieldVisibility;\r\n\r\n    /**\r\n     * The text string that is used above the spouse entry controls to indicate\r\n     * that the following controls are for the spouse.\r\n     */\r\n    spouseLabel?: string | null;\r\n\r\n    /**\r\n    * Determines if the race picker should be hidden, optional or required\r\n    * when displaying the person entry form.\r\n    */\r\n    raceEntry?: FormFieldVisibility;\r\n\r\n    /**\r\n    * Determines if ethnicity picker should be hidden, optional or required\r\n    * when displaying the person entry form.\r\n    */\r\n    ethnicityEntry?: FormFieldVisibility;\r\n};\r\n\r\n// #endregion\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { computed, defineComponent, PropType, ref, watch } from \"vue\";\r\nimport DropDownList from \"@Obsidian/Controls/dropDownList\";\r\nimport InlineCheckbox from \"@Obsidian/Controls/inlineCheckBox\";\r\nimport TextBox from \"@Obsidian/Controls/textBox\";\r\nimport { toNumberOrNull } from \"@Obsidian/Utility/numberUtils\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport SegmentedPicker from \"./segmentedPicker\";\r\nimport { FormEmailSource, FormEmailSourceType } from \"./types.partial\";\r\n\r\nconst emailSourceOptions: ListItemBag[] = [\r\n    {\r\n        value: FormEmailSourceType.UseTemplate.toString(),\r\n        text: \"Use Email Template\"\r\n    },\r\n    {\r\n        value: FormEmailSourceType.Custom.toString(),\r\n        text: \"Provide Custom Email\"\r\n    }\r\n];\r\n\r\n/**\r\n * Displays the UI for where an e-mail comes from. Either from a specific e-mail\r\n * template or a user-defined custom e-mail.\r\n */\r\nexport default defineComponent({\r\n    name: \"Workflow.FormBuilderDetail.EmailSource\",\r\n\r\n    components: {\r\n        DropDownList,\r\n        InlineCheckbox,\r\n        SegmentedPicker,\r\n        TextBox\r\n    },\r\n\r\n    props: {\r\n        modelValue: {\r\n            type: Object as PropType<FormEmailSource>,\r\n            default: {}\r\n        },\r\n\r\n        templateOptions: {\r\n            type: Array as PropType<ListItemBag[]>,\r\n            default: []\r\n        }\r\n    },\r\n\r\n    emits: [\r\n        \"update:modelValue\"\r\n    ],\r\n\r\n    setup(props, { emit }) {\r\n        const type = ref(props.modelValue.type?.toString() ?? FormEmailSourceType.UseTemplate.toString());\r\n        const template = ref(props.modelValue.template ?? \"\");\r\n        const subject = ref(props.modelValue.subject ?? \"\");\r\n        const replyTo = ref(props.modelValue.replyTo ?? \"\");\r\n        const body = ref(props.modelValue.body ?? \"\");\r\n        const appendOrgHeaderAndFooter = ref(props.modelValue.appendOrgHeaderAndFooter ?? false);\r\n\r\n        /** True if the currently selected type is for UseTemplate. */\r\n        const isTemplateType = computed((): boolean => type.value === FormEmailSourceType.UseTemplate.toString());\r\n\r\n        /** True if the currently selected type is for Custom. */\r\n        const isCustomType = computed((): boolean => type.value === FormEmailSourceType.Custom.toString());\r\n\r\n        // Watch for changes for the modelValue and update all our internal values.\r\n        watch(() => props.modelValue, () => {\r\n            type.value = props.modelValue.type?.toString() ?? FormEmailSourceType.UseTemplate.toString();\r\n            template.value = props.modelValue.template ?? \"\";\r\n            subject.value = props.modelValue.subject ?? \"\";\r\n            replyTo.value = props.modelValue.replyTo ?? \"\";\r\n            body.value = props.modelValue.body ?? \"\";\r\n            appendOrgHeaderAndFooter.value = props.modelValue.appendOrgHeaderAndFooter ?? false;\r\n        });\r\n\r\n        // Watch for changes to any of our internal values and update the modelValue.\r\n        watch([type, template, subject, replyTo, body, appendOrgHeaderAndFooter], () => {\r\n            const newValue: FormEmailSource = {\r\n                ...props.modelValue,\r\n                type: toNumberOrNull(type.value) ?? FormEmailSourceType.UseTemplate,\r\n                template: template.value,\r\n                subject: subject.value,\r\n                replyTo: replyTo.value,\r\n                body: body.value,\r\n                appendOrgHeaderAndFooter: appendOrgHeaderAndFooter.value\r\n            };\r\n\r\n            emit(\"update:modelValue\", newValue);\r\n        });\r\n\r\n        return {\r\n            appendOrgHeaderAndFooter,\r\n            type,\r\n            template,\r\n            subject,\r\n            replyTo,\r\n            body,\r\n            emailSourceOptions,\r\n            isCustomType,\r\n            isTemplateType\r\n        };\r\n    },\r\n\r\n    template: `\r\n<div>\r\n    <SegmentedPicker v-model=\"type\"\r\n        :items=\"emailSourceOptions\" />\r\n\r\n    <div v-if=\"isTemplateType\">\r\n        <div class=\"row\">\r\n            <div class=\"col-md-4\">\r\n                <DropDownList v-model=\"template\"\r\n                    label=\"Email Template\"\r\n                    rules=\"required\"\r\n                    :items=\"templateOptions\" />\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div v-else-if=\"isCustomType\">\r\n        <div class=\"row\">\r\n            <div class=\"col-md-4\">\r\n                <TextBox v-model=\"subject\"\r\n                    label=\"Subject\"\r\n                    rules=\"required\" />\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-md-4\">\r\n                <TextBox v-model=\"replyTo\"\r\n                    label=\"Reply To\"\r\n                    rules=\"email\" />\r\n            </div>\r\n        </div>\r\n\r\n        <TextBox v-model=\"body\"\r\n            label=\"Email Body\"\r\n            textMode=\"multiline\"\r\n            rules=\"required\" />\r\n\r\n        <InlineCheckbox v-model=\"appendOrgHeaderAndFooter\"\r\n            label=\"Append Organization Header and Footer\" />\r\n    </div>\r\n</div>\r\n`\r\n});\r\n"],"names":["FormFieldVisibility","FormEmailSourceType","FormNotificationEmailDestination","FormCompletionActionType","CampusSetFrom","emailSourceOptions","value","UseTemplate","toString","text","Custom","defineComponent","name","components","DropDownList","InlineCheckbox","SegmentedPicker","TextBox","props","modelValue","type","Object","default","templateOptions","Array","emits","setup","_ref","_props$modelValue$typ","_props$modelValue$typ2","_props$modelValue$tem","_props$modelValue$sub","_props$modelValue$rep","_props$modelValue$bod","_props$modelValue$app","emit","ref","template","subject","replyTo","body","appendOrgHeaderAndFooter","isTemplateType","computed","isCustomType","watch","_props$modelValue$typ3","_props$modelValue$typ4","_props$modelValue$tem2","_props$modelValue$sub2","_props$modelValue$rep2","_props$modelValue$bod2","_props$modelValue$app2","_toNumberOrNull","newValue","_objectSpread","toNumberOrNull"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iBA0BkBA,mBAAmB,EAAA;MAAnBA,EAAAA,mBAAmB,CAAnBA,mBAAmB,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;MAAnBA,EAAAA,mBAAmB,CAAnBA,mBAAmB,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA,CAAA;MAAnBA,EAAAA,mBAAmB,CAAnBA,mBAAmB,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA,CAAA;MAAA,EAAA,OAAnBA,mBAAmB,CAAA;MAAA,EAAA,CAAA,EAAA,EAAA;MAenBC,IAAAA,mBAAmB,aAAnBA,mBAAmB,EAAA;MAAnBA,EAAAA,mBAAmB,CAAnBA,mBAAmB,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAA,CAAA;MAAnBA,EAAAA,mBAAmB,CAAnBA,mBAAmB,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;MAAA,EAAA,OAAnBA,mBAAmB,CAAA;MAAA,CAAA,CAAA,EAAA,CAAA,CAAA;iBAcnBC,gCAAgC,EAAA;MAAhCA,EAAAA,gCAAgC,CAAhCA,gCAAgC,CAAA,oBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,oBAAA,CAAA;MAAhCA,EAAAA,gCAAgC,CAAhCA,gCAAgC,CAAA,cAAA,CAAA,GAAA,CAAA,CAAA,GAAA,cAAA,CAAA;MAAhCA,EAAAA,gCAAgC,CAAhCA,gCAAgC,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAA,CAAA;MAAA,EAAA,OAAhCA,gCAAgC,CAAA;MAAA,EAAA,CAAA,EAAA,EAAA;iBAiBhCC,wBAAwB,EAAA;MAAxBA,EAAAA,wBAAwB,CAAxBA,wBAAwB,CAAA,gBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,gBAAA,CAAA;MAAxBA,EAAAA,wBAAwB,CAAxBA,wBAAwB,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA,CAAA;MAAA,EAAA,OAAxBA,wBAAwB,CAAA;MAAA,EAAA,CAAA,EAAA,EAAA;iBAWxBC,aAAa,EAAA;MAAbA,EAAAA,aAAa,CAAbA,aAAa,CAAA,eAAA,CAAA,GAAA,CAAA,CAAA,GAAA,eAAA,CAAA;MAAbA,EAAAA,aAAa,CAAbA,aAAa,CAAA,gBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,gBAAA,CAAA;MAAbA,EAAAA,aAAa,CAAbA,aAAa,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAA,CAAA;MAAA,EAAA,OAAbA,aAAa,CAAA;MAAA,EAAA,CAAA,EAAA;;MCzD/B,IAAMC,kBAAiC,GAAG,CACtC;MACIC,EAAAA,KAAK,EAAEL,mBAAmB,CAACM,WAAW,CAACC,QAAQ,EAAE;MACjDC,EAAAA,IAAI,EAAE,oBAAA;MACV,CAAC,EACD;MACIH,EAAAA,KAAK,EAAEL,mBAAmB,CAACS,MAAM,CAACF,QAAQ,EAAE;MAC5CC,EAAAA,IAAI,EAAE,sBAAA;MACV,CAAC,CACJ,CAAA;AAMD,2CAAeE,eAAe,CAAC;MAC3BC,EAAAA,IAAI,EAAE,wCAAwC;MAE9CC,EAAAA,UAAU,EAAE;UACRC,YAAY;UACZC,cAAc;UACdC,eAAe;MACfC,IAAAA,OAAAA;SACH;MAEDC,EAAAA,KAAK,EAAE;MACHC,IAAAA,UAAU,EAAE;MACRC,MAAAA,IAAI,EAAEC,MAAmC;MACzCC,MAAAA,OAAO,EAAE,EAAC;WACb;MAEDC,IAAAA,eAAe,EAAE;MACbH,MAAAA,IAAI,EAAEI,KAAgC;MACtCF,MAAAA,OAAO,EAAE,EAAA;MACb,KAAA;SACH;QAEDG,KAAK,EAAE,CACH,mBAAmB,CACtB;MAEDC,EAAAA,KAAKA,CAACR,KAAK,EAAAS,IAAA,EAAY;MAAA,IAAA,IAAAC,qBAAA,EAAAC,sBAAA,EAAAC,qBAAA,EAAAC,qBAAA,EAAAC,qBAAA,EAAAC,qBAAA,EAAAC,qBAAA,CAAA;MAAA,IAAA,IAARC,IAAI,GAAAR,IAAA,CAAJQ,IAAI,CAAA;MACf,IAAA,IAAMf,IAAI,GAAGgB,GAAG,CAAA,CAAAR,qBAAA,GAAA,CAAAC,sBAAA,GAACX,KAAK,CAACC,UAAU,CAACC,IAAI,MAAAS,IAAAA,IAAAA,sBAAA,KAArBA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,sBAAA,CAAuBrB,QAAQ,EAAE,MAAA,IAAA,IAAAoB,qBAAA,KAAAA,KAAAA,CAAAA,GAAAA,qBAAA,GAAI3B,mBAAmB,CAACM,WAAW,CAACC,QAAQ,EAAE,CAAC,CAAA;MACjG,IAAA,IAAM6B,QAAQ,GAAGD,GAAG,CAAAN,CAAAA,qBAAA,GAACZ,KAAK,CAACC,UAAU,CAACkB,QAAQ,MAAAP,IAAAA,IAAAA,qBAAA,cAAAA,qBAAA,GAAI,EAAE,CAAC,CAAA;MACrD,IAAA,IAAMQ,OAAO,GAAGF,GAAG,CAAAL,CAAAA,qBAAA,GAACb,KAAK,CAACC,UAAU,CAACmB,OAAO,MAAAP,IAAAA,IAAAA,qBAAA,cAAAA,qBAAA,GAAI,EAAE,CAAC,CAAA;MACnD,IAAA,IAAMQ,OAAO,GAAGH,GAAG,CAAAJ,CAAAA,qBAAA,GAACd,KAAK,CAACC,UAAU,CAACoB,OAAO,MAAAP,IAAAA,IAAAA,qBAAA,cAAAA,qBAAA,GAAI,EAAE,CAAC,CAAA;MACnD,IAAA,IAAMQ,IAAI,GAAGJ,GAAG,CAAAH,CAAAA,qBAAA,GAACf,KAAK,CAACC,UAAU,CAACqB,IAAI,MAAAP,IAAAA,IAAAA,qBAAA,cAAAA,qBAAA,GAAI,EAAE,CAAC,CAAA;MAC7C,IAAA,IAAMQ,wBAAwB,GAAGL,GAAG,CAAAF,CAAAA,qBAAA,GAAChB,KAAK,CAACC,UAAU,CAACsB,wBAAwB,MAAAP,IAAAA,IAAAA,qBAAA,cAAAA,qBAAA,GAAI,KAAK,CAAC,CAAA;MAGxF,IAAA,IAAMQ,cAAc,GAAGC,QAAQ,CAAC,MAAevB,IAAI,CAACd,KAAK,KAAKL,mBAAmB,CAACM,WAAW,CAACC,QAAQ,EAAE,CAAC,CAAA;MAGzG,IAAA,IAAMoC,YAAY,GAAGD,QAAQ,CAAC,MAAevB,IAAI,CAACd,KAAK,KAAKL,mBAAmB,CAACS,MAAM,CAACF,QAAQ,EAAE,CAAC,CAAA;MAGlGqC,IAAAA,KAAK,CAAC,MAAM3B,KAAK,CAACC,UAAU,EAAE,MAAM;MAAA,MAAA,IAAA2B,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,CAAA;MAChChC,MAAAA,IAAI,CAACd,KAAK,GAAAwC,CAAAA,sBAAA,GAAAC,CAAAA,sBAAA,GAAG7B,KAAK,CAACC,UAAU,CAACC,IAAI,MAAA2B,IAAAA,IAAAA,sBAAA,KAArBA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,sBAAA,CAAuBvC,QAAQ,EAAE,MAAA,IAAA,IAAAsC,sBAAA,KAAA,KAAA,CAAA,GAAAA,sBAAA,GAAI7C,mBAAmB,CAACM,WAAW,CAACC,QAAQ,EAAE,CAAA;MAC5F6B,MAAAA,QAAQ,CAAC/B,KAAK,GAAA0C,CAAAA,sBAAA,GAAG9B,KAAK,CAACC,UAAU,CAACkB,QAAQ,MAAAW,IAAAA,IAAAA,sBAAA,KAAAA,KAAAA,CAAAA,GAAAA,sBAAA,GAAI,EAAE,CAAA;MAChDV,MAAAA,OAAO,CAAChC,KAAK,GAAA2C,CAAAA,sBAAA,GAAG/B,KAAK,CAACC,UAAU,CAACmB,OAAO,MAAAW,IAAAA,IAAAA,sBAAA,KAAAA,KAAAA,CAAAA,GAAAA,sBAAA,GAAI,EAAE,CAAA;MAC9CV,MAAAA,OAAO,CAACjC,KAAK,GAAA4C,CAAAA,sBAAA,GAAGhC,KAAK,CAACC,UAAU,CAACoB,OAAO,MAAAW,IAAAA,IAAAA,sBAAA,KAAAA,KAAAA,CAAAA,GAAAA,sBAAA,GAAI,EAAE,CAAA;MAC9CV,MAAAA,IAAI,CAAClC,KAAK,GAAA6C,CAAAA,sBAAA,GAAGjC,KAAK,CAACC,UAAU,CAACqB,IAAI,MAAAW,IAAAA,IAAAA,sBAAA,KAAAA,KAAAA,CAAAA,GAAAA,sBAAA,GAAI,EAAE,CAAA;MACxCV,MAAAA,wBAAwB,CAACnC,KAAK,GAAA8C,CAAAA,sBAAA,GAAGlC,KAAK,CAACC,UAAU,CAACsB,wBAAwB,MAAAW,IAAAA,IAAAA,sBAAA,KAAAA,KAAAA,CAAAA,GAAAA,sBAAA,GAAI,KAAK,CAAA;MACvF,KAAC,CAAC,CAAA;MAGFP,IAAAA,KAAK,CAAC,CAACzB,IAAI,EAAEiB,QAAQ,EAAEC,OAAO,EAAEC,OAAO,EAAEC,IAAI,EAAEC,wBAAwB,CAAC,EAAE,MAAM;MAAA,MAAA,IAAAY,eAAA,CAAA;YAC5E,IAAMC,QAAyB,GAAAC,cAAA,CAAAA,cAAA,CACxBrC,EAAAA,EAAAA,KAAK,CAACC,UAAU,CAAA,EAAA,EAAA,EAAA;MACnBC,QAAAA,IAAI,GAAAiC,eAAA,GAAEG,cAAc,CAACpC,IAAI,CAACd,KAAK,CAAC,MAAA,IAAA,IAAA+C,eAAA,KAAAA,KAAAA,CAAAA,GAAAA,eAAA,GAAIpD,mBAAmB,CAACM,WAAW;cACnE8B,QAAQ,EAAEA,QAAQ,CAAC/B,KAAK;cACxBgC,OAAO,EAAEA,OAAO,CAAChC,KAAK;cACtBiC,OAAO,EAAEA,OAAO,CAACjC,KAAK;cACtBkC,IAAI,EAAEA,IAAI,CAAClC,KAAK;cAChBmC,wBAAwB,EAAEA,wBAAwB,CAACnC,KAAAA;aACtD,CAAA,CAAA;MAED6B,MAAAA,IAAI,CAAC,mBAAmB,EAAEmB,QAAQ,CAAC,CAAA;MACvC,KAAC,CAAC,CAAA;UAEF,OAAO;YACHb,wBAAwB;YACxBrB,IAAI;YACJiB,QAAQ;YACRC,OAAO;YACPC,OAAO;YACPC,IAAI;YACJnC,kBAAkB;YAClBuC,YAAY;MACZF,MAAAA,cAAAA;WACH,CAAA;SACJ;QAEDL,QAAQ,EAAA,ysCAAA;MA2CZ,CAAC,EAAC;;;;;;;;"}