{"version":3,"file":"formBuilderDetail.js","sources":["../../../src/WorkFlow/FormBuilder/Shared/types.partial.ts","../../../src/WorkFlow/FormBuilder/FormBuilderDetail/notificationEmail.partial.ts","../../../src/WorkFlow/FormBuilder/FormBuilderDetail/utils.partial.ts","../../../src/WorkFlow/FormBuilder/FormBuilderDetail/communicationsTab.partial.ts","../../../src/WorkFlow/FormBuilder/FormBuilderDetail/configurableZone.partial.ts","../../../src/WorkFlow/FormBuilder/FormBuilderDetail/fieldEditAside.partial.ts","../../../src/WorkFlow/FormBuilder/FormBuilderDetail/formContentModal.partial.ts","../../../src/WorkFlow/FormBuilder/FormBuilderDetail/formContentZone.partial.ts","../../../src/WorkFlow/FormBuilder/FormBuilderDetail/generalAside.partial.ts","../../../src/WorkFlow/FormBuilder/FormBuilderDetail/personEntryEditAside.partial.ts","../../../src/WorkFlow/FormBuilder/FormBuilderDetail/sectionEditAside.partial.ts","../../../src/WorkFlow/FormBuilder/FormBuilderDetail/sectionZone.partial.ts","../../../src/WorkFlow/FormBuilder/FormBuilderDetail/formBuilderTab.partial.ts","../../../src/WorkFlow/FormBuilder/FormBuilderDetail/generalSettings.partial.ts","../../../src/WorkFlow/FormBuilder/FormBuilderDetail/settingsTab.partial.ts","../../../src/WorkFlow/FormBuilder/formBuilderDetail.ts"],"sourcesContent":["// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { Guid } from \"@Obsidian/Types\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport { FieldFilterGroupBag } from \"@Obsidian/ViewModels/Reporting/fieldFilterGroupBag\";\r\n\r\n// #region Enums\r\n\r\n/**\r\n * The state of the field being shown on the page and if it should be required.\r\n */\r\nexport const enum FormFieldVisibility {\r\n    /** Don't show the control. */\r\n    Hidden = 0,\r\n\r\n    /** Control is visible, but a value is not required. */\r\n    Optional = 1,\r\n\r\n    /** Control is visible, and a value is required. */\r\n    Required = 2\r\n}\r\n\r\n/**\r\n * The possible sources that can be used when generating an e-mail in the\r\n * FormBuilder system.\r\n */\r\nexport const enum FormEmailSourceType {\r\n    /**\r\n     * A template will be used that contains all the information required to\r\n     * generate the e-mail contents.\r\n     */\r\n    UseTemplate = 0,\r\n\r\n    /** Custom properties will be used to generate the e-mail contents. */\r\n    Custom = 1\r\n}\r\n\r\n/**\r\n * The possible destination options for a form notification e-mail.\r\n */\r\nexport const enum FormNotificationEmailDestination {\r\n    /** A specific individual in the database will be sent the notification e-mail. */\r\n    SpecificIndividual = 0,\r\n\r\n    /** One or more raw e-mail adresses will be sent the notification e-mail. */\r\n    EmailAddress = 1,\r\n\r\n    /**\r\n     * A secondary lookup will be performed using CampusTopic to determine\r\n     * the final recipient of the notification e-mail.\r\n     */\r\n    CampusTopic = 2\r\n}\r\n\r\n/**\r\n * The possible actions that can be performed after the form has been submitted.\r\n */\r\nexport const enum FormCompletionActionType {\r\n    /** A message is displayed to the user after the form has been submitted. */\r\n    DisplayMessage = 0,\r\n\r\n    /** The individual will be redirected to a specific URL. */\r\n    Redirect = 1\r\n}\r\n\r\n/**\r\n * Defines the way the campus context is set when a form is processed.\r\n */\r\nexport const enum CampusSetFrom {\r\n    /** Use the campus of the current person who is logged in while filling out the form. */\r\n    CurrentPerson = 0,\r\n\r\n    /** Use the campus of the person in the Person attribute. */\r\n    WorkflowPerson = 1,\r\n\r\n    /** Use the campus from the \"Campus\" query string which could be an Id or Guid. */\r\n    QueryString = 2\r\n}\r\n\r\n// #endregion\r\n\r\n// #region Types\r\n\r\n/**\r\n * All the settings related to a single section on the form.\r\n */\r\nexport type FormSection = {\r\n    /** The unique identifier of this section. */\r\n    guid: Guid;\r\n\r\n    /** The title that will be displayed above this section. */\r\n    title?: string | null;\r\n\r\n    /** The additional descriptive text that will be displayed under the title. */\r\n    description?: string | null;\r\n\r\n    /**\r\n     * Determines if the heading separator will be visible when the form is\r\n     * displayed.\r\n     */\r\n    showHeadingSeparator?: boolean;\r\n\r\n    /**\r\n     * The unique identifier of the type that controls how the section is\r\n     * rendered.\r\n     */\r\n    type?: string | null;\r\n\r\n    /** The list of fields that are contained within this section. */\r\n    fields?: FormField[] | null;\r\n\r\n    /** The rule that controls when this section is visible. */\r\n    visibilityRule?: FieldFilterGroupBag | null;\r\n};\r\n\r\n/**\r\n * Identifies a single form field that has been placed on the form.\r\n */\r\nexport type FormField = {\r\n    /** The unique identifier for this form field. */\r\n    guid: Guid;\r\n\r\n    /**\r\n     * The unique identifier of the field type used to render the edit control\r\n     * of this field.\r\n     */\r\n    fieldTypeGuid: Guid;\r\n\r\n    /** The display name of this field. */\r\n    name: string;\r\n\r\n    /** The descriptive help text that will be rendered along with the name. */\r\n    description?: string | null;\r\n\r\n    /** The unique key used to identify this field in Lava operations. */\r\n    key: string;\r\n\r\n    /**\r\n     * The width of this field in display columns. This should be a value\r\n     * between 1 and 12 inclusive.\r\n     */\r\n    size: number;\r\n\r\n    /**\r\n     * Determines if this field will be considered required in order to submit\r\n     * the form.\r\n     */\r\n    isRequired?: boolean;\r\n\r\n    /** Determines if the label (name) should be hidden when this field is displayed. */\r\n    isHideLabel?: boolean;\r\n\r\n    /**\r\n     * Determines if this field will be included in the results grid displayed\r\n     * to staff when examining the submissions.\r\n     */\r\n    isShowOnGrid?: boolean;\r\n\r\n    /** The configuration values that have been set for this field. */\r\n    configurationValues?: Record<string, string> | null;\r\n\r\n    /** The rule that controls when this field is visible. */\r\n    visibilityRule?: FieldFilterGroupBag | null;\r\n\r\n    /** The default value that will be used when the field is initially displayed. */\r\n    defaultValue?: string | null;\r\n};\r\n\r\n/**\r\n * Identifies a single field type that can be used when designing the form.\r\n */\r\nexport type FormFieldType = {\r\n    /** The unique identifier of the field type. */\r\n    guid: Guid;\r\n\r\n    /** The text that represents the display name of the field type. */\r\n    text: string;\r\n\r\n    /**\r\n     * The SVG content that is used to provide an iconic representation of this\r\n     * field type.\r\n     */\r\n    svg: string;\r\n\r\n    /**\r\n     * Determines if this field type is considered common and should be made\r\n     * readily accessible.\r\n     */\r\n    isCommon: boolean;\r\n};\r\n\r\n/**\r\n * Contains details about a confirmation e-mail for a Form Builder form. This\r\n * specifies if one should be sent, who receives it and the content it will\r\n * contain.\r\n */\r\nexport type FormConfirmationEmail = {\r\n    /** Specifies if the confirmation e-mail has been enabled and should be sent. */\r\n    enabled?: boolean;\r\n\r\n    /**\r\n     * Specifies which workflow attribute will be used to determine the\r\n     * recipient of the confirmation e-mail.\r\n     */\r\n    recipientAttributeGuid?: string | null;\r\n\r\n    /** Determines how the content of the e-mail will be generated. */\r\n    source?: FormEmailSource | null;\r\n};\r\n\r\n/**\r\n * Specifies how an e-mail used by the FormBuilder system will be generated.\r\n */\r\nexport type FormEmailSource = {\r\n    /** The source type that will be used to generate the contents of the e-mail. */\r\n    type?: FormEmailSourceType;\r\n\r\n    /**\r\n     * The template unique identifier that should be used to generate the\r\n     * e-mail contents.\r\n     */\r\n    template?: string | null;\r\n\r\n    /** The plain text to use for the custom subject of the e-mail. */\r\n    subject?: string | null;\r\n\r\n    /** The e-mail address to be used as the reply-to address for the custom e-mail. */\r\n    replyTo?: string | null;\r\n\r\n    /** The HTML content to use for the custom e-mail body. */\r\n    body?: string | null;\r\n\r\n    /**\r\n     * Determines if the standard organization header and footer should be\r\n     * prepended and appended to the custom body.\r\n     */\r\n    appendOrgHeaderAndFooter?: boolean;\r\n};\r\n\r\n/**\r\n * Contains details about a notification e-mail for a Form Builder form.\r\n * This specifies if one should be sent, who receives it and the content\r\n * it will contain.\r\n */\r\nexport type FormNotificationEmail = {\r\n    /** Specifies if the notification e-mail has been enabled and should be sent. */\r\n    enabled?: boolean;\r\n\r\n    /**\r\n     * Determines the destination recipient type for this notification e-mail.\r\n     * This also determines which other properties are valid.\r\n     */\r\n    destination?: FormNotificationEmailDestination;\r\n\r\n    /**\r\n     * The ListItemBag that identifies the current person that will receive\r\n     * the e-mail.\r\n     */\r\n    recipient?: ListItemBag | null;\r\n\r\n    /**\r\n     * Contains the e-mail address that will receive the notification e-mail.\r\n     * Multiple addresses may be separated with a comma.\r\n     */\r\n    emailAddress?: string | null;\r\n\r\n    /**\r\n     * Contains the campus topic DefinedValue unique identifier that will\r\n     * determine who receives the e-mail. This is used in conjunction with\r\n     * the campus specified on the workflow to find the specific recipient.\r\n     */\r\n    campusTopicGuid?: Guid | null;\r\n\r\n    /** Determines how the content of the e-mail will be generated. */\r\n    source?: FormEmailSource;\r\n};\r\n\r\n/**\r\n * Contains the general settings about this form. These loosely correlate\r\n * to the UI of the General tab when viewing the form.\r\n */\r\nexport type FormGeneral = {\r\n    /**\r\n     * The name of the form. This is used internally to identify the form\r\n     * and not normally displayed to the user filling out the form.\r\n     */\r\n    name?: string | null;\r\n\r\n    /**\r\n     * A description of the purpose this form fills and the reason it exists.\r\n     * This is primarily for internal use by staff.\r\n     */\r\n    description?: string | null;\r\n\r\n    /**\r\n     * The unique identifier of the template that is being used by this form\r\n     * to provided a set of overrides.\r\n     */\r\n    template?: Guid | null;\r\n\r\n    /** The category that this form belongs to for organization purposes. */\r\n    category?: ListItemBag | null;\r\n\r\n    /** The date and time this form will begin to allow entries. */\r\n    entryStarts?: string | null;\r\n\r\n    /** The date and time at which point this form will no longer accept new entries. */\r\n    entryEnds?: string | null;\r\n\r\n    /**\r\n     * Determines if this form requires the person to be logged in before they\r\n     * can begin filling it out.\r\n     */\r\n    isLoginRequired?: boolean;\r\n};\r\n\r\n/**\r\n * Identifies the action that should be taken after the form has been submitted\r\n * by the individual.\r\n */\r\nexport type FormCompletionAction = {\r\n    /**\r\n     * The type of action that should be performed after the form has been\r\n     * submitted.\r\n     */\r\n    type?: FormCompletionActionType;\r\n\r\n    /**\r\n     * contains the HTML message content that should be displayed to the\r\n     * individual after the form has been submitted.\r\n     */\r\n    message?: string | null;\r\n\r\n    /**\r\n     * Contains the URL to redirect the individual to after the form has been\r\n     * submitted.\r\n     */\r\n    redirectUrl?: string | null;\r\n};\r\n\r\n/**\r\n * The settings that describe a single form.\r\n */\r\nexport type FormSettings = {\r\n    /**\r\n     * The HTML content that will be displayed before all the sections of\r\n     * the form.\r\n     */\r\n    headerContent?: string | null;\r\n\r\n    /**\r\n     * The HTML content that will be displayed after all the sections of the\r\n     * form.\r\n     */\r\n    footerContent?: string | null;\r\n\r\n    /** The list of sections that exist in this form, including all of the fields. */\r\n    sections?: FormSection[] | null;\r\n\r\n    /** The general settings about this form. */\r\n    general?: FormGeneral | null;\r\n\r\n    /**\r\n     * The settings that describe the confirmation e-mail to be sent when\r\n     * this form is submitted.\r\n     */\r\n    confirmationEmail?: FormConfirmationEmail | null;\r\n\r\n    /**\r\n     * The settings that describe the notification e-mail to be sent when\r\n     * this form is submitted.\r\n     */\r\n    notificationEmail?: FormNotificationEmail | null;\r\n\r\n    /** The action to perform after this form is submitted. */\r\n    completion?: FormCompletionAction | null;\r\n\r\n    /** Determines how the form's campus context will be set when it first runs. */\r\n    campusSetFrom?: CampusSetFrom;\r\n\r\n    /**\r\n     * Determines if the person entry section should be displayed at the top\r\n     * of the form.\r\n     */\r\n    allowPersonEntry?: boolean;\r\n\r\n    /** The settings that describe how the person entry section will be displayed. */\r\n    personEntry?: FormPersonEntry | null;\r\n};\r\n\r\n/**\r\n * Identifies all the settings related to configuring hte Person Entry\r\n * section of a FormBuilder form.\r\n */\r\nexport type FormPersonEntry = {\r\n    /**\r\n     * Indicates if the form should auto-fill values from the Person that is\r\n     * currently logged in.\r\n     */\r\n    autofillCurrentPerson?: boolean;\r\n\r\n    /**\r\n     * Indicates if the form should be hidden when a Person is already\r\n     * logged in and known.\r\n     */\r\n    hideIfCurrentPersonKnown?: boolean;\r\n\r\n    /**\r\n     * The DefinedValue unique identifier that specifies the value used\r\n     * for Person.RecordStatusValue when a new Person is created.\r\n     */\r\n    recordStatus?: Guid | null;\r\n\r\n    /**\r\n     * The DefinedValue unique identifier that specifies the value used for\r\n     * Person.ConnectionStatusValue when a new Person is created.\r\n     */\r\n    connectionStatus?: Guid | null;\r\n\r\n    /**\r\n     * Indicates if the campus picker should be shown on the person entry form.\r\n     * The campus picker will always be required if it is visible.\r\n     */\r\n    showCampus?: boolean;\r\n\r\n    /**\r\n     * The DefinedValue unique identifier for the campus type used to filter\r\n     * Campuses when displaying the campus picker.\r\n     */\r\n    campusType?: Guid | null;\r\n\r\n    /**\r\n     * The DefinedValue unique identifier for the campus status used to filter\r\n     * Campuses when displaying the campus picker.\r\n     */\r\n    campusStatus?: Guid | null;\r\n\r\n    /**\r\n     * Determines if the gender control should be hidden, optional or required\r\n     * when displaying the person entry form.\r\n     */\r\n    gender?: FormFieldVisibility;\r\n\r\n    /**\r\n     * Determines if the e-mail control should be hidden, optional or required\r\n     * when displaying the person entry form.\r\n     */\r\n    email?: FormFieldVisibility;\r\n\r\n    /**\r\n     * Determines if the mobile phone control should be hidden, optional or required\r\n     * when displaying the person entry form.\r\n     */\r\n    mobilePhone?: FormFieldVisibility;\r\n\r\n    /**\r\n     * Determines if the birthdate control should be hidden, optional or required\r\n     * when displaying the person entry form.\r\n     */\r\n    birthdate?: FormFieldVisibility;\r\n\r\n    /**\r\n     * Determines if the address control should be hidden, optional or required\r\n     * when displaying the person entry form.\r\n     */\r\n    address?: FormFieldVisibility;\r\n\r\n    /**\r\n     * The DefinedValue unique identifier that specifies which address type\r\n     * will be used on the person entry form.\r\n     */\r\n    addressType?: Guid | null;\r\n\r\n    /**\r\n     * Determines if the marital status control should be hidden, optional or required\r\n     * when displaying the person entry form.\r\n     */\r\n    maritalStatus?: FormFieldVisibility;\r\n\r\n    /**\r\n     * Determines if the spouse controls should be hidden, optional or required\r\n     * when displaying the person entry form.\r\n     */\r\n    spouseEntry?: FormFieldVisibility;\r\n\r\n    /**\r\n     * The text string that is used above the spouse entry controls to indicate\r\n     * that the following controls are for the spouse.\r\n     */\r\n    spouseLabel?: string | null;\r\n\r\n    /**\r\n    * Determines if the race picker should be hidden, optional or required\r\n    * when displaying the person entry form.\r\n    */\r\n    raceEntry?: FormFieldVisibility;\r\n\r\n    /**\r\n    * Determines if ethnicity picker should be hidden, optional or required\r\n    * when displaying the person entry form.\r\n    */\r\n    ethnicityEntry?: FormFieldVisibility;\r\n};\r\n\r\n// #endregion\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { computed, defineComponent, PropType, ref, watch } from \"vue\";\r\nimport PersonPicker from \"@Obsidian/Controls/personPicker\";\r\nimport DropDownList from \"@Obsidian/Controls/dropDownList\";\r\nimport EmailBox from \"@Obsidian/Controls/emailBox\";\r\nimport TextBox from \"@Obsidian/Controls/textBox\";\r\nimport { toNumberOrNull } from \"@Obsidian/Utility/numberUtils\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport EmailSource from \"../Shared/emailSource\";\r\nimport SegmentedPicker from \"../Shared/segmentedPicker\";\r\nimport SectionContainer from \"@Obsidian/Controls/sectionContainer\";\r\nimport { FormNotificationEmail, FormNotificationEmailDestination } from \"../Shared/types.partial\";\r\n\r\nconst notificationDestinationOptions: ListItemBag[] = [\r\n    {\r\n        value: FormNotificationEmailDestination.SpecificIndividual.toString(),\r\n        text: \"Specific Individual\"\r\n    },\r\n    {\r\n        value: FormNotificationEmailDestination.EmailAddress.toString(),\r\n        text: \"Email Address\"\r\n    },\r\n    {\r\n        value: FormNotificationEmailDestination.CampusTopic.toString(),\r\n        text: \"Campus Topic Address\"\r\n    }\r\n];\r\n\r\n/**\r\n * Handles the UI for defining the Notification Email section of the Communications\r\n * tab.\r\n */\r\nexport default defineComponent({\r\n    name: \"Workflow.FormBuilderDetail.NotificationEmail\",\r\n\r\n    components: {\r\n        DropDownList,\r\n        EmailBox,\r\n        EmailSource,\r\n        PersonPicker,\r\n        SegmentedPicker,\r\n        SectionContainer,\r\n        TextBox,\r\n    },\r\n\r\n    props: {\r\n        modelValue: {\r\n            type: Object as PropType<FormNotificationEmail>,\r\n            required: true\r\n        },\r\n\r\n        sourceTemplateOptions: {\r\n            type: Array as PropType<ListItemBag[]>,\r\n            default: []\r\n        },\r\n\r\n        campusTopicOptions: {\r\n            type: Array as PropType<ListItemBag[]>,\r\n            default: []\r\n        }\r\n    },\r\n\r\n    emits: [\r\n        \"update:modelValue\"\r\n    ],\r\n\r\n    setup(props, { emit }) {\r\n        /** True if the notification e-mail is enabled and the rest of the UI should be shown. */\r\n        const enabled = ref(props.modelValue.enabled ?? false);\r\n\r\n        /** The currently selected destination option for where the e-mail will be sent. */\r\n        const destination = ref(props.modelValue.destination?.toString() ?? FormNotificationEmailDestination.SpecificIndividual.toString());\r\n\r\n        /** The recipient when destination is set to specific individual. */\r\n        const recipient = ref(props.modelValue.recipient ?? null);\r\n\r\n        /** The e-mail address(es) when destination is set to email address. */\r\n        const emailAddress = ref(props.modelValue.emailAddress ?? \"\");\r\n\r\n        /** The campus topic identifier when destination is set to campus topic. */\r\n        const campusTopicGuid = ref(props.modelValue.campusTopicGuid ?? \"\");\r\n\r\n        /** The source that will generate the e-mail to be sent. */\r\n        const source = ref(props.modelValue.source ?? {});\r\n\r\n        /** True if the selected destination is Specific Individual. */\r\n        const isDestinationSpecificIndividual = computed((): boolean => destination.value === FormNotificationEmailDestination.SpecificIndividual.toString());\r\n\r\n        /** True if the selected destination is Email Address. */\r\n        const isDestinationEmailAddress = computed((): boolean => destination.value === FormNotificationEmailDestination.EmailAddress.toString());\r\n\r\n        /** True if the selected destination is Campus Topic. */\r\n        const isDestinationCampusTopic = computed((): boolean => destination.value === FormNotificationEmailDestination.CampusTopic.toString());\r\n\r\n        // Watch for changes in the modelValue and update all our internal values.\r\n        watch(() => props.modelValue, () => {\r\n            enabled.value = props.modelValue.enabled ?? false;\r\n            destination.value = props.modelValue.destination?.toString() ?? FormNotificationEmailDestination.SpecificIndividual.toString();\r\n            recipient.value = props.modelValue.recipient ?? null;\r\n            emailAddress.value = props.modelValue.emailAddress ?? \"\";\r\n            campusTopicGuid.value = props.modelValue.campusTopicGuid ?? \"\";\r\n            source.value = props.modelValue.source ?? {};\r\n        });\r\n\r\n        // Watch for changes in our internal values and update the modelValue.\r\n        watch([enabled, destination, recipient, emailAddress, campusTopicGuid, source], () => {\r\n            const newValue: FormNotificationEmail = {\r\n                ...props.modelValue,\r\n                enabled: enabled.value,\r\n                destination: toNumberOrNull(destination.value) ?? FormNotificationEmailDestination.SpecificIndividual,\r\n                recipient: recipient.value,\r\n                emailAddress: emailAddress.value,\r\n                campusTopicGuid: campusTopicGuid.value,\r\n                source: source.value\r\n            };\r\n\r\n            emit(\"update:modelValue\", newValue);\r\n        });\r\n\r\n        return {\r\n            campusTopicGuid,\r\n            destination,\r\n            destinationOptions: notificationDestinationOptions,\r\n            emailAddress,\r\n            enabled,\r\n            isDestinationSpecificIndividual,\r\n            isDestinationEmailAddress,\r\n            isDestinationCampusTopic,\r\n            recipient,\r\n            source\r\n        };\r\n    },\r\n\r\n    template: `\r\n<SectionContainer v-model=\"enabled\"\r\n    toggleText=\"Enable\"\r\n    title=\"Notification Email\"\r\n    description=\"Notification emails can be sent to specified individuals when each form is completed.\">\r\n    <SegmentedPicker v-model=\"destination\" :items=\"destinationOptions\" />\r\n\r\n    <div v-if=\"isDestinationSpecificIndividual\">\r\n        <div class=\"row\">\r\n            <div class=\"col-md-4\">\r\n                <PersonPicker v-model=\"recipient\"\r\n                    label=\"Recipient\"\r\n                    rules=\"required\" />\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div v-else-if=\"isDestinationEmailAddress\">\r\n        <div class=\"row\">\r\n            <div class=\"col-md-4\">\r\n                <EmailBox v-model=\"emailAddress\"\r\n                    label=\"Recipients\"\r\n                    rules=\"required\"\r\n                    allowMultiple />\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div v-else-if=\"isDestinationCampusTopic\">\r\n        <div class=\"row\">\r\n            <div class=\"col-md-4\">\r\n                <DropDownList v-model=\"campusTopicGuid\"\r\n                    label=\"Topic\"\r\n                    rules=\"required\"\r\n                    :items=\"campusTopicOptions\" />\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"mt-3\">\r\n        <EmailSource v-model=\"source\" :templateOptions=\"sourceTemplateOptions\" />\r\n    </div>\r\n</SectionContainer>\r\n`\r\n});\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { inject, provide } from \"vue\";\r\nimport { getFieldType } from \"@Obsidian/Utility/fieldTypes\";\r\nimport { FilterExpressionType } from \"@Obsidian/Core/Reporting/filterExpressionType\";\r\nimport { areEqual } from \"@Obsidian/Utility/guid\";\r\nimport { FieldFilterGroupBag } from \"@Obsidian/ViewModels/Reporting/fieldFilterGroupBag\";\r\nimport { FieldFilterRuleBag } from \"@Obsidian/ViewModels/Reporting/fieldFilterRuleBag\";\r\nimport { FieldFilterSourceBag } from \"@Obsidian/ViewModels/Reporting/fieldFilterSourceBag\";\r\nimport { FormField } from \"../Shared/types.partial\";\r\nimport { FormValueSources } from \"./types.partial\";\r\n\r\n// Unique key used to track the sources for the FormTemplateDetail block.\r\nconst sourcesKey = Symbol();\r\n\r\n/**\r\n * Make the list of value sources available to child components.\r\n *\r\n * @param sources The value sources to make available.\r\n */\r\nexport function provideFormSources(options: FormValueSources): void {\r\n    provide(sourcesKey, options);\r\n}\r\n\r\n/**\r\n * Uses the value sources previously made available by the parent component.\r\n *\r\n * @returns The value sources that were provided by the parent component.\r\n */\r\nexport function useFormSources(): FormValueSources {\r\n    return inject<FormValueSources>(sourcesKey) ?? {};\r\n}\r\n\r\n/**\r\n * Get the friendly formatted title of a filter group. This returns an HTML\r\n * string.\r\n *\r\n * @param group The group that contains the comparison type information.\r\n *\r\n * @returns An HTML formatted string with the comparison type text.\r\n */\r\nexport function getFilterGroupTitle(group: FieldFilterGroupBag): string {\r\n    switch (group.expressionType) {\r\n        case FilterExpressionType.GroupAll:\r\n            return \"<strong>Show</strong> when <strong>all</strong> of the following match:\";\r\n\r\n        case FilterExpressionType.GroupAny:\r\n            return \"<strong>Show</strong> when <strong>any</strong> of the following match:\";\r\n\r\n        case FilterExpressionType.GroupAllFalse:\r\n            return \"<strong>Hide</strong> when <strong>all</strong> of the following match:\";\r\n\r\n        case FilterExpressionType.GroupAnyFalse:\r\n            return \"<strong>Hide</strong> when <strong>any</strong> of the following match:\";\r\n\r\n        default:\r\n            return \"\";\r\n    }\r\n}\r\n\r\n/**\r\n * Get the description of the rule, including the name of the field it depends on.\r\n *\r\n * @param rule The rule to be represented.\r\n * @param sources The field filter sources to use when looking up the source field.\r\n * @param fields The fields that contain the attribute information.\r\n *\r\n * @returns A plain text string that represents the rule in a human friendly format.\r\n */\r\nexport function getFilterRuleDescription(rule: FieldFilterRuleBag, sources: FieldFilterSourceBag[], fields: FormField[]): string {\r\n    const ruleField = fields.filter(f => areEqual(f.guid, rule.attributeGuid));\r\n    const ruleSource = sources.filter(s => areEqual(s.guid, rule.attributeGuid));\r\n\r\n    if (ruleField.length === 1 && ruleSource.length === 1 && ruleSource[0].attribute) {\r\n        const fieldType = getFieldType(ruleField[0].fieldTypeGuid);\r\n\r\n        if (fieldType) {\r\n            const descr = fieldType.getFilterValueDescription({\r\n                comparisonType: rule.comparisonType,\r\n                value: rule.value ?? \"\"\r\n            }, ruleSource[0].attribute.configurationValues ?? {});\r\n\r\n            return `${ruleSource[0].attribute.name} ${descr}`;\r\n        }\r\n    }\r\n\r\n    return \"\";\r\n}\r\n\r\n/**\r\n * Creates a promise that rejects when the timeout has elapsed.\r\n *\r\n * @param ms The timeout in milliseconds.\r\n */\r\nexport function timeoutAsync(ms: number): Promise<void> {\r\n    return new Promise<void>((_resolve, reject) => {\r\n        setTimeout(reject, ms);\r\n    });\r\n}\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { computed } from \"vue\";\r\nimport { defineComponent, PropType, ref, watch } from \"vue\";\r\nimport RockForm from \"@Obsidian/Controls/rockForm\";\r\nimport NotificationBox from \"@Obsidian/Controls/notificationBox.obs\";\r\nimport { FormError } from \"@Obsidian/Utility/form\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport ConfirmationEmail from \"../Shared/confirmationEmail\";\r\nimport NotificationEmail from \"./notificationEmail.partial\";\r\nimport { FormCommunication, FormTemplateListItem } from \"./types.partial\";\r\nimport { useFormSources } from \"./utils.partial\";\r\n\r\nexport default defineComponent({\r\n    name: \"Workflow.FormBuilderDetail.CommunicationsTab\",\r\n\r\n    components: {\r\n        NotificationBox,\r\n        ConfirmationEmail,\r\n        NotificationEmail,\r\n        RockForm\r\n    },\r\n\r\n    props: {\r\n        modelValue: {\r\n            type: Object as PropType<FormCommunication>,\r\n            required: true\r\n        },\r\n\r\n        recipientOptions: {\r\n            type: Array as PropType<ListItemBag[]>,\r\n            default: []\r\n        },\r\n\r\n        templateOverrides: {\r\n            type: Object as PropType<FormTemplateListItem>\r\n        },\r\n\r\n        submit: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        }\r\n    },\r\n\r\n    emits: [\r\n        \"update:modelValue\",\r\n        \"validationChanged\"\r\n    ],\r\n\r\n    setup(props, { emit }) {\r\n        const confirmationEmail = ref(props.modelValue.confirmationEmail ?? {});\r\n\r\n        const notificationEmail = ref(props.modelValue.notificationEmail ?? {});\r\n\r\n        const formSubmit = ref(false);\r\n\r\n        const sources = useFormSources();\r\n\r\n        const sourceTemplateOptions = sources.emailTemplateOptions ?? [];\r\n        const campusTopicOptions = sources.campusTopicOptions ?? [];\r\n\r\n        const isConfirmationEmailForced = computed((): boolean => props.templateOverrides?.isConfirmationEmailConfigured ?? false);\r\n\r\n        /**\r\n         * Event handler for when the validation state of the form has changed.\r\n         *\r\n         * @param errors Any errors that were detected on the form.\r\n         */\r\n        const onValidationChanged = (errors: FormError[]): void => {\r\n            emit(\"validationChanged\", errors);\r\n        };\r\n\r\n        watch(() => props.modelValue, () => {\r\n            confirmationEmail.value = props.modelValue.confirmationEmail ?? {};\r\n            notificationEmail.value = props.modelValue.notificationEmail ?? {};\r\n        });\r\n\r\n        watch([confirmationEmail, notificationEmail], () => {\r\n            const newValue: FormCommunication = {\r\n                ...props.modelValue,\r\n                confirmationEmail: confirmationEmail.value,\r\n                notificationEmail: notificationEmail.value\r\n            };\r\n\r\n            emit(\"update:modelValue\", newValue);\r\n        });\r\n\r\n        // Any time the parent component tells us it has attempted to submit\r\n        // then we trigger the submit on our form so it updates the validation.\r\n        watch(() => props.submit, () => {\r\n            if (props.submit) {\r\n                formSubmit.value = true;\r\n            }\r\n        });\r\n\r\n        return {\r\n            campusTopicOptions,\r\n            confirmationEmail,\r\n            formSubmit,\r\n            isConfirmationEmailForced,\r\n            notificationEmail,\r\n            onValidationChanged,\r\n            sourceTemplateOptions,\r\n        };\r\n    },\r\n\r\n    template: `\r\n<div class=\"form-builder-scroll\">\r\n    <div class=\"panel-body\">\r\n        <RockForm v-model:submit=\"formSubmit\" @validationChanged=\"onValidationChanged\">\r\n            <ConfirmationEmail v-if=\"!isConfirmationEmailForced\" v-model=\"confirmationEmail\" :sourceTemplateOptions=\"sourceTemplateOptions\" :recipientOptions=\"recipientOptions\" />\r\n            <NotificationBox v-else alertType=\"info\">\r\n                <h4 class=\"alert-heading\">Confirmation Email</h4>\r\n                <p>\r\n                    The confirmation e-mail is defined on the template and cannot be changed.\r\n                </p>\r\n            </NotificationBox>\r\n\r\n            <NotificationEmail v-model=\"notificationEmail\" :sourceTemplateOptions=\"sourceTemplateOptions\" :campusTopicOptions=\"campusTopicOptions\" />\r\n        </RockForm>\r\n    </div>\r\n</div>\r\n`\r\n});\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { computed, PropType } from \"vue\";\r\nimport { defineComponent } from \"vue\";\r\n\r\nexport default defineComponent({\r\n    name: \"Workflow.FormBuilderDetail.ConfigurableZone\",\r\n    components: {\r\n    },\r\n\r\n    props: {\r\n        modelValue: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        iconCssClass: {\r\n            type: String as PropType<string>,\r\n            default: \"fa fa-gear\"\r\n        },\r\n\r\n        clickBodyToConfigure: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        }\r\n    },\r\n\r\n    emits: [\r\n        \"configure\"\r\n    ],\r\n\r\n    setup(props, { emit }) {\r\n        const zoneClasses = computed((): string[] => {\r\n            const classes: string[] = [\"configurable-zone\"];\r\n\r\n            if (props.modelValue) {\r\n                classes.push(\"active\");\r\n            }\r\n\r\n            return classes;\r\n        });\r\n\r\n        const onActionClick = (): void => {\r\n            emit(\"configure\");\r\n        };\r\n\r\n        const onBodyActionClick = (): void => {\r\n            if (props.clickBodyToConfigure) {\r\n                emit(\"configure\");\r\n            }\r\n        };\r\n\r\n        return {\r\n            onActionClick,\r\n            onBodyActionClick,\r\n            zoneClasses\r\n        };\r\n    },\r\n\r\n    template: `\r\n<div :class=\"zoneClasses\">\r\n    <div class=\"zone-content-container\" @click.stop=\"onBodyActionClick\">\r\n        <div class=\"zone-content\">\r\n            <slot />\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"zone-actions\">\r\n        <slot name=\"preActions\" />\r\n        <div v-if=\"iconCssClass\" class=\"zone-action\" @click.stop=\"onActionClick\"><i :class=\"iconCssClass + ' fa-fw'\"></i></div>\r\n        <slot name=\"postActions\" />\r\n    </div>\r\n</div>\r\n`\r\n});\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { computed, defineComponent, PropType, ref, watch } from \"vue\";\r\nimport FieldFilterEditor from \"@Obsidian/Controls/fieldFilterEditor\";\r\nimport FieldTypeEditor from \"@Obsidian/Controls/fieldTypeEditor\";\r\nimport NotificationBox from \"@Obsidian/Controls/notificationBox.obs\";\r\nimport Modal from \"@Obsidian/Controls/modal\";\r\nimport Panel from \"@Obsidian/Controls/panel\";\r\nimport RockForm from \"@Obsidian/Controls/rockForm\";\r\nimport LoadingIndicator from \"@Obsidian/Controls/loadingIndicator\";\r\nimport NumberBox from \"@Obsidian/Controls/numberBox\";\r\nimport RockButton from \"@Obsidian/Controls/rockButton\";\r\nimport RangeSlider from \"@Obsidian/Controls/rangeSlider.obs\";\r\nimport InlineSwitch from \"@Obsidian/Controls/switch\";\r\nimport TextBox from \"@Obsidian/Controls/textBox\";\r\nimport { ValidationResult, ValidationRule } from \"@Obsidian/ValidationRules\";\r\nimport { useInvokeBlockAction } from \"@Obsidian/Utility/block\";\r\nimport { FormError } from \"@Obsidian/Utility/form\";\r\nimport { areEqual } from \"@Obsidian/Utility/guid\";\r\nimport { List } from \"@Obsidian/Utility/linq\";\r\nimport { FieldTypeEditorUpdateAttributeConfigurationOptionsBag } from \"@Obsidian/ViewModels/Controls/fieldTypeEditorUpdateAttributeConfigurationOptionsBag\";\r\nimport { FieldFilterGroupBag } from \"@Obsidian/ViewModels/Reporting/fieldFilterGroupBag\";\r\nimport { FieldFilterRuleBag } from \"@Obsidian/ViewModels/Reporting/fieldFilterRuleBag\";\r\nimport { FieldFilterSourceBag } from \"@Obsidian/ViewModels/Reporting/fieldFilterSourceBag\";\r\nimport { FormField, FormFieldType } from \"../Shared/types.partial\";\r\nimport { getFilterGroupTitle, getFilterRuleDescription, timeoutAsync, useFormSources } from \"./utils.partial\";\r\n\r\n/**\r\n * Check if the two records are equal. This makes sure all the key names match\r\n * and the associated values also match. Strict checking is performed.\r\n *\r\n * @param a The first record value to be compared.\r\n * @param b The second record value to be compared.\r\n *\r\n * @returns True if the two record values are equal, otherwise false.\r\n */\r\nfunction shallowStrictEqual(a: Record<string, string>, b: Record<string, string>): boolean {\r\n    const aKeys = Object.keys(a);\r\n    const bKeys = Object.keys(b);\r\n\r\n    // Check we have the same number of keys.\r\n    if (aKeys.length !== bKeys.length) {\r\n        return false;\r\n    }\r\n\r\n    for (const key of aKeys) {\r\n        // Check that all keys from 'a' exist in 'b'.\r\n        if (!bKeys.includes(key)) {\r\n            return false;\r\n        }\r\n\r\n        // Check that all the values from 'a' match those in 'b'.\r\n        if (a[key] !== b[key]) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport default defineComponent({\r\n    name: \"Workflow.FormBuilderDetail.FieldEditAside\",\r\n    components: {\r\n        Panel,\r\n        FieldFilterEditor,\r\n        FieldTypeEditor,\r\n        InlineSwitch,\r\n        LoadingIndicator,\r\n        Modal,\r\n        NumberBox,\r\n        RockButton,\r\n        RockForm,\r\n        RangeSlider,\r\n        TextBox,\r\n        NotificationBox\r\n    },\r\n\r\n    props: {\r\n        modelValue: {\r\n            type: Object as PropType<FormField>,\r\n            required: true\r\n        },\r\n\r\n        formFields: {\r\n            type: Array as PropType<FormField[]>,\r\n            required: true\r\n        }\r\n    },\r\n\r\n    emits: [\r\n        \"update:modelValue\",\r\n        \"close\",\r\n        \"validationChanged\"\r\n    ],\r\n\r\n    methods: {\r\n        /**\r\n         * Checks if this aside is safe to close or if there are errors that\r\n         * must be corrected first.\r\n         */\r\n        isSafeToClose(): boolean {\r\n            this.formSubmit = true;\r\n\r\n            const result = this.validationErrors.length === 0;\r\n\r\n            // If there was an error, perform a smooth scroll to the top so\r\n            // they can see the validation results.\r\n            if (!result && this.scrollableElement) {\r\n                this.scrollableElement.scroll({\r\n                    behavior: \"smooth\",\r\n                    top: 0\r\n                });\r\n            }\r\n\r\n            return result;\r\n        }\r\n    },\r\n\r\n    setup(props, { emit }) {\r\n        // #region Values\r\n        const invokeBlockAction = useInvokeBlockAction();\r\n        const fieldTypes = useFormSources().fieldTypes ?? [];\r\n        let conditionalSourcesLoadAttempted = false;\r\n\r\n        const fieldName = ref(props.modelValue.name);\r\n        const fieldDescription = ref(props.modelValue.description ?? \"\");\r\n        const fieldKey = ref(props.modelValue.key);\r\n        const fieldSize = ref(props.modelValue.size);\r\n        const isFieldRequired = ref(props.modelValue.isRequired ?? false);\r\n        const isFieldLabelHidden = ref(props.modelValue.isHideLabel ?? false);\r\n        const isShowOnGrid = ref(props.modelValue.isShowOnGrid ?? false);\r\n        const visibilityRule = ref(props.modelValue.visibilityRule ?? null);\r\n\r\n        /** The value used by the FieldTypeEditor for editing the field configuration. */\r\n        const fieldTypeValue = ref<FieldTypeEditorUpdateAttributeConfigurationOptionsBag>({\r\n            fieldTypeGuid: props.modelValue.fieldTypeGuid,\r\n            configurationValues: props.modelValue.configurationValues ?? {},\r\n            defaultValue: props.modelValue.defaultValue ?? \"\"\r\n        });\r\n\r\n        /** The validation errors for the form. */\r\n        const validationErrors = ref<FormError[]>([]);\r\n\r\n        /** True if the form should start to submit. */\r\n        const formSubmit = ref(false);\r\n\r\n        /**\r\n         * A reference to the element that will be used for scrolling. This is used\r\n         * to scroll to the top when any validation errors pop up so the individual\r\n         * can see them.\r\n         */\r\n        const scrollableElement = ref<HTMLElement | null>(null);\r\n\r\n        /** Contains the model used when editing the field visibility rules. */\r\n        const conditionalModel = ref<FieldFilterGroupBag | null>(null);\r\n\r\n        /**\r\n         * Contains the field filter sources that are available when editing\r\n         * the visibility rules.\r\n         */\r\n        const conditionalSources = ref<FieldFilterSourceBag[] | null>(null);\r\n\r\n        /** True if the conditional panel is expanded; otherwise false. */\r\n        const conditionalPanelOpen = ref(false);\r\n\r\n        /** True if the conditional modal should be open; otherwise false. */\r\n        const conditionalModalOpen = ref(false);\r\n\r\n        // #endregion\r\n\r\n        // #region Computed Values\r\n\r\n        /**\r\n         * The key which forces the field type editor to reload itself whenever the\r\n         * attribute we are editing changes.\r\n         */\r\n        const fieldTypeEditorKey = computed((): string => `fieldTypeEditor_${props.modelValue.guid}`);\r\n\r\n        /** The FormFieldType of the attribute we are editing. */\r\n        const fieldType = computed((): FormFieldType | null => {\r\n            return new List(fieldTypes).firstOrUndefined(f => areEqual(f.guid, props.modelValue.fieldTypeGuid)) ?? null;\r\n        });\r\n\r\n        /** The icon to display in the title area. */\r\n        const asideIconSvg = computed((): string => fieldType.value?.svg ?? \"\");\r\n\r\n        /**\r\n         * The validation rules for the attribute key. This uses custom logic\r\n         * to make sure the key entered doesn't already exist in the form.\r\n         */\r\n        const fieldKeyRules = computed((): ValidationRule[] => {\r\n            const rules: ValidationRule[] = [\"required\"];\r\n            const keys: string[] = props.formFields\r\n                .filter(f => !areEqual(f.guid, props.modelValue.guid))\r\n                .map(f => f.key);\r\n\r\n            rules.push((value): ValidationResult => {\r\n                const valueString = value as string;\r\n\r\n                if (keys.includes(valueString)) {\r\n                    return \"must be unique\";\r\n                }\r\n\r\n                return \"\";\r\n            });\r\n\r\n            return rules;\r\n        });\r\n\r\n        /** Determines if we have any active conditional rules. */\r\n        const hasConditions = computed((): boolean => {\r\n            return !!visibilityRule.value?.rules && visibilityRule.value.rules.length > 0;\r\n        });\r\n\r\n        /** Contains the \"Show/Hide any/all\" title of the field visibility rule. */\r\n        const conditionalTitle = computed((): string => {\r\n            return visibilityRule.value\r\n                ? getFilterGroupTitle(visibilityRule.value)\r\n                : \"\";\r\n        });\r\n\r\n        /** The individual rules that decide if this field will be visible. */\r\n        const conditionalRules = computed((): FieldFilterRuleBag[] => {\r\n            return visibilityRule.value?.rules ?? [];\r\n        });\r\n\r\n        /** True if the conditionals panel content is still loading; otherwise false. */\r\n        const isConditionalsLoading = computed((): boolean => !conditionalSources.value);\r\n\r\n        // #endregion\r\n\r\n        // #region Functions\r\n\r\n        /**\r\n         * Gets the description of a single filter rule, including the source name.\r\n         *\r\n         * @param rule The rule that needs to be translated into description text.\r\n         *\r\n         * @returns A string that contains a human friendly description about the rule.\r\n         */\r\n        const getRuleDescription = (rule: FieldFilterRuleBag): string => {\r\n            return getFilterRuleDescription(rule, conditionalSources.value ?? [], props.formFields);\r\n        };\r\n\r\n        /**\r\n         * Loads all the conditional sources that will be used by this field during filtering.\r\n         */\r\n        const loadConditionalSources = async (): Promise<void> => {\r\n            // Get all fields except our own.\r\n            const fields = props.formFields.filter(f => !areEqual(f.guid, props.modelValue.guid));\r\n\r\n            const getFilterSources = invokeBlockAction<FieldFilterSourceBag[]>(\"GetFilterSources\", {\r\n                formFields: fields\r\n            });\r\n\r\n            // Wait at most 2 seconds.\r\n            const result = await Promise.race([getFilterSources, timeoutAsync(2000)]);\r\n\r\n            if (!result || !result.isSuccess || !result.data) {\r\n                return;\r\n            }\r\n\r\n            conditionalSources.value = result.data;\r\n        };\r\n\r\n        // #endregion\r\n\r\n        // #region Event Handlers\r\n\r\n        /**\r\n         * Event handler for when the back button is clicked.\r\n         */\r\n        const onBackClick = (): void => emit(\"close\");\r\n\r\n        /**\r\n         * Event handler for when the field type editor has updated any configuration\r\n         * values.\r\n         *\r\n         * @param value The value that contains the changed information.\r\n         */\r\n        const onFieldTypeModelValueUpdate = (value: FieldTypeEditorUpdateAttributeConfigurationOptionsBag): void => {\r\n            emit(\"update:modelValue\", {\r\n                ...props.modelValue,\r\n                configurationValues: value.configurationValues,\r\n                defaultValue: value.defaultValue\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Event handler for when the validation state of the form has changed.\r\n         *\r\n         * @param errors Any errors that were detected on the form.\r\n         */\r\n        const onValidationChanged = (errors: FormError[]): void => {\r\n            validationErrors.value = errors;\r\n            emit(\"validationChanged\", errors);\r\n        };\r\n\r\n        /**\r\n         * Event handler for when the conditional edit button has been clicked.\r\n         * Prepare the edit modal and open it.\r\n         */\r\n        const onConditionalEditClick = async (): Promise<void> => {\r\n            conditionalModel.value = visibilityRule.value;\r\n            conditionalModalOpen.value = true;\r\n        };\r\n\r\n        /**\r\n         * Event handler for when the conditional model save button has been clicked.\r\n         * Store all the updates into our internal values.\r\n         */\r\n        const onConditionalSave = (): void => {\r\n            visibilityRule.value = conditionalModel.value;\r\n            conditionalModalOpen.value = false;\r\n        };\r\n\r\n        // #endregion\r\n\r\n        // Watch for changes to field name, and if the old value matches the\r\n        // attribute key then update the key to the new value.\r\n        watch(fieldName, (newValue, oldValue) => {\r\n            const oldValueAsKey = oldValue.replace(/[^a-zA-Z0-9_\\-.]/g, \"\");\r\n\r\n            if (oldValueAsKey === fieldKey.value) {\r\n                fieldKey.value = newValue.replace(/[^a-zA-Z0-9_\\-.]/g, \"\");\r\n            }\r\n        });\r\n\r\n        // Watch for the conditionals panel being opened and if it was the first\r\n        // time then start loading all the filter sources.\r\n        watch(conditionalPanelOpen, () => {\r\n            if (!conditionalPanelOpen.value || conditionalSources.value !== null || conditionalSourcesLoadAttempted) {\r\n                return;\r\n            }\r\n\r\n            conditionalSourcesLoadAttempted = true;\r\n            loadConditionalSources();\r\n        });\r\n\r\n        // Watch for any changes in our simple field values and update the\r\n        // modelValue.\r\n        watch([fieldName, fieldDescription, fieldKey, fieldSize, isFieldRequired, isFieldLabelHidden, isShowOnGrid, visibilityRule], () => {\r\n            const newValue: FormField = {\r\n                ...props.modelValue,\r\n                name: fieldName.value,\r\n                description: fieldDescription.value,\r\n                key: fieldKey.value,\r\n                size: fieldSize.value,\r\n                isRequired: isFieldRequired.value,\r\n                isHideLabel: isFieldLabelHidden.value,\r\n                isShowOnGrid: isShowOnGrid.value,\r\n                visibilityRule: visibilityRule.value\r\n            };\r\n\r\n            emit(\"update:modelValue\", newValue);\r\n        });\r\n\r\n        // Watch for any incoming changes from the parent component and update\r\n        // all our individual field values.\r\n        watch(() => props.modelValue, () => {\r\n            fieldName.value = props.modelValue.name;\r\n            fieldDescription.value = props.modelValue.description ?? \"\";\r\n            fieldKey.value = props.modelValue.key;\r\n            fieldSize.value = props.modelValue.size;\r\n            isFieldRequired.value = props.modelValue.isRequired ?? false;\r\n            isFieldLabelHidden.value = props.modelValue.isHideLabel ?? false;\r\n            isShowOnGrid.value = props.modelValue.isShowOnGrid ?? false;\r\n            visibilityRule.value = props.modelValue.visibilityRule ?? null;\r\n\r\n            const isConfigChanged = fieldTypeValue.value.fieldTypeGuid !== props.modelValue.fieldTypeGuid\r\n                || !shallowStrictEqual(fieldTypeValue.value.configurationValues ?? {}, props.modelValue.configurationValues ?? {})\r\n                || fieldTypeValue.value.defaultValue !== props.modelValue.defaultValue;\r\n\r\n            // Only update the field type if anything actually changed.\r\n            if (isConfigChanged) {\r\n                fieldTypeValue.value = {\r\n                    fieldTypeGuid: props.modelValue.fieldTypeGuid,\r\n                    configurationValues: props.modelValue.configurationValues ?? {},\r\n                    defaultValue: props.modelValue.defaultValue ?? \"\"\r\n                };\r\n            }\r\n        });\r\n\r\n        return {\r\n            asideIconSvg,\r\n            conditionalTitle,\r\n            conditionalModalOpen,\r\n            conditionalModel,\r\n            conditionalPanelOpen,\r\n            conditionalRules,\r\n            conditionalSources,\r\n            fieldDescription,\r\n            fieldKey,\r\n            fieldKeyRules,\r\n            fieldName,\r\n            fieldSize,\r\n            fieldTypeEditorKey,\r\n            fieldTypeValue,\r\n            formSubmit,\r\n            getRuleDescription,\r\n            hasConditions,\r\n            isConditionalsLoading,\r\n            isFieldLabelHidden,\r\n            isFieldRequired,\r\n            isShowOnGrid,\r\n            onBackClick,\r\n            onConditionalEditClick,\r\n            onConditionalSave,\r\n            onFieldTypeModelValueUpdate,\r\n            onValidationChanged,\r\n            scrollableElement,\r\n            validationErrors,\r\n            //AlertType\r\n        };\r\n    },\r\n\r\n    template: `\r\n    <div class=\"form-sidebar\">\r\n    <div class=\"sidebar-header\">\r\n        <div class=\"sidebar-back\" @click=\"onBackClick\">\r\n            <i class=\"fa fa-chevron-left\"></i>\r\n        </div>\r\n\r\n        <div class=\"title\">\r\n            <span v-if=\"asideIconSvg\" class=\"inline-svg icon\" v-html=\"asideIconSvg\"></span>\r\n            {{ fieldName }}\r\n        </div>\r\n    </div>\r\n\r\n    <div ref=\"scrollableElement\" class=\"sidebar-body\">\r\n        <RockForm v-model:submit=\"formSubmit\" @validationChanged=\"onValidationChanged\" class=\"sidebar-panels sidebar-field-edit field-edit-aside\">\r\n            <Panel :modelValue=\"true\" title=\"Field Type\" :hasCollapse=\"true\">\r\n                <TextBox v-model=\"fieldName\"\r\n                    rules=\"required\"\r\n                    label=\"Name\" />\r\n                <TextBox v-model=\"fieldDescription\"\r\n                    label=\"Description\"\r\n                    textMode=\"multiline\" />\r\n                <FieldTypeEditor :modelValue=\"fieldTypeValue\" :key=\"fieldTypeEditorKey\" @update:modelValue=\"onFieldTypeModelValueUpdate\" isFieldTypeReadOnly />\r\n            </Panel>\r\n\r\n            <Panel title=\"Conditionals\" v-model=\"conditionalPanelOpen\" :hasCollapse=\"true\">\r\n                <LoadingIndicator v-if=\"isConditionalsLoading\" />\r\n\r\n                <div v-else-if=\"conditionalSources.length < 1\">\r\n                    <NotificationBox alertType=\"warning\">No source fields available.</NotificationBox>\r\n\r\n                    <div class=\"d-flex justify-content-end\">\r\n                        <RockButton btnType=\"default\" btnSize=\"sm\" disabled><i class=\"fa fa-pencil\"></i></RockButton>\r\n                    </div>\r\n                </div>\r\n\r\n                <div v-else>\r\n                    <div v-if=\"hasConditions\">\r\n                        <div v-html=\"conditionalTitle\"></div>\r\n                        <ul>\r\n                            <li v-for=\"rule in conditionalRules\" :key=\"rule.guid\">{{ getRuleDescription(rule) }}</li>\r\n                        </ul>\r\n                    </div>\r\n\r\n                    <div class=\"d-flex justify-content-end\">\r\n                        <RockButton btnType=\"default\" btnSize=\"sm\" @click=\"onConditionalEditClick\"><i class=\"fa fa-pencil\"></i></RockButton>\r\n                    </div>\r\n                </div>\r\n            </Panel>\r\n\r\n            <Panel title=\"Format\" :hasCollapse=\"true\">\r\n                <RangeSlider v-model=\"fieldSize\" label=\"Column Span\" :min=\"1\" :max=\"12\" :step=\"1\" showValueBar/>\r\n                <InlineSwitch v-model=\"isFieldRequired\" text=\"Required\" />\r\n                <InlineSwitch v-model=\"isFieldLabelHidden\" text=\"Hide Label\" />\r\n            </Panel>\r\n\r\n            <Panel title=\"Advanced\" :hasCollapse=\"true\">\r\n                <TextBox v-model=\"fieldKey\"\r\n                    :rules=\"fieldKeyRules\"\r\n                    label=\"Field Key\" />\r\n                <InlineSwitch v-model=\"isShowOnGrid\" text=\"Show on Results Grid\" />\r\n            </Panel>\r\n        </RockForm>\r\n    </div>\r\n\r\n    <Modal v-model=\"conditionalModalOpen\" title=\"Conditional Settings\" saveText=\"Save\" @save=\"onConditionalSave\">\r\n        <FieldFilterEditor v-model=\"conditionalModel\" :title=\"fieldName\" :sources=\"conditionalSources\" />\r\n    </Modal>\r\n    </div>\r\n`\r\n});\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { defineComponent, nextTick, PropType, ref, watch } from \"vue\";\r\nimport Modal from \"@Obsidian/Controls/modal\";\r\nimport RockForm from \"@Obsidian/Controls/rockForm\";\r\nimport RockButton from \"@Obsidian/Controls/rockButton\";\r\nimport TextBox from \"@Obsidian/Controls/textBox\";\r\nimport { useVModelPassthrough } from \"@Obsidian/Utility/component\";\r\nimport ConfigurableZone from \"./configurableZone.partial\";\r\n\r\nexport default defineComponent({\r\n    name: \"Workflow.FormBuilderDetail.FormContentModal\",\r\n\r\n    components: {\r\n        ConfigurableZone,\r\n        Modal,\r\n        RockButton,\r\n        RockForm,\r\n        TextBox\r\n    },\r\n\r\n    props: {\r\n        modelValue: {\r\n            type: String as PropType<string>,\r\n            required: true\r\n        },\r\n\r\n        isVisible: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        }\r\n    },\r\n\r\n    emits: [\r\n        \"save\",\r\n        \"update:modelValue\",\r\n        \"update:isVisible\"\r\n    ],\r\n\r\n    setup(props, { emit }) {\r\n        /** The internal value as displayed in the UI. */\r\n        const internalValue = useVModelPassthrough(props, \"modelValue\", emit);\r\n\r\n        /** True if the modal is currently visible. */\r\n        const isVisible = useVModelPassthrough(props, \"isVisible\", emit);\r\n\r\n        /** True if the form should start processing. */\r\n        const submitForm = ref(false);\r\n\r\n        /** Reference to the element containing the content text box. */\r\n        const contentTextBox = ref<HTMLElement | null>(null);\r\n\r\n        /**\r\n         * Event handler called when the user clicks the save button.\r\n         */\r\n        const onStartSave = (): void => {\r\n            // Start the form processing.\r\n            submitForm.value = true;\r\n        };\r\n\r\n        /**\r\n         * Event handler when the form has passed validation and is ready to\r\n         * submit.\r\n         */\r\n        const onSubmitForm = (): void => {\r\n            emit(\"save\");\r\n        };\r\n\r\n        // When we become visible, make the text box have focus.\r\n        watch(isVisible, () => {\r\n            nextTick(() => {\r\n                if (contentTextBox.value) {\r\n                    const input = contentTextBox.value.querySelector(\"textarea\");\r\n\r\n                    input?.focus();\r\n                }\r\n            });\r\n        });\r\n\r\n        return {\r\n            contentTextBox,\r\n            internalValue,\r\n            isVisible,\r\n            onSubmitForm,\r\n            onStartSave,\r\n            submitForm,\r\n        };\r\n    },\r\n\r\n    template: `\r\n<Modal v-model=\"isVisible\">\r\n    <RockForm v-model:submit=\"submitForm\" @submit=\"onSubmitForm\">\r\n        <div ref=\"contentTextBox\">\r\n            <TextBox v-model=\"internalValue\" label=\"Content\" textMode=\"multiline\" />\r\n        </div>\r\n    </RockForm>\r\n\r\n    <template #customButtons>\r\n        <RockButton btnType=\"primary\" @click=\"onStartSave\">Save</RockButton>\r\n    </template>\r\n</Modal>\r\n`\r\n});\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { computed, defineComponent, PropType } from \"vue\";\r\nimport ConfigurableZone from \"./configurableZone.partial\";\r\n\r\nexport default defineComponent({\r\n    name: \"Workflow.FormBuilderDetail.FormContentZone\",\r\n\r\n    components: {\r\n        ConfigurableZone\r\n    },\r\n\r\n    props: {\r\n        modelValue: {\r\n            type: String as PropType<string>,\r\n            required: true\r\n        },\r\n\r\n        placeholder: {\r\n            type: String as PropType<string>,\r\n            required: true\r\n        },\r\n\r\n        isActive: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        iconCssClass: {\r\n            type: String as PropType<string>,\r\n            default: \"fa fa-pencil\"\r\n        }\r\n    },\r\n\r\n    emits: [\r\n        \"configure\"\r\n    ],\r\n\r\n    setup(props, { emit }) {\r\n        /** True if we have custom content to render. */\r\n        const hasContent = computed((): boolean => !!props.modelValue);\r\n\r\n        /**\r\n         * A string that represents the render-safe content. This makes sure\r\n         * that any broken or non-ended elements get ended.\r\n         */\r\n        const safeContent = computed((): string => {\r\n            if (!props.modelValue) {\r\n                return \"\";\r\n            }\r\n\r\n            const div = document.createElement(\"div\");\r\n            div.innerHTML = props.modelValue;\r\n\r\n            return div.innerHTML;\r\n        });\r\n\r\n        /**\r\n         * Event handler for when the configure button is clicked.\r\n         */\r\n        const onConfigure = (): void => emit(\"configure\");\r\n\r\n        return {\r\n            hasContent,\r\n            onConfigure,\r\n            safeContent\r\n        };\r\n    },\r\n\r\n    template: `\r\n<ConfigurableZone :modelValue=\"isActive\" :iconCssClass=\"iconCssClass\" @configure=\"onConfigure\">\r\n    <div class=\"zone-body\">\r\n        <div v-if=\"hasContent\" style=\"min-height: 24px;\" v-html=\"safeContent\"></div>\r\n        <div v-else class=\"text-center text-muted\">{{ placeholder }}</div>\r\n    </div>\r\n</ConfigurableZone>\r\n`\r\n});\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { computed, defineComponent, PropType, ref, watch } from \"vue\";\r\nimport RockField from \"@Obsidian/Controls/rockField\";\r\nimport { DragSource, IDragSourceOptions } from \"@Obsidian/Directives/dragDrop\";\r\nimport NotificationBox from \"@Obsidian/Controls/notificationBox.obs\";\r\nimport DropDownList from \"@Obsidian/Controls/dropDownList\";\r\nimport RockLabel from \"@Obsidian/Controls/rockLabel\";\r\nimport Switch from \"@Obsidian/Controls/switch\";\r\nimport { toNumberOrNull } from \"@Obsidian/Utility/numberUtils\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport TransitionVerticalCollapse from \"@Obsidian/Controls/transitionVerticalCollapse\";\r\nimport { CampusSetFrom, FormFieldType } from \"../Shared/types.partial\";\r\nimport ConfigurableZone from \"./configurableZone.partial\";\r\nimport { GeneralAsideSettings } from \"./types.partial\";\r\nimport { useFormSources } from \"./utils.partial\";\r\n\r\nconst campusSetFromOptions: ListItemBag[] = [\r\n    {\r\n        value: CampusSetFrom.CurrentPerson.toString(),\r\n        text: \"Current Person\"\r\n    },\r\n    {\r\n        value: CampusSetFrom.WorkflowPerson.toString(),\r\n        text: \"Workflow Person\"\r\n    },\r\n    {\r\n        value: CampusSetFrom.QueryString.toString(),\r\n        text: \"Query String\"\r\n    }\r\n];\r\n\r\nexport default defineComponent({\r\n    name: \"Workflow.FormBuilderDetail.GeneralAside\",\r\n    components: {\r\n        NotificationBox,\r\n        ConfigurableZone,\r\n        DropDownList,\r\n        RockField,\r\n        RockLabel,\r\n        Switch,\r\n        TransitionVerticalCollapse\r\n    },\r\n\r\n    directives: {\r\n        DragSource\r\n    },\r\n\r\n    props: {\r\n        modelValue: {\r\n            type: Object as PropType<GeneralAsideSettings>,\r\n            required: true\r\n        },\r\n\r\n        sectionDragOptions: {\r\n            type: Object as PropType<IDragSourceOptions>,\r\n            required: true\r\n        },\r\n\r\n        fieldDragOptions: {\r\n            type: Object as PropType<IDragSourceOptions>,\r\n            required: true\r\n        },\r\n\r\n        isPersonEntryForced: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        }\r\n    },\r\n\r\n    emits: [\r\n        \"update:modelValue\"\r\n    ],\r\n\r\n    methods: {\r\n        /**\r\n         * Checks if this aside is safe to close or if there are errors that\r\n         * must be corrected first.\r\n         */\r\n        isSafeToClose(): boolean {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    setup(props, { emit }) {\r\n        /**\r\n         * The value for the drop down that specifies where to set the campus\r\n         * context from for this form.\r\n         */\r\n        const campusSetFrom = ref(props.modelValue.campusSetFrom?.toString() ?? \"\");\r\n\r\n        /** True if the form has a person entry section. */\r\n        const hasPersonEntry = ref(props.modelValue.hasPersonEntry ?? false);\r\n\r\n        const fieldTypes = useFormSources().fieldTypes ?? [];\r\n        const isAdditionalFieldsVisible = ref(false);\r\n\r\n        /** The field types to display in the common field types section. */\r\n        const commonFieldTypes = computed((): FormFieldType[] => {\r\n            return fieldTypes.filter(f => f.isCommon);\r\n        });\r\n\r\n        /** The field types to display in the advanced fiel types section. */\r\n        const advancedFieldTypes = computed((): FormFieldType[] => {\r\n            return fieldTypes.filter(f => !f.isCommon);\r\n        });\r\n\r\n        const additionalFieldsClass = computed((): string => {\r\n            return isAdditionalFieldsVisible.value ? \"fa fa-chevron-up\" : \"fa fa-chevron-down\";\r\n        });\r\n\r\n        /** Used to temporarily disable emitting the modelValue when something changes. */\r\n        let autoSyncModelValue = true;\r\n\r\n        const onAdditionalFieldsClick = (): void => {\r\n            isAdditionalFieldsVisible.value = !isAdditionalFieldsVisible.value;\r\n        };\r\n\r\n        // Watch for changes in the model value and update our internal values.\r\n        watch(() => props.modelValue, () => {\r\n            autoSyncModelValue = false;\r\n            campusSetFrom.value = props.modelValue.campusSetFrom?.toString() ?? \"\";\r\n            hasPersonEntry.value = props.modelValue.hasPersonEntry ?? false;\r\n            autoSyncModelValue = true;\r\n        });\r\n\r\n        // Watch for changes in our internal values and update the modelValue.\r\n        watch([campusSetFrom, hasPersonEntry], () => {\r\n            if (!autoSyncModelValue) {\r\n                return;\r\n            }\r\n\r\n            const value: GeneralAsideSettings = {\r\n                campusSetFrom: toNumberOrNull(campusSetFrom.value) ?? undefined,\r\n                hasPersonEntry: hasPersonEntry.value\r\n            };\r\n\r\n            emit(\"update:modelValue\", value);\r\n        });\r\n\r\n        return {\r\n            additionalFieldsClass,\r\n            advancedFieldTypes,\r\n            campusSetFrom,\r\n            campusSetFromOptions,\r\n            commonFieldTypes,\r\n            hasPersonEntry,\r\n            isAdditionalFieldsVisible,\r\n            onAdditionalFieldsClick\r\n        };\r\n    },\r\n\r\n    template: `\r\n<div class=\"form-sidebar\">\r\n    <div class=\"sidebar-header\">\r\n        <span class=\"title\">Field List</span>\r\n    </div>\r\n\r\n    <div class=\"sidebar-body\">\r\n        <div class=\"panel-body\">\r\n            <div v-drag-source=\"sectionDragOptions\">\r\n                <div class=\"form-template-item form-template-item-section\">\r\n                    <i class=\"fa fa-expand fa-fw\"></i>\r\n                    Section\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"mt-3\">\r\n                <RockLabel>Common Fields</RockLabel>\r\n\r\n                <div class=\"form-template-item-list\" v-drag-source=\"fieldDragOptions\">\r\n                    <div v-for=\"field in commonFieldTypes\" class=\"form-template-item form-template-item-field\" :data-field-type=\"field.guid\">\r\n                        <span class=\"inline-svg icon\" v-html=\"field.svg\"></span>\r\n                        <div class=\"text\">{{ field.text }}</div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div @click=\"onAdditionalFieldsClick\" class=\"mt-2\">\r\n                    <RockLabel>Additional Fields <i :class=\"additionalFieldsClass\"></i></RockLabel>\r\n                </div>\r\n\r\n                <TransitionVerticalCollapse>\r\n                    <div v-if=\"isAdditionalFieldsVisible\" class=\"form-template-item-list\" v-drag-source=\"fieldDragOptions\">\r\n                        <div v-for=\"field in advancedFieldTypes\" class=\"form-template-item form-template-item-field\" :data-field-type=\"field.guid\">\r\n                            <span class=\"inline-svg icon\" v-html=\"field.svg\"></span>\r\n                            <div class=\"text\">{{ field.text }}</div>\r\n                        </div>\r\n                    </div>\r\n                </TransitionVerticalCollapse>\r\n            </div>\r\n\r\n            <div class=\"mt-3\">\r\n                <Switch v-if=\"!isPersonEntryForced\" v-model=\"hasPersonEntry\" text=\"Enable Person Entry\" />\r\n\r\n                <NotificationBox v-else alertType=\"info\">\r\n                    Person entry is enabled on the template and cannot be changed.\r\n                </NotificationBox>\r\n\r\n                <DropDownList v-model=\"campusSetFrom\" label=\"Campus Set From\" :items=\"campusSetFromOptions\" />\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n`\r\n});\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { defineComponent, PropType, ref } from \"vue\";\r\nimport Panel from \"@Obsidian/Controls/panel\";\r\nimport RockForm from \"@Obsidian/Controls/rockForm\";\r\nimport { useVModelPassthrough } from \"@Obsidian/Utility/component\";\r\nimport { FormError } from \"@Obsidian/Utility/form\";\r\nimport PersonEntrySettings from \"../Shared/personEntrySettings\";\r\nimport { FormPersonEntry } from \"../Shared/types.partial\";\r\nimport { useFormSources } from \"./utils.partial\";\r\n\r\nexport default defineComponent({\r\n    name: \"Workflow.FormBuilderDetail.PersonEntryEditAside\",\r\n    components: {\r\n        Panel,\r\n        PersonEntrySettings,\r\n        RockForm\r\n    },\r\n\r\n    props: {\r\n        modelValue: {\r\n            type: Object as PropType<FormPersonEntry>,\r\n            default: {}\r\n        }\r\n    },\r\n\r\n    emits: [\r\n        \"update:modelValue\",\r\n        \"close\",\r\n        \"validationChanged\"\r\n    ],\r\n\r\n    methods: {\r\n        /**\r\n         * Checks if this aside is safe to close or if there are errors that\r\n         * must be corrected first.\r\n         */\r\n        isSafeToClose(): boolean {\r\n            this.formSubmit = true;\r\n\r\n            const result = this.validationErrors.length === 0;\r\n\r\n            // If there was an error, perform a smooth scroll to the top so\r\n            // they can see the validation results.\r\n            if (!result && this.scrollableElement) {\r\n                this.scrollableElement.scroll({\r\n                    behavior: \"smooth\",\r\n                    top: 0\r\n                });\r\n            }\r\n\r\n            return result;\r\n        }\r\n    },\r\n\r\n    setup(props, { emit }) {\r\n        const internalValue = useVModelPassthrough(props, \"modelValue\", emit);\r\n\r\n        const validationErrors = ref<FormError[]>([]);\r\n        const scrollableElement = ref<HTMLElement | null>(null);\r\n\r\n        /** True if the form should start to submit. */\r\n        const formSubmit = ref(false);\r\n\r\n        /**\r\n         * Event handler for when the back button is clicked.\r\n         */\r\n        const onBackClick = (): void => emit(\"close\");\r\n\r\n        /**\r\n         * Event handler for when the validation state of the form has changed.\r\n         *\r\n         * @param errors Any errors that were detected on the form.\r\n         */\r\n        const onValidationChanged = (errors: FormError[]): void => {\r\n            validationErrors.value = errors;\r\n            emit(\"validationChanged\", errors);\r\n        };\r\n\r\n        const options = useFormSources();\r\n\r\n        return {\r\n            addressTypeOptions: options.addressTypeOptions ?? [],\r\n            campusStatusOptions: options.campusStatusOptions ?? [],\r\n            campusTypeOptions: options.campusTypeOptions ?? [],\r\n            connectionStatusOptions: options.connectionStatusOptions ?? [],\r\n            recordStatusOptions: options.recordStatusOptions ?? [],\r\n            formSubmit,\r\n            internalValue,\r\n            onBackClick,\r\n            onValidationChanged,\r\n            scrollableElement,\r\n            validationErrors\r\n        };\r\n    },\r\n\r\n    template: `\r\n<div class=\"form-sidebar\">\r\n    <div class=\"sidebar-header\">\r\n        <div class=\"sidebar-back\" @click=\"onBackClick\">\r\n            <i class=\"fa fa-chevron-left\"></i>\r\n        </div>\r\n\r\n        <span class=\"title\">\r\n            <i class=\"fa fa-fw fa-user icon\"></i>\r\n            Person Entry\r\n        </span>\r\n    </div>\r\n\r\n    <div ref=\"scrollableElement\" class=\"sidebar-body\">\r\n        <RockForm v-model:submit=\"formSubmit\" @validationChanged=\"onValidationChanged\" class=\"sidebar-panels\">\r\n            <div class=\"panel-body\">\r\n                <PersonEntrySettings v-model=\"internalValue\"\r\n                    isVertical\r\n                    :recordStatusOptions=\"recordStatusOptions\"\r\n                    :connectionStatusOptions=\"connectionStatusOptions\"\r\n                    :campusTypeOptions=\"campusTypeOptions\"\r\n                    :campusStatusOptions=\"campusStatusOptions\"\r\n                    :addressTypeOptions=\"addressTypeOptions\" />\r\n            </div>\r\n        </RockForm>\r\n    </div>\r\n</div>\r\n`\r\n});\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { computed, defineComponent, PropType, ref, watch } from \"vue\";\r\nimport ConfigurableZone from \"./configurableZone.partial\";\r\nimport RockField from \"@Obsidian/Controls/rockField\";\r\nimport DropDownList from \"@Obsidian/Controls/dropDownList\";\r\nimport FieldFilterEditor from \"@Obsidian/Controls/fieldFilterEditor\";\r\nimport LoadingIndicator from \"@Obsidian/Controls/loadingIndicator\";\r\nimport Modal from \"@Obsidian/Controls/modal\";\r\nimport Panel from \"@Obsidian/Controls/panel\";\r\nimport RockButton from \"@Obsidian/Controls/rockButton\";\r\nimport RockForm from \"@Obsidian/Controls/rockForm\";\r\nimport Switch from \"@Obsidian/Controls/switch\";\r\nimport TextBox from \"@Obsidian/Controls/textBox\";\r\nimport { SectionAsideSettings } from \"./types.partial\";\r\nimport { useFormSources, getFilterGroupTitle, getFilterRuleDescription, timeoutAsync } from \"./utils.partial\";\r\nimport { FormError } from \"@Obsidian/Utility/form\";\r\nimport { FieldFilterGroupBag } from \"@Obsidian/ViewModels/Reporting/fieldFilterGroupBag\";\r\nimport { FieldFilterSourceBag } from \"@Obsidian/ViewModels/Reporting/fieldFilterSourceBag\";\r\nimport { FieldFilterRuleBag } from \"@Obsidian/ViewModels/Reporting/fieldFilterRuleBag\";\r\nimport { useInvokeBlockAction } from \"@Obsidian/Utility/block\";\r\nimport { FormField } from \"../Shared/types.partial\";\r\n\r\nexport default defineComponent({\r\n    name: \"Workflow.FormBuilderDetail.SectionEditAside\",\r\n\r\n    components: {\r\n        ConfigurableZone,\r\n        DropDownList,\r\n        FieldFilterEditor,\r\n        LoadingIndicator,\r\n        Modal,\r\n        Panel,\r\n        RockButton,\r\n        RockField,\r\n        RockForm,\r\n        Switch,\r\n        TextBox\r\n    },\r\n\r\n    props: {\r\n        modelValue: {\r\n            type: Object as PropType<SectionAsideSettings>,\r\n            required: true\r\n        },\r\n\r\n        formFields: {\r\n            type: Array as PropType<FormField[]>,\r\n            required: true\r\n        }\r\n    },\r\n\r\n    emits: [\r\n        \"close\",\r\n        \"update:modelValue\",\r\n        \"validationChanged\"\r\n    ],\r\n\r\n    methods: {\r\n        /**\r\n         * Checks if this aside is safe to close or if there are errors that\r\n         * must be corrected first.\r\n         */\r\n        isSafeToClose(): boolean {\r\n            this.formSubmit = true;\r\n\r\n            return this.validationErrors.length === 0;\r\n        }\r\n    },\r\n\r\n    setup(props, { emit }) {\r\n        // #region Values\r\n\r\n        const invokeBlockAction = useInvokeBlockAction();\r\n        let conditionalSourcesLoadAttempted = false;\r\n\r\n        const title = ref(props.modelValue.title);\r\n        const description = ref(props.modelValue.description);\r\n        const showHeadingSeparator = ref(props.modelValue.showHeadingSeparator);\r\n        const sectionType = ref(props.modelValue.type ?? \"\");\r\n        const visibilityRule = ref(props.modelValue.visibilityRule ?? null);\r\n\r\n        /** The validation errors for the form. */\r\n        const validationErrors = ref<FormError[]>([]);\r\n\r\n        /** True if the form should start to submit. */\r\n        const formSubmit = ref(false);\r\n\r\n        /** Used to temporarily disable emitting the modelValue when something changes. */\r\n        let autoSyncModelValue = true;\r\n\r\n        const sectionTypeOptions = useFormSources().sectionTypeOptions ?? [];\r\n\r\n        /** Contains the model used when editing the field visibility rules. */\r\n        const conditionalModel = ref<FieldFilterGroupBag | null>(null);\r\n\r\n        /**\r\n         * Contains the field filter sources that are available when editing\r\n         * the visibility rules.\r\n         */\r\n        const conditionalSources = ref<FieldFilterSourceBag[] | null>(null);\r\n\r\n        /** True if the conditional panel is expanded; otherwise false. */\r\n        const conditionalPanelOpen = ref(false);\r\n\r\n        /** True if the conditional modal should be open; otherwise false. */\r\n        const conditionalModalOpen = ref(false);\r\n\r\n        // #endregion\r\n\r\n        // #region Computed Values\r\n\r\n        /** Determines if we have any active conditional rules. */\r\n        const hasConditions = computed((): boolean => {\r\n            return !!visibilityRule.value?.rules && visibilityRule.value.rules.length > 0;\r\n        });\r\n\r\n        /** Contains the \"Show/Hide any/all\" title of the field visibility rule. */\r\n        const conditionalTitle = computed((): string => {\r\n            return visibilityRule.value\r\n                ? getFilterGroupTitle(visibilityRule.value)\r\n                : \"\";\r\n        });\r\n\r\n        /** The individual rules that decide if this field will be visible. */\r\n        const conditionalRules = computed((): FieldFilterRuleBag[] => {\r\n            return visibilityRule.value?.rules ?? [];\r\n        });\r\n\r\n        /** True if the conditionals panel content is still loading; otherwise false. */\r\n        const isConditionalsLoading = computed((): boolean => !conditionalSources.value);\r\n\r\n        // #endregion\r\n\r\n        // #region Functions\r\n\r\n        /**\r\n         * Gets the description of a single filter rule, including the source name.\r\n         *\r\n         * @param rule The rule that needs to be translated into description text.\r\n         *\r\n         * @returns A string that contains a human friendly description about the rule.\r\n         */\r\n        const getRuleDescription = (rule: FieldFilterRuleBag): string => {\r\n            return getFilterRuleDescription(rule, conditionalSources.value ?? [], props.formFields);\r\n        };\r\n\r\n        /**\r\n         * Loads all the conditional sources that will be used by this field during filtering.\r\n         */\r\n        const loadConditionalSources = async (): Promise<void> => {\r\n            const getFilterSources = invokeBlockAction<FieldFilterSourceBag[]>(\"GetFilterSources\", {\r\n                formFields: props.formFields\r\n            });\r\n\r\n            // Wait at most 2 seconds.\r\n            const result = await Promise.race([getFilterSources, timeoutAsync(2000)]);\r\n\r\n            if (!result || !result.isSuccess || !result.data) {\r\n                return;\r\n            }\r\n\r\n            conditionalSources.value = result.data;\r\n        };\r\n\r\n        // #endregion\r\n\r\n        // #region Event Handlers\r\n\r\n        /**\r\n         * Event handler for when the validation state of the form has changed.\r\n         *\r\n         * @param errors Any errors that were detected on the form.\r\n         */\r\n        const onValidationChanged = (errors: FormError[]): void => {\r\n            validationErrors.value = errors;\r\n            emit(\"validationChanged\", errors);\r\n        };\r\n\r\n        /**\r\n         * Event handler for when the back button is clicked.\r\n         */\r\n        const onBackClick = (): void => emit(\"close\");\r\n\r\n        /**\r\n         * Event handler for when the conditional edit button has been clicked.\r\n         * Prepare the edit modal and open it.\r\n         */\r\n        const onConditionalEditClick = async (): Promise<void> => {\r\n            conditionalModel.value = visibilityRule.value;\r\n            conditionalModalOpen.value = true;\r\n        };\r\n\r\n        /**\r\n         * Event handler for when the conditional model save button has been clicked.\r\n         * Store all the updates into our internal values.\r\n         */\r\n        const onConditionalSave = (): void => {\r\n            visibilityRule.value = conditionalModel.value;\r\n            conditionalModalOpen.value = false;\r\n        };\r\n\r\n        // #endregion\r\n\r\n        // Watch for the conditionals panel being opened and if it was the first\r\n        // time then start loading all the filter sources.\r\n        watch(conditionalPanelOpen, () => {\r\n            if (!conditionalPanelOpen.value || conditionalSources.value !== null || conditionalSourcesLoadAttempted) {\r\n                return;\r\n            }\r\n\r\n            conditionalSourcesLoadAttempted = true;\r\n            loadConditionalSources();\r\n        });\r\n\r\n        // Watch for changes in the model value and update our internal values.\r\n        watch(() => props.modelValue, () => {\r\n            autoSyncModelValue = false;\r\n            title.value = props.modelValue.title;\r\n            description.value = props.modelValue.description;\r\n            showHeadingSeparator.value = props.modelValue.showHeadingSeparator;\r\n            sectionType.value = props.modelValue.type ?? \"\";\r\n            visibilityRule.value = props.modelValue.visibilityRule ?? null;\r\n            autoSyncModelValue = true;\r\n        });\r\n\r\n        // Watch for changes in our internal values and update the modelValue.\r\n        watch([title, description, showHeadingSeparator, sectionType, visibilityRule], () => {\r\n            if (!autoSyncModelValue) {\r\n                return;\r\n            }\r\n\r\n            const value: SectionAsideSettings = {\r\n                ...props.modelValue,\r\n                title: title.value,\r\n                description: description.value,\r\n                showHeadingSeparator: showHeadingSeparator.value,\r\n                type: sectionType.value === \"\" ? null : sectionType.value,\r\n                visibilityRule: visibilityRule.value\r\n            };\r\n\r\n            emit(\"update:modelValue\", value);\r\n        });\r\n\r\n        return {\r\n            conditionalTitle,\r\n            conditionalModalOpen,\r\n            conditionalModel,\r\n            conditionalPanelOpen,\r\n            conditionalRules,\r\n            conditionalSources,\r\n            description,\r\n            formSubmit,\r\n            getRuleDescription,\r\n            hasConditions,\r\n            isConditionalsLoading,\r\n            onBackClick,\r\n            title,\r\n            onConditionalEditClick,\r\n            onConditionalSave,\r\n            onValidationChanged,\r\n            sectionType,\r\n            sectionTypeOptions,\r\n            showHeadingSeparator,\r\n            validationErrors\r\n        };\r\n    },\r\n\r\n    template: `\r\n<div class=\"form-sidebar\">\r\n    <div class=\"sidebar-header\">\r\n        <div class=\"sidebar-back\" @click=\"onBackClick\">\r\n            <i class=\"fa fa-chevron-left\"></i>\r\n        </div>\r\n\r\n        <div class=\"title\">\r\n            Section\r\n        </div>\r\n    </div>\r\n\r\n    <RockForm v-model:submit=\"formSubmit\" @validationChanged=\"onValidationChanged\" class=\"sidebar-body\">\r\n        <div class=\"sidebar-panels\">\r\n            <div></div>\r\n            <Panel :modelValue=\"true\" title=\"Section Configuration\" hasCollapse>\r\n                <TextBox v-model=\"title\"\r\n                    label=\"Title\" />\r\n                <TextBox v-model=\"description\"\r\n                    label=\"Description\"\r\n                    textMode=\"multiline\" />\r\n                <Switch v-model=\"showHeadingSeparator\"\r\n                    label=\"Show Heading Separator\" />\r\n                <DropDownList v-model=\"sectionType\"\r\n                    label=\"Type\"\r\n                    :items=\"sectionTypeOptions\"\r\n                    :showBlankItem=\"false\" />\r\n            </Panel>\r\n            <Panel title=\"Conditionals\" v-model=\"conditionalPanelOpen\" :hasCollapse=\"true\">\r\n                <LoadingIndicator v-if=\"isConditionalsLoading\" />\r\n\r\n                <div v-else-if=\"conditionalSources.length < 1\">\r\n                    <NotificationBox alertType=\"warning\">No source fields available.</NotificationBox>\r\n\r\n                    <div class=\"d-flex justify-content-end\">\r\n                        <RockButton btnType=\"default\" btnSize=\"sm\" disabled><i class=\"fa fa-pencil\"></i></RockButton>\r\n                    </div>\r\n                </div>\r\n\r\n                <div v-else>\r\n                    <div v-if=\"hasConditions\">\r\n                        <div v-html=\"conditionalTitle\"></div>\r\n                        <ul>\r\n                            <li v-for=\"rule in conditionalRules\" :key=\"rule.guid\">{{ getRuleDescription(rule) }}</li>\r\n                        </ul>\r\n                    </div>\r\n                    <div class=\"d-flex justify-content-end\">\r\n                        <RockButton btnType=\"default\" btnSize=\"sm\" @click=\"onConditionalEditClick\"><i class=\"fa fa-pencil\"></i></RockButton>\r\n                    </div>\r\n                </div>\r\n            </Panel>\r\n        </div>\r\n    </RockForm>\r\n\r\n    <Modal v-model=\"conditionalModalOpen\" title=\"Conditional Settings\" saveText=\"Save\" @save=\"onConditionalSave\">\r\n        <FieldFilterEditor v-model=\"conditionalModel\" :title=\"fieldName\" :sources=\"conditionalSources\" />\r\n    </Modal>\r\n</div>\r\n`\r\n});\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { Guid } from \"@Obsidian/Types\";\r\nimport { computed, defineComponent, PropType, ref, watch } from \"vue\";\r\nimport RockField from \"@Obsidian/Controls/rockField\";\r\nimport { DragSource, DragTarget, IDragSourceOptions } from \"@Obsidian/Directives/dragDrop\";\r\nimport { areEqual, newGuid } from \"@Obsidian/Utility/guid\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport { PublicAttributeBag } from \"@Obsidian/ViewModels/Utility/publicAttributeBag\";\r\nimport ConfigurableZone from \"./configurableZone.partial\";\r\nimport { FormField, FormSection } from \"../Shared/types.partial\";\r\n\r\nfunction getAttributeFromField(field: FormField): PublicAttributeBag {\r\n    return {\r\n        attributeGuid: newGuid(),\r\n        fieldTypeGuid: field.fieldTypeGuid,\r\n        name: !(field.isHideLabel ?? false) ? field.name : \"\",\r\n        key: field.key,\r\n        configurationValues: field.configurationValues,\r\n        isRequired: field.isRequired ?? false,\r\n        description: field.description ?? \"\",\r\n        order: 0,\r\n        categories: []\r\n    };\r\n}\r\n\r\nconst fieldWrapper = defineComponent({\r\n    name: \"Workflow.FormBuilderDetail.SectionZone.FieldWrapper\",\r\n\r\n    components: {\r\n        RockField\r\n    },\r\n\r\n    props: {\r\n        modelValue: {\r\n            type: Object as PropType<FormField>,\r\n            required: true\r\n        }\r\n    },\r\n\r\n    setup(props) {\r\n        const attribute = ref<PublicAttributeBag>(getAttributeFromField(props.modelValue));\r\n\r\n        const defaultValue = ref(props.modelValue.defaultValue ?? \"\");\r\n\r\n        watch(() => props.modelValue, () => {\r\n            attribute.value = getAttributeFromField(props.modelValue);\r\n            defaultValue.value = props.modelValue.defaultValue ?? \"\";\r\n        }, {\r\n            deep: true\r\n        });\r\n\r\n        return {\r\n            attribute,\r\n            defaultValue\r\n        };\r\n    },\r\n\r\n    template: `\r\n<RockField :modelValue=\"defaultValue\" :attribute=\"attribute\" isEditMode />\r\n`\r\n});\r\n\r\nexport default defineComponent({\r\n    name: \"Workflow.FormBuilderDetail.SectionZone\",\r\n    components: {\r\n        ConfigurableZone,\r\n        RockField,\r\n        FieldWrapper: fieldWrapper\r\n    },\r\n\r\n    directives: {\r\n        DragSource,\r\n        DragTarget\r\n    },\r\n\r\n    props: {\r\n        modelValue: {\r\n            type: Object as PropType<FormSection>,\r\n            required: true\r\n        },\r\n\r\n        dragTargetId: {\r\n            type: String as PropType<Guid>,\r\n            required: true\r\n        },\r\n\r\n        reorderDragOptions: {\r\n            type: Object as PropType<IDragSourceOptions>,\r\n            required: true\r\n        },\r\n\r\n        activeZone: {\r\n            type: String as PropType<string>,\r\n            required: false\r\n        },\r\n\r\n        sectionTypeOptions: {\r\n            type: Array as PropType<ListItemBag[]>,\r\n            default: []\r\n        }\r\n    },\r\n\r\n    emits: [\r\n        \"configureField\",\r\n        \"delete\",\r\n        \"deleteField\"\r\n    ],\r\n\r\n    setup(props, { emit }) {\r\n        /** The unique identifier of the section being rendered. */\r\n        const sectionGuid = ref(props.modelValue.guid);\r\n\r\n        /** The title to display at the top of the section. */\r\n        const title = ref(props.modelValue.title);\r\n\r\n        /** The description to display at the top of the section. */\r\n        const description = ref(props.modelValue.description);\r\n\r\n        /** True if the header separator line should be displayed. */\r\n        const showSeparator = ref(props.modelValue.showHeadingSeparator);\r\n\r\n        /** The visual type of the section. */\r\n        const sectionType = ref(props.modelValue.type);\r\n\r\n        /** The fields that exist in this section. */\r\n        const fields = ref(props.modelValue.fields);\r\n\r\n        /** The CSS class name to apply to the section. */\r\n        const sectionTypeClass = computed((): string => {\r\n            if (sectionType.value) {\r\n                const sectionTypeValue = sectionType.value;\r\n                const matches = props.sectionTypeOptions.filter(t => areEqual(sectionTypeValue, t.value));\r\n\r\n                if (matches.length > 0) {\r\n                    return matches[0].category ?? \"\";\r\n                }\r\n            }\r\n\r\n            return \"\";\r\n        });\r\n\r\n        /** True if the section is active, that is highlighted. */\r\n        const isSectionActive = computed((): boolean => props.activeZone === sectionGuid.value);\r\n\r\n        /**\r\n         * Determines the column size CSS class to use for the given field.\r\n         *\r\n         * @param field The field to be rendered.\r\n         *\r\n         * @returns The CSS classes to apply to the element.\r\n         */\r\n        const getFieldColumnSize = (field: FormField): string => `flex-col flex-col-${field.size}`;\r\n\r\n        /**\r\n         * Checks if the field is active, that is currently being edited.\r\n         *\r\n         * @param field The field in question.\r\n         *\r\n         * @returns true if the field is active and should be highlighted.\r\n         */\r\n        const isFieldActive = (field: FormField): boolean => {\r\n            return field.guid === props.activeZone;\r\n        };\r\n\r\n        /**\r\n         * Event handler for when a field is requesting edit mode.\r\n         *\r\n         * @param field The field requesting to being edit mode.\r\n         */\r\n        const onConfigureField = (field: FormField): void => {\r\n            emit(\"configureField\", field);\r\n        };\r\n\r\n        /**\r\n         * Event handler for when the delete button of the section is clicked.\r\n         */\r\n        const onDelete = (): void => {\r\n            emit(\"delete\", props.modelValue.guid);\r\n        };\r\n\r\n        /**\r\n         * Event handler for when the delete button of a field is clicked.\r\n         *\r\n         * @param field The field to be deleted.\r\n         */\r\n        const onDeleteField = (field: FormField): void => {\r\n            emit(\"deleteField\", field.guid);\r\n        };\r\n\r\n        // Watch for changes in the model properties. We don't do a deep watch\r\n        // on props.modelValue because we don't want to re-render everything\r\n        // if, for example, a field configuration value changes. That is handled\r\n        // by other components already.\r\n        watch(() => [props.modelValue.guid, props.modelValue.title, props.modelValue.description, props.modelValue.showHeadingSeparator, props.modelValue.type, props.modelValue.fields], () => {\r\n            console.log(\"section changed\");\r\n            sectionGuid.value = props.modelValue.guid;\r\n            title.value = props.modelValue.title;\r\n            description.value = props.modelValue.description;\r\n            showSeparator.value = props.modelValue.showHeadingSeparator;\r\n            sectionType.value = props.modelValue.type;\r\n            fields.value = props.modelValue.fields;\r\n        });\r\n\r\n        return {\r\n            description,\r\n            fields,\r\n            getFieldColumnSize,\r\n            isFieldActive,\r\n            isSectionActive,\r\n            onConfigureField,\r\n            onDelete,\r\n            onDeleteField,\r\n            sectionGuid,\r\n            sectionTypeClass,\r\n            showSeparator,\r\n            title\r\n        };\r\n    },\r\n\r\n    template: `\r\n<ConfigurableZone class=\"zone-section\" :modelValue=\"isSectionActive\">\r\n    <div class=\"zone-body\">\r\n        <div class=\"d-flex flex-column\" :class=\"sectionTypeClass\" style=\"flex-grow: 1;\">\r\n            <div>\r\n                <h1 v-if=\"title\">{{ title }}</h1>\r\n                <div v-if=\"description\" class=\"mb-2\">{{ description }}</div>\r\n                <hr v-if=\"showSeparator\" />\r\n            </div>\r\n\r\n            <div class=\"form-section\" v-drag-source=\"reorderDragOptions\" v-drag-target=\"reorderDragOptions.id\" v-drag-target:2=\"dragTargetId\" :data-section-id=\"sectionGuid\">\r\n                <ConfigurableZone v-for=\"field in fields\"\r\n                    :key=\"field.guid\"\r\n                    :modelValue=\"isFieldActive(field)\"\r\n                    :class=\"getFieldColumnSize(field)\"\r\n                    :data-field-id=\"field.guid\"\r\n                    clickBodyToConfigure\r\n                    @configure=\"onConfigureField(field)\">\r\n                    <div class=\"zone-body\">\r\n                        <FieldWrapper :modelValue=\"field\" />\r\n                    </div>\r\n\r\n                    <template #preActions>\r\n                        <div class=\"zone-action zone-action-move\"><i class=\"fa fa-bars fa-fw\"></i></div>\r\n                    </template>\r\n                    <template #postActions>\r\n                        <i class=\"fa fa-times fa-fw zone-action zone-action-delete\" @click.stop=\"onDeleteField(field)\"></i>\r\n                    </template>\r\n                </ConfigurableZone>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <template #preActions>\r\n        <div class=\"zone-action zone-action-move\"><i class=\"fa fa-bars fa-fw \"></i></div>\r\n    </template>\r\n    <template #postActions>\r\n        <div class=\"zone-action zone-action-delete\" @click.stop=\"onDelete\"><i class=\"fa fa-times fa-fw\"></i></div>\r\n    </template>\r\n</ConfigurableZone>\r\n`\r\n});\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { Guid } from \"@Obsidian/Types\";\r\nimport { computed, defineComponent, reactive, Ref, ref, shallowRef, watch } from \"vue\";\r\nimport DropDownList from \"@Obsidian/Controls/dropDownList\";\r\nimport Modal from \"@Obsidian/Controls/modal\";\r\nimport Panel from \"@Obsidian/Controls/panel\";\r\nimport RockButton from \"@Obsidian/Controls/rockButton\";\r\nimport RockLabel from \"@Obsidian/Controls/rockLabel\";\r\nimport RockForm from \"@Obsidian/Controls/rockForm\";\r\nimport Switch from \"@Obsidian/Controls/switch\";\r\nimport TextBox from \"@Obsidian/Controls/textBox\";\r\nimport ConfigurableZone from \"./configurableZone.partial\";\r\nimport FieldEditAside from \"./fieldEditAside.partial\";\r\nimport FormContentModal from \"./formContentModal.partial\";\r\nimport FormContentZone from \"./formContentZone.partial\";\r\nimport GeneralAside from \"./generalAside.partial\";\r\nimport PersonEntryEditAside from \"./personEntryEditAside.partial\";\r\nimport SectionEditAside from \"./sectionEditAside.partial\";\r\nimport SectionZone from \"./sectionZone.partial\";\r\nimport { DragSource, DragTarget, IDragSourceOptions } from \"@Obsidian/Directives/dragDrop\";\r\nimport { areEqual, newGuid } from \"@Obsidian/Utility/guid\";\r\nimport { List } from \"@Obsidian/Utility/linq\";\r\nimport { FormBuilderSettings, FormTemplateListItem, GeneralAsideSettings, IAsideProvider, SectionAsideSettings } from \"./types.partial\";\r\nimport { FormField, FormFieldType, FormPersonEntry, FormSection } from \"../Shared/types.partial\";\r\nimport { PropType } from \"vue\";\r\nimport { useFormSources } from \"./utils.partial\";\r\nimport { confirmDelete } from \"@Obsidian/Utility/dialogs\";\r\nimport { FormError } from \"@Obsidian/Utility/form\";\r\n\r\n/**\r\n * Get the drag source options for the section zones. This allows the user to\r\n * drag a zone placeholder into the form to add a new zone.\r\n *\r\n * @param sections The (reactive) array of sections to update.\r\n * @param defaultSectionType The default value to use for the new section type.\r\n *\r\n * @returns The IDragSourceOptions object to use for drag operations.\r\n */\r\nfunction getSectionDragSourceOptions(sections: FormSection[], defaultSectionType: string | null): IDragSourceOptions {\r\n    return {\r\n        id: newGuid(),\r\n        copyElement: true,\r\n        dragDrop(operation) {\r\n            operation.element.remove();\r\n\r\n            if (operation.targetIndex !== undefined) {\r\n                sections.splice(operation.targetIndex, 0, {\r\n                    guid: newGuid(),\r\n                    title: \"\",\r\n                    description: \"\",\r\n                    showHeadingSeparator: false,\r\n                    type: defaultSectionType,\r\n                    fields: [],\r\n                    visibilityRule: {\r\n                        guid: newGuid(),\r\n                        expressionType: 1,\r\n                        rules: []\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * Get the drag source options for the field types. This allows the user to\r\n * drag a new field type placeholder into the form to add a new field.\r\n *\r\n * @param sections The (reactive) array of sections to update.\r\n * @param availableFieldTypes The list of field types that are available to be used.\r\n *\r\n * @returns The IDragSourceOptions object to use for drag operations.\r\n */\r\nfunction getFieldDragSourceOptions(sections: FormSection[], availableFieldTypes: Ref<FormFieldType[]>): IDragSourceOptions {\r\n    return {\r\n        id: newGuid(),\r\n        copyElement: true,\r\n        dragOver(operation) {\r\n            if (operation.targetContainer && operation.targetContainer instanceof HTMLElement) {\r\n                operation.targetContainer.closest(\".zone-section\")?.classList.add(\"highlight\");\r\n            }\r\n        },\r\n        dragOut(operation) {\r\n            if (operation.targetContainer && operation.targetContainer instanceof HTMLElement) {\r\n                operation.targetContainer.closest(\".zone-section\")?.classList.remove(\"highlight\");\r\n            }\r\n        },\r\n        dragShadow(operation) {\r\n            if (operation.shadow) {\r\n                operation.shadow.classList.remove(\"col-xs-6\");\r\n                operation.shadow.classList.add(\"flex-col\", \"flex-col-12\");\r\n            }\r\n        },\r\n        dragDrop(operation) {\r\n            operation.element.remove();\r\n\r\n            const fieldTypeGuid = (operation.element as HTMLElement).dataset.fieldType ?? \"\";\r\n            const sectionGuid = (operation.targetContainer as HTMLElement).dataset.sectionId ?? \"\";\r\n            const section = new List(sections).firstOrUndefined(s => areEqual(s.guid, sectionGuid));\r\n            const fieldType = new List(availableFieldTypes.value).firstOrUndefined(f => areEqual(f.guid, fieldTypeGuid));\r\n\r\n            if (section && fieldType && operation.targetIndex !== undefined) {\r\n                const existingKeys: string[] = [];\r\n\r\n                // Find all existing attribute keys.\r\n                for (const sect of sections) {\r\n                    if (sect.fields) {\r\n                        for (const field of sect.fields) {\r\n                            existingKeys.push(field.key);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Find a key that isn't used.\r\n                const baseKey = fieldType.text.replace(/[^a-zA-Z0-9_\\-.]/g, \"\");\r\n                let key = baseKey;\r\n                let keyCount = 0;\r\n                while (existingKeys.includes(key)) {\r\n                    keyCount++;\r\n                    key = `${baseKey}${keyCount}`;\r\n                }\r\n\r\n                if (!section.fields) {\r\n                    section.fields = [];\r\n                }\r\n\r\n                section.fields.splice(operation.targetIndex, 0, {\r\n                    guid: newGuid(),\r\n                    fieldTypeGuid: fieldType.guid,\r\n                    name: fieldType.text,\r\n                    key: key,\r\n                    size: 12,\r\n                    configurationValues: {},\r\n                    defaultValue: \"\",\r\n                    visibilityRule: {\r\n                        guid: newGuid(),\r\n                        expressionType: 1,\r\n                        rules: []\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * Get the drag source options for re-ordering the fields. This allows the user\r\n * to drag and drop existing fields to move them around the form.\r\n *\r\n * @param sections The (reactive) array of sections to update.\r\n *\r\n * @returns The IDragSourceOptions object to use for drag operations.\r\n */\r\nfunction getFieldReorderDragSourceOptions(sections: FormSection[]): IDragSourceOptions {\r\n    return {\r\n        id: newGuid(),\r\n        copyElement: false,\r\n        handleSelector: \".zone-actions > .zone-action-move\",\r\n        dragOver(operation) {\r\n            if (operation.targetContainer && operation.targetContainer instanceof HTMLElement) {\r\n                operation.targetContainer.closest(\".zone-section\")?.classList.add(\"highlight\");\r\n            }\r\n        },\r\n        dragOut(operation) {\r\n            if (operation.targetContainer && operation.targetContainer instanceof HTMLElement) {\r\n                operation.targetContainer.closest(\".zone-section\")?.classList.remove(\"highlight\");\r\n            }\r\n        },\r\n        dragDrop(operation) {\r\n            const sourceSectionGuid = (operation.sourceContainer as HTMLElement).dataset.sectionId ?? \"\";\r\n            const targetSectionGuid = (operation.targetContainer as HTMLElement).dataset.sectionId ?? \"\";\r\n            const sourceSection = new List(sections).firstOrUndefined(s => areEqual(s.guid, sourceSectionGuid));\r\n            const targetSection = new List(sections).firstOrUndefined(s => areEqual(s.guid, targetSectionGuid));\r\n\r\n            if (sourceSection?.fields && targetSection?.fields && operation.targetIndex !== undefined) {\r\n                const field = sourceSection.fields[operation.sourceIndex];\r\n\r\n                sourceSection.fields.splice(operation.sourceIndex, 1);\r\n                targetSection.fields.splice(operation.targetIndex, 0, field);\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * Get the drag source options for re-ordering the sections. This allows the user\r\n * to drag and drop existing sections to move them around the form.\r\n *\r\n * @param sections The (reactive) array of sections to update.\r\n *\r\n * @returns The IDragSourceOptions object to use for drag operations.\r\n */\r\nfunction getSectionReorderDragSourceOptions(sections: FormSection[]): IDragSourceOptions {\r\n    return {\r\n        id: newGuid(),\r\n        copyElement: false,\r\n        handleSelector: \".zone-section > .zone-actions > .zone-action-move > .fa\",\r\n        dragDrop(operation) {\r\n            if (operation.targetIndex !== undefined) {\r\n                const section = sections[operation.sourceIndex];\r\n\r\n                sections.splice(operation.sourceIndex, 1);\r\n                sections.splice(operation.targetIndex, 0, section);\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\n// Unique identifiers for the standard zones.\r\nconst formHeaderZoneGuid = \"C7D522D0-A18C-4CB0-B604-B2E9727E9E33\";\r\nconst formFooterZoneGuid = \"317E5892-C156-4614-806F-BE4CAB67AC10\";\r\nconst personEntryZoneGuid = \"5257312E-102C-4026-B558-10184AFEAC4D\";\r\n\r\nexport default defineComponent({\r\n    name: \"Workflow.FormBuilderDetail.FormBuilderTab\",\r\n\r\n    components: {\r\n        ConfigurableZone,\r\n        DropDownList,\r\n        FieldEditAside,\r\n        FormContentModal,\r\n        FormContentZone,\r\n        GeneralAside,\r\n        Modal,\r\n        Panel,\r\n        RockButton,\r\n        RockForm,\r\n        RockLabel,\r\n        PersonEntryEditAside,\r\n        SectionEditAside,\r\n        SectionZone,\r\n        Switch,\r\n        TextBox\r\n    },\r\n\r\n    directives: {\r\n        DragSource,\r\n        DragTarget,\r\n    },\r\n\r\n    props: {\r\n        modelValue: {\r\n            type: Object as PropType<FormBuilderSettings>,\r\n            required: true\r\n        },\r\n\r\n        templateOverrides: {\r\n            type: Object as PropType<FormTemplateListItem>\r\n        },\r\n\r\n        submit: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        }\r\n    },\r\n\r\n    emits: [\r\n        \"update:modelValue\",\r\n        \"validationChanged\"\r\n    ],\r\n\r\n    setup(props, { emit }) {\r\n        // #region Values\r\n\r\n        const sources = useFormSources();\r\n\r\n        const sectionTypeOptions = sources.sectionTypeOptions ?? [];\r\n\r\n        /**\r\n         * The section that are currently displayed on the form. This is reactive\r\n         * since we make live updates to it in various places.\r\n         */\r\n        const sections = reactive<FormSection[]>(props.modelValue.sections ?? []);\r\n\r\n        /** The header HTML content that will appear above the form. */\r\n        const formHeaderContent = ref(props.modelValue.headerContent ?? \"\");\r\n\r\n        /** The footer HTML content that will appear below the form. */\r\n        const formFooterContent = ref(props.modelValue.footerContent ?? \"\");\r\n\r\n        /** The header HTML content while it is being edited in the modal. */\r\n        const formHeaderEditContent = ref(\"\");\r\n\r\n        /** The footer HTML content while it is being edited in the modal. */\r\n        const formFooterEditContent = ref(\"\");\r\n\r\n        /** All the field types that are available for use when designing a form. */\r\n        const availableFieldTypes = ref(sources.fieldTypes ?? []);\r\n\r\n        /** The settings object used by the general aside form settings. */\r\n        const generalAsideSettings = ref<GeneralAsideSettings>({\r\n            campusSetFrom: props.modelValue.campusSetFrom,\r\n            hasPersonEntry: props.modelValue.allowPersonEntry\r\n        });\r\n\r\n        /** The settings object used by the section aside. */\r\n        const sectionAsideSettings = ref<SectionAsideSettings | null>(null);\r\n\r\n        /** The settings object used by the person entry aside. */\r\n        const personEntryAsideSettings = ref<FormPersonEntry>(props.modelValue.personEntry ?? {});\r\n\r\n        // Generate all the drag options.\r\n        const sectionDragSourceOptions = getSectionDragSourceOptions(sections, sources.defaultSectionType ?? null);\r\n        const sectionReorderDragSourceOptions = getSectionReorderDragSourceOptions(sections);\r\n        const fieldDragSourceOptions = getFieldDragSourceOptions(sections, availableFieldTypes);\r\n        const fieldReorderDragSourceOptions = getFieldReorderDragSourceOptions(sections);\r\n\r\n        /** The body element that will be used for drag and drop operations. */\r\n        const bodyElement = shallowRef<HTMLElement | null>(null);\r\n\r\n        /** The component instance that is displaying the general form settings. */\r\n        const generalAsideComponentInstance = ref<IAsideProvider | null>(null);\r\n\r\n        /** The component instance that is displaying the person entry editor. */\r\n        const personEntryAsideComponentInstance = ref<IAsideProvider | null>(null);\r\n\r\n        /** The component instance that is displaying the section editor. */\r\n        const sectionEditAsideComponentInstance = ref<IAsideProvider | null>(null);\r\n\r\n        /** The component instance that is displaying the field editor. */\r\n        const fieldEditAsideComponentInstance = ref<IAsideProvider | null>(null);\r\n\r\n        /** The component instance that is displaying the person entry editor. */\r\n        const personEntryEditAsideComponentInstance = ref<IAsideProvider | null>(null);\r\n\r\n        /** The identifier of the zone currently being edited. */\r\n        const activeZone = ref(\"\");\r\n\r\n        /** The form field that is currently being edited in the aside. */\r\n        const editField = ref<FormField | null>(null);\r\n\r\n        // #endregion\r\n\r\n        // #region Computed Values\r\n\r\n        /** The current aside being displayed. */\r\n        const activeAside = computed((): IAsideProvider | null => {\r\n            if (showGeneralAside.value) {\r\n                return generalAsideComponentInstance.value;\r\n            }\r\n            else if (personEntryAsideComponentInstance.value) {\r\n                return personEntryAsideComponentInstance.value;\r\n            }\r\n            else if (sectionEditAsideComponentInstance.value) {\r\n                return sectionEditAsideComponentInstance.value;\r\n            }\r\n            else if (fieldEditAsideComponentInstance.value) {\r\n                return fieldEditAsideComponentInstance.value;\r\n            }\r\n            else if (personEntryEditAsideComponentInstance.value) {\r\n                return personEntryEditAsideComponentInstance.value;\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        });\r\n\r\n        /** True if the general aside should be currently displayed. */\r\n        const showGeneralAside = computed((): boolean => {\r\n            return !showFieldAside.value && !showSectionAside.value && !showPersonEntryAside.value;\r\n        });\r\n\r\n        /** True if the field editor aside should be currently displayed. */\r\n        const showFieldAside = computed((): boolean => {\r\n            return editField.value !== null;\r\n        });\r\n\r\n        /** True if the section editor aside should be currently displayed. */\r\n        const showSectionAside = computed((): boolean => {\r\n            return sectionAsideSettings.value !== null;\r\n        });\r\n\r\n        /** True if the person entry editor aside should be currently displayed. */\r\n        const showPersonEntryAside = computed((): boolean => activeZone.value === personEntryZoneGuid);\r\n\r\n        /** True if the form has a person entry section. */\r\n        const hasPersonEntry = computed((): boolean => {\r\n            if (props.templateOverrides?.isPersonEntryConfigured ?? false) {\r\n                return true;\r\n            }\r\n\r\n            return generalAsideSettings.value.hasPersonEntry ?? false;\r\n        });\r\n\r\n        /** True if the form header model should be open. */\r\n        const isFormHeaderActive = computed({\r\n            get: (): boolean => {\r\n                return activeZone.value === formHeaderZoneGuid;\r\n            },\r\n            set(value: boolean) {\r\n                if (!value && activeZone.value === formHeaderZoneGuid) {\r\n                    closeAside();\r\n                }\r\n            }\r\n        });\r\n\r\n        /** True if the form header model should be open. */\r\n        const isFormFooterActive = computed({\r\n            get: (): boolean => {\r\n                return activeZone.value === formFooterZoneGuid;\r\n            },\r\n            set(value: boolean) {\r\n                if (!value && activeZone.value === formFooterZoneGuid) {\r\n                    closeAside();\r\n                }\r\n            }\r\n        });\r\n\r\n        /** True if the person entry zone is currently active. */\r\n        const isPersonEntryActive = computed((): boolean => activeZone.value === personEntryZoneGuid);\r\n\r\n        /** True if the person entry setting has been force enabled by the template. */\r\n        const isPersonEntryForced = computed((): boolean => props.templateOverrides?.isPersonEntryConfigured ?? false);\r\n\r\n        /** The configure icon to use for the person entry zone. */\r\n        const personEntryZoneIconClass = computed((): string => {\r\n            // If we are forced then don't allow the user to configure the person entry.\r\n            if (isPersonEntryForced.value) {\r\n                return \"\";\r\n            }\r\n\r\n            return \"fa fa-gear\";\r\n        });\r\n\r\n        /** The form header content specified in the template. */\r\n        const templateFormHeaderContent = computed((): string => props.templateOverrides?.formHeader ?? \"\");\r\n\r\n        /** The form footer content specified in the template. */\r\n        const templateFormFooterContent = computed((): string => props.templateOverrides?.formFooter ?? \"\");\r\n\r\n        /**\r\n         * Contains all the existing form fields in the entire form.\r\n         * Each item has a value that is the attribute guid and text that is\r\n         * the key string.\r\n         */\r\n        const existingFields = computed((): FormField[] => {\r\n            const fields: FormField[] = [];\r\n\r\n            // Find all existing attribute keys.\r\n            for (const sect of sections) {\r\n                if (sect.fields) {\r\n                    for (const field of sect.fields) {\r\n                        fields.push(field);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return fields;\r\n        });\r\n\r\n        // #endregion\r\n\r\n        // #region Functions\r\n\r\n        /**\r\n         * Checks if we can safely close the current aside panel.\r\n         *\r\n         * @returns true if the aside can be closed, otherwise false.\r\n         */\r\n        const canCloseAside = (): boolean => {\r\n            if (activeAside.value) {\r\n                return activeAside.value.isSafeToClose();\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Closes any currently open aside and returns control to the general\r\n         * form settings aside.\r\n         */\r\n        const closeAside = (): void => {\r\n            editField.value = null;\r\n            activeZone.value = \"\";\r\n            sectionAsideSettings.value = null;\r\n            emit(\"validationChanged\", []);\r\n        };\r\n\r\n        // #endregion\r\n\r\n        // #region Event Handlers\r\n\r\n        /**\r\n         * Event handler for when the form header section wants to configure itself.\r\n         */\r\n        const onConfigureFormHeader = (): void => {\r\n            if (!canCloseAside()) {\r\n                return;\r\n            }\r\n\r\n            closeAside();\r\n\r\n            formHeaderEditContent.value = formHeaderContent.value;\r\n            activeZone.value = formHeaderZoneGuid;\r\n        };\r\n\r\n        /**\r\n         * Event handler for when the form footer section wants to configure itself.\r\n         */\r\n        const onConfigureFormFooter = (): void => {\r\n            if (!canCloseAside()) {\r\n                return;\r\n            }\r\n\r\n            closeAside();\r\n\r\n            formFooterEditContent.value = formFooterContent.value;\r\n            activeZone.value = formFooterZoneGuid;\r\n        };\r\n\r\n        /**\r\n         * Event handler for when the person entry section wants to configure itself.\r\n         */\r\n        const onConfigurePersonEntry = (): void => {\r\n            if (!canCloseAside()) {\r\n                return;\r\n            }\r\n\r\n            closeAside();\r\n\r\n            activeZone.value = personEntryZoneGuid;\r\n        };\r\n\r\n        /**\r\n         * Event handler for when any field section wants to configure itself.\r\n         *\r\n         * @param section The section that is requesting to start configuration.\r\n         */\r\n        const onConfigureSection = (section: FormSection): void => {\r\n            if (!canCloseAside()) {\r\n                return;\r\n            }\r\n\r\n            closeAside();\r\n\r\n            activeZone.value = section.guid;\r\n            sectionAsideSettings.value = {\r\n                guid: section.guid,\r\n                title: section.title ?? \"\",\r\n                description: section.description ?? \"\",\r\n                showHeadingSeparator: section.showHeadingSeparator ?? false,\r\n                type: section.type ?? null,\r\n                visibilityRule: section.visibilityRule\r\n            };\r\n        };\r\n\r\n        /**\r\n         * Event handler for when any field wants to configure itself.\r\n         *\r\n         * @param field The field that is requesting to start configuration.\r\n         */\r\n        const onConfigureField = (field: FormField): void => {\r\n            if (!canCloseAside()) {\r\n                return;\r\n            }\r\n\r\n            closeAside();\r\n\r\n            for (const section of sections) {\r\n                for (const existingField of (section.fields ?? [])) {\r\n                    if (areEqual(existingField.guid, field.guid)) {\r\n                        activeZone.value = existingField.guid;\r\n                        editField.value = existingField;\r\n\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Event handler for when any aside wants to close itself.\r\n         */\r\n        const onAsideClose = (): void => {\r\n            if (!canCloseAside()) {\r\n                return;\r\n            }\r\n\r\n            activeZone.value = \"\";\r\n            editField.value = null;\r\n            sectionAsideSettings.value = null;\r\n        };\r\n\r\n        /**\r\n         * Event handler for when the field edit aside has updated the field\r\n         * values or configuration.\r\n         *\r\n         * @param value The new form field details.\r\n         */\r\n        const onFieldEditUpdate = (value: FormField): void => {\r\n            editField.value = value;\r\n\r\n            // Find the original field that was just updated and replace it with\r\n            // the new value.\r\n            for (const section of sections) {\r\n                if (section.fields) {\r\n                    const existingFieldIndex = section.fields.findIndex(f => areEqual(f.guid, value.guid));\r\n\r\n                    if (existingFieldIndex !== -1) {\r\n                        section.fields.splice(existingFieldIndex, 1, value);\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Event handler for when the edit field aside wants to delete the field\r\n         * from the section.\r\n         */\r\n        const onFieldDelete = async (guid: Guid): Promise<void> => {\r\n            if (!(await confirmDelete(\"field\"))) {\r\n                return;\r\n            }\r\n\r\n            deleteField(guid);\r\n        };\r\n\r\n        /**\r\n         * Delete the field with the given GUID and remove any visibility rules referencing it.\r\n         *\r\n         * @param guid GUID of the field being deleted\r\n         */\r\n        const deleteField = (guid:Guid): void => {\r\n            // Find the field and visibility rules associated with it to\r\n            for (const section of sections) {\r\n                if (section.fields) {\r\n                    const existingFieldIndex = section.fields.findIndex(f => areEqual(f.guid, guid));\r\n\r\n                    // If the field is in this section, delete it\r\n                    if (existingFieldIndex !== -1) {\r\n                        section.fields.splice(existingFieldIndex, 1);\r\n                    }\r\n\r\n                    // Search the rest of the fields for visibility rules that use the field we're deleting\r\n                    for (const field of section.fields) {\r\n                        if (field.visibilityRule?.rules?.length) {\r\n                            field.visibilityRule.rules = field.visibilityRule.rules.filter(rule => rule.attributeGuid !== guid);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Find visibility rules on the section that may correspond with this field\r\n                if (section.visibilityRule?.rules?.length) {\r\n                    section.visibilityRule.rules = section.visibilityRule.rules.filter(rule => rule.attributeGuid !== guid);\r\n                }\r\n            }\r\n\r\n            if (areEqual(guid, editField.value?.guid ?? null)) {\r\n                closeAside();\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Event handler for when a section's settings have been updated in the\r\n         * aside.\r\n         *\r\n         * @param value The new section settings.\r\n         */\r\n        const onSectionEditUpdate = (value: SectionAsideSettings): void => {\r\n            sectionAsideSettings.value = value;\r\n\r\n            // Find the original section that was just updated and update its\r\n            // values.\r\n            for (const section of sections) {\r\n                if (areEqual(section.guid, value.guid)) {\r\n                    section.title = value.title;\r\n                    section.description = value.description;\r\n                    section.showHeadingSeparator = value.showHeadingSeparator;\r\n                    section.type = value.type;\r\n                    section.visibilityRule = value.visibilityRule;\r\n\r\n                    return;\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Event handler for when the edit section aside wants to delete the section.\r\n         */\r\n        const onSectionDelete = async (guid: Guid): Promise<void> => {\r\n            if (!(await confirmDelete(\"section\"))) {\r\n                return;\r\n            }\r\n\r\n            // Find the original section and delete it.\r\n            const existingSectionIndex = sections.findIndex(s => areEqual(s.guid, guid));\r\n\r\n            if (existingSectionIndex !== -1) {\r\n                const section = sections[existingSectionIndex];\r\n\r\n                // Delete all the fields from the section first so anything referencing the fields can be updated\r\n                if (section.fields) {\r\n                    const guids = section.fields.map(field => field.guid);\r\n                    for (const guid of guids) {\r\n                        deleteField(guid);\r\n                    }\r\n                }\r\n                sections.splice(existingSectionIndex, 1);\r\n            }\r\n\r\n            if (areEqual(guid, sectionAsideSettings.value?.guid ?? null)) {\r\n                closeAside();\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Event handler for when the person entry settings have been updated\r\n         * in the aside.\r\n         *\r\n         * @param value The new person entry settings.\r\n         */\r\n        const onEditPersonEntryUpdate = (value: FormPersonEntry): void => {\r\n            personEntryAsideSettings.value = value;\r\n        };\r\n\r\n        /**\r\n         * Event handler for when the form header content is saved.\r\n         */\r\n        const onFormHeaderSave = (): void => {\r\n            formHeaderContent.value = formHeaderEditContent.value;\r\n\r\n            closeAside();\r\n        };\r\n\r\n        /**\r\n         * Event handler for when the form footer content is saved.\r\n         */\r\n        const onFormFooterSave = (): void => {\r\n            formFooterContent.value = formFooterEditContent.value;\r\n\r\n            closeAside();\r\n        };\r\n\r\n        /**\r\n         * Event handler for when the validation state of the field edit aside has changed.\r\n         *\r\n         * @param errors Any errors that were detected on the form.\r\n         */\r\n        const onFieldEditValidationChanged = (errors: FormError[]): void => {\r\n            if (showFieldAside.value) {\r\n                emit(\"validationChanged\", errors);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Event handler for when the validation state of the section aside has changed.\r\n         *\r\n         * @param errors Any errors that were detected on the form.\r\n         */\r\n        const onSectionValidationChanged = (errors: FormError[]): void => {\r\n            if (showSectionAside.value) {\r\n                emit(\"validationChanged\", errors);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Event handler for when the validation state of the person entry aside has changed.\r\n         *\r\n         * @param errors Any errors that were detected on the form.\r\n         */\r\n        const onPersonEntryValidationChanged = (errors: FormError[]): void => {\r\n            if (showPersonEntryAside.value) {\r\n                emit(\"validationChanged\", errors);\r\n            }\r\n        };\r\n\r\n        // #endregion\r\n\r\n        // Wait for the body element to load and then update the drag options.\r\n        watch(bodyElement, () => {\r\n            sectionDragSourceOptions.mirrorContainer = bodyElement.value ?? undefined;\r\n            sectionReorderDragSourceOptions.mirrorContainer = bodyElement.value ?? undefined;\r\n            fieldDragSourceOptions.mirrorContainer = bodyElement.value ?? undefined;\r\n            fieldReorderDragSourceOptions.mirrorContainer = bodyElement.value ?? undefined;\r\n        });\r\n\r\n        // Watch for changes in the template override person entry setting. If\r\n        // it changes then we close the aside if the person entry aside is up.\r\n        watch(() => props.templateOverrides, (newValue, oldValue) => {\r\n            if ((newValue?.isPersonEntryConfigured ?? false) !== (oldValue?.isPersonEntryConfigured ?? false)) {\r\n                if (isPersonEntryActive.value) {\r\n                    closeAside();\r\n                }\r\n            }\r\n        });\r\n\r\n        // Watch for changes to our settings and emite the new modelValue.\r\n        watch([sections, formHeaderContent, formFooterContent, generalAsideSettings, personEntryAsideSettings], () => {\r\n            const newValue: FormBuilderSettings = {\r\n                allowPersonEntry: generalAsideSettings.value.hasPersonEntry,\r\n                campusSetFrom: generalAsideSettings.value.campusSetFrom,\r\n                footerContent: formFooterContent.value,\r\n                headerContent: formHeaderContent.value,\r\n                personEntry: personEntryAsideSettings.value,\r\n                sections: sections\r\n            };\r\n\r\n            emit(\"update:modelValue\", newValue);\r\n        });\r\n\r\n        // Any time the parent component tells us it has attempted to submit\r\n        // then we trigger the submit on our form so it updates the validation.\r\n        watch(() => props.submit, () => {\r\n            if (props.submit) {\r\n                // Trigger validation to be shown in the aside.\r\n                canCloseAside();\r\n            }\r\n        });\r\n\r\n        return {\r\n            activeZone,\r\n            availableFieldTypes,\r\n            bodyElement,\r\n            editField,\r\n            existingFields,\r\n            fieldDragSourceOptions,\r\n            fieldDragTargetId: fieldDragSourceOptions.id,\r\n            fieldEditAsideComponentInstance,\r\n            fieldReorderDragSourceOptions,\r\n            formFooterContent,\r\n            formFooterEditContent,\r\n            formHeaderContent,\r\n            formHeaderEditContent,\r\n            generalAsideComponentInstance,\r\n            generalAsideSettings,\r\n            hasPersonEntry,\r\n            isFormFooterActive,\r\n            isFormHeaderActive,\r\n            isPersonEntryActive,\r\n            isPersonEntryForced,\r\n            onAsideClose,\r\n            onConfigureField,\r\n            onConfigureFormHeader,\r\n            onConfigureFormFooter,\r\n            onConfigurePersonEntry,\r\n            onConfigureSection,\r\n            onFieldEditUpdate,\r\n            onEditPersonEntryUpdate,\r\n            onSectionEditUpdate,\r\n            onFieldDelete,\r\n            onFieldEditValidationChanged,\r\n            onFormFooterSave,\r\n            onFormHeaderSave,\r\n            onPersonEntryValidationChanged,\r\n            onSectionDelete,\r\n            onSectionValidationChanged,\r\n            personEntryAsideSettings,\r\n            personEntryEditAsideComponentInstance,\r\n            personEntryZoneIconClass,\r\n            sectionAsideSettings,\r\n            sectionDragSourceOptions,\r\n            sectionDragTargetId: sectionDragSourceOptions.id,\r\n            sectionReorderDragSourceOptions,\r\n            sectionTypeOptions,\r\n            sections,\r\n            showFieldAside,\r\n            showGeneralAside,\r\n            showPersonEntryAside,\r\n            showSectionAside,\r\n            templateFormFooterContent,\r\n            templateFormHeaderContent\r\n        };\r\n    },\r\n\r\n    template: `\r\n<div ref=\"bodyElement\" class=\"form-builder-grow\">\r\n\r\n    <GeneralAside v-if=\"showGeneralAside\"\r\n        v-model=\"generalAsideSettings\"\r\n        ref=\"generalAsideComponentInstance\"\r\n        :isPersonEntryForced=\"isPersonEntryForced\"\r\n        :fieldTypes=\"availableFieldTypes\"\r\n        :sectionDragOptions=\"sectionDragSourceOptions\"\r\n        :fieldDragOptions=\"fieldDragSourceOptions\" />\r\n\r\n    <FieldEditAside v-else-if=\"showFieldAside\"\r\n        :modelValue=\"editField\"\r\n        ref=\"fieldEditAsideComponentInstance\"\r\n        :fieldTypes=\"availableFieldTypes\"\r\n        :formFields=\"existingFields\"\r\n        @update:modelValue=\"onFieldEditUpdate\"\r\n        @close=\"onAsideClose\"\r\n        @validationChanged=\"onFieldEditValidationChanged\" />\r\n\r\n    <SectionEditAside v-else-if=\"showSectionAside\"\r\n        :modelValue=\"sectionAsideSettings\"\r\n        ref=\"sectionEditAsideComponentInstance\"\r\n        :formFields=\"existingFields\"\r\n        @update:modelValue=\"onSectionEditUpdate\"\r\n        @close=\"onAsideClose\"\r\n        @validationChanged=\"onSectionValidationChanged\" />\r\n\r\n    <PersonEntryEditAside v-else-if=\"showPersonEntryAside\"\r\n        :modelValue=\"personEntryAsideSettings\"\r\n        ref=\"personEntryEditAsideComponentInstance\"\r\n        @update:modelValue=\"onEditPersonEntryUpdate\"\r\n        @close=\"onAsideClose\"\r\n        @validationChanged=\"onPersonEntryValidationChanged\" />\r\n\r\n\r\n    <div class=\"form-layout\">\r\n        <FormContentZone v-if=\"templateFormHeaderContent\" :modelValue=\"templateFormHeaderContent\" placeholder=\"\" iconCssClass=\"\" />\r\n\r\n        <FormContentZone :modelValue=\"formHeaderContent\" :isActive=\"isFormHeaderActive\" @configure=\"onConfigureFormHeader\" placeholder=\"Form Header\" />\r\n\r\n        <ConfigurableZone v-if=\"hasPersonEntry\" :modelValue=\"isPersonEntryActive\" :iconCssClass=\"personEntryZoneIconClass\" @configure=\"onConfigurePersonEntry\">\r\n            <div class=\"zone-body\">\r\n                <div class=\"text-center text-muted\">Person Entry Form</div>\r\n            </div>\r\n        </ConfigurableZone>\r\n\r\n        <div class=\"form-layout-body\" v-drag-target=\"sectionDragTargetId\" v-drag-source=\"sectionReorderDragSourceOptions\" v-drag-target:2=\"sectionReorderDragSourceOptions.id\">\r\n            <SectionZone v-for=\"section in sections\"\r\n                :key=\"section.guid\"\r\n                v-model=\"section\"\r\n                :activeZone=\"activeZone\"\r\n                :dragTargetId=\"fieldDragTargetId\"\r\n                :reorderDragOptions=\"fieldReorderDragSourceOptions\"\r\n                :sectionTypeOptions=\"sectionTypeOptions\"\r\n                @configure=\"onConfigureSection(section)\"\r\n                @configureField=\"onConfigureField\"\r\n                @delete=\"onSectionDelete\"\r\n                @deleteField=\"onFieldDelete\">\r\n            </SectionZone>\r\n        </div>\r\n\r\n        <FormContentZone :modelValue=\"formFooterContent\" :isActive=\"isFormFooterActive\" @configure=\"onConfigureFormFooter\" placeholder=\"Form Footer\" />\r\n\r\n        <FormContentZone v-if=\"templateFormFooterContent\" :modelValue=\"templateFormFooterContent\" placeholder=\"\" iconCssClass=\"\" />\r\n    </div>\r\n</div>\r\n\r\n<FormContentModal v-model=\"formHeaderEditContent\" v-model:isVisible=\"isFormHeaderActive\" title=\"Form Header\" @save=\"onFormHeaderSave\" />\r\n\r\n<FormContentModal v-model=\"formFooterEditContent\" v-model:isVisible=\"isFormFooterActive\" title=\"Form Footer\" @save=\"onFormFooterSave\" />\r\n`\r\n});\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { computed, defineComponent, PropType, ref, watch } from \"vue\";\r\nimport CategoryPicker from \"@Obsidian/Controls/categoryPicker\";\r\nimport NotificationBox from \"@Obsidian/Controls/notificationBox.obs\";\r\nimport CheckBox from \"@Obsidian/Controls/checkBox\";\r\nimport DateTimePicker from \"@Obsidian/Controls/dateTimePicker\";\r\nimport DropDownList from \"@Obsidian/Controls/dropDownList\";\r\nimport InlineSwitch from \"@Obsidian/Controls/inlineSwitch\";\r\nimport TextBox from \"@Obsidian/Controls/textBox\";\r\nimport TransitionVerticalCollapse from \"@Obsidian/Controls/transitionVerticalCollapse\";\r\nimport { EntityType } from \"@Obsidian/SystemGuids/entityType\";\r\nimport { updateRefValue } from \"@Obsidian/Utility/component\";\r\nimport EmailSource from \"../Shared/emailSource\";\r\nimport SectionContainer from \"@Obsidian/Controls/sectionContainer\";\r\nimport { FormGeneral } from \"../Shared/types.partial\";\r\nimport { FormTemplateListItem } from \"./types.partial\";\r\nimport { useFormSources } from \"./utils.partial\";\r\n\r\n/**\r\n * Displays the UI for the General Settings section of the Settings screen.\r\n */\r\nexport default defineComponent({\r\n    name: \"Workflow.FormBuilderDetail.GeneralSettings\",\r\n\r\n    components: {\r\n        NotificationBox,\r\n        CategoryPicker,\r\n        CheckBox,\r\n        DateTimePicker,\r\n        DropDownList,\r\n        EmailSource,\r\n        InlineSwitch,\r\n        SectionContainer,\r\n        TextBox,\r\n        TransitionVerticalCollapse\r\n    },\r\n\r\n    props: {\r\n        modelValue: {\r\n            type: Object as PropType<FormGeneral>,\r\n            required: true\r\n        },\r\n\r\n        templateOverrides: {\r\n            type: Object as PropType<FormTemplateListItem>\r\n        }\r\n    },\r\n\r\n    emits: [\r\n        \"update:modelValue\"\r\n    ],\r\n\r\n    setup(props, { emit }) {\r\n        const sources = useFormSources();\r\n\r\n        const name = ref(props.modelValue.name ?? \"\");\r\n        const description = ref(props.modelValue.description ?? \"\");\r\n        const template = ref(props.modelValue.template ?? \"\");\r\n        const category = ref(props.modelValue.category ?? null);\r\n        const entryStarts = ref(props.modelValue.entryStarts ?? \"\");\r\n        const entryEnds = ref(props.modelValue.entryEnds ?? \"\");\r\n        const isLoginRequired = ref(props.modelValue.isLoginRequired ?? false);\r\n\r\n        const isLoginRequiredForced = computed((): boolean => props.templateOverrides?.isLoginRequiredConfigured ?? false);\r\n\r\n        // Watch for changes in our modelValue and then update all our internal values.\r\n        watch(() => props.modelValue, () => {\r\n            updateRefValue(name, props.modelValue.name ?? \"\");\r\n            updateRefValue(description, props.modelValue.description ?? \"\");\r\n            updateRefValue(template, props.modelValue.template ?? \"\");\r\n            updateRefValue(category, props.modelValue.category ?? null);\r\n            updateRefValue(entryStarts, props.modelValue.entryStarts ?? \"\");\r\n            updateRefValue(entryEnds, props.modelValue.entryEnds ?? \"\");\r\n        });\r\n\r\n        // Watch for changes on any of our internal values and then update the modelValue.\r\n        watch([name, description, template, category, isLoginRequired, entryStarts, entryEnds], () => {\r\n            const newValue: FormGeneral = {\r\n                ...props.modelValue,\r\n                name: name.value,\r\n                description: description.value,\r\n                template: template.value,\r\n                category: category.value,\r\n                isLoginRequired: isLoginRequired.value,\r\n                entryStarts: entryStarts.value,\r\n                entryEnds: entryEnds.value,\r\n            };\r\n\r\n            emit(\"update:modelValue\", newValue);\r\n        });\r\n\r\n        return {\r\n            category,\r\n            description,\r\n            entryStarts,\r\n            entryEnds,\r\n            isLoginRequired,\r\n            isLoginRequiredForced,\r\n            name,\r\n            template,\r\n            templateOptions: sources.formTemplateOptions,\r\n            workflowTypeEntityTypeGuid: EntityType.WorkflowType\r\n        };\r\n    },\r\n\r\n    template: `\r\n<SectionContainer title=\"General Settings\"\r\n    description=\"Update the general settings for the form below.\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-6\">\r\n            <div>\r\n                <TextBox v-model=\"name\"\r\n                    label=\"Form Name\"\r\n                    rules=\"required\" />\r\n\r\n                <TextBox v-model=\"description\"\r\n                    label=\"Description\"\r\n                    textMode=\"multiline\" />\r\n\r\n                <DropDownList v-model=\"template\"\r\n                    label=\"Template\"\r\n                    :items=\"templateOptions\" />\r\n\r\n                <CategoryPicker v-model=\"category\"\r\n                    label=\"Category\"\r\n                    rules=\"required\"\r\n                    :entityTypeGuid=\"workflowTypeEntityTypeGuid\" />\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <CheckBox v-if=\"!isLoginRequiredForced\" v-model=\"isLoginRequired\"\r\n        label=\"Is Login Required\"\r\n        help=\"Determines if a person needs to be logged in to complete the form.\" />\r\n\r\n    <NotificationBox v-else alertType=\"info\">\r\n        The template has enforced the login required setting.\r\n    </NotificationBox>\r\n\r\n    <div class=\"row\">\r\n        <div class=\"col-md-6\">\r\n            <DateTimePicker v-model=\"entryStarts\"\r\n                label=\"Form Entry Starts\" />\r\n        </div>\r\n\r\n        <div class=\"col-md-6\">\r\n            <DateTimePicker v-model=\"entryEnds\"\r\n                label=\"Form Entry Ends\" />\r\n        </div>\r\n    </div>\r\n</SectionContainer>\r\n`\r\n});\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { computed, defineComponent, ref, PropType, watch } from \"vue\";\r\nimport RockForm from \"@Obsidian/Controls/rockForm\";\r\nimport NotificationBox from \"@Obsidian/Controls/notificationBox.obs\";\r\nimport { useVModelPassthrough } from \"@Obsidian/Utility/component\";\r\nimport CompletionSettings from \"../Shared/completionSettings\";\r\nimport GeneralSettings from \"./generalSettings.partial\";\r\nimport { FormCompletionAction, FormGeneral } from \"../Shared/types.partial\";\r\nimport { FormTemplateListItem } from \"./types.partial\";\r\nimport { FormError } from \"@Obsidian/Utility/form\";\r\n\r\nexport default defineComponent({\r\n    name: \"Workflow.FormBuilderDetail.SettingsTab\",\r\n\r\n    components: {\r\n        NotificationBox,\r\n        GeneralSettings,\r\n        CompletionSettings,\r\n        RockForm\r\n    },\r\n\r\n    props: {\r\n        modelValue: {\r\n            type: Object as PropType<FormGeneral>,\r\n            required: true\r\n        },\r\n\r\n        completion: {\r\n            type: Object as PropType<FormCompletionAction>,\r\n            required: true\r\n        },\r\n\r\n        templateOverrides: {\r\n            type: Object as PropType<FormTemplateListItem>\r\n        },\r\n\r\n        submit: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        }\r\n    },\r\n\r\n    emits: [\r\n        \"update:modelValue\",\r\n        \"update:completion\",\r\n        \"validationChanged\"\r\n    ],\r\n\r\n    setup(props, { emit }) {\r\n        const generalSettings = useVModelPassthrough(props, \"modelValue\", emit);\r\n        const completionSettings = useVModelPassthrough(props, \"completion\", emit);\r\n        const formSubmit = ref(false);\r\n\r\n        const isConfirmationForced = computed((): boolean => props.templateOverrides?.isConfirmationEmailConfigured ?? false);\r\n\r\n        /**\r\n         * Event handler for when the validation state of the form has changed.\r\n         *\r\n         * @param errors Any errors that were detected on the form.\r\n         */\r\n        const onValidationChanged = (errors: FormError[]): void => {\r\n            emit(\"validationChanged\", errors);\r\n        };\r\n\r\n        // Any time the parent component tells us it has attempted to submit\r\n        // then we trigger the submit on our form so it updates the validation.\r\n        watch(() => props.submit, () => {\r\n            if (props.submit) {\r\n                formSubmit.value = true;\r\n            }\r\n        });\r\n\r\n        return {\r\n            completionSettings,\r\n            formSubmit,\r\n            generalSettings,\r\n            isConfirmationForced,\r\n            onValidationChanged\r\n        };\r\n    },\r\n\r\n    template: `\r\n<div class=\"form-builder-scroll\">\r\n    <div class=\"panel-body\">\r\n        <RockForm v-model:submit=\"formSubmit\" @validationChanged=\"onValidationChanged\">\r\n            <GeneralSettings v-model=\"generalSettings\" :templateOverrides=\"templateOverrides\" />\r\n\r\n            <CompletionSettings v-if=\"!isConfirmationForced\" v-model=\"completionSettings\" />\r\n            <NotificationBox v-else alertType=\"info\">\r\n                <h4 class=\"alert-heading\">Confirmation Email</h4>\r\n                <p>\r\n                    The completion action is defined on the template and cannot be changed.\r\n                </p>\r\n            </NotificationBox>\r\n        </RockForm>\r\n    </div>\r\n</div>\r\n`\r\n});\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { nextTick } from \"vue\";\r\nimport { computed, defineComponent, ref, watch } from \"vue\";\r\nimport NotificationBox from \"@Obsidian/Controls/notificationBox.obs\";\r\nimport Panel from \"@Obsidian/Controls/panel\";\r\nimport RockButton from \"@Obsidian/Controls/rockButton\";\r\nimport { FieldType } from \"@Obsidian/SystemGuids/fieldType\";\r\nimport { useConfigurationValues, useInvokeBlockAction } from \"@Obsidian/Utility/block\";\r\nimport { FormError } from \"@Obsidian/Utility/form\";\r\nimport { areEqual } from \"@Obsidian/Utility/guid\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport CommunicationsTab from \"./FormBuilderDetail/communicationsTab.partial\";\r\nimport FormBuilderTab from \"./FormBuilderDetail/formBuilderTab.partial\";\r\nimport SettingsTab from \"./FormBuilderDetail/settingsTab.partial\";\r\nimport { FormBuilderDetailConfiguration, FormBuilderSettings, FormCommunication, FormTemplateListItem } from \"./FormBuilderDetail/types.partial\";\r\nimport { provideFormSources } from \"./FormBuilderDetail/utils.partial\";\r\nimport { FormCompletionAction, FormGeneral } from \"./Shared/types.partial\";\r\n\r\nexport default defineComponent({\r\n    name: \"WorkFlow.FormBuilderDetail\",\r\n\r\n    components: {\r\n        NotificationBox,\r\n        CommunicationsTab,\r\n        FormBuilderTab,\r\n        Panel,\r\n        RockButton,\r\n        SettingsTab\r\n    },\r\n\r\n    setup() {\r\n        const config = useConfigurationValues<FormBuilderDetailConfiguration>();\r\n\r\n        const invokeBlockAction = useInvokeBlockAction();\r\n\r\n        const form = config.form ?? {};\r\n\r\n        const isFormDirty = ref(false);\r\n\r\n        const selectedTab = ref(0);\r\n\r\n        const recipientOptions = ref<ListItemBag[]>([]);\r\n\r\n        const communicationsViewModel = ref<FormCommunication>({\r\n            confirmationEmail: form.confirmationEmail ?? {},\r\n            notificationEmail: form.notificationEmail ?? {}\r\n        });\r\n\r\n        const generalViewModel = ref<FormGeneral>(form.general ?? {});\r\n\r\n        const blockTitle = computed((): string => {\r\n            return generalViewModel.value?.name + \" Form\" ?? \"Workflow Form Builder\";\r\n        });\r\n\r\n        const completionViewModel = ref<FormCompletionAction>(form.completion ?? {});\r\n\r\n        const builderViewModel = ref<FormBuilderSettings>({\r\n            allowPersonEntry: form.allowPersonEntry,\r\n            campusSetFrom: form.campusSetFrom,\r\n            footerContent: form.footerContent,\r\n            headerContent: form.headerContent,\r\n            personEntry: form.personEntry,\r\n            sections: form.sections\r\n        });\r\n\r\n        const blockError = ref(\"\");\r\n\r\n        const formSubmit = ref(false);\r\n        const communicationsValidationErrors = ref<FormError[]>([]);\r\n        const formBuilderValidationErrors = ref<FormError[]>([]);\r\n        const settingsValidationErrors = ref<FormError[]>([]);\r\n\r\n        const isFormBuilderTabSelected = computed((): boolean => selectedTab.value === 0);\r\n        const isCommunicationsTabSelected = computed((): boolean => selectedTab.value === 1);\r\n        const isSettingsTabSelected = computed((): boolean => selectedTab.value === 2);\r\n\r\n        const formBuilderContainerStyle = computed((): Record<string, string> => {\r\n            return {\r\n                display: isFormBuilderTabSelected.value ? \"flex\" : \"none\"\r\n            };\r\n        });\r\n\r\n        const communicationsContainerStyle = computed((): Record<string, string> => {\r\n            return {\r\n                display: isCommunicationsTabSelected.value ? \"flex\" : \"none\"\r\n            };\r\n        });\r\n\r\n        const settingsContainerStyle = computed((): Record<string, string> => {\r\n            return {\r\n                display: isSettingsTabSelected.value ? \"flex\" : \"none\"\r\n            };\r\n        });\r\n\r\n        const selectedTemplate = computed((): FormTemplateListItem | null => {\r\n            const matches = config.sources?.formTemplateOptions?.filter(t => areEqual(t.value, form.general?.template));\r\n\r\n            return matches && matches.length > 0 ? matches[0] : null;\r\n        });\r\n\r\n        const onFormBuilderTabClick = (): void => {\r\n            selectedTab.value = 0;\r\n        };\r\n\r\n        const onCommunicationsTabClick = (): void => {\r\n            selectedTab.value = 1;\r\n        };\r\n\r\n        const onSettingsTabClick = (): void => {\r\n            selectedTab.value = 2;\r\n        };\r\n\r\n        const onSaveClick = async (): Promise<void> => {\r\n            // Trigger the submit for validation purposes and then on the next\r\n            // UI pass turn it back off.\r\n            formSubmit.value = true;\r\n            nextTick(() => formSubmit.value = false);\r\n\r\n            if (formBuilderValidationErrors.value.length > 0) {\r\n                onFormBuilderTabClick();\r\n                return;\r\n            }\r\n\r\n            if (communicationsValidationErrors.value.length > 0) {\r\n                onCommunicationsTabClick();\r\n                return;\r\n            }\r\n\r\n            if (settingsValidationErrors.value.length > 0) {\r\n                onSettingsTabClick();\r\n                return;\r\n            }\r\n\r\n            const result = await invokeBlockAction(\"SaveForm\", {\r\n                formGuid: config.formGuid,\r\n                formSettings: form\r\n            });\r\n\r\n            if (!result.isSuccess) {\r\n                alert(result.errorMessage ?? \"Failed to save.\");\r\n            }\r\n            else {\r\n                isFormDirty.value = false;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Updates the recipientOptions value with a new list of recipients.\r\n         * This should be called any time an attribute is changed so that\r\n         * the list can be updated in case that attribute is now one of the\r\n         * possible types.\r\n         */\r\n        const updateRecipientOptions = (): void => {\r\n            const options: ListItemBag[] = [];\r\n\r\n            // Include attributes from the main workflow.\r\n            if (config.otherAttributes) {\r\n                for (const attribute of config.otherAttributes) {\r\n                    if (!attribute.guid || !attribute.fieldTypeGuid || !attribute.name) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (areEqual(attribute.fieldTypeGuid, FieldType.Person) || areEqual(attribute.fieldTypeGuid, FieldType.Email)) {\r\n                        options.push({\r\n                            value: attribute.guid,\r\n                            text: attribute.name\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            // If we have any sections defined, then include attributes from\r\n            // the sections that match our criteria.\r\n            if (form.sections) {\r\n                for (const section of form.sections) {\r\n                    if (!section.fields) {\r\n                        continue;\r\n                    }\r\n\r\n                    for (const field of section.fields) {\r\n                        if (areEqual(field.fieldTypeGuid, FieldType.Person) || areEqual(field.fieldTypeGuid, FieldType.Email)) {\r\n                            options.push({\r\n                                value: field.guid,\r\n                                text: field.name\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Sort everything to be alphabetical.\r\n            options.sort((a, b) => {\r\n                if ((a.text ?? \"\") < (b.text ?? \"\")) {\r\n                    return -1;\r\n                }\r\n                else if ((a.text ?? \"\") > (b.text ?? \"\")) {\r\n                    return 1;\r\n                }\r\n                else {\r\n                    return 0;\r\n                }\r\n            });\r\n\r\n            recipientOptions.value = options;\r\n        };\r\n\r\n        /**\r\n         * Event handler called before the page unloads. This handler is\r\n         * added whenever the form is dirty and needs to be saved.\r\n         *\r\n         * @param event The event that was raised.\r\n         */\r\n        const onBeforeUnload = (event: BeforeUnloadEvent): void => {\r\n            event.preventDefault();\r\n            event.returnValue = \"\";\r\n        };\r\n\r\n        /**\r\n         * Event handler for when the validation state of the communications tab has changed.\r\n         *\r\n         * @param errors Any errors that were detected on the form.\r\n         */\r\n        const onCommunicationsValidationChanged = (errors: FormError[]): void => {\r\n            communicationsValidationErrors.value = errors;\r\n        };\r\n\r\n        /**\r\n         * Event handler for when the validation state of the form builder tab has changed.\r\n         *\r\n         * @param errors Any errors that were detected on the form.\r\n         */\r\n        const onFormBuilderValidationChanged = (errors: FormError[]): void => {\r\n            formBuilderValidationErrors.value = errors;\r\n        };\r\n\r\n        /**\r\n         * Event handler for when the validation state of the settings tab has changed.\r\n         *\r\n         * @param errors Any errors that were detected on the form.\r\n         */\r\n        const onSettingsValidationChanged = (errors: FormError[]): void => {\r\n            settingsValidationErrors.value = errors;\r\n        };\r\n\r\n        // Watch for changes to our internal values and update the modelValue.\r\n        watch([builderViewModel, communicationsViewModel, generalViewModel, completionViewModel], () => {\r\n            form.allowPersonEntry = builderViewModel.value.allowPersonEntry;\r\n            form.campusSetFrom = builderViewModel.value.campusSetFrom;\r\n            form.footerContent = builderViewModel.value.footerContent;\r\n            form.headerContent = builderViewModel.value.headerContent;\r\n            form.personEntry = builderViewModel.value.personEntry;\r\n            form.sections = builderViewModel.value.sections;\r\n\r\n            form.general = generalViewModel.value;\r\n            form.completion = completionViewModel.value;\r\n\r\n            form.confirmationEmail = communicationsViewModel.value.confirmationEmail;\r\n            form.notificationEmail = communicationsViewModel.value.notificationEmail;\r\n\r\n            updateRecipientOptions();\r\n            isFormDirty.value = true;\r\n        });\r\n\r\n        // Watch for changes in the form dirty state and remove/install our\r\n        // handle to prevent accidentally navigating away from the page.\r\n        watch(isFormDirty, () => {\r\n            window.removeEventListener(\"beforeunload\", onBeforeUnload);\r\n\r\n            if (isFormDirty.value) {\r\n                window.addEventListener(\"beforeunload\", onBeforeUnload);\r\n            }\r\n        });\r\n\r\n        provideFormSources(config.sources ?? {});\r\n        updateRecipientOptions();\r\n\r\n        if (!config.formGuid || !config.form) {\r\n            blockError.value = \"That form does not exist or it can't be edited.\";\r\n        }\r\n\r\n        // Set initially selected tab.\r\n        const queryString = new URLSearchParams(window.location.search.toLowerCase());\r\n        if (queryString.has(\"tab\")) {\r\n            const tab = queryString.get(\"tab\");\r\n\r\n            if (tab === \"communications\") {\r\n                selectedTab.value = 1;\r\n            }\r\n            else if (tab === \"settings\") {\r\n                selectedTab.value = 2;\r\n            }\r\n        }\r\n\r\n        return {\r\n            analyticsPageUrl: config.analyticsPageUrl,\r\n            blockError,\r\n            builderViewModel,\r\n            communicationsContainerStyle,\r\n            communicationsValidationErrors,\r\n            communicationsViewModel,\r\n            completionViewModel,\r\n            formBuilderContainerStyle,\r\n            formSubmit,\r\n            isCommunicationsTabSelected,\r\n            isFormBuilderTabSelected,\r\n            isFormDirty,\r\n            isSettingsTabSelected,\r\n            settingsContainerStyle,\r\n            generalViewModel,\r\n            blockTitle,\r\n            submissionsPageUrl: config.submissionsPageUrl,\r\n            onCommunicationsTabClick,\r\n            onCommunicationsValidationChanged,\r\n            onFormBuilderTabClick,\r\n            onFormBuilderValidationChanged,\r\n            onSaveClick,\r\n            onSettingsTabClick,\r\n            onSettingsValidationChanged,\r\n            recipientOptions,\r\n            selectedTemplate\r\n        };\r\n    },\r\n\r\n    template: `\r\n<NotificationBox v-if=\"blockError\" alertType=\"warning\">\r\n    {{ blockError }}\r\n</NotificationBox>\r\n\r\n<Panel v-else type=\"block\" hasFullscreen :title=\"blockTitle\" titleIconCssClass=\"fa fa-poll-h\">\r\n    <template #default>\r\n\r\n        <div ref=\"bodyElement\" class=\"panel-flex-fill-body styled-scroll\">\r\n            <div class=\"panel-toolbar panel-toolbar-shadow\">\r\n                <ul class=\"nav nav-pills nav-sm\">\r\n                    <li role=\"presentation\"><a :href=\"submissionsPageUrl\">Submissions</a></li>\r\n                    <li :class=\"{ active: isFormBuilderTabSelected }\" role=\"presentation\"><a href=\"#\" @click.prevent=\"onFormBuilderTabClick\">Form Builder</a></li>\r\n                    <li :class=\"{ active: isCommunicationsTabSelected }\" role=\"presentation\"><a href=\"#\" @click.prevent=\"onCommunicationsTabClick\">Communications</a></li>\r\n                    <li :class=\"{ active: isSettingsTabSelected }\" role=\"presentation\"><a href=\"#\" @click.prevent=\"onSettingsTabClick\">Settings</a></li>\r\n                    <li role=\"presentation\"><a :href=\"analyticsPageUrl\">Analytics</a></li>\r\n                </ul>\r\n\r\n                <RockButton btnType=\"primary\" btnSize=\"sm\" :disabled=\"!isFormDirty\" @click=\"onSaveClick\">Save</RockButton>\r\n            </div>\r\n\r\n            <div class=\"form-builder-container form-builder-grow\" :style=\"formBuilderContainerStyle\">\r\n                <FormBuilderTab v-model=\"builderViewModel\"\r\n                    :templateOverrides=\"selectedTemplate\"\r\n                    :submit=\"formSubmit\"\r\n                    @validationChanged=\"onFormBuilderValidationChanged\" />\r\n            </div>\r\n\r\n            <div class=\"communications-container form-builder-grow\" :style=\"communicationsContainerStyle\">\r\n                <CommunicationsTab v-model=\"communicationsViewModel\"\r\n                    :recipientOptions=\"recipientOptions\"\r\n                    :templateOverrides=\"selectedTemplate\"\r\n                    :submit=\"formSubmit\"\r\n                    @validationChanged=\"onCommunicationsValidationChanged\" />\r\n            </div>\r\n\r\n            <div class=\"settings-container form-builder-grow\" :style=\"settingsContainerStyle\">\r\n                <SettingsTab v-model=\"generalViewModel\"\r\n                    v-model:completion=\"completionViewModel\"\r\n                    :templateOverrides=\"selectedTemplate\"\r\n                    :submit=\"formSubmit\"\r\n                    @validationChanged=\"onSettingsValidationChanged\" />\r\n            </div>\r\n        </div>\r\n    </template>\r\n</Panel>\r\n`\r\n});\r\n"],"names":["FormFieldVisibility","FormEmailSourceType","FormNotificationEmailDestination","FormCompletionActionType","CampusSetFrom","notificationDestinationOptions","value","SpecificIndividual","toString","text","EmailAddress","CampusTopic","defineComponent","name","components","DropDownList","EmailBox","EmailSource","PersonPicker","SegmentedPicker","SectionContainer","TextBox","props","modelValue","type","Object","required","sourceTemplateOptions","Array","default","campusTopicOptions","emits","setup","_ref","_props$modelValue$ena","_props$modelValue$des","_props$modelValue$des2","_props$modelValue$rec","_props$modelValue$ema","_props$modelValue$cam","_props$modelValue$sou","emit","enabled","ref","destination","recipient","emailAddress","campusTopicGuid","source","isDestinationSpecificIndividual","computed","isDestinationEmailAddress","isDestinationCampusTopic","watch","_props$modelValue$ena2","_props$modelValue$des3","_props$modelValue$des4","_props$modelValue$rec2","_props$modelValue$ema2","_props$modelValue$cam2","_props$modelValue$sou2","_toNumberOrNull","newValue","_objectSpread","toNumberOrNull","destinationOptions","template","sourcesKey","Symbol","provideFormSources","options","provide","useFormSources","_inject","inject","getFilterGroupTitle","group","expressionType","FilterExpressionType","GroupAll","GroupAny","GroupAllFalse","GroupAnyFalse","getFilterRuleDescription","rule","sources","fields","ruleField","filter","f","areEqual","guid","attributeGuid","ruleSource","s","length","attribute","fieldType","getFieldType","fieldTypeGuid","_rule$value","_ruleSource$0$attribu","descr","getFilterValueDescription","comparisonType","configurationValues","concat","timeoutAsync","ms","Promise","_resolve","reject","setTimeout","NotificationBox","ConfirmationEmail","NotificationEmail","RockForm","recipientOptions","templateOverrides","submit","Boolean","_props$modelValue$con","_props$modelValue$not","_sources$emailTemplat","_sources$campusTopicO","confirmationEmail","notificationEmail","formSubmit","emailTemplateOptions","isConfirmationEmailForced","_props$templateOverri","_props$templateOverri2","isConfirmationEmailConfigured","onValidationChanged","errors","_props$modelValue$con2","_props$modelValue$not2","iconCssClass","String","clickBodyToConfigure","zoneClasses","classes","push","onActionClick","onBodyActionClick","shallowStrictEqual","a","b","aKeys","keys","bKeys","_i","_aKeys","key","includes","Panel","FieldFilterEditor","FieldTypeEditor","InlineSwitch","LoadingIndicator","Modal","NumberBox","RockButton","RangeSlider","formFields","methods","isSafeToClose","result","validationErrors","scrollableElement","scroll","behavior","top","_useFormSources$field","_props$modelValue$isR","_props$modelValue$isH","_props$modelValue$isS","_props$modelValue$vis","_props$modelValue$def","invokeBlockAction","useInvokeBlockAction","fieldTypes","conditionalSourcesLoadAttempted","fieldName","fieldDescription","description","fieldKey","fieldSize","size","isFieldRequired","isRequired","isFieldLabelHidden","isHideLabel","isShowOnGrid","visibilityRule","fieldTypeValue","defaultValue","conditionalModel","conditionalSources","conditionalPanelOpen","conditionalModalOpen","fieldTypeEditorKey","_List$firstOrUndefine","List","firstOrUndefined","asideIconSvg","_fieldType$value$svg","_fieldType$value","svg","fieldKeyRules","rules","map","valueString","hasConditions","_visibilityRule$value","conditionalTitle","conditionalRules","_visibilityRule$value2","_visibilityRule$value3","isConditionalsLoading","getRuleDescription","_conditionalSources$v","loadConditionalSources","_ref2","_asyncToGenerator","getFilterSources","race","isSuccess","data","apply","arguments","onBackClick","onFieldTypeModelValueUpdate","onConditionalEditClick","_ref3","onConditionalSave","oldValue","oldValueAsKey","replace","_props$modelValue$isR2","_props$modelValue$isH2","_props$modelValue$isS2","_props$modelValue$vis2","_fieldTypeValue$value","isConfigChanged","_props$modelValue$con3","_props$modelValue$def2","ConfigurableZone","isVisible","internalValue","useVModelPassthrough","submitForm","contentTextBox","onStartSave","onSubmitForm","nextTick","input","querySelector","focus","placeholder","isActive","hasContent","safeContent","div","document","createElement","innerHTML","onConfigure","campusSetFromOptions","CurrentPerson","WorkflowPerson","QueryString","RockField","RockLabel","Switch","TransitionVerticalCollapse","directives","DragSource","sectionDragOptions","fieldDragOptions","isPersonEntryForced","_props$modelValue$has","campusSetFrom","hasPersonEntry","isAdditionalFieldsVisible","commonFieldTypes","isCommon","advancedFieldTypes","additionalFieldsClass","autoSyncModelValue","onAdditionalFieldsClick","_props$modelValue$cam3","_props$modelValue$cam4","_props$modelValue$has2","undefined","PersonEntrySettings","_options$addressTypeO","_options$campusStatus","_options$campusTypeOp","_options$connectionSt","_options$recordStatus","addressTypeOptions","campusStatusOptions","campusTypeOptions","connectionStatusOptions","recordStatusOptions","_props$modelValue$typ","_useFormSources$secti","title","showHeadingSeparator","sectionType","sectionTypeOptions","_props$modelValue$typ2","getAttributeFromField","field","_field$isHideLabel","_field$isRequired","_field$description","newGuid","order","categories","fieldWrapper","deep","FieldWrapper","DragTarget","dragTargetId","reorderDragOptions","activeZone","sectionGuid","showSeparator","sectionTypeClass","sectionTypeValue","matches","t","_matches$0$category","category","isSectionActive","getFieldColumnSize","isFieldActive","onConfigureField","onDelete","onDeleteField","console","log","getSectionDragSourceOptions","sections","defaultSectionType","id","copyElement","dragDrop","operation","element","remove","targetIndex","splice","getFieldDragSourceOptions","availableFieldTypes","dragOver","targetContainer","HTMLElement","_operation$targetCont","closest","classList","add","dragOut","_operation$targetCont2","dragShadow","shadow","_dataset$fieldType","_dataset$sectionId","dataset","sectionId","section","existingKeys","_iterator","_createForOfIteratorHelper","_step","n","done","sect","_iterator2","_step2","err","e","baseKey","keyCount","getFieldReorderDragSourceOptions","handleSelector","_operation$targetCont3","_operation$targetCont4","_dataset$sectionId2","_dataset$sectionId3","sourceSectionGuid","sourceContainer","targetSectionGuid","sourceSection","targetSection","sourceIndex","getSectionReorderDragSourceOptions","formHeaderZoneGuid","formFooterZoneGuid","personEntryZoneGuid","FieldEditAside","FormContentModal","FormContentZone","GeneralAside","PersonEntryEditAside","SectionEditAside","SectionZone","_sources$sectionTypeO","_props$modelValue$sec","_props$modelValue$hea","_props$modelValue$foo","_sources$fieldTypes","_props$modelValue$per","_sources$defaultSecti","reactive","formHeaderContent","headerContent","formFooterContent","footerContent","formHeaderEditContent","formFooterEditContent","generalAsideSettings","allowPersonEntry","sectionAsideSettings","personEntryAsideSettings","personEntry","sectionDragSourceOptions","sectionReorderDragSourceOptions","fieldDragSourceOptions","fieldReorderDragSourceOptions","bodyElement","shallowRef","generalAsideComponentInstance","personEntryAsideComponentInstance","sectionEditAsideComponentInstance","fieldEditAsideComponentInstance","personEntryEditAsideComponentInstance","editField","activeAside","showGeneralAside","showFieldAside","showSectionAside","showPersonEntryAside","_generalAsideSettings","isPersonEntryConfigured","isFormHeaderActive","get","set","closeAside","isFormFooterActive","isPersonEntryActive","_props$templateOverri3","_props$templateOverri4","personEntryZoneIconClass","templateFormHeaderContent","_props$templateOverri5","_props$templateOverri6","formHeader","templateFormFooterContent","_props$templateOverri7","_props$templateOverri8","formFooter","existingFields","_iterator3","_step3","_iterator4","_step4","canCloseAside","onConfigureFormHeader","onConfigureFormFooter","onConfigurePersonEntry","onConfigureSection","_section$title","_section$description","_section$showHeadingS","_section$type","_iterator5","_step5","_section$fields","_iterator6","_step6","existingField","onAsideClose","onFieldEditUpdate","_iterator7","_step7","existingFieldIndex","findIndex","onFieldDelete","confirmDelete","deleteField","_x","_editField$value$guid","_editField$value","_iterator8","_step8","_section$visibilityRu","_section$visibilityRu2","_iterator9","_step9","_field$visibilityRule","_field$visibilityRule2","onSectionEditUpdate","_iterator10","_step10","onSectionDelete","_sectionAsideSettings","_sectionAsideSettings2","existingSectionIndex","guids","_iterator11","_step11","_x2","onEditPersonEntryUpdate","onFormHeaderSave","onFormFooterSave","onFieldEditValidationChanged","onSectionValidationChanged","onPersonEntryValidationChanged","_bodyElement$value","_bodyElement$value2","_bodyElement$value3","_bodyElement$value4","mirrorContainer","_newValue$isPersonEnt","_oldValue$isPersonEnt","fieldDragTargetId","sectionDragTargetId","CategoryPicker","CheckBox","DateTimePicker","_props$modelValue$nam","_props$modelValue$tem","_props$modelValue$cat","_props$modelValue$ent","_props$modelValue$ent2","_props$modelValue$isL","entryStarts","entryEnds","isLoginRequired","isLoginRequiredForced","isLoginRequiredConfigured","_props$modelValue$nam2","_props$modelValue$tem2","_props$modelValue$cat2","_props$modelValue$ent3","_props$modelValue$ent4","updateRefValue","templateOptions","formTemplateOptions","workflowTypeEntityTypeGuid","EntityType","WorkflowType","GeneralSettings","CompletionSettings","completion","generalSettings","completionSettings","isConfirmationForced","CommunicationsTab","FormBuilderTab","SettingsTab","_config$form","_form$confirmationEma","_form$notificationEma","_form$general","_form$completion","_config$sources2","config","useConfigurationValues","form","isFormDirty","selectedTab","communicationsViewModel","generalViewModel","general","blockTitle","_generalViewModel$val","completionViewModel","builderViewModel","blockError","communicationsValidationErrors","formBuilderValidationErrors","settingsValidationErrors","isFormBuilderTabSelected","isCommunicationsTabSelected","isSettingsTabSelected","formBuilderContainerStyle","display","communicationsContainerStyle","settingsContainerStyle","selectedTemplate","_config$sources","_config$sources$formT","_form$general2","onFormBuilderTabClick","onCommunicationsTabClick","onSettingsTabClick","onSaveClick","formGuid","formSettings","_result$errorMessage","alert","errorMessage","updateRecipientOptions","otherAttributes","FieldType","Person","Email","sort","_a$text","_b$text","_a$text2","_b$text2","onBeforeUnload","event","preventDefault","returnValue","onCommunicationsValidationChanged","onFormBuilderValidationChanged","onSettingsValidationChanged","window","removeEventListener","addEventListener","queryString","URLSearchParams","location","search","toLowerCase","has","tab","analyticsPageUrl","submissionsPageUrl"],"mappings":"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"}