{"version":3,"file":"stepFlow.js","sources":["../../../src/Engagement/Steps/StepFlow/flowNodeDiagram.partial.ts","../../../src/Engagement/Steps/stepFlow.ts"],"sourcesContent":["// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { computed, defineComponent, PropType, reactive } from \"vue\";\r\nimport { toDecimalPlaces } from \"@Obsidian/Utility/numberUtils\";\r\n\r\nimport { FlowNodeDiagramNodeBag } from \"@Obsidian/ViewModels/Blocks/Engagement/Steps/flowNodeDiagramNodeBag\";\r\nimport { FlowNodeDiagramEdgeBag } from \"@Obsidian/ViewModels/Blocks/Engagement/Steps/flowNodeDiagramEdgeBag\";\r\nimport { FlowNodeDiagramSettingsBag } from \"@Obsidian/ViewModels/Blocks/Engagement/Steps/flowNodeDiagramSettingsBag\";\r\n\r\ntype Point = { x: number; y: number };\r\ntype Rectangle = Point & { width: number; height: number };\r\ntype Path = { sourcePoint: Point, targetPoint: Point, thickness: number };\r\n\r\ntype FlowDiagramInFlow = FlowNodeDiagramEdgeBag & Path;\r\ntype FlowDiagramLevelNode = FlowNodeDiagramNodeBag & Rectangle & {\r\n    totalUnits: number;\r\n    inFlows: FlowDiagramInFlow[];\r\n};\r\n\r\ntype FlowDiagramLevel = FlowDiagramLevelNode[];\r\ntype FlowDiagramData = FlowDiagramLevel[];\r\n\r\ntype NonNullValues<T> = { [P in keyof T]: NonNullable<T[P]> };\r\ntype FlowNodeDiagramSettingsFull = NonNullValues<Required<FlowNodeDiagramSettingsBag>>;\r\n\r\nconst defaultSettings: FlowNodeDiagramSettingsFull = {\r\n    nodeWidth: 12,\r\n    nodeVerticalSpacing: 12,\r\n    chartWidth: 1200,\r\n    chartHeight: 900,\r\n    legendHtml: \"\"\r\n};\r\n\r\nfunction round(num: number): number {\r\n    return toDecimalPlaces(num, 2);\r\n}\r\n\r\n/**\r\n * Component for displaying a whole level's nodes and flows in the diagram.\r\n * Used by the FlowNodeDiagram component defined below it.\r\n */\r\nconst FlowNodeDiagramLevel = defineComponent({ // eslint-disable-line @typescript-eslint/naming-convention\r\n    name: \"FlowNodeDiagramLevel\",\r\n\r\n    props: {\r\n        levelData: {\r\n            type: Array as PropType<FlowDiagramLevel>,\r\n            required: true\r\n        },\r\n        levelNumber: {\r\n            type: Number as PropType<number>,\r\n            required: true\r\n        }\r\n    },\r\n\r\n    events: {\r\n        showTooltip: (_html?: string, _e?: MouseEvent) => true\r\n    },\r\n\r\n    setup(props, { emit }) {\r\n        const visibleNodes = computed(() => {\r\n            return props.levelData.filter(node => node.height > 0);\r\n        });\r\n\r\n        // Construct path dimensions and coordinates for a flow\r\n        function flowPoints({ sourcePoint, targetPoint, thickness }: FlowDiagramInFlow): string {\r\n            const oneThirdX = round((targetPoint.x - sourcePoint.x) / 3) + sourcePoint.x;\r\n            const twoThirdsX = round((targetPoint.x - sourcePoint.x) * 2 / 3) + sourcePoint.x;\r\n            const sourceBottom = sourcePoint.y + thickness;\r\n            const targetBottom = targetPoint.y + thickness;\r\n\r\n            const start = `M${sourcePoint.x} ${sourcePoint.y}`;\r\n            const curve1 = `C${oneThirdX} ${sourcePoint.y} ${twoThirdsX} ${targetPoint.y} ${targetPoint.x} ${targetPoint.y}`;\r\n            const vertical1 = `V${targetBottom}`;\r\n            const curve2 = `C${twoThirdsX} ${targetBottom} ${oneThirdX} ${sourceBottom} ${sourcePoint.x} ${sourceBottom}`;\r\n            const vertical2 = `V${sourcePoint.y}`;\r\n            const end = \"Z\";\r\n\r\n            return start + curve1 + vertical1 + curve2 + vertical2 + end;\r\n        }\r\n\r\n        // Calculate the rotation transformation for the text label of the given node\r\n        function textTransform({ x, y }: Point): string {\r\n            return `rotate(-90, ${x - 6}, ${y})`;\r\n        }\r\n\r\n        function nodeClass(node: FlowDiagramLevelNode): string {\r\n            return `node node-${node.id} level-${props.levelNumber}`;\r\n        }\r\n\r\n        function flowClass(flow: FlowDiagramInFlow): string {\r\n            return `edge node-${flow.sourceId} node-${flow.targetId} level-${props.levelNumber - 1}_${props.levelNumber}`;\r\n        }\r\n\r\n        function onHoverFlow(flow: FlowDiagramInFlow, e: MouseEvent): void {\r\n            emit(\"showTooltip\", flow.tooltip, e);\r\n        }\r\n\r\n        function onHoverNode(node: FlowDiagramLevelNode, e: MouseEvent): void {\r\n            emit(\"showTooltip\", `<strong>${node.name}</strong><br>Total Steps Taken: ${node.totalUnits}`, e);\r\n        }\r\n\r\n        function onUnHover(): void {\r\n            emit(\"showTooltip\");\r\n        }\r\n\r\n        return {\r\n            visibleNodes,\r\n            flowPoints,\r\n            textTransform,\r\n            nodeClass,\r\n            flowClass,\r\n            onHoverFlow,\r\n            onHoverNode,\r\n            onUnHover\r\n        };\r\n    },\r\n\r\n    template: `\r\n<g v-if=\"levelNumber == 1\">\r\n    <text v-for=\"node in visibleNodes\" key=\"node.id + 'text'\" :x=\"node.x - 6\" :y=\"node.y\" :transform=\"textTransform(node)\" font-size=\"12\" text-anchor=\"end\">\r\n        {{ node.order }}\r\n    </text>\r\n</g>\r\n<g v-if=\"levelNumber > 1\">\r\n    <template v-for=\"node in levelData\" key=\"node.id + 'flows'\">\r\n        <path\r\n            v-for=\"(flow, index) in node.inFlows\"\r\n            key=\"node.id + 'flow' + index\"\r\n            :d=\"flowPoints(flow)\"\r\n            fill=\"rgb(170, 170, 170, 0.6)\"\r\n            @mousemove=\"onHoverFlow(flow, $event)\"\r\n            @mouseout=\"onUnHover\"\r\n            :class=\"flowClass(flow)\"\r\n        ></path>\r\n    </template>\r\n</g>\r\n<g>\r\n    <rect\r\n        v-for=\"node in levelData\"\r\n        key=\"node.id\" :x=\"node.x\"\r\n        :y=\"node.y\"\r\n        :width=\"node.width\"\r\n        :height=\"node.height\"\r\n        :fill=\"node.color\"\r\n        :class=\"nodeClass(node)\"\r\n        @mousemove=\"onHoverNode(node, $event)\"\r\n        @mouseout=\"onUnHover\"\r\n    ></rect>\r\n</g>\r\n`\r\n});\r\n\r\n\r\n/**\r\n * Displays a Flow Node (or maybe better know as Sankey) Diagram as an SVG.\r\n */\r\nexport default defineComponent({\r\n    name: \"FlowNodeDiagram\",\r\n\r\n    components: { FlowNodeDiagramLevel },\r\n\r\n    props: {\r\n        // Details about the nodes that are being \"flowed\" between.\r\n        flowNodes: {\r\n            type: Array as PropType<FlowNodeDiagramNodeBag[]>,\r\n            default: () => []\r\n        },\r\n\r\n        // Details about flows between nodes\r\n        flowEdges: {\r\n            type: Array as PropType<FlowNodeDiagramEdgeBag[]>,\r\n            default: () => []\r\n        },\r\n\r\n        // Generated HTML string for the chart legend\r\n        legendHtml: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        // Settings that control the sizes of different items in the diagram.\r\n        settings: {\r\n            type: Object as PropType<FlowNodeDiagramSettingsBag>,\r\n            default: () => ({})\r\n        },\r\n\r\n        // Show a spinner to indicate the data is being loaded if true.\r\n        isLoading: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        }\r\n    },\r\n\r\n    setup(props) {\r\n        const settings = computed<FlowNodeDiagramSettingsFull>(() => {\r\n            const settings = { ...defaultSettings };\r\n            Object.entries(props.settings).forEach(([key, value]) => {\r\n                if (value !== undefined && value !== null) {\r\n                    settings[key] = value;\r\n                }\r\n            });\r\n\r\n            return settings;\r\n        });\r\n        const nodeCount = computed(() => props.flowNodes.length);\r\n        const levelsCount = computed(() => props.flowEdges.reduce((count, edge) => Math.max(count, edge.level), 0));\r\n        const chartWidth = computed(() => settings.value.chartWidth);\r\n        const nodeHorizontalSpacing = computed(() => {\r\n            const flowSpace = settings.value.chartWidth - /* nodes */ (settings.value.nodeWidth * levelsCount.value) - /* Label Text */ 24;\r\n            return flowSpace / (levelsCount.value - 1);\r\n        });\r\n        // Set the chart height based on settings if we have chart data, otherwise set it to a minimal value\r\n        const chartHeight = computed(() => nodeCount.value > 0 ? settings.value.chartHeight : 50);\r\n        // Nodes have a certain order, so let's make sure they're in order\r\n\r\n        const diagramData = computed<FlowDiagramData>(() => {\r\n            type FlowPosition = {\r\n                id: number;\r\n                nextLeftY: number;\r\n                nextRightY: number;\r\n            };\r\n\r\n            // Make sure nodes are in order\r\n            const orderedNodes = [...props.flowNodes].sort((nodeA, nodeB) => nodeA.order - nodeB.order);\r\n\r\n            if (levelsCount.value == 0) {\r\n                return [] as FlowDiagramData;\r\n            }\r\n\r\n            const data: FlowDiagramData = [];\r\n            const { nodeWidth, nodeVerticalSpacing, chartHeight } = settings.value;\r\n            const totalNodeVerticalGap = nodeVerticalSpacing * (nodeCount.value - 1);\r\n            let previousTotalUnits = 0;\r\n            let useableHeight = chartHeight - totalNodeVerticalGap - 50; // The 50 gives some padding at the bottom for long labels\r\n            let previousX = 0;\r\n            let currentX = 24; // start with enough room for text labels\r\n\r\n            // Hold data about Y positioning of flows on a node\r\n            const flowPositionData: FlowPosition[][] = [[]];\r\n\r\n            for (let level = 1; level <= levelsCount.value; level++) {\r\n                // Set up an element for this level\r\n                flowPositionData.push([]);\r\n\r\n                // Get everything flowing into the nodes at this level.\r\n                const levelFlows = props.flowEdges.filter(flow => flow.level == level);\r\n\r\n                // Total number of units flowing into this level.\r\n                const totalLevelUnits = levelFlows.reduce((tot, { units }) => tot + units, 0);\r\n\r\n                if (level > 1) {\r\n                    useableHeight = round(totalLevelUnits / previousTotalUnits * useableHeight);\r\n                }\r\n\r\n                // The starting Y position for the next node\r\n                let currentY = (chartHeight - (useableHeight + totalNodeVerticalGap)) / 2;\r\n\r\n                // Construct the base diagram nodes, which we'll fill in calculations for later.\r\n                const levelNodes: FlowDiagramLevel = orderedNodes.map(node => {\r\n                    // Get the flows coming into this node and order them by the order of the source nodes\r\n                    const nodeInFlows: FlowNodeDiagramEdgeBag[] = levelFlows.filter(flow => flow.targetId == node.id).sort((flowA, flowB): number => {\r\n                        const nodeOrderA = orderedNodes.findIndex(node => node.id == flowA.sourceId);\r\n                        const nodeOrderB = orderedNodes.findIndex(node => node.id == flowB.sourceId);\r\n\r\n                        return nodeOrderA - nodeOrderB;\r\n                    });\r\n\r\n                    // Calculate size of the node\r\n                    const totalUnits = nodeInFlows.reduce((total, flow) => total + flow.units, 0);\r\n                    const height = round(totalUnits / totalLevelUnits * useableHeight);\r\n\r\n                    const nodeFlowPosition = {\r\n                        id: node.id,\r\n                        nextLeftY: currentY,\r\n                        nextRightY: currentY\r\n                    };\r\n\r\n                    flowPositionData[level].push(nodeFlowPosition);\r\n\r\n                    // Calculate the incoming flows' path points and store on the flow object\r\n                    const inFlows: FlowDiagramInFlow[] = nodeInFlows.map(flow => {\r\n                        const sourcePoint: Point = { x: previousX + nodeWidth, y: 0 };\r\n                        const targetPoint: Point = { x: currentX, y: nodeFlowPosition.nextLeftY };\r\n                        const thickness = round(flow.units / totalUnits * height);\r\n\r\n                        nodeFlowPosition.nextLeftY += thickness;\r\n\r\n                        if (level > 1) {\r\n                            const prevNodeFlowPosition = flowPositionData[level - 1].find(node => node.id == flow.sourceId);\r\n\r\n                            if (prevNodeFlowPosition) {\r\n                                sourcePoint.y = prevNodeFlowPosition.nextRightY;\r\n                                prevNodeFlowPosition.nextRightY += thickness;\r\n                            }\r\n                        }\r\n\r\n                        return {\r\n                            ...flow,\r\n                            sourcePoint,\r\n                            targetPoint,\r\n                            thickness\r\n                        };\r\n                    });\r\n\r\n                    const levelNode = {\r\n                        ...node,\r\n                        x: currentX,\r\n                        y: currentY,\r\n                        width: nodeWidth,\r\n                        height,\r\n                        totalUnits,\r\n                        inFlows\r\n                    };\r\n\r\n                    // Set up for the next node\r\n                    currentY += height + (height > 0 ? nodeVerticalSpacing : 0);\r\n\r\n                    return levelNode;\r\n                });\r\n\r\n                // Set up for the next level\r\n                previousTotalUnits = totalLevelUnits;\r\n                previousX = currentX;\r\n                currentX += nodeWidth + nodeHorizontalSpacing.value;\r\n\r\n                data.push(levelNodes);\r\n            } // End for each level\r\n\r\n            return data;\r\n        });\r\n\r\n        const tooltip = reactive({\r\n            isShown: false,\r\n            html: \"\",\r\n            x: 0,\r\n            y: 0,\r\n            side: \"left\"\r\n        });\r\n\r\n        function showTooltip(html: string, e: MouseEvent): void {\r\n            if (html && e) {\r\n                tooltip.isShown = true;\r\n                tooltip.html = html;\r\n                tooltip.x = e.offsetX + 15;\r\n                tooltip.y = e.offsetY + 15;\r\n\r\n                if (e.clientX + 250 /* magic number... approx max width of a tooltip */ > document.documentElement.clientWidth) {\r\n                    tooltip.x = 0;\r\n                    tooltip.side = \"right\";\r\n                }\r\n                else {\r\n                    tooltip.side = \"left\";\r\n                }\r\n            }\r\n            else {\r\n                tooltip.isShown = false;\r\n            }\r\n        }\r\n\r\n        return {\r\n            settings,\r\n            nodeCount,\r\n            levelsCount,\r\n            chartWidth,\r\n            chartHeight,\r\n            diagramData,\r\n            tooltip,\r\n            showTooltip\r\n        };\r\n    },\r\n\r\n    template: `\r\n<v-style>\r\n.flow-node-diagram-container {\r\n    position: relative;\r\n    width: max-content;\r\n    max-width: 100%;\r\n    margin: 0 auto;\r\n}\r\n\r\n.flow-node-diagram-container .flow-tooltip {\r\n    position: absolute;\r\n    background: #fff;\r\n    {{ tooltip.side }}: {{ tooltip.x }}px;\r\n    top: {{ tooltip.y }}px;\r\n    max-width: 260px;\r\n    border: 1px solid #ddd;\r\n    border-radius: 4px;\r\n    padding: 8px;\r\n    font-size: 14px;\r\n    box-shadow: 0 1px 2px 0 rgba(0,0,0,.05)\r\n}\r\n\r\n.flow-node-diagram-container svg {\r\n    width: {{ chartWidth }}px;\r\n    max-width: 100%;\r\n    height: auto;\r\n    min-height: 50px;\r\n}\r\n\r\n.flow-node-diagram-container .loadingContainer {\r\n    position: absolute;\r\n    z-index: 0;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background: rgba(255,255,255,.75);\r\n}\r\n\r\n.flow-node-diagram-container .loadingContainer h3 {\r\n    margin: 0;\r\n}\r\n\r\n.flow-node-diagram-container .fade-enter-from,\r\n.flow-node-diagram-container .fade-leave-to {\r\n    opacity: 0;\r\n}\r\n\r\n.flow-node-diagram-container .fade-enter-active,\r\n.flow-node-diagram-container .fade-leave-active {\r\n    transition: opacity .2s ease-in-out;\r\n}\r\n\r\n.step-flow-svg .edge:hover {\r\n    fill: rgba(170, 170, 170, 0.8);\r\n}\r\n.flow-legend {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n    margin: 20px auto 0;\r\n    gap: 12px;\r\n    width: 100%;\r\n}\r\n.flow-key {\r\n    display: inline-flex;\r\n    align-items: center;\r\n    font-size: 12px;\r\n    line-height: 1.1;\r\n}\r\n.flow-key .color {\r\n    width: 18px;\r\n    height: 18px;\r\n    margin-right: 4px;\r\n    border-radius: 3px;\r\n    box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.08);\r\n}\r\n</v-style>\r\n\r\n<div class=\"flow-node-diagram-container\">\r\n    <div class=\"flow-tooltip\" v-html=\"tooltip.html\" v-if=\"tooltip.isShown\" />\r\n\r\n    <svg class=\"step-flow-svg mx-auto\" :width=\"chartWidth\" :height=\"chartHeight\" :viewBox=\"'0 0 ' + chartWidth + ' ' + chartHeight\">\r\n        <FlowNodeDiagramLevel\r\n            v-for=\"(level, levelNum) in diagramData\"\r\n            :key=\"'level' + levelNum\"\r\n            :levelData=\"level\"\r\n            :levelNumber=\"levelNum + 1\"\r\n            @showTooltip=\"showTooltip\"\r\n        />\r\n    </svg>\r\n\r\n    <div class=\"step-flow-legend\" v-html=\"settings.legendHtml\" />\r\n\r\n    <transition name=\"fade\" appear>\r\n        <div v-if=\"isLoading\" class=\"loadingContainer\">\r\n            <h3>Loading...</h3>\r\n        </div>\r\n    </transition>\r\n</div>\r\n`\r\n});\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { useConfigurationValues, useInvokeBlockAction } from \"@Obsidian/Utility/block\";\r\nimport { defineComponent, ref } from \"vue\";\r\nimport NotificationBox from \"@Obsidian/Controls/notificationBox.obs\";\r\nimport RockButton from \"@Obsidian/Controls/rockButton\";\r\nimport Block from \"@Obsidian/Templates/block\";\r\nimport SectionHeader from \"@Obsidian/Controls/sectionHeader\";\r\nimport RockForm from \"@Obsidian/Controls/rockForm\";\r\nimport SlidingDateRangePicker from \"@Obsidian/Controls/slidingDateRangePicker.obs\";\r\nimport { SlidingDateRange } from \"@Obsidian/Utility/slidingDateRange\";\r\nimport NumberBox from \"@Obsidian/Controls/numberBox\";\r\nimport DropDownList from \"@Obsidian/Controls/dropDownList\";\r\nimport FlowNodeDiagram from \"./StepFlow/flowNodeDiagram.partial\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport { emptyGuid } from \"@Obsidian/Utility/guid\";\r\nimport { FlowNodeDiagramNodeBag } from \"@Obsidian/ViewModels/Blocks/Engagement/Steps/flowNodeDiagramNodeBag\";\r\nimport { FlowNodeDiagramEdgeBag } from \"@Obsidian/ViewModels/Blocks/Engagement/Steps/flowNodeDiagramEdgeBag\";\r\nimport { FlowNodeDiagramSettingsBag } from \"@Obsidian/ViewModels/Blocks/Engagement/Steps/flowNodeDiagramSettingsBag\";\r\nimport { StepFlowInitializationBox } from \"@Obsidian/ViewModels/Blocks/Engagement/Steps/stepFlowInitializationBox\";\r\nimport { StepFlowGetDataBag } from \"@Obsidian/ViewModels/Blocks/Engagement/Steps/stepFlowGetDataBag\";\r\nimport { syncRefsWithQueryParams } from \"@Obsidian/Utility/url\";\r\n\r\n\r\n/**\r\n * Step Flow\r\n * Domain: Steps\r\n *\r\n * Show the flow of individuals as they move through the four step types in the Discipleship Path program.\r\n *\r\n */\r\nexport default defineComponent({\r\n    /**\r\n     * This is the name that will appear in the browser debug tools. This is mostly for organization and\r\n     * doesn't affect function.\r\n     */\r\n    name: \"Steps.StepFlow\",\r\n\r\n    /** These are the child components that are used by this block component */\r\n    components: {\r\n        Block,\r\n        NotificationBox,\r\n        RockButton,\r\n        SectionHeader,\r\n        RockForm,\r\n        SlidingDateRangePicker,\r\n        NumberBox,\r\n        DropDownList,\r\n        FlowNodeDiagram,\r\n    },\r\n\r\n    /** This allows for standard block tools, such as invokeBlockAction, to be available to this block */\r\n    setup() {\r\n        // #region Variables\r\n\r\n        const invokeBlockAction = useInvokeBlockAction();\r\n        const configurationValues = useConfigurationValues<StepFlowInitializationBox>();\r\n\r\n        const flowNodes = ref<FlowNodeDiagramNodeBag[]>([]);\r\n        const flowEdges = ref<FlowNodeDiagramEdgeBag[]>([]);\r\n        const legendHtml = ref<string>(\"\");\r\n\r\n        const isLoading = ref(false);\r\n\r\n        const dateRange = ref<SlidingDateRange | null>(null);\r\n        const maxLevels = ref(4);\r\n        const campus = ref(emptyGuid);\r\n\r\n        syncRefsWithQueryParams({ dateRange, maxLevels, campus });\r\n\r\n        const campusOptions = ref<ListItemBag[]>([\r\n            {\r\n                value: emptyGuid,\r\n                text: \"All Campuses\",\r\n                category: null\r\n            },\r\n            ...(configurationValues.campuses ?? [])\r\n        ]);\r\n\r\n        const settings = ref<FlowNodeDiagramSettingsBag>({\r\n            nodeWidth: configurationValues.nodeWidth,\r\n            nodeVerticalSpacing: configurationValues.nodeVerticalSpacing,\r\n            chartWidth: configurationValues.chartWidth,\r\n            chartHeight: configurationValues.chartHeight,\r\n            legendHtml: configurationValues.legendHtml\r\n        });\r\n\r\n        // #endregion\r\n\r\n        // #region Event Handlers\r\n\r\n        async function fetchData(): Promise<void | boolean> {\r\n            if (isLoading.value) {\r\n                // Still Loading Previous Request. Don't want to start another one.\r\n                return;\r\n            }\r\n\r\n            isLoading.value = true;\r\n\r\n            // If 1900-01-01 is passed to `new Date`, it'll parse it as GMT (if single-digit month starting with a 0).\r\n            // If you change the separators to / instead, it'll be parsed in the current client's time zone, which is\r\n            // preferable, so we convert the dates here. Then we convert them to ISO Strings for the server.\r\n            const startDateString = (dateRange.value?.lowerDate || \"\").replace(/-/g, \"/\");\r\n            const startDate = startDateString.length > 0 ? new Date(startDateString).toISOString() : undefined;\r\n            const endDateString = (dateRange.value?.upperDate || \"\").replace(/-/g, \"/\");\r\n            const endDate = endDateString.length > 0 ? new Date(endDateString).toISOString() : undefined;\r\n\r\n            // Use a copy of the current dateRange or a default if unset\r\n            const dateRangeParam: SlidingDateRange = dateRange.value ? { ...(dateRange.value) } : { rangeType: -1 };\r\n\r\n            dateRangeParam.lowerDate = startDate;\r\n            dateRangeParam.upperDate = endDate;\r\n\r\n            const response = await invokeBlockAction<StepFlowGetDataBag>(\"GetData\", {\r\n                dateRange: dateRangeParam,\r\n                maxLevels: maxLevels.value,\r\n                campus: campus.value,\r\n            });\r\n\r\n            isLoading.value = false;\r\n\r\n            if (response.data) {\r\n                flowEdges.value = response.data.edges ?? [];\r\n                flowNodes.value = response.data.nodes ?? [];\r\n            }\r\n            else {\r\n                throw new Error(response.errorMessage || \"An error occurred\");\r\n            }\r\n        }\r\n\r\n        // #endregion\r\n\r\n        // Fetch the data on load with the defaults\r\n        fetchData();\r\n\r\n        return {\r\n            flowNodes,\r\n            flowEdges,\r\n            legendHtml,\r\n            isLoading,\r\n            dateRange,\r\n            maxLevels,\r\n            campus,\r\n            campusOptions,\r\n            settings,\r\n            configurationValues,\r\n            fetchData\r\n        };\r\n    },\r\n\r\n    // #region Template\r\n    template: `\r\n<Block title=\"Step Flow\">\r\n    <template v-if=\"configurationValues.programName\" #default>\r\n        <SectionHeader :title=\"configurationValues.programName + ' Path Flow'\" :description=\"'The flow below shows how individuals move through the ' + configurationValues.stepTypeCount + ' step types in the ' + configurationValues.programName + ' Path program. You can filter the steps shown by date range or the number of levels to limit&nbsp;to.'\" />\r\n\r\n        <RockForm @submit=\"fetchData\">\r\n            <div class=\"row form-row d-flex align-items-start flex-wrap\">\r\n                <div class=\"col-xs-12 col-lg-3\">\r\n                    <SlidingDateRangePicker v-model=\"dateRange\" formGroupClasses=\"\" label=\"Step Completion Date Range\" help=\"Limit steps to those that have been completed in the provided date range.\" />\r\n                </div>\r\n                <NumberBox v-model=\"maxLevels\" :decimalCount=\"0\" :minimumValue=\"2\" rules=\"required\" formGroupClasses=\"col\" label=\"Max Levels to Display\" help=\"The maximum number of levels to show in the flow. It's possible that an individual could take the same level twice in the course of completing a step program.\" />\r\n                <DropDownList v-model=\"campus\" formGroupClasses=\"col\" label=\"Campus\" :items=\"campusOptions\" :showBlankItem=\"false\" />\r\n                <div class=\"col flex-grow-0\">\r\n                    <div class=\"form-group\">\r\n                        <label class=\"control-label\">&nbsp;</label>\r\n                        <RockButton class=\"btn-square\" type=\"submit\" :disabled=\"isLoading\"><i class=\"fa fa-refresh\" :class=\"{'fa-spin': isLoading}\"></i></RockButton>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </RockForm>\r\n\r\n        <FlowNodeDiagram :flowNodes=\"flowNodes\" :flowEdges=\"flowEdges\" :isLoading=\"isLoading\" :settings=\"settings\" />\r\n    </template>\r\n\r\n    <template v-else #default>\r\n        <NotificationBox alert-type=\"warning\">No Step Program ID Provided</NotificationBox>\r\n    </template>\r\n</Block>`\r\n    // #endregion\r\n});\r\n"],"names":["defaultSettings","nodeWidth","nodeVerticalSpacing","chartWidth","chartHeight","legendHtml","round","num","toDecimalPlaces","FlowNodeDiagramLevel","defineComponent","name","props","levelData","type","Array","required","levelNumber","Number","events","showTooltip","_html","_e","setup","_ref","emit","visibleNodes","computed","filter","node","height","flowPoints","_ref2","sourcePoint","targetPoint","thickness","oneThirdX","x","twoThirdsX","sourceBottom","y","targetBottom","start","concat","curve1","vertical1","curve2","vertical2","end","textTransform","_ref3","nodeClass","id","flowClass","flow","sourceId","targetId","onHoverFlow","e","tooltip","onHoverNode","totalUnits","onUnHover","template","components","flowNodes","default","flowEdges","Boolean","settings","Object","isLoading","_objectSpread","entries","forEach","_ref4","_ref5","_slicedToArray","key","value","undefined","nodeCount","length","levelsCount","reduce","count","edge","Math","max","level","nodeHorizontalSpacing","flowSpace","diagramData","orderedNodes","sort","nodeA","nodeB","order","data","_settings$value","totalNodeVerticalGap","previousTotalUnits","useableHeight","previousX","currentX","flowPositionData","_loop","push","levelFlows","totalLevelUnits","tot","_ref6","units","currentY","levelNodes","map","nodeInFlows","flowA","flowB","nodeOrderA","findIndex","nodeOrderB","total","nodeFlowPosition","nextLeftY","nextRightY","inFlows","prevNodeFlowPosition","find","levelNode","width","reactive","isShown","html","side","offsetX","offsetY","clientX","document","documentElement","clientWidth","Block","NotificationBox","RockButton","SectionHeader","RockForm","SlidingDateRangePicker","NumberBox","DropDownList","FlowNodeDiagram","_configurationValues$","invokeBlockAction","useInvokeBlockAction","configurationValues","useConfigurationValues","ref","dateRange","maxLevels","campus","emptyGuid","syncRefsWithQueryParams","campusOptions","text","category","campuses","fetchData","_fetchData","apply","arguments","_asyncToGenerator","_dateRange$value","_dateRange$value2","startDateString","lowerDate","replace","startDate","Date","toISOString","endDateString","upperDate","endDate","dateRangeParam","rangeType","response","_response$data$edges","_response$data$nodes","edges","nodes","Error","errorMessage"],"mappings":"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"}