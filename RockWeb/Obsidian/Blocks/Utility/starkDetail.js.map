{"version":3,"file":"starkDetail.js","sources":["../../src/Utility/starkDetail.ts"],"sourcesContent":["ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { useConfigurationValues, useInvokeBlockAction } from \"@Obsidian/Utility/block\";\r\nimport { defineComponent, ref } from \"vue\";\r\nimport NotificationBox from \"@Obsidian/Controls/notificationBox.obs\";\r\nimport RockButton from \"@Obsidian/Controls/rockButton\";\r\nimport Block from \"@Obsidian/Templates/block\";\r\n\r\n/**\r\n * Stark Detail\r\n * Domain: Utility\r\n *\r\n * This is an example block that provides developers with a good starting point in\r\n * creating blocks.\r\n *\r\n */\r\nexport default defineComponent({\r\n    /**\r\n     * This is the name that will appear in the browser debug tools. This is mostly for organization and\r\n     * doesn't affect function.\r\n     */\r\n    name: \"Utility.StarkDetailOptions\",\r\n\r\n    /** These are the child components that are used by this block component */\r\n    components: {\r\n        Block,\r\n        NotificationBox,\r\n        RockButton\r\n    },\r\n\r\n    /** This allows for standard block tools, such as invokeBlockAction, to be available to this block */\r\n    setup() {\r\n        // #region Variables\r\n\r\n        const invokeBlockAction = useInvokeBlockAction();\r\n        const configurationValues = useConfigurationValues<Record<string, unknown>>();\r\n\r\n        // Set the state \"configMessage\" to the value sent by C#'s GetObsidianConfigurationValues\r\n        const configMessage = ref((configurationValues.message as string) ?? \"\");\r\n\r\n        // Set the initial state of the block action message to an empty string.\r\n        const blockActionMessage = ref(\"\");\r\n\r\n        // #endregion\r\n\r\n        // #region Computed Values\r\n\r\n        // #endregion\r\n\r\n        // #region Functions\r\n\r\n        // #endregion\r\n\r\n        // #region Event Handlers\r\n\r\n        /**\r\n         * Event handler for the Invoke Block Action button. Fetches a message from the C# block\r\n         * action named \"GetMessage\".\r\n         */\r\n        const invokeBlockActionClick = async (): Promise<void> => {\r\n            const response = await invokeBlockAction<{ message: string; }>(\"GetMessage\", {\r\n                paramFromClient: \"This is a value sent to the server from the client.\"\r\n            });\r\n\r\n            if (response.data) {\r\n                blockActionMessage.value = response.data.message;\r\n            }\r\n            else {\r\n                blockActionMessage.value = response.errorMessage || \"An error occurred\";\r\n            }\r\n        };\r\n\r\n        // #endregion\r\n\r\n        /**\r\n         * This returns the variables and functions that make up the component's local state object.\r\n         * It is available during the lifetime of the component.\r\n         */\r\n        return {\r\n            blockActionMessage,\r\n            configMessage,\r\n            invokeBlockActionClick\r\n        };\r\n    },\r\n\r\n    /** The template is the markup of the component. Any custom components used within this template,\r\n     *  like <NotificationBox> and <PaneledBlockTemplate> must be included in the \"components\" option above. */\r\n    template: `\r\n<Block title=\"Blank Detail Block\">\r\n    <template #headerActions>\r\n        <span class=\"action label label-info\">Vue</span>\r\n    </template>\r\n\r\n    <template #drawer>\r\n        An example block that uses Vue\r\n    </template>\r\n\r\n    <template #default>\r\n        <NotificationBox alertType=\"info\">\r\n            <h4>Stark Template Block</h4>\r\n            <p>This block serves as a starting point for creating new blocks. After copy/pasting it and renaming the resulting file be sure to make the following changes:</p>\r\n\r\n            <strong>Changes to the Codebehind (.cs) File</strong>\r\n            <ul>\r\n                <li>Update the namespace to match your directory</li>\r\n                <li>Update the class name</li>\r\n                <li>Fill in the DisplayName, Category and Description attributes</li>\r\n            </ul>\r\n\r\n            <strong>Changes to the Vue component (.ts/.js) File</strong>\r\n            <ul>\r\n                <li>Remove this text... unless you really like it...</li>\r\n            </ul>\r\n        </NotificationBox>\r\n\r\n        <div>\r\n            <h4>Value from Configuration</h4>\r\n            <p>\r\n                This value came from the C# file and was provided to the JavaScript before the Vue component was even mounted:\r\n            </p>\r\n\r\n            <pre>{{ configMessage }}</pre>\r\n\r\n            <h4>Value from Block Action</h4>\r\n            <p>\r\n                This value will come from the C# file using a \"Block Action\". Block Actions allow the Vue Component to communicate with the\r\n                C# code behind (much like a Web Forms Postback):\r\n            </p>\r\n\r\n            <pre>{{ blockActionMessage }}</pre>\r\n\r\n            <div class=\"actions\">\r\n                <RockButton btnType=\"primary\" btnSize=\"sm\" @click=\"invokeBlockActionClick\">Invoke Block Action</RockButton>\r\n            </div>\r\n        </div>\r\n    </template>\r\n</Block>`\r\n});\r\n"],"names":["defineComponent","name","components","Block","NotificationBox","RockButton","setup","_ref","invokeBlockAction","useInvokeBlockAction","configurationValues","useConfigurationValues","configMessage","ref","message","blockActionMessage","invokeBlockActionClick","_ref2","_asyncToGenerator","response","paramFromClient","data","value","errorMessage","apply","arguments","template"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,2CAAeA,eAAe,CAAC;MAK3BC,EAAAA,IAAI,EAAE,4BAA4B;MAGlCC,EAAAA,UAAU,EAAE;UACRC,KAAK;UACLC,eAAe;MACfC,IAAAA,UAAAA;SACH;MAGDC,EAAAA,KAAKA,GAAG;MAAA,IAAA,IAAAC,IAAA,CAAA;UAGJ,IAAMC,iBAAiB,GAAGC,oBAAoB,EAAE,CAAA;UAChD,IAAMC,mBAAmB,GAAGC,sBAAsB,EAA2B,CAAA;MAG7E,IAAA,IAAMC,aAAa,GAAGC,GAAG,CAAA,CAAAN,IAAA,GAAEG,mBAAmB,CAACI,OAAO,cAAAP,IAAA,KAAA,KAAA,CAAA,GAAAA,IAAA,GAAe,EAAE,CAAC,CAAA;MAGxE,IAAA,IAAMQ,kBAAkB,GAAGF,GAAG,CAAC,EAAE,CAAC,CAAA;MAkBlC,IAAA,IAAMG,sBAAsB,GAAA,YAAA;MAAA,MAAA,IAAAC,KAAA,GAAAC,iBAAA,CAAG,aAA2B;MACtD,QAAA,IAAMC,QAAQ,GAAA,MAASX,iBAAiB,CAAuB,YAAY,EAAE;MACzEY,UAAAA,eAAe,EAAE,qDAAA;MACrB,SAAC,CAAC,CAAA;cAEF,IAAID,QAAQ,CAACE,IAAI,EAAE;MACfN,UAAAA,kBAAkB,CAACO,KAAK,GAAGH,QAAQ,CAACE,IAAI,CAACP,OAAO,CAAA;MACpD,SAAC,MACI;MACDC,UAAAA,kBAAkB,CAACO,KAAK,GAAGH,QAAQ,CAACI,YAAY,IAAI,mBAAmB,CAAA;MAC3E,SAAA;aACH,CAAA,CAAA;MAAA,MAAA,OAAA,SAXKP,sBAAsBA,GAAA;MAAA,QAAA,OAAAC,KAAA,CAAAO,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;MAAA,OAAA,CAAA;WAW3B,EAAA,CAAA;UAQD,OAAO;YACHV,kBAAkB;YAClBH,aAAa;MACbI,MAAAA,sBAAAA;WACH,CAAA;SACJ;QAIDU,QAAQ,EAAA,42DAAA;MAkDZ,CAAC,EAAC;;;;;;;;"}