{"version":3,"file":"attributeValues.js","sources":["../../src/Crm/attributeValues.ts"],"sourcesContent":["ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { Guid } from \"@Obsidian/Types\";\r\nimport { computed, defineComponent, ref } from \"vue\";\r\nimport Block from \"@Obsidian/Templates/block\";\r\nimport Loading from \"@Obsidian/Controls/loading\";\r\nimport NotificationBox from \"@Obsidian/Controls/notificationBox.obs\";\r\nimport { useStore } from \"@Obsidian/PageState\";\r\nimport { useConfigurationValues, useInvokeBlockAction } from \"@Obsidian/Utility/block\";\r\nimport JavaScriptAnchor from \"@Obsidian/Controls/javaScriptAnchor\";\r\nimport RockForm from \"@Obsidian/Controls/rockForm\";\r\nimport TextBox from \"@Obsidian/Controls/textBox\";\r\nimport RockButton from \"@Obsidian/Controls/rockButton\";\r\nimport { PublicAttributeBag } from \"@Obsidian/ViewModels/Utility/publicAttributeBag\";\r\nimport AttributeValuesContainer from \"@Obsidian/Controls/attributeValuesContainer\";\r\nimport { List } from \"@Obsidian/Utility/linq\";\r\n\r\nconst store = useStore();\r\n\r\ntype ConfigurationValues = {\r\n    blockIconCssClass: string;\r\n\r\n    blockTitle: string;\r\n\r\n    showCategoryNamesAsSeparators: boolean;\r\n\r\n    useAbbreviatedNames: boolean;\r\n\r\n    categoryGuids: Guid[];\r\n\r\n    attributes: Record<string, PublicAttributeBag>;\r\n\r\n    values: Record<string, string>;\r\n};\r\n\r\nfunction sortedAttributeValues(attributeValues: PublicAttributeBag[]): PublicAttributeBag[] {\r\n    return new List(attributeValues)\r\n        .orderBy(v => v.order)\r\n        .thenBy(v => v.name)\r\n        .toArray();\r\n}\r\n\r\nexport default defineComponent({\r\n    name: \"Crm.AttributeValues\",\r\n    components: {\r\n        NotificationBox,\r\n        Block,\r\n        Loading,\r\n        JavaScriptAnchor,\r\n        RockForm,\r\n        TextBox,\r\n        RockButton,\r\n        AttributeValuesContainer\r\n    },\r\n    setup() {\r\n        const configurationValues = useConfigurationValues<ConfigurationValues>();\r\n        const invokeBlockAction = useInvokeBlockAction();\r\n        const attributes = ref(configurationValues.attributes);\r\n        const attributeValues = ref(configurationValues.values);\r\n        const personKey = computed(() => store.personContext?.idKey || null);\r\n        const isLoading = ref(false);\r\n        const isEditMode = ref(false);\r\n        const errorMessage = ref(\"\");\r\n\r\n        const goToViewMode = (): void => {\r\n            isEditMode.value = false;\r\n        };\r\n\r\n        const goToEditMode = async (): Promise<void> => {\r\n            const result = await invokeBlockAction<PublicAttributeBag[]>(\"GetAttributeValuesForEdit\");\r\n            if (result.isSuccess) {\r\n                //attributeValues.value = sortedAttributeValues(result.data ?? []);\r\n                isEditMode.value = true;\r\n            }\r\n        };\r\n\r\n        const doSave = async (): Promise<void> => {\r\n            isLoading.value = true;\r\n\r\n            const keyValueMap: Record<string, string | null> = {};\r\n\r\n            //for (const a of attributeValues.value) {\r\n            //    keyValueMap[(a as PublicEditableAttributeValue).key] = a.value || \"\";\r\n            //}\r\n\r\n            //const result = await invokeBlockAction<PublicAttributeValue[]>(\"SaveAttributeValues\", {\r\n            //    personKey: personKey.value,\r\n            //    keyValueMap\r\n            //});\r\n\r\n            //if (result.isSuccess) {\r\n            //    attributeValues.value = sortedAttributeValues(result.data ?? []);\r\n            //    goToViewMode();\r\n            //}\r\n            //else {\r\n            //    errorMessage.value = \"Failed to save values.\";\r\n            //}\r\n\r\n            isLoading.value = false;\r\n        };\r\n\r\n        return {\r\n            blockTitle: computed(() => configurationValues.blockTitle),\r\n            blockIconCssClass: computed(() => configurationValues.blockIconCssClass),\r\n            isLoading,\r\n            isEditMode,\r\n            errorMessage,\r\n            goToViewMode,\r\n            goToEditMode,\r\n            doSave,\r\n            useAbbreviatedNames: configurationValues.useAbbreviatedNames,\r\n            attributes,\r\n            attributeValues\r\n        };\r\n    },\r\n    template: `\r\n<Block :title=\"blockTitle\">\r\n    <template #headerActions>\r\n        <JavaScriptAnchor title=\"Order Attributes\" class=\"action btn-link edit\">\r\n            <i class=\"fa fa-bars\"></i>\r\n        </JavaScriptAnchor>\r\n        <JavaScriptAnchor title=\"Edit Attributes\" class=\"action btn-link edit\" @click=\"goToEditMode\">\r\n            <i class=\"fa fa-pencil\"></i>\r\n        </JavaScriptAnchor>\r\n    </template>\r\n\r\n    <template #default>\r\n        <Loading :isLoading=\"isLoading\">\r\n            <NotificationBox v-if=\"errorMessage\" alertType=\"warning\">{{ errorMessage }}</NotificationBox>\r\n            <AttributeValuesContainer v-if=\"!isEditMode\" :attributeValues=\"attributeValues\" :showEmptyValues=\"false\" :showCategoryLabel=\"false\" />\r\n            <RockForm v-else @submit=\"doSave\">\r\n                <AttributeValuesContainer v-model=\"attributeValues\" :attributes=\"attributes\" isEditMode :showAbbreviatedName=\"useAbbreviatedNames\" :showCategoryLabel=\"false\" />\r\n                <div class=\"actions\">\r\n                    <RockButton btnType=\"primary\" btnSize=\"xs\" type=\"submit\">Save</RockButton>\r\n                    <RockButton btnType=\"link\" btnSize=\"xs\" @click=\"goToViewMode\">Cancel</RockButton>\r\n                </div>\r\n            </RockForm>\r\n        </Loading>\r\n    </template>\r\n</Block>`\r\n});\r\n"],"names":["store","useStore","defineComponent","name","components","NotificationBox","Block","Loading","JavaScriptAnchor","RockForm","TextBox","RockButton","AttributeValuesContainer","setup","configurationValues","useConfigurationValues","invokeBlockAction","useInvokeBlockAction","attributes","ref","attributeValues","values","computed","_store$personContext","personContext","idKey","isLoading","isEditMode","errorMessage","goToViewMode","value","goToEditMode","_ref","_asyncToGenerator","result","isSuccess","apply","arguments","doSave","_ref2","blockTitle","blockIconCssClass","useAbbreviatedNames","template"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAgCA,IAAMA,KAAK,GAAGC,QAAQ,EAAE,CAAA;AAyBxB,+CAAeC,eAAe,CAAC;MAC3BC,EAAAA,IAAI,EAAE,qBAAqB;MAC3BC,EAAAA,UAAU,EAAE;UACRC,eAAe;UACfC,KAAK;UACLC,OAAO;UACPC,gBAAgB;UAChBC,QAAQ;UACRC,OAAO;UACPC,UAAU;MACVC,IAAAA,wBAAAA;SACH;MACDC,EAAAA,KAAKA,GAAG;UACJ,IAAMC,mBAAmB,GAAGC,sBAAsB,EAAuB,CAAA;UACzE,IAAMC,iBAAiB,GAAGC,oBAAoB,EAAE,CAAA;MAChD,IAAA,IAAMC,UAAU,GAAGC,GAAG,CAACL,mBAAmB,CAACI,UAAU,CAAC,CAAA;MACtD,IAAA,IAAME,eAAe,GAAGD,GAAG,CAACL,mBAAmB,CAACO,MAAM,CAAC,CAAA;UACrCC,QAAQ,CAAC,MAAA;MAAA,MAAA,IAAAC,oBAAA,CAAA;MAAA,MAAA,OAAM,CAAAA,CAAAA,oBAAA,GAAAvB,KAAK,CAACwB,aAAa,MAAAD,IAAAA,IAAAA,oBAAA,KAAnBA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,oBAAA,CAAqBE,KAAK,KAAI,IAAI,CAAA;WAAC,EAAA;MACpE,IAAA,IAAMC,SAAS,GAAGP,GAAG,CAAC,KAAK,CAAC,CAAA;MAC5B,IAAA,IAAMQ,UAAU,GAAGR,GAAG,CAAC,KAAK,CAAC,CAAA;MAC7B,IAAA,IAAMS,YAAY,GAAGT,GAAG,CAAC,EAAE,CAAC,CAAA;UAE5B,IAAMU,YAAY,GAAGA,MAAY;YAC7BF,UAAU,CAACG,KAAK,GAAG,KAAK,CAAA;WAC3B,CAAA;MAED,IAAA,IAAMC,YAAY,GAAA,YAAA;MAAA,MAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAA2B;MAC5C,QAAA,IAAMC,MAAM,GAAA,MAASlB,iBAAiB,CAAuB,2BAA2B,CAAC,CAAA;cACzF,IAAIkB,MAAM,CAACC,SAAS,EAAE;gBAElBR,UAAU,CAACG,KAAK,GAAG,IAAI,CAAA;MAC3B,SAAA;aACH,CAAA,CAAA;MAAA,MAAA,OAAA,SANKC,YAAYA,GAAA;MAAA,QAAA,OAAAC,IAAA,CAAAI,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;MAAA,OAAA,CAAA;WAMjB,EAAA,CAAA;MAED,IAAA,IAAMC,MAAM,GAAA,YAAA;MAAA,MAAA,IAAAC,KAAA,GAAAN,iBAAA,CAAG,aAA2B;cACtCP,SAAS,CAACI,KAAK,GAAG,IAAI,CAAA;cAqBtBJ,SAAS,CAACI,KAAK,GAAG,KAAK,CAAA;aAC1B,CAAA,CAAA;MAAA,MAAA,OAAA,SAvBKQ,MAAMA,GAAA;MAAA,QAAA,OAAAC,KAAA,CAAAH,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;MAAA,OAAA,CAAA;WAuBX,EAAA,CAAA;UAED,OAAO;MACHG,MAAAA,UAAU,EAAElB,QAAQ,CAAC,MAAMR,mBAAmB,CAAC0B,UAAU,CAAC;MAC1DC,MAAAA,iBAAiB,EAAEnB,QAAQ,CAAC,MAAMR,mBAAmB,CAAC2B,iBAAiB,CAAC;YACxEf,SAAS;YACTC,UAAU;YACVC,YAAY;YACZC,YAAY;YACZE,YAAY;YACZO,MAAM;YACNI,mBAAmB,EAAE5B,mBAAmB,CAAC4B,mBAAmB;YAC5DxB,UAAU;MACVE,MAAAA,eAAAA;WACH,CAAA;SACJ;QACDuB,QAAQ,EAAA,8zCAAA;MAyBZ,CAAC,EAAC;;;;;;;;"}