{"version":3,"file":"snippetTypeDetail.obs.js","sources":["../../src/Communication/SnippetTypeDetail/editPanel.partial.obs","../../src/Communication/SnippetTypeDetail/viewPanel.partial.obs","../../src/Communication/SnippetTypeDetail/types.partial.ts","../../src/Communication/snippetTypeDetail.obs"],"sourcesContent":["<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <fieldset>\r\n        <div class=\"row\">\r\n            <div class=\"col-md-6\">\r\n                <TextBox v-model=\"name\"\r\n                         label=\"Name\"\r\n                         rules=\"required\" />\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n                <CheckBox v-model=\"isPersonalAllowed\"\r\n                          label=\"Is Personal Allowed\" />\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n                <CheckBox v-model=\"isSharedAllowed\"\r\n                          label=\"Is Shared Allowed\" />\r\n            </div>\r\n        </div>\r\n\r\n        <TextBox v-model=\"description\"\r\n                 label=\"Description\"\r\n                 textMode=\"multiline\" />\r\n\r\n        <TextBox v-model=\"helpText\"\r\n                 label=\"Help Text\"\r\n                 textMode=\"multiline\" />\r\n\r\n        <AttributeValuesContainer v-model=\"attributeValues\" :attributes=\"attributes\" isEditMode :numberOfColumns=\"2\" />\r\n    </fieldset>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { PropType, ref, watch } from \"vue\";\r\n    import AttributeValuesContainer from \"@Obsidian/Controls/attributeValuesContainer\";\r\n    import CheckBox from \"@Obsidian/Controls/checkBox\";\r\n    import TextBox from \"@Obsidian/Controls/textBox\";\r\n    import { watchPropertyChanges } from \"@Obsidian/Utility/block\";\r\n    import { propertyRef, updateRefValue } from \"@Obsidian/Utility/component\";\r\n    import { SnippetTypeBag } from \"@Obsidian/ViewModels/Blocks/Communication/SnippetTypeDetail/snippetTypeBag\";\r\n    import { SnippetTypeDetailOptionsBag } from \"@Obsidian/ViewModels/Blocks/Communication/SnippetTypeDetail/snippetTypeDetailOptionsBag\";\r\n\r\n    const props = defineProps({\r\n    modelValue: {\r\n    type: Object as PropType<SnippetTypeBag>,\r\n            required: true\r\n        },\r\n\r\n        options: {\r\n            type: Object as PropType<SnippetTypeDetailOptionsBag>,\r\n            required: true\r\n        }\r\n    });\r\n\r\n    const emit = defineEmits<{\r\n        (e: \"update:modelValue\", value: SnippetTypeBag): void,\r\n        (e: \"propertyChanged\", value: string): void\r\n        }>();\r\n\r\n        // #region Values\r\n\r\n        const attributes = ref(props.modelValue.attributes ?? {});\r\n        const attributeValues = ref(props.modelValue.attributeValues ?? {});\r\n        const description = propertyRef(props.modelValue.description ?? \"\", \"Description\");\r\n        const name = propertyRef(props.modelValue.name ?? \"\", \"Name\");\r\n        const helpText = propertyRef(props.modelValue.helpText ?? \"\", \"HelpText\");\r\n        const isPersonalAllowed = propertyRef(props.modelValue.isPersonalAllowed, \"IsPersonalAllowed\");\r\n        const isSharedAllowed = propertyRef(props.modelValue.isSharedAllowed, \"IsSharedAllowed\");\r\n\r\n        // The properties that are being edited. This should only contain\r\n        // objects returned by propertyRef().\r\n        const propRefs = [description, name, helpText, isPersonalAllowed, isSharedAllowed];\r\n\r\n        // #endregion\r\n\r\n        // #region Computed Values\r\n\r\n        // #endregion\r\n\r\n        // #region Functions\r\n\r\n        // #endregion\r\n\r\n        // #region Event Handlers\r\n\r\n        // #endregion\r\n\r\n        // Watch for parental changes in our model value and update all our values.\r\n        watch(() => props.modelValue, () => {\r\n        updateRefValue(attributes, props.modelValue.attributes ?? {});\r\n        updateRefValue(attributeValues, props.modelValue.attributeValues ?? {});\r\n        updateRefValue(description, props.modelValue.description ?? \"\");\r\n        updateRefValue(name, props.modelValue.name ?? \"\");\r\n        updateRefValue(helpText, props.modelValue.helpText ?? \"\");\r\n        updateRefValue(isPersonalAllowed, props.modelValue.isPersonalAllowed);\r\n        updateRefValue(isSharedAllowed, props.modelValue.isSharedAllowed);\r\n        });\r\n\r\n        // Determines which values we want to track changes on (defined in the\r\n        // array) and then emit a new object defined as newValue.\r\n        watch([attributeValues, ...propRefs], () => {\r\n        const newValue: SnippetTypeBag = {\r\n        ...props.modelValue,\r\n        attributeValues: attributeValues.value,\r\n        description: description.value,\r\n        name: name.value,\r\n        helpText: helpText.value,\r\n        isPersonalAllowed: isPersonalAllowed.value,\r\n        isSharedAllowed: isSharedAllowed.value,\r\n        };\r\n\r\n        emit(\"update:modelValue\", newValue);\r\n        });\r\n\r\n        // Watch for any changes to props that represent properties and then\r\n        // automatically emit which property changed.\r\n        watchPropertyChanges(propRefs, emit);\r\n    </script>\r\n","<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <fieldset>\r\n\r\n        <ValueDetailList :modelValue=\"topValues\" />\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-md-6\">\r\n                <ValueDetailList :modelValue=\"leftSideValues\" />\r\n            </div>\r\n\r\n            <div class=\"col-md-6\">\r\n                <ValueDetailList :modelValue=\"rightSideValues\" />\r\n            </div>\r\n        </div>\r\n\r\n        <AttributeValuesContainer :modelValue=\"attributeValues\" :attributes=\"attributes\" :numberOfColumns=\"2\" />\r\n    </fieldset>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { computed, PropType, ref } from \"vue\";\r\n    import AttributeValuesContainer from \"@Obsidian/Controls/attributeValuesContainer\";\r\n    import ValueDetailList from \"@Obsidian/Controls/valueDetailList\";\r\n    import { ValueDetailListItemBuilder } from \"@Obsidian/Core/Controls/valueDetailListItemBuilder\";\r\n    import { ValueDetailListItem } from \"@Obsidian/Types/Controls/valueDetailListItem\";\r\n    import { SnippetTypeBag } from \"@Obsidian/ViewModels/Blocks/Communication/SnippetTypeDetail/snippetTypeBag\";\r\n    import { SnippetTypeDetailOptionsBag } from \"@Obsidian/ViewModels/Blocks/Communication/SnippetTypeDetail/snippetTypeDetailOptionsBag\";\r\n\r\n    const props = defineProps({\r\n        modelValue: {\r\n            type: Object as PropType<SnippetTypeBag | null>,\r\n            required: false\r\n        },\r\n\r\n        options: {\r\n            type: Object as PropType<SnippetTypeDetailOptionsBag>,\r\n            required: true\r\n        }\r\n    });\r\n\r\n    // #region Values\r\n\r\n    const attributes = ref(props.modelValue?.attributes ?? {});\r\n    const attributeValues = ref(props.modelValue?.attributeValues ?? {});\r\n\r\n    // #endregion\r\n\r\n    // #region Computed Values\r\n\r\n    /** The values to display full-width at the top of the block. */\r\n    const topValues = computed((): ValueDetailListItem[] => {\r\n        const valueBuilder = new ValueDetailListItemBuilder();\r\n\r\n        if (!props.modelValue) {\r\n            return valueBuilder.build();\r\n        }\r\n\r\n        if (props.modelValue.description) {\r\n            valueBuilder.addTextValue(\"Description\", props.modelValue.description);\r\n        }\r\n\r\n        return valueBuilder.build();\r\n    });\r\n\r\n    /** The values to display at half-width on the left side of the block. */\r\n    const leftSideValues = computed((): ValueDetailListItem[] => {\r\n        const valueBuilder = new ValueDetailListItemBuilder();\r\n\r\n        if (!props.modelValue) {\r\n            return valueBuilder.build();\r\n        }\r\n\r\n        return valueBuilder.build();\r\n    });\r\n\r\n    /** The values to display at half-width on the left side of the block. */\r\n    const rightSideValues = computed((): ValueDetailListItem[] => {\r\n        const valueBuilder = new ValueDetailListItemBuilder();\r\n\r\n        if (!props.modelValue) {\r\n            return valueBuilder.build();\r\n        }\r\n\r\n        return valueBuilder.build();\r\n    });\r\n\r\n    // #endregion\r\n\r\n    // #region Functions\r\n\r\n    // #endregion\r\n\r\n    // #region Event Handlers\r\n\r\n    // #endregion\r\n</script>\r\n","// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nexport const enum NavigationUrlKey {\r\n    ParentPage = \"ParentPage\"\r\n}\r\n","<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <NotificationBox v-if=\"blockError\" alertType=\"warning\">{{ blockError }}</NotificationBox>\r\n\r\n    <NotificationBox v-if=\"errorMessage\" alertType=\"danger\">{{ errorMessage }}</NotificationBox>\r\n\r\n    <DetailBlock v-if=\"!blockError\"\r\n                 v-model:mode=\"panelMode\"\r\n                 :name=\"panelName\"\r\n                 :labels=\"blockLabels\"\r\n                 :entityKey=\"entityKey\"\r\n                 :entityTypeGuid=\"entityTypeGuid\"\r\n                 :entityTypeName=\"entityTypeName\"\r\n                 :isAuditHidden=\"false\"\r\n                 :isBadgesVisible=\"true\"\r\n                 :isDeleteVisible=\"isEditable\"\r\n                 :isEditVisible=\"isEditable\"\r\n                 :isFollowVisible=\"false\"\r\n                 :isSecurityHidden=\"false\"\r\n                 @cancelEdit=\"onCancelEdit\"\r\n                 @delete=\"onDelete\"\r\n                 @edit=\"onEdit\"\r\n                 @save=\"onSave\">\r\n        <template #view>\r\n            <ViewPanel :modelValue=\"snippetTypeViewBag\" :options=\"options\" />\r\n        </template>\r\n\r\n        <template #edit>\r\n            <EditPanel v-model=\"snippetTypeEditBag\" :options=\"options\" @propertyChanged=\"onPropertyChanged\" />\r\n        </template>\r\n    </DetailBlock>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { computed, ref } from \"vue\";\r\n    import NotificationBox from \"@Obsidian/Controls/notificationBox.obs\";\r\n    import { EntityType } from \"@Obsidian/SystemGuids/entityType\";\r\n    import DetailBlock from \"@Obsidian/Templates/detailBlock\";\r\n    import { DetailPanelMode } from \"@Obsidian/Enums/Controls/detailPanelMode\";\r\n    import { PanelAction } from \"@Obsidian/Types/Controls/panelAction\";\r\n    import EditPanel from \"./SnippetTypeDetail/editPanel.partial.obs\";\r\n    import ViewPanel from \"./SnippetTypeDetail/viewPanel.partial.obs\";\r\n    import { getSecurityGrant, provideSecurityGrant, refreshDetailAttributes, useConfigurationValues, useInvokeBlockAction } from \"@Obsidian/Utility/block\";\r\n    import { debounce } from \"@Obsidian/Utility/util\";\r\n    import { NavigationUrlKey } from \"./SnippetTypeDetail/types.partial\";\r\n    import { DetailBlockBox } from \"@Obsidian/ViewModels/Blocks/detailBlockBox\";\r\n    import { SnippetTypeBag } from \"@Obsidian/ViewModels/Blocks/Communication/SnippetTypeDetail/snippetTypeBag\";\r\n    import { SnippetTypeDetailOptionsBag } from \"@Obsidian/ViewModels/Blocks/Communication/SnippetTypeDetail/snippetTypeDetailOptionsBag\";\r\n\r\n    const config = useConfigurationValues<DetailBlockBox<SnippetTypeBag, SnippetTypeDetailOptionsBag>>();\r\n    const invokeBlockAction = useInvokeBlockAction();\r\n    const securityGrant = getSecurityGrant(config.securityGrantToken);\r\n\r\n    // #region Values\r\n\r\n    const blockError = ref(\"\");\r\n    const errorMessage = ref(\"\");\r\n\r\n    const snippetTypeViewBag = ref(config.entity);\r\n    const snippetTypeEditBag = ref<SnippetTypeBag>({} as SnippetTypeBag);\r\n\r\n    const entityTypeGuid = EntityType.SnippetType;\r\n\r\n    const panelMode = ref<DetailPanelMode>(DetailPanelMode.View);\r\n\r\n    // The properties that are being edited in the UI. This is used to\r\n    // inform the server which incoming values have valid data in them.\r\n    const validProperties = [\r\n        \"attributeValues\",\r\n        \"description\",\r\n        \"helpText\",\r\n        \"isPersonalAllowed\",\r\n        \"isSharedAllowed\",\r\n        \"name\"\r\n    ];\r\n\r\n    const refreshAttributesDebounce = debounce(() => refreshDetailAttributes(snippetTypeEditBag, validProperties, invokeBlockAction), undefined, true);\r\n\r\n    // #endregion\r\n\r\n    // #region Computed Values\r\n\r\n    /**\r\n     * The entity name to display in the block panel.\r\n     */\r\n    const panelName = computed((): string => {\r\n        return snippetTypeViewBag.value?.name ?? \"\";\r\n    });\r\n\r\n    const entityTypeName = computed((): string => {\r\n        return snippetTypeViewBag.value?.name ?? \"New Snippet Type\";\r\n    });\r\n\r\n    /**\r\n     * The identifier key value for this entity.\r\n     */\r\n    const entityKey = computed((): string => {\r\n        return snippetTypeViewBag.value?.idKey ?? \"\";\r\n    });\r\n\r\n    /**\r\n     * Additional labels to display in the block panel.\r\n     */\r\n    const blockLabels = computed((): PanelAction[] | undefined => {\r\n        const labels: PanelAction[] = [];\r\n\r\n        if (panelMode.value !== DetailPanelMode.View) {\r\n            return undefined;\r\n        }\r\n\r\n        return labels;\r\n    });\r\n\r\n    const isEditable = computed((): boolean => {\r\n        return config.isEditable === true;\r\n    });\r\n\r\n    const options = computed((): SnippetTypeDetailOptionsBag => {\r\n        return config.options ?? {};\r\n    });\r\n\r\n    // #endregion\r\n\r\n    // #region Functions\r\n\r\n    // #endregion\r\n\r\n    // #region Event Handlers\r\n\r\n    /**\r\n     * Event handler for the Cancel button being clicked while in Edit mode.\r\n     * Handles redirect to parent page if creating a new entity.\r\n     *\r\n     * @returns true if the panel should leave edit mode; false if it should stay in edit mode; or a string containing a redirect URL.\r\n     */\r\n    async function onCancelEdit(): Promise<boolean | string> {\r\n        if (!snippetTypeEditBag.value?.idKey) {\r\n            if (config.navigationUrls?.[NavigationUrlKey.ParentPage]) {\r\n                return config.navigationUrls[NavigationUrlKey.ParentPage];\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Event handler for the Delete button being clicked. Sends the\r\n     * delete request to the server and then redirects to the target page.\r\n     *\r\n     * @returns false if it should stay on the page; or a string containing a redirect URL.\r\n     */\r\n    async function onDelete(): Promise<false | string> {\r\n        errorMessage.value = \"\";\r\n\r\n        const result = await invokeBlockAction<string>(\"Delete\", {\r\n            key: snippetTypeViewBag.value?.idKey\r\n        });\r\n\r\n        if (result.isSuccess && result.data) {\r\n            return result.data;\r\n        }\r\n        else {\r\n            errorMessage.value = result.errorMessage ?? \"Unknown error while trying to delete snippet type.\";\r\n\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Event handler for the Edit button being clicked. Request the edit\r\n     * details from the server and then enter edit mode.\r\n     *\r\n     * @returns true if the panel should enter edit mode; otherwise false.\r\n     */\r\n    async function onEdit(): Promise<boolean> {\r\n        const result = await invokeBlockAction<DetailBlockBox<SnippetTypeBag, SnippetTypeDetailOptionsBag>>(\"Edit\", {\r\n            key: snippetTypeViewBag.value?.idKey\r\n        });\r\n\r\n        if (result.isSuccess && result.data && result.data.entity) {\r\n            snippetTypeEditBag.value = result.data.entity;\r\n\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Event handler for when a value has changed that has an associated\r\n     * C# property name. This is used to detect changes to values that\r\n     * might cause qualified attributes to either show up or not show up.\r\n     *\r\n     * @param propertyName The name of the C# property that was changed.\r\n     */\r\n    function onPropertyChanged(propertyName: string): void {\r\n        // If we don't have any qualified attribute properties or this property\r\n        // is not one of them then do nothing.\r\n        if (!config.qualifiedAttributeProperties || !config.qualifiedAttributeProperties.some(n => n.toLowerCase() === propertyName.toLowerCase())) {\r\n            return;\r\n        }\r\n\r\n        refreshAttributesDebounce();\r\n    }\r\n\r\n    /**\r\n     * Event handler for the panel's Save event. Send the data to the server\r\n     * to be saved and then leave edit mode or redirect to target page.\r\n     *\r\n     * @returns true if the panel should leave edit mode; false if it should stay in edit mode; or a string containing a redirect URL.\r\n     */\r\n    async function onSave(): Promise<boolean | string> {\r\n        errorMessage.value = \"\";\r\n\r\n        const data: DetailBlockBox<SnippetTypeBag, SnippetTypeDetailOptionsBag> = {\r\n            entity: snippetTypeEditBag.value,\r\n            isEditable: true,\r\n            validProperties: validProperties\r\n        };\r\n\r\n        const result = await invokeBlockAction<SnippetTypeBag | string>(\"Save\", {\r\n            box: data\r\n        });\r\n\r\n        if (result.isSuccess && result.data) {\r\n            if (result.statusCode === 200 && typeof result.data === \"object\") {\r\n                snippetTypeViewBag.value = result.data;\r\n\r\n                return true;\r\n            }\r\n            else if (result.statusCode === 201 && typeof result.data === \"string\") {\r\n                return result.data;\r\n            }\r\n        }\r\n\r\n        errorMessage.value = result.errorMessage ?? \"Unknown error while trying to save snippet type.\";\r\n\r\n        return false;\r\n    }\r\n\r\n    // #endregion\r\n\r\n    provideSecurityGrant(securityGrant);\r\n\r\n    // Handle any initial error conditions or the need to go into edit mode.\r\n    if (config.errorMessage) {\r\n        blockError.value = config.errorMessage;\r\n    }\r\n    else if (!config.entity) {\r\n        blockError.value = \"The specified snippet type could not be viewed.\";\r\n    }\r\n    else if (!config.entity.idKey) {\r\n        snippetTypeEditBag.value = config.entity;\r\n        panelMode.value = DetailPanelMode.Add;\r\n    }\r\n</script>\r\n"],"names":["attributes","ref","_props$modelValue$att","props","modelValue","attributeValues","_props$modelValue$att2","description","propertyRef","_props$modelValue$des","name","_props$modelValue$nam","helpText","_props$modelValue$hel","isPersonalAllowed","isSharedAllowed","propRefs","watch","_props$modelValue$att3","_props$modelValue$att4","_props$modelValue$des2","_props$modelValue$nam2","_props$modelValue$hel2","updateRefValue","newValue","_objectSpread","value","emit","watchPropertyChanges","_props$modelValue","_props$modelValue2","topValues","computed","valueBuilder","ValueDetailListItemBuilder","build","addTextValue","leftSideValues","rightSideValues","NavigationUrlKey","config","useConfigurationValues","invokeBlockAction","useInvokeBlockAction","securityGrant","getSecurityGrant","securityGrantToken","blockError","errorMessage","snippetTypeViewBag","entity","snippetTypeEditBag","entityTypeGuid","EntityType","SnippetType","panelMode","DetailPanelMode","View","validProperties","refreshAttributesDebounce","debounce","refreshDetailAttributes","undefined","panelName","_snippetTypeViewBag$v","_snippetTypeViewBag$v2","entityTypeName","_snippetTypeViewBag$v3","_snippetTypeViewBag$v4","entityKey","_snippetTypeViewBag$v5","_snippetTypeViewBag$v6","idKey","blockLabels","labels","isEditable","options","_config$options","onCancelEdit","_onCancelEdit","apply","arguments","_asyncToGenerator","_snippetTypeEditBag$v","_config$navigationUrl","navigationUrls","ParentPage","onDelete","_onDelete","_snippetTypeViewBag$v7","result","key","isSuccess","data","_result$errorMessage","onEdit","_onEdit","_snippetTypeViewBag$v8","onPropertyChanged","propertyName","qualifiedAttributeProperties","some","n","toLowerCase","onSave","_onSave","_result$errorMessage2","box","statusCode","provideSecurityGrant","Add"],"mappings":"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"}