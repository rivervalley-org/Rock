{"version":3,"file":"transactionEntry.js","sources":["../../src/Finance/transactionEntry.ts"],"sourcesContent":["ï»¿// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { Guid } from \"@Obsidian/Types\";\r\nimport DropDownList from \"@Obsidian/Controls/dropDownList\";\r\nimport CurrencyBox from \"@Obsidian/Controls/currencyBox\";\r\nimport { defineComponent } from \"vue\";\r\nimport DatePicker from \"@Obsidian/Controls/datePicker.obs\";\r\nimport RockButton from \"@Obsidian/Controls/rockButton\";\r\nimport { newGuid } from \"@Obsidian/Utility/guid\";\r\nimport { RockDateTime } from \"@Obsidian/Utility/rockDateTime\";\r\nimport NotificationBox from \"@Obsidian/Controls/notificationBox.obs\";\r\nimport { asFormattedString } from \"@Obsidian/Utility/numberUtils\";\r\nimport { useConfigurationValues, useInvokeBlockAction } from \"@Obsidian/Utility/block\";\r\nimport Toggle from \"@Obsidian/Controls/toggle\";\r\nimport { useStore } from \"@Obsidian/PageState\";\r\nimport TextBox from \"@Obsidian/Controls/textBox\";\r\nimport { asCommaAnd } from \"@Obsidian/Utility/stringUtils\";\r\nimport GatewayControl from \"@Obsidian/Controls/gatewayControl\";\r\nimport { provideSubmitPayment } from \"@Obsidian/Core/Controls/financialGateway\";\r\nimport { GatewayControlBag } from \"@Obsidian/ViewModels/Controls/gatewayControlBag\";\r\nimport RockValidation from \"@Obsidian/Controls/rockValidation\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport { PersonBag } from \"@Obsidian/ViewModels/Entities/personBag\";\r\nimport { FinancialAccountBag } from \"@Obsidian/ViewModels/Entities/financialAccountBag\";\r\n\r\nconst store = useStore();\r\n\r\nexport type ProcessTransactionArgs = {\r\n    isGivingAsPerson: boolean;\r\n    email: string;\r\n    phoneNumber: string;\r\n    phoneCountryCode: string;\r\n    accountAmounts: Record<string, number>;\r\n    street1: string;\r\n    street2: string;\r\n    city: string;\r\n    state: string;\r\n    postalCode: string;\r\n    country: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    businessName: string;\r\n    financialPersonSavedAccountGuid: Guid | null;\r\n    comment: string;\r\n    transactionEntityId: number | null;\r\n    referenceNumber: string;\r\n    campusGuid: Guid | null;\r\n    businessGuid: Guid | null;\r\n    frequencyValueGuid: Guid;\r\n    giftDate: string;\r\n    isGiveAnonymously: boolean;\r\n};\r\n\r\nexport default defineComponent({\r\n    name: \"Finance.TransactionEntry\",\r\n\r\n    components: {\r\n        CurrencyBox,\r\n        DropDownList,\r\n        DatePicker,\r\n        RockButton,\r\n        NotificationBox,\r\n        Toggle,\r\n        TextBox,\r\n        GatewayControl,\r\n        RockValidation\r\n    },\r\n\r\n    setup() {\r\n        const submitPayment = provideSubmitPayment();\r\n\r\n        return {\r\n            submitPayment,\r\n            invokeBlockAction: useInvokeBlockAction(),\r\n            configurationValues: useConfigurationValues<Record<string, unknown>>()\r\n        };\r\n    },\r\n\r\n    data() {\r\n        const configurationValues = useConfigurationValues<Record<string, unknown>>();\r\n        const campuses = configurationValues[\"campuses\"] as ListItemBag[] || [];\r\n        const frequencies = configurationValues[\"frequencies\"] as ListItemBag[] || [];\r\n\r\n        return {\r\n            loading: false,\r\n            gatewayErrorMessage: \"\",\r\n            gatewayValidationFields: {} as Record<string, string>,\r\n            transactionGuid: newGuid(),\r\n            criticalError: \"\",\r\n            pageIndex: 1,\r\n            page1Error: \"\",\r\n            args: {\r\n                isGivingAsPerson: true,\r\n                email: \"\",\r\n                phoneNumber: \"\",\r\n                phoneCountryCode: \"\",\r\n                accountAmounts: {},\r\n                street1: \"\",\r\n                street2: \"\",\r\n                city: \"\",\r\n                state: \"\",\r\n                postalCode: \"\",\r\n                country: \"\",\r\n                firstName: \"\",\r\n                lastName: \"\",\r\n                businessName: \"\",\r\n                financialPersonSavedAccountGuid: null,\r\n                comment: \"\",\r\n                transactionEntityId: null,\r\n                referenceNumber: \"\",\r\n                campusGuid: campuses.length > 0 ? campuses[0].value : \"\",\r\n                businessGuid: null,\r\n                frequencyValueGuid: frequencies.length > 0 ? frequencies[0].value : \"\",\r\n                giftDate: RockDateTime.now().toASPString(\"yyyy-MM-dd\"),\r\n                isGiveAnonymously: false\r\n            } as ProcessTransactionArgs\r\n        };\r\n    },\r\n\r\n    computed: {\r\n        totalAmount(): number {\r\n            let total = 0;\r\n\r\n            for (const accountKey in this.args.accountAmounts) {\r\n                total += this.args.accountAmounts[accountKey];\r\n            }\r\n\r\n            return total;\r\n        },\r\n\r\n        totalAmountFormatted(): string {\r\n            return `$${asFormattedString(this.totalAmount, 2)}`;\r\n        },\r\n\r\n        gatewayControlModel(): GatewayControlBag {\r\n            return this.configurationValues[\"gatewayControl\"] as GatewayControlBag;\r\n        },\r\n\r\n        currentPerson(): PersonBag | null {\r\n            return store.state.currentPerson;\r\n        },\r\n\r\n        currentPersonFullName(): string | null {\r\n            const currentPerson = this.currentPerson;\r\n\r\n            if (currentPerson === null) {\r\n                return null;\r\n            }\r\n\r\n            return `${currentPerson.nickName ?? \"\"} ${currentPerson.lastName ?? \"\"}`;\r\n        },\r\n\r\n        accounts(): FinancialAccountBag[] {\r\n            return this.configurationValues[\"financialAccounts\"] as FinancialAccountBag[] || [];\r\n        },\r\n\r\n        campuses(): ListItemBag[] {\r\n            return this.configurationValues[\"campuses\"] as ListItemBag[] || [];\r\n        },\r\n\r\n        frequencies(): ListItemBag[] {\r\n            return this.configurationValues[\"frequencies\"] as ListItemBag[] || [];\r\n        },\r\n\r\n        campusName(): string | null {\r\n            if (this.args.campusGuid === null) {\r\n                return null;\r\n            }\r\n\r\n            const matchedCampuses = this.campuses.filter(c => c.value === this.args.campusGuid);\r\n\r\n            return matchedCampuses.length >= 1 ? matchedCampuses[0].text ?? \"\" : null;\r\n        },\r\n\r\n        accountAndCampusString(): string {\r\n            const accountNames = [] as string[];\r\n\r\n            for (const accountKey in this.args.accountAmounts) {\r\n                const account = this.accounts.find(a => a.idKey === accountKey);\r\n\r\n                if (!account || !account.publicName) {\r\n                    continue;\r\n                }\r\n\r\n                accountNames.push(account.publicName);\r\n            }\r\n\r\n            if (this.campusName) {\r\n                return `${asCommaAnd(accountNames)} - ${this.campusName}`;\r\n            }\r\n\r\n            return asCommaAnd(accountNames);\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        goBack(): void {\r\n            this.pageIndex--;\r\n        },\r\n\r\n        onPageOneSubmit(): void {\r\n            if (this.totalAmount <= 0) {\r\n                this.page1Error = \"Please specify an amount\";\r\n                return;\r\n            }\r\n\r\n            this.page1Error = \"\";\r\n            this.pageIndex = 2;\r\n        },\r\n\r\n        /** This is the handler for submitting the page with the gateway control on it. This method tells\r\n         *  the gateway control to tokenize the input. Once tokenization is complete, then gateway success,\r\n         *  error, or validation handlers will be invoked. */\r\n        onPageTwoSubmit(): void {\r\n            this.loading = true;\r\n            this.gatewayErrorMessage = \"\";\r\n            this.gatewayValidationFields = {};\r\n            this.submitPayment();\r\n        },\r\n\r\n        /**\r\n         * The gateway indicated success and returned a token\r\n         * @param token\r\n         */\r\n        onGatewayControlSuccess(token: string): void {\r\n            this.loading = false;\r\n            this.args.referenceNumber = token;\r\n            this.pageIndex = 3;\r\n        },\r\n\r\n        /**\r\n         * The gateway indicated an error\r\n         * @param message\r\n         */\r\n        onGatewayControlError(message: string): void {\r\n            this.loading = false;\r\n            this.gatewayErrorMessage = message;\r\n        },\r\n\r\n        /**\r\n         * The gateway wants the user to fix some fields\r\n         * @param invalidFields\r\n         */\r\n        onGatewayControlValidation(invalidFields: Record<string, string>): void {\r\n            this.loading = false;\r\n            this.gatewayValidationFields = invalidFields;\r\n        },\r\n\r\n        async onPageThreeSubmit(): Promise<void> {\r\n            this.loading = true;\r\n\r\n            try {\r\n                await this.invokeBlockAction(\"ProcessTransaction\", {\r\n                    args: this.args,\r\n                    transactionGuid: this.transactionGuid\r\n                });\r\n                this.pageIndex = 4;\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n            }\r\n            finally {\r\n                this.loading = false;\r\n            }\r\n        }\r\n    },\r\n\r\n    watch: {\r\n        currentPerson: {\r\n            immediate: true,\r\n            handler(): void {\r\n                if (!this.currentPerson) {\r\n                    return;\r\n                }\r\n\r\n                this.args.firstName = this.args.firstName || this.currentPerson.firstName || \"\";\r\n                this.args.lastName = this.args.lastName || this.currentPerson.lastName || \"\";\r\n                this.args.email = this.args.email || this.currentPerson.email || \"\";\r\n            }\r\n        }\r\n    },\r\n\r\n    template: `\r\n<div class=\"transaction-entry-v2\">\r\n    <NotificationBox v-if=\"criticalError\" danger>{{criticalError}}</NotificationBox>\r\n    <template v-else-if=\"!gatewayControlModel || !gatewayControlModel.fileUrl\">\r\n        <h4>Welcome to Rock's On-line Giving Experience</h4>\r\n        <p>\r\n            There is currently no gateway configured.\r\n        </p>\r\n    </template>\r\n    <template v-else-if=\"pageIndex === 1\">\r\n        <h2>Your Generosity Changes Lives (Vue)</h2>\r\n        <template v-for=\"account in accounts\">\r\n            <CurrencyBox :label=\"account.publicName\" v-model=\"args.accountAmounts[account.guid]\" />\r\n        </template>\r\n        <DropDownList label=\"Campus\" v-model=\"args.campusGuid\" :showBlankItem=\"false\" :items=\"campuses\" />\r\n        <DropDownList label=\"Frequency\" v-model=\"args.frequencyValueGuid\" :showBlankItem=\"false\" :items=\"frequencies\" />\r\n        <DatePicker label=\"Process Gift On\" v-model=\"args.giftDate\" />\r\n        <NotificationBox alertType=\"validation\" v-if=\"page1Error\">{{page1Error}}</NotificationBox>\r\n        <RockButton btnType=\"primary\" @click=\"onPageOneSubmit\">Give Now</RockButton>\r\n    </template>\r\n    <template v-else-if=\"pageIndex === 2\">\r\n        <div class=\"amount-summary\">\r\n            <div class=\"amount-summary-text\">\r\n                {{accountAndCampusString}}\r\n            </div>\r\n            <div class=\"amount-display\">\r\n                {{totalAmountFormatted}}\r\n            </div>\r\n        </div>\r\n        <div>\r\n            <NotificationBox v-if=\"gatewayErrorMessage\" alertType=\"danger\">{{gatewayErrorMessage}}</NotificationBox>\r\n            <RockValidation :errors=\"gatewayValidationFields\" />\r\n            <div class=\"hosted-payment-control\">\r\n                <GatewayControl\r\n                    :gatewayControlModel=\"gatewayControlModel\"\r\n                    @success=\"onGatewayControlSuccess\"\r\n                    @error=\"onGatewayControlError\"\r\n                    @validation=\"onGatewayControlValidation\" />\r\n            </div>\r\n            <div class=\"navigation actions\">\r\n                <RockButton btnType=\"default\" @click=\"goBack\" :isLoading=\"loading\">Back</RockButton>\r\n                <RockButton btnType=\"primary\" class=\"pull-right\" @click=\"onPageTwoSubmit\" :isLoading=\"loading\">Next</RockButton>\r\n            </div>\r\n        </div>\r\n    </template>\r\n    <template v-else-if=\"pageIndex === 3\">\r\n        <Toggle v-model=\"args.isGivingAsPerson\">\r\n            <template #on>Individual</template>\r\n            <template #off>Business</template>\r\n        </Toggle>\r\n        <template v-if=\"args.isGivingAsPerson && currentPerson\">\r\n            <div class=\"form-control-static\">\r\n                {{currentPersonFullName}}\r\n            </div>\r\n        </template>\r\n        <template v-else-if=\"args.isGivingAsPerson\">\r\n            <TextBox v-model=\"args.firstName\" placeholder=\"First Name\" class=\"margin-b-sm\" />\r\n            <TextBox v-model=\"args.lastName\" placeholder=\"Last Name\" class=\"margin-b-sm\" />\r\n        </template>\r\n        <div class=\"navigation actions margin-t-md\">\r\n            <RockButton :isLoading=\"loading\" @click=\"goBack\">Back</RockButton>\r\n            <RockButton :isLoading=\"loading\" btnType=\"primary\" class=\"pull-right\" @click=\"onPageThreeSubmit\">Finish</RockButton>\r\n        </div>\r\n    </template>\r\n    <template v-else-if=\"pageIndex === 4\">\r\n        Last Page\r\n    </template>\r\n</div>`\r\n});\r\n"],"names":["store","useStore","defineComponent","name","components","CurrencyBox","DropDownList","DatePicker","RockButton","NotificationBox","Toggle","TextBox","GatewayControl","RockValidation","setup","submitPayment","provideSubmitPayment","invokeBlockAction","useInvokeBlockAction","configurationValues","useConfigurationValues","data","campuses","frequencies","loading","gatewayErrorMessage","gatewayValidationFields","transactionGuid","newGuid","criticalError","pageIndex","page1Error","args","isGivingAsPerson","email","phoneNumber","phoneCountryCode","accountAmounts","street1","street2","city","state","postalCode","country","firstName","lastName","businessName","financialPersonSavedAccountGuid","comment","transactionEntityId","referenceNumber","campusGuid","length","value","businessGuid","frequencyValueGuid","giftDate","RockDateTime","now","toASPString","isGiveAnonymously","computed","totalAmount","total","accountKey","totalAmountFormatted","concat","asFormattedString","gatewayControlModel","currentPerson","currentPersonFullName","_currentPerson$nickNa","_currentPerson$lastNa","nickName","accounts","campusName","_matchedCampuses$0$te","matchedCampuses","filter","c","text","accountAndCampusString","_this","accountNames","_loop","account","find","a","idKey","publicName","push","_ret","asCommaAnd","methods","goBack","onPageOneSubmit","onPageTwoSubmit","onGatewayControlSuccess","token","onGatewayControlError","message","onGatewayControlValidation","invalidFields","onPageThreeSubmit","_this2","_asyncToGenerator","e","console","log","watch","immediate","handler","template"],"mappings":"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"}