{"version":3,"file":"groupAttendanceDetail.obs.js","sources":["../../src/Group/GroupAttendanceDetail/utils.partial.ts","../../src/Group/GroupAttendanceDetail/didAttendFilter.partial.obs","../../src/Group/GroupAttendanceDetail/initialsFilter.partial.obs","../../../Rock.JavaScript.Obsidian/node_modules/style-inject/dist/style-inject.es.js","../../src/Group/GroupAttendanceDetail/cardCheckBox.partial.obs","../../src/Group/GroupAttendanceDetail/attendanceRoster.partial.obs","../../src/Group/GroupAttendanceDetail/campusFilter.partial.obs","../../src/Group/GroupAttendanceDetail/groupLocationPicker.partial.obs","../../src/Group/GroupAttendanceDetail/groupLocationScheduleDatePicker.partial.obs","../../src/Group/GroupAttendanceDetail/groupLocationSchedulePicker.partial.obs","../../src/Group/GroupAttendanceDetail/searchFilter.partial.obs","../../src/Group/groupAttendanceDetail.obs"],"sourcesContent":["// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n\r\nimport { AttendanceSortByDelegate, ModalOptionsBag, Switch, SwitchPosition } from \"./types.partial\";\r\nimport { GroupAttendanceDetailAttendanceBag } from \"@Obsidian/ViewModels/Blocks/Group/GroupAttendanceDetail/groupAttendanceDetailAttendanceBag\";\r\nimport { isPromise } from \"@Obsidian/Utility/promiseUtils\";\r\n\r\n//#region Filter Utilities\r\n\r\n/**\r\n * Binds `this` to the `attendanceFilter` instance for all its methods.\r\n *\r\n * This allows each method to be executed as a function instead of an instance method while still retaining the original execution context (`this` reference). (see example)\r\n *\r\n * @example\r\n * // Assign the filter method to a variable.\r\n * const f = attendanceFilter.filter;\r\n *\r\n * // If the original `attendanceFilter.filter()` method definition contained a `this` keyword,\r\n * // then `this` will still reference the original `attendanceFilter` instance when invoked with:\r\n * f(something);\r\n */\r\nfunction bindThis(attendanceFilter: IAttendanceFilter): void {\r\n    attendanceFilter.filter = attendanceFilter.filter.bind(attendanceFilter);\r\n    attendanceFilter.hasFilter = attendanceFilter.hasFilter.bind(attendanceFilter);\r\n    attendanceFilter.isFilter = attendanceFilter.isFilter.bind(attendanceFilter);\r\n}\r\n\r\n/**\r\n * Represents an attendance filter.\r\n */\r\nexport interface IAttendanceFilter {\r\n    /**\r\n     * Filters an `attendance` record.\r\n     *\r\n     * @returns `true` if the `attendance` matches the filter; otherwise, `false`.\r\n     */\r\n    filter(attendance: GroupAttendanceDetailAttendanceBag): boolean;\r\n    /**\r\n     * Returns `true` if this filter is the same instance as `attendanceFilter`; otherwise, `false`.\r\n     *\r\n     * Useful if you want to check if this is a specific type of filter.\r\n     */\r\n    isFilter(attendanceFilter: IAttendanceFilter): boolean;\r\n    /**\r\n     * Returns `true` if this filter is the same instance as `attendanceFilter` OR if `attendanceFilter` is one of its own aggregate filters; otherwise, `false`.\r\n     *\r\n     * Useful if you want to check if this filter is or has a specific type of filter.\r\n     */\r\n    hasFilter(attendanceFilter: IAttendanceFilter): boolean;\r\n}\r\n\r\n/**\r\n * Represents an attendance filter based on multiple filters.\r\n */\r\nexport interface IAggregateAttendanceFilter extends IAttendanceFilter {\r\n    /**\r\n     * The aggregate child filters.\r\n     */\r\n    filters: IAttendanceFilter[];\r\n}\r\n\r\n/**\r\n * Creates a new `IAttendanceFilter` object using the specified filter function.\r\n */\r\nexport function createFilter(filter: (attendance: GroupAttendanceDetailAttendanceBag) => boolean): IAttendanceFilter {\r\n    const attendanceFilter: IAttendanceFilter = {\r\n        filter,\r\n        hasFilter(filter: IAttendanceFilter): boolean {\r\n            return hasSameFilter(this, filter);\r\n        },\r\n        isFilter(filter: IAttendanceFilter): boolean {\r\n            return isSameFilter(this, filter);\r\n        }\r\n    };\r\n\r\n    // Bind the `this` keyword to the `attendanceFilter` instance.\r\n    bindThis(attendanceFilter);\r\n\r\n    return attendanceFilter;\r\n}\r\n\r\n/**\r\n * Creates a new `IAggregateAttendanceFilter` object using the specified filters and filter function.\r\n */\r\nexport function createAggregateFilter(filters: IAttendanceFilter[], filter: (filters: IAttendanceFilter[], attendance: GroupAttendanceDetailAttendanceBag) => boolean): IAggregateAttendanceFilter {\r\n    const aggregateAttendanceFilter: IAggregateAttendanceFilter = {\r\n        hasFilter(filter: IAttendanceFilter): boolean {\r\n            return hasSameFilter(this, filter);\r\n        },\r\n        isFilter(filter: IAttendanceFilter): boolean {\r\n            return isSameFilter(this, filter);\r\n        },\r\n        filters: filters,\r\n        filter(attendance: GroupAttendanceDetailAttendanceBag): boolean {\r\n            return filter(this.filters, attendance);\r\n        }\r\n    };\r\n\r\n    // Bind the `this` keyword to the `attendanceFilter` instance.\r\n    bindThis(aggregateAttendanceFilter);\r\n\r\n    return aggregateAttendanceFilter;\r\n}\r\n\r\n/**\r\n * A filter that returns `true` for any attendance record.\r\n */\r\nexport const NoFilter = createFilter(_ => true);\r\n\r\n/**\r\n * A filter that returns `true` if `attendance.didAttend == true`.\r\n */\r\nexport const DidAttendFilter = createFilter(attendance => attendance.didAttend);\r\n\r\n// Cache \"last name starts with\" filters.\r\nconst lastNameStartsWithFilters: Record<string, IAttendanceFilter> = {};\r\n\r\n/**\r\n * Creates a new (or returns an existing) `IAttendanceFilter` object whose `filter` method that returns `true` when the `attendance.lastName` starts with the specified initial.\r\n */\r\nexport function getOrCreateLastNameStartsWithFilter(lastNameInitial: string): IAttendanceFilter {\r\n    let lastNameStartsWithFilter = lastNameStartsWithFilters[lastNameInitial];\r\n\r\n    if (lastNameStartsWithFilter) {\r\n        return lastNameStartsWithFilter;\r\n    }\r\n\r\n    lastNameStartsWithFilter = createFilter(attendance => attendance.lastName?.startsWith(lastNameInitial) === true);\r\n    lastNameStartsWithFilters[lastNameInitial] = lastNameStartsWithFilter;\r\n\r\n    return lastNameStartsWithFilter;\r\n}\r\n\r\n// Cache \"first name starts with\" filters.\r\nconst firstNameStartsWithFilters: Record<string, IAttendanceFilter> = {};\r\n\r\n/**\r\n * Creates a new (or returns an existing) `IAttendanceFilter` object whose `filter` method that returns `true` when the `attendance.nickName` starts with the specified initial.\r\n */\r\nexport function getOrCreateFirstNameStartsWithFilter(firstNameInitial: string): IAttendanceFilter {\r\n    let firstNameStartsWithFilter = firstNameStartsWithFilters[firstNameInitial];\r\n\r\n    if (firstNameStartsWithFilter) {\r\n        return firstNameStartsWithFilter;\r\n    }\r\n\r\n    firstNameStartsWithFilter = createFilter(attendance => attendance.nickName?.startsWith(firstNameInitial) === true);\r\n    firstNameStartsWithFilters[firstNameInitial] = firstNameStartsWithFilter;\r\n\r\n    return firstNameStartsWithFilter;\r\n}\r\n\r\n/**\r\n * Creates a filter that will return `true` if any of the specified `attendanceFilters` returns `true`; otherwise, `false`.\r\n *\r\n * The aggregate filters can be modified via the `filters` property of the returned object.\r\n */\r\nexport function createSomeFilter(...attendanceFilters: IAttendanceFilter[]): IAggregateAttendanceFilter {\r\n    return createAggregateFilter(attendanceFilters, (filters, attendance) => filters.some(filter => filter.filter(attendance)));\r\n}\r\n\r\n/**\r\n * Creates a filter that will return `true` if all of the specified `attendanceFilters` returns `true`; otherwise, `false`.\r\n *\r\n * The aggregate filters can be modified via the `filters` property of the returned object.\r\n */\r\nexport function createEveryFilter(...attendanceFilters: IAttendanceFilter[]): IAggregateAttendanceFilter {\r\n    return createAggregateFilter(attendanceFilters, (filters, attendance) => filters.every(filter => filter.filter(attendance)));\r\n}\r\n\r\n/**\r\n * Returns `true` if `attendanceFilter1` is the same instance as `attendanceFilter2`; otherwise, `false`.\r\n */\r\nfunction isSameFilter(attendanceFilter1: IAttendanceFilter, attendanceFilter2: IAttendanceFilter): boolean {\r\n    return attendanceFilter1?.filter === attendanceFilter2?.filter;\r\n}\r\n\r\n/**\r\n * Returns `true` if `attendanceFilter1` is the same instance as `attendanceFilter2` OR if `attendanceFilter2` is one of `attendanceFilter1`'s own aggregate filters; otherwise, `false`\r\n */\r\nfunction hasSameFilter(attendanceFilter1: IAttendanceFilter, attendanceFilter2: IAttendanceFilter): boolean {\r\n    if (attendanceFilter1?.filter === attendanceFilter2?.filter) {\r\n        return true;\r\n    }\r\n\r\n    if (isAggregateAttendanceFilter(attendanceFilter1)) {\r\n        return attendanceFilter1.filters.some(f => isSameFilter(f, attendanceFilter2));\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/**\r\n * Determines if an `IAttendanceFilter` instance is an instance of `IAggregateAttendanceFilter`.\r\n */\r\nfunction isAggregateAttendanceFilter(attendanceFilter: IAttendanceFilter): attendanceFilter is IAggregateAttendanceFilter {\r\n    return !!(attendanceFilter as IAggregateAttendanceFilter)?.filters;\r\n}\r\n\r\n//#endregion Filter Utilities\r\n\r\n//#region Sort Utilities\r\n\r\n/**\r\n * Creates a \"sort by\" delegate that sorts attendance records by `firstBy` then sorts by the `thenBys`, if defined.\r\n */\r\nexport function createSortBy(firstBy: AttendanceSortByDelegate, ...thenBys: AttendanceSortByDelegate[]): AttendanceSortByDelegate {\r\n    return (attendance1: GroupAttendanceDetailAttendanceBag, attendance2: GroupAttendanceDetailAttendanceBag): number => {\r\n        let comparison = firstBy(attendance1, attendance2);\r\n\r\n        // If attendance1 and attendance2 match, then run the additional `thenBy` comparisons.\r\n        let thenByIndex = 0;\r\n        let thenBy = thenBys ? thenBys[thenByIndex++] : null;\r\n        while (comparison === 0 && thenBy) {\r\n            comparison = thenBy(attendance1, attendance2);\r\n            thenBy = thenBys[thenByIndex++];\r\n        }\r\n\r\n        return comparison;\r\n    };\r\n}\r\n\r\n/**\r\n * A \"sort by\" delegate that sorts attendance records by `attendance.nickName`.\r\n */\r\nexport const sortByFirstName: AttendanceSortByDelegate = (attendance1: GroupAttendanceDetailAttendanceBag, attendance2: GroupAttendanceDetailAttendanceBag): number => {\r\n    return compareStrings(attendance1.nickName, attendance2.nickName);\r\n};\r\n\r\n/**\r\n * A \"sort by\" delegate that sorts attendance records by `attendance.lastName`.\r\n */\r\nexport const sortByLastName: AttendanceSortByDelegate = (attendance1: GroupAttendanceDetailAttendanceBag, attendance2: GroupAttendanceDetailAttendanceBag): number => {\r\n    return compareStrings(attendance1.lastName, attendance2.lastName);\r\n};\r\n\r\n/**\r\n * Returns the comparison value between two strings.\r\n *\r\n * -1: str1 < str2\r\n *  0: str1 == str2\r\n *  1: str1 > str2\r\n */\r\nfunction compareStrings(str1: string | null | undefined, str2: string | null | undefined): number {\r\n    return (str1 ?? \"\").localeCompare(str2 ?? \"\");\r\n}\r\n\r\n//#endregion Sort Utilities\r\n\r\n//#region Switch Utilities\r\n\r\n/**\r\n * Creates a switch that can be turned on and off.\r\n */\r\nexport function createSwitch(): Switch {\r\n    let position: SwitchPosition;\r\n    let isDisabled: boolean;\r\n\r\n    return {\r\n        get isOn(): boolean {\r\n            return !this.isDisabled && this.position === \"on\";\r\n        },\r\n        get isDisabled(): boolean {\r\n            return isDisabled;\r\n        },\r\n        get position(): SwitchPosition {\r\n            return position;\r\n        },\r\n        enable(): void {\r\n            isDisabled = false;\r\n        },\r\n        disable(): void {\r\n            isDisabled = true;\r\n        },\r\n        on(): void {\r\n            if (position === \"on\") {\r\n                return;\r\n            }\r\n\r\n            position = \"on\";\r\n        },\r\n        off(): void {\r\n            if (position === \"off\") {\r\n                return;\r\n            }\r\n\r\n            position = \"off\";\r\n        },\r\n        connectToFunc<Request>(func: (request: Request) => Promise<void>): typeof func {\r\n            return async (r: Request): Promise<void> => {\r\n                if (!this.isOn) {\r\n                    return;\r\n                }\r\n\r\n                return await func(r);\r\n            };\r\n        }\r\n    };\r\n}\r\n\r\n//#endregion Switch Utilities\r\n\r\n//#region Modal Utilities\r\n\r\n\r\n/**\r\n * Creates options that can be bound to a Modal component.\r\n */\r\nexport function createModalOptions<T extends Partial<ModalOptionsBag> & { onCancel?(): void | PromiseLike<void> }>(options: T): ModalOptionsBag {\r\n    let isOpen: boolean = true;\r\n    let isCanceled: boolean = true;\r\n\r\n    return {\r\n        cancelText: options.cancelText,\r\n        saveText: options.saveText,\r\n        text: options.text,\r\n        get isOpen(): boolean {\r\n            return isOpen;\r\n        },\r\n        set isOpen(newIsOpen: boolean) {\r\n            const wasOpen = isOpen;\r\n\r\n            // Call cancel callback if closed without saving.\r\n            if (isCanceled && wasOpen && !newIsOpen) {\r\n                if (options.onCancel) {\r\n                    const result = options.onCancel();\r\n                    if (isPromise(result)) {\r\n                        result.then(() => {\r\n                            isOpen = newIsOpen;\r\n                        });\r\n                    }\r\n                    else {\r\n                        isOpen = newIsOpen;\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n\r\n            isOpen = newIsOpen;\r\n        },\r\n        async onSave() {\r\n            isCanceled = false;\r\n\r\n            if (options.onSave) {\r\n                const result = options.onSave();\r\n                if (isPromise(result)) {\r\n                    await result;\r\n                }\r\n            }\r\n\r\n            this.isOpen = false;\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * Gets the full name for an attendee.\r\n */\r\nexport function getAttendanceFullName(attendance: GroupAttendanceDetailAttendanceBag): string {\r\n    return `${attendance.nickName} ${attendance.lastName}`;\r\n}\r\n\r\n//#endregion\r\n","<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <div class=\"did-attend-filter form-group\">\r\n        <RockFormField v-bind=\"standardFieldProps\" name=\"didAttendFilter\" :modelValue=\"allFilters\">\r\n            <div class=\"control-wrapper\">\r\n                <div class=\"btn-group\">\r\n                    <RockButton :btnType=\"getBtnType(didAttendFilterOrDefault.hasFilter(defaultFilter))\" @click=\"setDefaultOrDidAttendFilter(defaultFilter)\">All</RockButton>\r\n                    <RockButton :btnType=\"getBtnType(didAttendFilterOrDefault.hasFilter(DidAttendFilter))\" @click=\"setDefaultOrDidAttendFilter(DidAttendFilter)\">Present <span class=\"badge badge-primary\">{{ didAttendCount }}</span></RockButton>\r\n                </div>\r\n            </div>\r\n        </RockFormField>\r\n    </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { computed, PropType, ref, watch } from \"vue\";\r\n    import { DidAttendFilter, IAttendanceFilter, NoFilter } from \"./utils.partial\";\r\n    import RockButton from \"@Obsidian/Controls/rockButton\";\r\n    import RockFormField from \"@Obsidian/Controls/rockFormField\";\r\n    import { BtnType } from \"@Obsidian/Enums/Controls/btnType\";\r\n    import { LiteralUnion } from \"@Obsidian/Types/Utility/support\";\r\n    import { standardRockFormFieldProps, useStandardRockFormFieldProps } from \"@Obsidian/Utility/component\";\r\n    import { GroupAttendanceDetailAttendanceBag } from \"@Obsidian/ViewModels/Blocks/Group/GroupAttendanceDetail/groupAttendanceDetailAttendanceBag\";\r\n\r\n    const props = defineProps({\r\n\r\n        modelValue: {\r\n            type: Object as PropType<IAttendanceFilter>,\r\n            required: true\r\n        },\r\n\r\n        attendances: {\r\n            type: Object as PropType<GroupAttendanceDetailAttendanceBag[]>,\r\n            required: true\r\n        },\r\n\r\n\r\n        defaultFilter: {\r\n            type: Object as PropType<IAttendanceFilter>,\r\n            default: NoFilter\r\n        },\r\n\r\n        /**\r\n         * The BtnType when a filter button is unselected.\r\n         */\r\n        unselectedBtnType: {\r\n            type: String as PropType<LiteralUnion<BtnType>>,\r\n            default: BtnType.Default\r\n        },\r\n\r\n        /**\r\n         * The BtnType when a filter button is selected.\r\n         */\r\n        selectedBtnType: {\r\n            type: String as PropType<LiteralUnion<BtnType>>,\r\n            default: BtnType.Primary\r\n        },\r\n\r\n        ...standardRockFormFieldProps\r\n    });\r\n\r\n    const emit = defineEmits<{\r\n        (e: \"update:modelValue\", value: IAttendanceFilter): void\r\n    }>();\r\n\r\n    //#region Values\r\n\r\n    // Initialize the \"default or has attended filter\" based on the initial filter(s).\r\n    const didAttendFilterOrDefault = ref<typeof DidAttendFilter | typeof props.defaultFilter>(props.modelValue.hasFilter(DidAttendFilter) ? DidAttendFilter : props.defaultFilter);\r\n\r\n    //#endregion\r\n\r\n    //#region Computed Values\r\n\r\n    const allFilters = computed({\r\n        get(): IAttendanceFilter {\r\n            return props.modelValue;\r\n        },\r\n        set(newValue: IAttendanceFilter) {\r\n            emit(\"update:modelValue\", newValue);\r\n        }\r\n    });\r\n\r\n    const didAttendCount = computed<number>(() => props.attendances.filter(attendance => attendance.didAttend).length);\r\n\r\n    //#endregion\r\n\r\n    //#region Functions\r\n\r\n    /**\r\n     * Gets the BtnType based on whether or not a button is in a \"selected\" state.\r\n     */\r\n    function getBtnType(isSelected: boolean): LiteralUnion<BtnType> {\r\n        if (isSelected) {\r\n            return props.selectedBtnType;\r\n        }\r\n        else {\r\n            return props.unselectedBtnType;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the \"default or did attend\" filter.\r\n     */\r\n    function setDefaultOrDidAttendFilter(attendanceFilter: IAttendanceFilter): void {\r\n        didAttendFilterOrDefault.value = attendanceFilter;\r\n\r\n        notifyFiltersUpdated();\r\n    }\r\n\r\n    /**\r\n     * Builds and emits the aggregate filter.\r\n     */\r\n    function notifyFiltersUpdated(): void {\r\n        allFilters.value = didAttendFilterOrDefault.value;\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Watchers\r\n\r\n    // Clear all filters if the modelValue changes to NoFilter.\r\n    watch(() => props.modelValue, () => {\r\n        if (props.modelValue.isFilter(NoFilter)) {\r\n            didAttendFilterOrDefault.value = NoFilter;\r\n            notifyFiltersUpdated();\r\n        }\r\n    });\r\n\r\n    //#endregion\r\n\r\n    const standardFieldProps = useStandardRockFormFieldProps(props);\r\n</script>","<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <div class=\"initials-filter form-group\">\r\n        <RockFormField v-bind=\"standardFieldProps\" name=\"initialsFilter\" :modelValue=\"allFilters\">\r\n            <div class=\"control-wrapper\">\r\n                <div :class=\"`initial-buttons btn-group d-flex ${isScrollSupported ? 'overflow-hidden' : 'flex-wrap'}`\" ref=\"initialButtonsContainerElement\" @scroll=\"debouncedScrollCheck\">\r\n                    <button v-if=\"isScrollSupported && (isAnyInitialFilterOverflowingToLeft || isAnyInitialFilterOverflowingToRight)\"\r\n                        :class=\"`align-self-start left-scroll-button btn btn-lg btn-${getBtnType(isAnyActiveInitialFilterOverflowingToLeft)}`\"\r\n                        ref=\"leftScrollButtonElement\"\r\n                        type=\"button\"\r\n                        @click=\"onScrollLeftClicked\"><i class=\"fa fa-angle-left\"></i></button>\r\n                    <button v-for=\"(initial, index) in initials\"\r\n                        :class=\"`btn btn-lg btn-${getBtnType(initialsFilters.hasFilter(getOrCreateInitialFilter(initial)))}`\"\r\n                        :ref=\"(element) => (setInitialComponent(index, element, initial))\"\r\n                        type=\"button\"\r\n                        @click=\"onInitialFilterClicked(getOrCreateInitialFilter(initial))\">{{ initial }}</button>\r\n                    <button v-if=\"isScrollSupported && (isAnyInitialFilterOverflowingToLeft || isAnyInitialFilterOverflowingToRight)\"\r\n                        :class=\"`align-self-end right-scroll-button btn btn-lg btn-${getBtnType(isAnyActiveInitialFilterOverflowingToRight)}`\"\r\n                        ref=\"rightScrollButtonElement\"\r\n                        type=\"button\"\r\n                        @click=\"onScrollRightClicked\"><i class=\"fa fa-angle-right\"></i>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </RockFormField>\r\n    </div>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n    .initial-buttons {\r\n        padding: 8px 0; /* Bootstrap button box shadows are hidden from overflow:hidden so adding padding to this container. */\r\n    }\r\n\r\n    .initial-buttons {\r\n        scroll-behavior: smooth;\r\n    }\r\n\r\n    .left-scroll-button {\r\n        position: sticky;\r\n        left: 0;\r\n        order: -1; /* Moves the left scroll to the start of the flex box. */\r\n        z-index: 3; /* z-index is typically not recommended, but this addresses an issue where a partially covered filter button is hovered and displayed over the scroll button. */\r\n\r\n        outline: none;\r\n        box-shadow: -6px 0 white; /* Hides other buttons in the corner radius of this button, as they scroll beneath this button */\r\n    }\r\n\r\n    .right-scroll-button {\r\n        position: sticky;\r\n        right: 0;\r\n        z-index: 3; /* z-index is typically not recommended, but this addresses an issue where a partially covered filter button is hovered and displayed over the scroll button. */\r\n\r\n        outline: none;\r\n        box-shadow: 6px 0 white; /* Hides other buttons in the corner radius of this button, as they scroll beneath this button */\r\n    }\r\n</style>\r\n\r\n<script setup lang=\"ts\">\r\n    import { ComponentPublicInstance, computed, nextTick, onMounted, onUnmounted, PropType, ref, watch } from \"vue\";\r\n    import { createEveryFilter, createSomeFilter, DidAttendFilter, getOrCreateFirstNameStartsWithFilter, getOrCreateLastNameStartsWithFilter, IAggregateAttendanceFilter, IAttendanceFilter, NoFilter } from \"./utils.partial\";\r\n    import RockFormField from \"@Obsidian/Controls/rockFormField\";\r\n    import { BtnType } from \"@Obsidian/Enums/Controls/btnType\";\r\n    import { LiteralUnion } from \"@Obsidian/Types/Utility/support\";\r\n    import { standardRockFormFieldProps, useStandardRockFormFieldProps } from \"@Obsidian/Utility/component\";\r\n    import { debounce } from \"@Obsidian/Utility/util\";\r\n    import { GroupAttendanceDetailAttendanceBag } from \"@Obsidian/ViewModels/Blocks/Group/GroupAttendanceDetail/groupAttendanceDetailAttendanceBag\";\r\n\r\n    type InitialComponent = {\r\n        element: Element;\r\n        initial: string;\r\n        initialFilter: IAttendanceFilter;\r\n    };\r\n\r\n    const props = defineProps({\r\n\r\n        modelValue: {\r\n            type: Object as PropType<IAttendanceFilter>,\r\n            required: true\r\n        },\r\n\r\n        attendances: {\r\n            type: Object as PropType<GroupAttendanceDetailAttendanceBag[]>,\r\n            required: true\r\n        },\r\n\r\n\r\n        defaultFilter: {\r\n            type: Object as PropType<IAttendanceFilter>,\r\n            default: NoFilter\r\n        },\r\n\r\n        /**\r\n         * When `true`, displays filter buttons for each attendee first name initial.\r\n         * When `false`, displays filter buttons for each attendee last name initial.\r\n         */\r\n        isFilterByFirstNameInitial: {\r\n            type: Boolean as PropType<boolean>,\r\n            required: true\r\n        },\r\n\r\n        /**\r\n         * The BtnType when a filter button is unselected.\r\n         */\r\n        unselectedBtnType: {\r\n            type: String as PropType<LiteralUnion<BtnType>>,\r\n            default: BtnType.Default\r\n        },\r\n\r\n        /**\r\n         * The BtnType when a filter button is selected.\r\n         */\r\n        selectedBtnType: {\r\n            type: String as PropType<LiteralUnion<BtnType>>,\r\n            default: BtnType.Primary\r\n        },\r\n\r\n        /**\r\n         * Allows filtering by multiple initials.\r\n         */\r\n        isMultiselect: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        ...standardRockFormFieldProps\r\n    });\r\n\r\n    const emit = defineEmits<{\r\n        (e: \"update:modelValue\", value: IAttendanceFilter): void\r\n    }>();\r\n\r\n    //#region Values\r\n\r\n    const isScrollSupported = ref<boolean>(false);\r\n    const initialButtonsContainerElement = ref<HTMLElement | undefined>();\r\n    const leftScrollButtonElement = ref<HTMLDivElement | undefined>();\r\n    const rightScrollButtonElement = ref<HTMLDivElement | undefined>();\r\n    const initialComponents = ref<InitialComponent[]>([]);\r\n    const overflowingLeftInitialComponents = ref<InitialComponent[]>([]);\r\n    const overflowingRightInitialComponents = ref<InitialComponent[]>([]);\r\n\r\n    // Initialize the \"default or has attended filter\" based on the initial filter(s).\r\n    const didAttendFilterOrDefault = ref<typeof DidAttendFilter | typeof props.defaultFilter>(props.modelValue.hasFilter(DidAttendFilter) ? DidAttendFilter : props.defaultFilter);\r\n\r\n    // No need to initialize the \"last name starts with\" filter(s) yet.\r\n    const initialsFilters = ref<IAggregateAttendanceFilter>(createSomeFilter());\r\n\r\n    //#endregion\r\n\r\n    //#region Computed Values\r\n\r\n    const isAnyInitialFilterOverflowingToLeft = computed<boolean>(() => !!overflowingLeftInitialComponents.value.length);\r\n\r\n    const isAnyInitialFilterOverflowingToRight = computed<boolean>(() => !!overflowingRightInitialComponents.value.length);\r\n\r\n    const isAnyActiveInitialFilterOverflowingToLeft = computed<boolean>(() =>\r\n        overflowingLeftInitialComponents.value\r\n            .map(c => c.initialFilter)\r\n            .some(f => initialsFilters.value.hasFilter(f)));\r\n\r\n    const isAnyActiveInitialFilterOverflowingToRight = computed<boolean>(() =>\r\n        overflowingRightInitialComponents.value\r\n            .map(c => c.initialFilter)\r\n            .some(f => initialsFilters.value.hasFilter(f)));\r\n\r\n    const allFilters = computed({\r\n        get(): IAttendanceFilter {\r\n            return props.modelValue;\r\n        },\r\n        set(newValue: IAttendanceFilter) {\r\n            emit(\"update:modelValue\", newValue);\r\n        }\r\n    });\r\n\r\n    const initials = computed<string[]>(() =>\r\n        props.isFilterByFirstNameInitial\r\n            ? props.attendances.filter(a => !!a.nickName)\r\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                .map(a => a.nickName!.charAt(0).toLocaleUpperCase())\r\n                .filter((item, index, arr) => arr.indexOf(item) === index) // Remove duplicates.\r\n                .sort()\r\n            : props.attendances.filter(a => !!a.lastName)\r\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                .map(a => a.lastName!.charAt(0).toLocaleUpperCase())\r\n                .filter((item, index, arr) => arr.indexOf(item) === index) // Remove duplicates.\r\n                .sort());\r\n\r\n    //#endregion\r\n\r\n    //#region Event Handlers\r\n\r\n    /**\r\n     * Event handler for an initials filter button being clicked.\r\n     */\r\n    function onInitialFilterClicked(attendanceFilter: IAttendanceFilter): void {\r\n        addOrRemoveInitialsFilter(attendanceFilter);\r\n    }\r\n\r\n    /**\r\n     * Event handler for left scroll button being clicked.\r\n     */\r\n    function onScrollLeftClicked(): void {\r\n        const containerElement = initialButtonsContainerElement.value;\r\n        if (containerElement) {\r\n            containerElement.scrollBy({\r\n                // Scroll to the left by 2/5 (just under a half) the visible width.\r\n                left: -(containerElement.offsetWidth / 5) * 2\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Event handler for right scroll button being clicked.\r\n     */\r\n    function onScrollRightClicked(): void {\r\n        const containerElement = initialButtonsContainerElement.value;\r\n        if (containerElement) {\r\n            containerElement.scrollBy({\r\n                // Scroll to the right by 2/5 (just under a half) the visible width.\r\n                left: containerElement.offsetWidth / 5 * 2\r\n            });\r\n        }\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Functions\r\n\r\n    /**\r\n     * Sets the data for a single initial filter button.\r\n     * @param index: The index to at which to store the data.\r\n     * @param component: The initial button element.\r\n     * @param initial: The name initial associated with the component.\r\n     */\r\n    function setInitialComponent(index: number, element: Element | ComponentPublicInstance | null, initial: string): void {\r\n        initialComponents.value[index] = {\r\n            element: element as Element,\r\n            initial,\r\n            initialFilter: getOrCreateInitialFilter(initial)};\r\n    }\r\n\r\n    /**\r\n     * Creates a (or retrieves an existing) filter that will filter attendances by their first or last initial.\r\n     */\r\n    function getOrCreateInitialFilter(initial: string): IAttendanceFilter {\r\n        return props.isFilterByFirstNameInitial ? getOrCreateFirstNameStartsWithFilter(initial) : getOrCreateLastNameStartsWithFilter(initial);\r\n    }\r\n\r\n    /**\r\n     * Gets the BtnType based on whether or not a button is in a \"selected\" state.\r\n     */\r\n    function getBtnType(isSelected: boolean): LiteralUnion<BtnType> {\r\n        if (isSelected) {\r\n            return props.selectedBtnType;\r\n        }\r\n        else {\r\n            return props.unselectedBtnType;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Toggles an initials filter.\r\n     *\r\n     * If \"A\" is selected, then calling this function will deselect it.\r\n     * If \"A\" is not selected, then calling this function will select it.\r\n     */\r\n    function addOrRemoveInitialsFilter(attendanceFilter: IAttendanceFilter): void {\r\n        // If the filter is currently selected then remove it.\r\n        const hasNoLastNameStartsWithFilters = !initialsFilters.value.filters.length;\r\n\r\n        if (hasNoLastNameStartsWithFilters) {\r\n            initialsFilters.value.filters = [attendanceFilter];\r\n        }\r\n        else {\r\n            // At least one filter is selected.\r\n            const isFilterSelected = initialsFilters.value.hasFilter(attendanceFilter);\r\n\r\n            if (!props.isMultiselect) {\r\n                if (isFilterSelected) {\r\n                    // Deselect the filter.\r\n                    initialsFilters.value.filters = [];\r\n                }\r\n                else {\r\n                    // Select the filter.\r\n                    initialsFilters.value.filters = [attendanceFilter];\r\n                }\r\n            }\r\n            else {\r\n                if (isFilterSelected) {\r\n                    // Exclude the filter.\r\n                    initialsFilters.value.filters = initialsFilters.value.filters.filter(f => !f.isFilter(attendanceFilter));\r\n                }\r\n                else {\r\n                    // Include the filter.\r\n                    initialsFilters.value.filters.push(attendanceFilter);\r\n                }\r\n            }\r\n        }\r\n\r\n        notifyFiltersUpdated();\r\n        checkIfInitialsFilterButtonsAreOverflowing();\r\n    }\r\n\r\n    /**\r\n     * Builds and emits the aggregate filter.\r\n     */\r\n    function notifyFiltersUpdated(): void {\r\n        if (!initialsFilters.value.filters.length) {\r\n            // There are no initials filters, so set the overall filter to the (no filter or has attended filter).\r\n            allFilters.value = didAttendFilterOrDefault.value;\r\n        }\r\n        else {\r\n            // There are initials filters, so set the overall filter to the combinations of the initials filters and the (no filter or has attended filter).\r\n            allFilters.value = createEveryFilter(didAttendFilterOrDefault.value, initialsFilters.value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determines whether any part of an element is to the left of a target element.\r\n     */\r\n    function isElementLeftOfElement(element: Element, targetElement: Element, targetElementLeftOffset?: number): boolean {\r\n        const { left: elementLeft } = element.getBoundingClientRect();\r\n        const { left: parentLeft } = targetElement.getBoundingClientRect();\r\n\r\n        // Add a little wiggle room (+-1) to account for rounding errors.\r\n        return (elementLeft + 1) < ((parentLeft + (targetElementLeftOffset || 0)) - 1);\r\n    }\r\n\r\n    /**\r\n     * Determines whether any part of an element is to the right of a target element.\r\n     */\r\n    function isElementRightOfElement(element: Element, targetElement: Element, targetElementRightOffset?: number): boolean {\r\n        const { right: elementRight } = element.getBoundingClientRect();\r\n        const { right: parentRight } = targetElement.getBoundingClientRect();\r\n\r\n        // Add a little wiggle room (+-1) to account for rounding errors.\r\n        return (elementRight - 1) > ((parentRight + (targetElementRightOffset || 0)) + 1);\r\n    }\r\n\r\n    /**\r\n     * Checks if the initial filter buttons are overflowing in either direction.\r\n     */\r\n    function checkIfInitialsFilterButtonsAreOverflowing(): void {\r\n        nextTick(() => {\r\n            checkIfInitialsFilterButtonsAreOverflowingToLeft();\r\n            checkIfInitialsFilterButtonsAreOverflowingToRight();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks if the initial filter buttons are overflowing to the left.\r\n     */\r\n    function checkIfInitialsFilterButtonsAreOverflowingToLeft(): void {\r\n        const parentElement = initialButtonsContainerElement.value;\r\n\r\n        if (!parentElement) {\r\n            // Cannot recompute if parent element does not exist.\r\n            return;\r\n        }\r\n\r\n        const components = initialComponents.value;\r\n\r\n        if (!components.length) {\r\n            // Cannot recompute if no initial components.\r\n            return;\r\n        }\r\n\r\n        const leftOffset = leftScrollButtonElement.value?.offsetWidth;\r\n\r\n        const overflowingComponents = components.filter(initialComponent => initialComponent?.element && isElementLeftOfElement(initialComponent.element, parentElement, leftOffset));\r\n        const existingOverflowingComponents = overflowingLeftInitialComponents.value;\r\n\r\n        if (overflowingComponents.length !== existingOverflowingComponents.length) {\r\n            overflowingLeftInitialComponents.value = overflowingComponents;\r\n            return;\r\n        }\r\n\r\n        // If both overflow arrays are empty, then do not update.\r\n        if (overflowingComponents.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // If both overflow arrays contain the same elements, then do not update.\r\n        if (overflowingComponents.every(c => existingOverflowingComponents.indexOf(c) !== -1)) {\r\n            return;\r\n        }\r\n\r\n        // The overflow arrays are different.\r\n        overflowingLeftInitialComponents.value = overflowingComponents;\r\n    }\r\n\r\n    /**\r\n     * Checks if the initial filter buttons are overflowing to the left.\r\n     */\r\n    function checkIfInitialsFilterButtonsAreOverflowingToRight(): void {\r\n        const parentElement = initialButtonsContainerElement.value;\r\n\r\n        if (!parentElement) {\r\n            // Cannot recompute if parent element does not exist.\r\n            return;\r\n        }\r\n\r\n        const components = initialComponents.value;\r\n\r\n        if (!components.length) {\r\n            // Cannot recompute if no initial components.\r\n            return;\r\n        }\r\n\r\n        const rightOffset = -(rightScrollButtonElement.value?.offsetWidth ?? 0);\r\n\r\n        const overflowingComponents = components.filter(initialComponent => initialComponent?.element && isElementRightOfElement(initialComponent.element, parentElement, rightOffset));\r\n        const existingOverflowingComponents = overflowingRightInitialComponents.value;\r\n\r\n        if (overflowingComponents.length !== existingOverflowingComponents.length) {\r\n            overflowingRightInitialComponents.value = overflowingComponents;\r\n            return;\r\n        }\r\n\r\n        // If both overflow arrays are empty, then do not update.\r\n        if (overflowingComponents.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // If both overflow arrays contain the same elements, then do not update.\r\n        if (overflowingComponents.every(c => existingOverflowingComponents.indexOf(c) !== -1)) {\r\n            return;\r\n        }\r\n\r\n        // The overflow arrays are different.\r\n        overflowingRightInitialComponents.value = overflowingComponents;\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Watchers\r\n\r\n    // Clear all filters if the modelValue changes to NoFilter.\r\n    watch(() => props.modelValue, () => {\r\n        if (props.modelValue.isFilter(NoFilter)) {\r\n            didAttendFilterOrDefault.value = NoFilter;\r\n            initialsFilters.value.filters = [];\r\n            notifyFiltersUpdated();\r\n            checkIfInitialsFilterButtonsAreOverflowing();\r\n        }\r\n    });\r\n\r\n    // Clear the initials filters when changing between filter by first and last initial.\r\n    watch(() => props.isFilterByFirstNameInitial, () => {\r\n        initialsFilters.value.filters = [];\r\n        notifyFiltersUpdated();\r\n    });\r\n\r\n    //#endregion\r\n\r\n    const standardFieldProps = useStandardRockFormFieldProps(props);\r\n\r\n    // If we don't debounce, then the overflow check would happen many times while scrolling when we only need it to check after scrolling is complete.\r\n    const debouncedScrollCheck = debounce(checkIfInitialsFilterButtonsAreOverflowing, 50);\r\n\r\n    if (window.ResizeObserver) {\r\n        isScrollSupported.value = true;\r\n\r\n        // Observe changes to the parent element containing the initials filters\r\n        // so we can check overflows any time the parent element changes size.\r\n        const initialsFilterOverflowObserver = new ResizeObserver(entries => {\r\n            entries.forEach(_ => {\r\n                checkIfInitialsFilterButtonsAreOverflowing();\r\n            });\r\n        });\r\n\r\n        onMounted(() => {\r\n            checkIfInitialsFilterButtonsAreOverflowing();\r\n            if (initialButtonsContainerElement.value) {\r\n                initialsFilterOverflowObserver.observe(initialButtonsContainerElement.value);\r\n            }\r\n        });\r\n\r\n\r\n        onUnmounted(() => {\r\n            // Stop observing size changes to the parent element.\r\n            initialsFilterOverflowObserver.disconnect();\r\n        });\r\n    }\r\n</script>","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <RockFormField\r\n        :modelValue=\"modelValue\"\r\n        :formGroupClasses=\"'rock-check-box ' + formGroupClasses\"\r\n        name=\"checkbox\">\r\n        <template #default=\"{uniqueId, field}\">\r\n            <div :class=\"'control-wrapper ' + controlWrapperClasses\">\r\n                <div :class=\"internalCardCheckBoxClasses\">\r\n                    <input\r\n                           v-bind=\"field\"\r\n                           v-model=\"internalValue\"\r\n                           :disabled=\"disabled\"\r\n                           :id=\"uniqueId\"\r\n                           style=\"display: none\"\r\n                           type=\"checkbox\" />\r\n                    <label v-if=\"html\" class=\"checkbox-card-label\" :for=\"uniqueId\" v-html=\"html\"></label>\r\n                    <label v-else class=\"checkbox-card-label\" :for=\"uniqueId\">\r\n                        <slot></slot>\r\n                    </label>\r\n                </div>\r\n            </div>\r\n        </template>\r\n    </RockFormField>\r\n</template>\r\n\r\n<style>\r\n.checkbox-card {\r\n    --checked-border-color: var(--color-primary, #EE7525);\r\n    --checked-background-color: rgba(var(--color-base-primary), 0.1);\r\n    height: 100%;\r\n    padding: 0;\r\n    margin: 0;\r\n    border: 1px solid var(--border-color,var(--input-border));\r\n    border-radius: 5px;\r\n    background-color: var(--background-color);\r\n}\r\n\r\n.checkbox-card.checked {\r\n    --border-color: var(--checked-border-color);\r\n    --background-color: var(--checked-background-color);\r\n    outline: 2px solid var(--checked-border-color);\r\n    outline-offset: -2px;\r\n}\r\n\r\n.checkbox-card-label {\r\n    padding: 12px !important;\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n.checkbox-card-data {\r\n    position: relative;\r\n    height: 100%;\r\n    flex: 1 1 auto;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n}\r\n</style>\r\n\r\n<script setup lang=\"ts\">\r\n    import { computed, PropType } from \"vue\";\r\n    import RockFormField from \"@Obsidian/Controls/rockFormField\";\r\n    import { useVModelPassthrough } from \"@Obsidian/Utility/component\";\r\n\r\n    const props = defineProps({\r\n        modelValue: {\r\n            type: Boolean as PropType<boolean>,\r\n            required: true\r\n        },\r\n\r\n        disabled: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        html: {\r\n            type: String as PropType<string | null | undefined>\r\n        },\r\n\r\n        formGroupClasses: {\r\n            type: String as PropType<string>,\r\n            required: false\r\n        },\r\n\r\n        cardCheckBoxClasses: {\r\n            type: String as PropType<string>,\r\n            required: false\r\n        },\r\n\r\n        controlWrapperClasses: {\r\n            type: String as PropType<string>,\r\n            required: false\r\n        }\r\n    });\r\n\r\n    const emit = defineEmits<{\r\n        (e: \"update:modelValue\", newValue: boolean): void\r\n    }>();\r\n\r\n    //#region Values\r\n\r\n    const internalValue = useVModelPassthrough(props, \"modelValue\", emit);\r\n\r\n    //#endregion\r\n\r\n    //#region Computed Values\r\n\r\n    const internalCardCheckBoxClasses = computed<string>(() =>\r\n        `checkbox checkbox-card ${internalValue.value ? \"checked \" : \"\"} ${props.cardCheckBoxClasses || \"\"}`\r\n    );\r\n\r\n    //#endregion\r\n\r\n</script>","<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <div class=\"attendance-roster\">\r\n        <template v-for=\"(groupedAttendances, groupLabel, index) in attendanceGroups\" :key=\"groupLabel\">\r\n            <template v-if=\"groupedAttendances.length\">\r\n                <hr v-if=\"hasMultipleGroups && index > 0\" />\r\n                <h2 v-if=\"groupLabel && hasMultipleGroups\">{{ groupLabel }}</h2>\r\n                <div class=\"attendance-grid\">\r\n                    <template v-for=\"attendance in groupedAttendances\" :key=\"attendance.personGuid\">\r\n                        <CardCheckBox\r\n                                      v-if=\"attendance.itemTemplate\"\r\n                                      :controlWrapperClasses=\"'card-check-box ' + controlWrapperClasses\"\r\n                                      :cardCheckBoxClasses=\"cardCheckBoxClasses\"\r\n                                      :disabled=\"disabled\"\r\n                                      :html=\"attendance.itemTemplate\"\r\n                                      :modelValue=\"attendance.didAttend\"\r\n                                      @update:modelValue=\"onInternalAttendanceChanged($event, attendance)\" />\r\n                        <CardCheckBox\r\n                                      v-else\r\n                                      :controlWrapperClasses=\"'card-check-box ' + controlWrapperClasses\"\r\n                                      :cardCheckBoxClasses=\"cardCheckBoxClasses\"\r\n                                      :disabled=\"disabled\"\r\n                                      :modelValue=\"attendance.didAttend\"\r\n                                      @update:modelValue=\"onInternalAttendanceChanged($event, attendance)\">\r\n                            <div>\r\n                                {{ getAttendanceFullName(attendance) }}\r\n                            </div>\r\n                        </CardCheckBox>\r\n                    </template>\r\n                </div>\r\n            </template>\r\n        </template>\r\n    </div>\r\n</template>\r\n\r\n<style>\r\n    .attendance-grid {\r\n        display: grid;\r\n        grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));\r\n        grid-gap: 12px;\r\n    }\r\n\r\n    .attendance-roster hr {\r\n        border-top: 5px solid #c8c8c8;\r\n        border-radius: 5px;\r\n        margin: 32px 0;\r\n    }\r\n</style>\r\n\r\n<script setup lang=\"ts\">\r\n    import { computed, PropType } from \"vue\";\r\n    import CardCheckBox from \"./cardCheckBox.partial.obs\";\r\n    import { AttendanceFilterByDelegate, AttendanceGroupByDelegate, AttendanceSortByDelegate } from \"./types.partial\";\r\n    import { getAttendanceFullName } from \"./utils.partial\";\r\n    import { GroupAttendanceDetailAttendanceBag } from \"@Obsidian/ViewModels/Blocks/Group/GroupAttendanceDetail/groupAttendanceDetailAttendanceBag\";\r\n\r\n    const props = defineProps({\r\n        attendances: {\r\n            type: Object as PropType<GroupAttendanceDetailAttendanceBag[]>,\r\n            required: true\r\n        },\r\n\r\n        disabled: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        filterBy: {\r\n            type: Object as PropType<AttendanceFilterByDelegate | null>,\r\n            required: false,\r\n            default: null\r\n        },\r\n\r\n        groupBy: {\r\n            type: Object as PropType<AttendanceGroupByDelegate | null>,\r\n            required: false,\r\n            default: null\r\n        },\r\n\r\n        sortBy: {\r\n            type: Object as PropType<AttendanceSortByDelegate | null>,\r\n            required: false,\r\n            default: null\r\n        },\r\n\r\n        /**\r\n         * If `true`, will not group attendances.\r\n         */\r\n        isLongListDisabled: {\r\n            type: Boolean as PropType<boolean>,\r\n            required: false,\r\n            default: false\r\n        }\r\n    });\r\n\r\n    const emit = defineEmits<{\r\n        /**\r\n         * Emitted when attendance is changed by checking/unchecking an entry on the roster.\r\n         * Does not emit if attendance.didAttend is changed somewhere else.\r\n         */\r\n        (e: \"attendanceChanged\", value: GroupAttendanceDetailAttendanceBag): void\r\n    }>();\r\n\r\n    const controlWrapperClasses = \"\";\r\n    const cardCheckBoxClasses = \"\";\r\n\r\n    //#region Computed Values\r\n\r\n    /**\r\n     * Returns the sorted attendances if a \"sort by\" delegate is specified; otherwise, a copy of the attendances are returned without sorting.\r\n     */\r\n    const sortedAttendances = computed<GroupAttendanceDetailAttendanceBag[]>(() => {\r\n        const sortByDelegate = props.sortBy;\r\n\r\n        const attendances = [...props.attendances];\r\n\r\n        if (sortByDelegate) {\r\n            attendances.sort(sortByDelegate);\r\n        }\r\n\r\n        return attendances;\r\n    });\r\n\r\n    /**\r\n     *  Returns the filtered, sorted attendances if a \"filter by\" delegate is specified; otherwise, the sorted attendances are returned without filtering.\r\n     *  We want to filter after sorting since filtering happens more often than sorting. If we filtered first, then any time the filter changed, we'd have to also re-sort.\r\n     *  */\r\n    const filteredAttendances = computed<GroupAttendanceDetailAttendanceBag[]>(() => {\r\n        const filterByDelegate = props.filterBy;\r\n        const attendances = sortedAttendances.value;\r\n\r\n        if (!filterByDelegate) {\r\n            return attendances;\r\n        }\r\n\r\n        return attendances.filter(filterByDelegate);\r\n    });\r\n\r\n    /**\r\n     * Returns the sorted and filtered attendances into groups if a \"group by\" delegate is specified; otherwise, a single group of attendances with a blank key is returned.\r\n     */\r\n    const attendanceGroups = computed<Record<string, GroupAttendanceDetailAttendanceBag[]>>(() => {\r\n        const groupBy = props.groupBy;\r\n        const attendances = filteredAttendances.value;\r\n\r\n        const shouldGroup = groupBy && !props.isLongListDisabled;\r\n\r\n        if (!shouldGroup) {\r\n            return { \"\": attendances };\r\n        }\r\n\r\n        const dictionary: Record<string, GroupAttendanceDetailAttendanceBag[]> = {};\r\n\r\n        const keys: string[] = [];\r\n\r\n        attendances.forEach((attendance) => {\r\n            const groupLabel = groupBy(attendance);\r\n\r\n            if (!dictionary[groupLabel]) {\r\n                dictionary[groupLabel] = [attendance];\r\n                keys.push(groupLabel);\r\n            }\r\n            else {\r\n                dictionary[groupLabel].push(attendance);\r\n            }\r\n        });\r\n\r\n        keys.sort();\r\n\r\n        const sortedDictionary: Record<string, GroupAttendanceDetailAttendanceBag[]> = {};\r\n        keys.forEach(key => sortedDictionary[key] = dictionary[key]);\r\n        return sortedDictionary;\r\n    });\r\n\r\n    const hasMultipleGroups = computed<boolean>(() => Object.keys(attendanceGroups.value).length > 1);\r\n\r\n    //#endregion\r\n\r\n    //#region Event Handlers\r\n\r\n    function onInternalAttendanceChanged(didAttend: boolean, attendance: GroupAttendanceDetailAttendanceBag): void {\r\n        const changed = attendance.didAttend !== didAttend;\r\n        attendance.didAttend = didAttend;\r\n\r\n        if (changed) {\r\n            emit(\"attendanceChanged\", attendance);\r\n        }\r\n    }\r\n\r\n    //#endregion\r\n</script>\r\n","<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <CampusPicker\r\n        v-model=\"campusPickerValue\"\r\n        blankValue=\"All Campuses\"\r\n        :includeInactive=\"true\"\r\n        :multiple=\"false\"\r\n        :showBlankItem=\"true\" />\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { PropType, ref, watch } from \"vue\";\r\n    import { createFilter, IAttendanceFilter, NoFilter } from \"./utils.partial\";\r\n    import CampusPicker from \"@Obsidian/Controls/campusPicker.obs\";\r\n    import { areEqual } from \"@Obsidian/Utility/guid\";\r\n    import { GroupAttendanceDetailAttendanceBag } from \"@Obsidian/ViewModels/Blocks/Group/GroupAttendanceDetail/groupAttendanceDetailAttendanceBag\";\r\n    import { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\n\r\n    const props = defineProps({\r\n        modelValue: {\r\n            type: Object as PropType<IAttendanceFilter>,\r\n            required: true\r\n        },\r\n\r\n        campusGuid: {\r\n            type: String as PropType<string | null | undefined>,\r\n            required: true\r\n        }\r\n    });\r\n\r\n    const emit = defineEmits<{\r\n        (e: \"update:modelValue\", value: IAttendanceFilter): void,\r\n        (e: \"update:campusGuid\", value: string | null | undefined): void\r\n    }>();\r\n\r\n    //#region Values\r\n\r\n    const campusPickerValue = ref<ListItemBag | null>(props.campusGuid ? ({ text: null, value: props.campusGuid }) : null);\r\n\r\n    //#endregion\r\n\r\n    //#region Watchers\r\n\r\n    // Update the selected Campus GUID and filter whenever the Campus picker changes.\r\n    watch(campusPickerValue, () => {\r\n        let filter: IAttendanceFilter = NoFilter;\r\n        const campusGuid = campusPickerValue.value?.value;\r\n\r\n        if (campusGuid) {\r\n            filter = createFilter((attendee: GroupAttendanceDetailAttendanceBag): boolean => {\r\n                return areEqual(attendee.campusGuid, campusGuid);\r\n            });\r\n        }\r\n\r\n        emit(\"update:campusGuid\", campusGuid);\r\n        emit(\"update:modelValue\", filter);\r\n    });\r\n\r\n    watch(() => props.modelValue, () => {\r\n        if (props.modelValue.isFilter(NoFilter)) {\r\n            // Clear the selected campus.\r\n            campusPickerValue.value = null;\r\n        }\r\n    });\r\n\r\n    //#endregion\r\n</script>","<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <BaseAsyncPicker v-if=\"!isHidden\"\r\n        v-model=\"internalValue\"\r\n        v-bind=\"standardProps\"\r\n        :items=\"actualItems\" />\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { computed, PropType, ref, watch } from \"vue\";\r\n    import BaseAsyncPicker from \"@Obsidian/Controls/baseAsyncPicker\";\r\n    import { Guid } from \"@Obsidian/Types\";\r\n    import { useInvokeBlockAction } from \"@Obsidian/Utility/block\";\r\n    import { standardAsyncPickerProps, useStandardAsyncPickerProps, useVModelPassthrough } from \"@Obsidian/Utility/component\";\r\n    import { GroupAttendanceDetailGetGroupLocationsRequestBag } from \"@Obsidian/ViewModels/Blocks/Group/GroupAttendanceDetail/groupAttendanceDetailGetGroupLocationsRequestBag\";\r\n    import { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\n\r\n    const invokeBlockAction = useInvokeBlockAction();\r\n\r\n    const props = defineProps({\r\n        modelValue: {\r\n            type: Object as PropType<ListItemBag | ListItemBag[] | null>,\r\n            required: false\r\n        },\r\n\r\n        groupGuid: {\r\n            type: String as PropType<Guid | null | undefined>,\r\n            default: null\r\n        },\r\n\r\n        hideIfEmpty: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        ...standardAsyncPickerProps\r\n    });\r\n\r\n    const emit = defineEmits<{\r\n        (e: \"update:modelValue\", _value: ListItemBag | ListItemBag[] | null): void\r\n    }>();\r\n\r\n    // #region Values\r\n\r\n    const internalValue = useVModelPassthrough(props, \"modelValue\", emit);\r\n    const standardProps = useStandardAsyncPickerProps(props);\r\n    const loadedItems = ref<ListItemBag[] | null>(null);\r\n\r\n    // #endregion\r\n\r\n    // #region Computed Values\r\n\r\n    /**\r\n     * The actual items to make available to the picker. This allows us to do any\r\n     * post-processing, such as adding additional items, and still be lazy loaded as well.\r\n     */\r\n    const actualItems = computed((): ListItemBag[] | (() => Promise<ListItemBag[]>) => {\r\n        return loadedItems.value || loadOptions;\r\n    });\r\n\r\n    const isHidden = computed(() => props.hideIfEmpty && (!actualItems.value || !actualItems.value.length));\r\n\r\n    // #endregion\r\n\r\n    // #region Functions\r\n\r\n    /**\r\n     * Loads the items from the server.\r\n     */\r\n    const loadOptions = async (): Promise<ListItemBag[]> => {\r\n        const bag: GroupAttendanceDetailGetGroupLocationsRequestBag = {\r\n            groupGuid: props.groupGuid\r\n        };\r\n\r\n        const result = await invokeBlockAction<ListItemBag[]>(\"GetGroupLocations\", { bag });\r\n\r\n        if (result.isSuccess && result.data) {\r\n            loadedItems.value = result.data;\r\n            return result.data;\r\n        }\r\n        else {\r\n            console.error(result.errorMessage ?? \"Unknown error while loading data.\");\r\n            loadedItems.value = [];\r\n            return [];\r\n        }\r\n    };\r\n\r\n    // #endregion\r\n\r\n    // #region Watchers\r\n\r\n    /**\r\n     * Clears the loaded items whenever the Group changes so that the items have to be loaded again.\r\n     */\r\n    watch(() => [props.groupGuid], () => {\r\n        loadedItems.value = null;\r\n    });\r\n\r\n    // #endregion\r\n\r\n\r\n</script>","<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <BaseAsyncPicker v-model=\"internalValue\"\r\n        v-bind=\"standardProps\"\r\n        :items=\"actualItems\" />\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { computed, PropType, ref, watch } from \"vue\";\r\n    import BaseAsyncPicker from \"@Obsidian/Controls/baseAsyncPicker\";\r\n    import { Guid } from \"@Obsidian/Types\";\r\n    import { useInvokeBlockAction } from \"@Obsidian/Utility/block\";\r\n    import { standardAsyncPickerProps, useStandardAsyncPickerProps, useVModelPassthrough } from \"@Obsidian/Utility/component\";\r\n    import { RockDateTime } from \"@Obsidian/Utility/rockDateTime\";\r\n    import { GroupAttendanceDetailGetGroupLocationScheduleDatesRequestBag } from \"@Obsidian/ViewModels/Blocks/Group/GroupAttendanceDetail/groupAttendanceDetailGetGroupLocationScheduleDatesRequestBag\";\r\n    import { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\n\r\n    const invokeBlockAction = useInvokeBlockAction();\r\n\r\n    const props = defineProps({\r\n        modelValue: {\r\n            type: Object as PropType<ListItemBag | ListItemBag[] | null>,\r\n            required: false\r\n        },\r\n\r\n        date: {\r\n            type: Object as PropType<RockDateTime | null | undefined>,\r\n            default: null\r\n        },\r\n\r\n        groupGuid: {\r\n            type: String as PropType<Guid | null | undefined>,\r\n            default: null\r\n        },\r\n\r\n        locationGuid: {\r\n            type: String as PropType<Guid | null | undefined>,\r\n            default: null\r\n        },\r\n\r\n        numberOfPreviousDaysToShow: {\r\n            type: Number as PropType<number | null>,\r\n            default: null\r\n        },\r\n\r\n        shouldLogNotFoundError: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        shouldLoadItemsWhetherValuesAreSet: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        ...standardAsyncPickerProps\r\n    });\r\n\r\n    const emit = defineEmits<{\r\n        (e: \"update:modelValue\", _value: ListItemBag | ListItemBag[] | null): void\r\n    }>();\r\n\r\n    // #region Values\r\n\r\n    const internalValue = useVModelPassthrough(props, \"modelValue\", emit);\r\n    const standardProps = useStandardAsyncPickerProps(props);\r\n    const loadedItems = ref<ListItemBag[] | null>(null);\r\n\r\n    // #endregion\r\n\r\n    // #region Computed Values\r\n\r\n    /**\r\n     * The actual items to make available to the picker. This allows us to do any\r\n     * post-processing, such as adding additional items, and still be lazy loaded as well.\r\n     */\r\n    const actualItems = computed((): ListItemBag[] | (() => Promise<ListItemBag[]>) => {\r\n        return loadedItems.value || loadOptions;\r\n    });\r\n\r\n    // #endregion\r\n\r\n    // #region Functions\r\n\r\n    /**\r\n     * Loads the items from the server.\r\n     */\r\n    const loadOptions = async (): Promise<ListItemBag[]> => {\r\n        const bag: GroupAttendanceDetailGetGroupLocationScheduleDatesRequestBag = {\r\n            groupGuid: props.groupGuid,\r\n            locationGuid: props.locationGuid,\r\n            numberOfPreviousDaysToShow: props.numberOfPreviousDaysToShow,\r\n            occurrenceDate: props.date?.toISOString()\r\n        };\r\n\r\n        if (!props.shouldLoadItemsWhetherValuesAreSet\r\n            && (!bag.groupGuid || !bag.locationGuid)) {\r\n            loadedItems.value = [];\r\n            return [];\r\n        }\r\n\r\n        const result = await invokeBlockAction<ListItemBag[]>(\"GetGroupLocationScheduleDates\", { bag });\r\n\r\n        if (result.isSuccess && result.data) {\r\n            loadedItems.value = result.data;\r\n            return result.data;\r\n        }\r\n        else {\r\n            if (props.shouldLogNotFoundError) {\r\n                console.error(result.errorMessage ?? \"Unknown error while loading data.\");\r\n            }\r\n\r\n            loadedItems.value = [];\r\n            return [];\r\n        }\r\n    };\r\n\r\n    // #endregion\r\n\r\n    // #region Watchers\r\n\r\n    /**\r\n     * Clears the loaded items whenever the Group or Location change so that the items have to be loaded again.\r\n     */\r\n    watch(() => [props.groupGuid, props.locationGuid], () => {\r\n        loadedItems.value = null;\r\n    });\r\n\r\n    // #endregion\r\n\r\n\r\n</script>","<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <BaseAsyncPicker v-if=\"!isHidden\"\r\n        v-model=\"internalValue\"\r\n        v-bind=\"standardProps\"\r\n        :items=\"actualItems\" />\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { computed, PropType, ref, watch } from \"vue\";\r\n    import BaseAsyncPicker from \"@Obsidian/Controls/baseAsyncPicker\";\r\n    import { Guid } from \"@Obsidian/Types\";\r\n    import { useInvokeBlockAction } from \"@Obsidian/Utility/block\";\r\n    import { standardAsyncPickerProps, useStandardAsyncPickerProps, useVModelPassthrough } from \"@Obsidian/Utility/component\";\r\n    import { GroupAttendanceDetailGetGroupLocationSchedulesRequestBag } from \"@Obsidian/ViewModels/Blocks/Group/GroupAttendanceDetail/groupAttendanceDetailGetGroupLocationSchedulesRequestBag\";\r\n    import { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\n\r\n    const invokeBlockAction = useInvokeBlockAction();\r\n\r\n    const props = defineProps({\r\n        modelValue: {\r\n            type: Object as PropType<ListItemBag | ListItemBag[] | null>,\r\n            required: false\r\n        },\r\n\r\n        groupGuid: {\r\n            type: String as PropType<Guid | null | undefined>,\r\n            default: null\r\n        },\r\n\r\n        hideIfEmpty: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        locationGuid: {\r\n            type: String as PropType<Guid | null | undefined>,\r\n            default: null\r\n        },\r\n\r\n        isoDateString: {\r\n            type: String as PropType<string | null>,\r\n            default: null\r\n        },\r\n\r\n        shouldLogNotFoundError: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        shouldLoadItemsWhetherValuesAreSet: {\r\n            type: Boolean as PropType<boolean>,\r\n            default: false\r\n        },\r\n\r\n        ...standardAsyncPickerProps\r\n    });\r\n\r\n    const emit = defineEmits<{\r\n        (e: \"update:modelValue\", _value: ListItemBag | ListItemBag[] | null): void\r\n    }>();\r\n\r\n    // #region Values\r\n\r\n    const internalValue = useVModelPassthrough(props, \"modelValue\", emit);\r\n    const standardProps = useStandardAsyncPickerProps(props);\r\n    const loadedItems = ref<ListItemBag[] | null>(null);\r\n\r\n    // #endregion\r\n\r\n    // #region Computed Values\r\n\r\n    /**\r\n     * The actual items to make available to the picker. This allows us to do any\r\n     * post-processing, such as adding additional items, and still be lazy loaded as well.\r\n     */\r\n    const actualItems = computed((): ListItemBag[] | (() => Promise<ListItemBag[]>) => {\r\n        return loadedItems.value || loadOptions;\r\n    });\r\n\r\n    const isHidden = computed(() => props.hideIfEmpty && (!actualItems.value || !actualItems.value.length));\r\n\r\n    // #endregion\r\n\r\n    // #region Functions\r\n\r\n    /**\r\n     * Loads the items from the server.\r\n     */\r\n    const loadOptions = async (): Promise<ListItemBag[]> => {\r\n        const bag: GroupAttendanceDetailGetGroupLocationSchedulesRequestBag = {\r\n            groupGuid: props.groupGuid,\r\n            locationGuid: props.locationGuid,\r\n            date: props.isoDateString\r\n        };\r\n\r\n        if (!props.shouldLoadItemsWhetherValuesAreSet\r\n            && (!bag.groupGuid || !bag.locationGuid)) {\r\n            loadedItems.value = [];\r\n            return [];\r\n        }\r\n\r\n        const result = await invokeBlockAction<ListItemBag[]>(\"GetGroupLocationSchedules\", { bag });\r\n\r\n        if (result.isSuccess && result.data) {\r\n            loadedItems.value = result.data;\r\n            return result.data;\r\n        }\r\n        else {\r\n            if (props.shouldLogNotFoundError) {\r\n                console.error(result.errorMessage ?? \"Unknown error while loading data.\");\r\n            }\r\n\r\n            loadedItems.value = [];\r\n            return [];\r\n        }\r\n    };\r\n\r\n    // #endregion\r\n\r\n    // #region Watchers\r\n\r\n    /**\r\n     * Clears the loaded items any time the Group, Location, or Date change so that they have to be loaded again.\r\n     */\r\n    watch(() => [props.groupGuid, props.locationGuid, props.isoDateString], () => {\r\n        loadedItems.value = null;\r\n    });\r\n\r\n    // #endregion\r\n\r\n\r\n</script>","<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <div class=\"form-group search-filter\">\r\n        <TextBox v-model=\"searchText\" placeholder=\"Search\" />\r\n    </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { computed, PropType, ref, watch } from \"vue\";\r\n    import { createFilter, getAttendanceFullName, IAttendanceFilter, NoFilter } from \"./utils.partial\";\r\n    import TextBox from \"@Obsidian/Controls/textBox\";\r\n    import { debounce } from \"@Obsidian/Utility/util\";\r\n    import { GroupAttendanceDetailAttendanceBag } from \"@Obsidian/ViewModels/Blocks/Group/GroupAttendanceDetail/groupAttendanceDetailAttendanceBag\";\r\n\r\n    const isRegex: RegExp = /\\/(.+)\\/(.*)/; // Matches regex strings in the form /<regex>/<flags>\r\n    const debouncedUpdateSearchFilter = debounce(updateSearchFilter, 250);\r\n\r\n    const props = defineProps({\r\n        modelValue: {\r\n            type: Object as PropType<IAttendanceFilter>,\r\n            required: true\r\n        }\r\n    });\r\n\r\n    const emit = defineEmits<{\r\n        (e: \"update:modelValue\", value: IAttendanceFilter): void\r\n    }>();\r\n\r\n    //#region Values\r\n\r\n    let internalSearchText = ref<string>(\"\");\r\n\r\n    //#endregion\r\n\r\n    //#region Computed Values\r\n\r\n    const searchText = computed<string>({\r\n        get() {\r\n            return internalSearchText.value;\r\n        },\r\n        set(newValue: string) {\r\n            internalSearchText.value = newValue;\r\n            debouncedUpdateSearchFilter();\r\n        }\r\n    });\r\n\r\n    //#endregion\r\n\r\n    //#region Functions\r\n\r\n    /**\r\n     * Creates a filter that returns `true` if an attendance record's full name contains the specified text.\r\n     */\r\n    function createNameContainsFilter(text: string): IAttendanceFilter {\r\n        return createFilter((attendance: GroupAttendanceDetailAttendanceBag) => {\r\n            return getAttendanceFullName(attendance).toLocaleLowerCase().indexOf(text.toLocaleLowerCase()) >= 0;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a filter that returns `true` if an attendance record's full name matches the specified regex.\r\n     */\r\n    function createNameMatchesRegexFilter(regex: RegExp): IAttendanceFilter {\r\n        return createFilter((attendance: GroupAttendanceDetailAttendanceBag) => {\r\n            return regex.test(getAttendanceFullName(attendance));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates the search filter based on the current search text.\r\n     */\r\n    function updateSearchFilter(): void {\r\n        let filter: IAttendanceFilter = NoFilter;\r\n        const newValue = internalSearchText.value;\r\n\r\n        if (newValue) {\r\n            const match = newValue.match(isRegex);\r\n            if (match && match.length) {\r\n                try {\r\n                    const regex = new RegExp(match[1], match[2]);\r\n                    if (regex) {\r\n                        filter = createNameMatchesRegexFilter(regex);\r\n                    }\r\n                }\r\n                catch {\r\n                    // `newValue` is not a valid regex string so use a simple text match.\r\n                    filter = createNameContainsFilter(newValue);\r\n                }\r\n            }\r\n            else {\r\n                filter = createNameContainsFilter(newValue);\r\n            }\r\n        }\r\n\r\n        return emit(\"update:modelValue\", filter);\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Watchers\r\n\r\n    /**\r\n     * Clears the filter if the modelValue is set to NoFilter.\r\n     */\r\n    watch(() => props.modelValue, () => {\r\n        if (props.modelValue.isFilter(NoFilter)) {\r\n            internalSearchText.value = \"\";\r\n        }\r\n    });\r\n\r\n    //#endregion\r\n</script>","<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->\r\n<template>\r\n    <NotificationBox v-if=\"config.isAuthorizedGroupNotFoundError\" alertType=\"danger\">\r\n        <strong>Sorry</strong>\r\n        <p>Group was not found or you're not authorized to update the attendance for the selected group.</p>\r\n    </NotificationBox>\r\n    <NotificationBox v-if=\"config.isNoAttendanceOccurrencesError\" alertType=\"danger\">\r\n        <strong>No Occurrences</strong>\r\n        <p>There are currently not any active occurrences for selected group for which to take attendance.</p>\r\n    </NotificationBox>\r\n    <NotificationBox v-if=\"config.errorMessage\" alertType=\"danger\">\r\n        <strong>Sorry</strong>\r\n        <p>{{ config.errorMessage }}</p>\r\n    </NotificationBox>\r\n    <div v-if=\"!config.isConfigError\">\r\n        <Panel :title=\"panelTitle\">\r\n            <template v-if=\"config.isCampusFilteringAllowed\" #headerActions>\r\n                <div class=\"mr-2\">\r\n                    <CampusFilter v-model=\"campusFilter\" v-model:campusGuid=\"campusGuid\" />\r\n                </div>\r\n            </template>\r\n\r\n            <template #preBody>\r\n                <div class=\"attendance-header\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-xs-12 col-sm-4\">\r\n                            <DatePicker\r\n                                        v-if=\"config.attendanceOccurrenceDateSelectionMode === GroupAttendanceDetailDateSelectionMode.DatePicker\"\r\n                                        :modelValue=\"attendanceForDateString\"\r\n                                        @update:modelValue=\"onAttendanceForDateUpdated\"\r\n                                        :disabled=\"!isAutoSaveOn\"\r\n                                        :displayCurrentOption=\"false\"\r\n                                        :isCurrentDateOffset=\"false\"\r\n                                        :disableForceParse=\"false\"\r\n                                        :disableShowOnFocus=\"false\"\r\n                                        :disableHighlightToday=\"false\"\r\n                                        :disallowFutureDateSelection=\"config.isFutureOccurrenceDateSelectionRestricted\"\r\n                                        :disallowPastDateSelection=\"false\"\r\n                                        label=\"Attendance For\" />\r\n                            <div v-else-if=\"config.attendanceOccurrenceDateSelectionMode === GroupAttendanceDetailDateSelectionMode.Readonly\">\r\n                                <RockLabel>Attendance For</RockLabel>\r\n                                <div>{{ attendanceForDateString }}</div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"col-xs-12 col-sm-4\">\r\n                            <GroupLocationPicker\r\n                                                 v-if=\"config.locationSelectionMode === GroupAttendanceDetailLocationSelectionMode.GroupLocationPicker\"\r\n                                                :disabled=\"!isAutoSaveOn\"\r\n                                                 :groupGuid=\"config.groupGuid\"\r\n                                                 label=\"Location\"\r\n                                                 :showBlankItem=\"true\"\r\n                                                 @update:modelValue=\"onGroupLocationPickerChanged\" />\r\n                            <div v-else-if=\"config.locationSelectionMode === GroupAttendanceDetailLocationSelectionMode.Readonly\">\r\n                                <RockLabel>Location</RockLabel>\r\n                                <div>{{ config.locationLabel }}</div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"col-xs-12 col-sm-4\">\r\n                            <template v-if=\"locationGuid || !config.isLocationRequired\">\r\n                                <GroupLocationScheduleDatePicker v-if=\"config.attendanceOccurrenceDateSelectionMode === GroupAttendanceDetailDateSelectionMode.ScheduledDatePicker\"\r\n                                                                 @update:modelValue=\"onGroupLocationScheduleDatePickerChanged\"\r\n                                                                 :date=\"config.isDateIncludedInPickFromSchedule ? RockDateTime.parseISO(config.attendanceOccurrenceDate || '') : null\"\r\n                                                                 :disabled=\"!isAutoSaveOn\"\r\n                                                                 :groupGuid=\"config.groupGuid\"\r\n                                                                 label=\"Attendance For\"\r\n                                                                 :locationGuid=\"locationGuid\"\r\n                                                                 :numberOfPreviousDaysToShow=\"config.numberOfPreviousDaysToShow\"\r\n                                                                 :showBlankItem=\"true\" />\r\n\r\n                                <GroupLocationSchedulePicker v-else-if=\"config.scheduleSelectionMode === GroupAttendanceDetailScheduleSelectionMode.GroupLocationSchedulePicker && locationGuid\"\r\n                                                             @update:modelValue=\"onGroupLocationSchedulePickerChanged\"\r\n                                                             :disabled=\"!isAutoSaveOn\"\r\n                                                             :groupGuid=\"config.groupGuid\"\r\n                                                             label=\"Schedule\"\r\n                                                             :locationGuid=\"locationGuid\"\r\n                                                             :isoDateString=\"attendanceForDateIsoString\"\r\n                                                             :showBlankItem=\"true\" />\r\n\r\n                                <div v-else-if=\"config.scheduleSelectionMode === GroupAttendanceDetailScheduleSelectionMode.Readonly\">\r\n                                    <RockLabel>Schedule</RockLabel>\r\n                                    <div>{{ config.scheduleLabel }}</div>\r\n                                </div>\r\n                            </template>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <TransitionVerticalCollapse speed=\"fast\">\r\n                        <div class=\"mt-5\">\r\n                            <div class=\"d-flex align-items-end\">\r\n                                <InlineCheckBox\r\n                                                v-if=\"isDidNotMeetShown\"\r\n                                                class=\"mb-0\"\r\n                                                :modelValue=\"didNotOccur\"\r\n                                                :disabled=\"isSavingDidNotOccur || config.isDidNotMeetDisabled || !isAutoSaveOn\"\r\n                                                label=\"We Did Not Meet\"\r\n                                                @update:modelValue=\"onDidNotOccurChanged\" />\r\n\r\n                                <RadioButtonList\r\n                                                 v-if=\"config.attendanceOccurrenceTypes && config.isAttendanceOccurrenceTypesSectionShown\"\r\n                                                 :disabled=\"!isAutoSaveOn\"\r\n                                                 :formGroupClasses=\"'mb-0' + (isDidNotMeetShown ? ' ml-3' : '')\"\r\n                                                 :horizontal=\"true\"\r\n                                                 :items=\"config.attendanceOccurrenceTypes\"\r\n                                                 :label=\"config.attendanceOccurrenceTypesSectionLabel\"\r\n                                                 :modelValue=\"attendanceOccurrenceTypeGuid\"\r\n                                                 @update:modelValue=\"onAttendanceOccurrenceTypeChanged\" />\r\n\r\n                                <div class=\"ml-auto d-flex align-items-end\">\r\n                                    <PersonPicker\r\n                                                  v-if=\"config.isNewAttendeeAdditionAllowed\"\r\n                                                  :disabled=\"!isAutoSaveOn\"\r\n                                                  formGroupClasses=\"mb-0\"\r\n                                                  :label=\"addPersonAsLabel\"\r\n                                                  :modelValue=\"addPersonSelection\"\r\n                                                  @update:modelValue=\"onAddPerson($event)\" />\r\n                                    <RockButton\r\n                                                v-if=\"config.addGroupMemberPageUrl\"\r\n                                                btnType=\"default\"\r\n                                                :disabled=\"!isAutoSaveOn\"\r\n                                                @click=\"onAddGroupMemberClicked\">Add Group Member</RockButton>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </TransitionVerticalCollapse>\r\n                </div>\r\n            </template>\r\n\r\n            <template #default>\r\n                <NotificationBox v-if=\"errorMessage\" alertType=\"danger\">{{ errorMessage }}</NotificationBox>\r\n                <NotificationBox v-if=\"!isPrintingRoster && printRosterWarning\" alertType=\"warning\">{{ printRosterWarning }}</NotificationBox>\r\n\r\n                <TransitionVerticalCollapse speed=\"fast\">\r\n                    <div>\r\n                        <TransitionVerticalCollapse speed=\"fast\">\r\n                            <div v-show=\"!didNotOccur\">\r\n                                <div class=\"row\">\r\n                                    <div class=\"col-xs-12 col-sm-8 d-sm-flex\">\r\n                                        <DidAttendFilter v-model=\"didAttendFilter\" :attendances=\"attendances\" />\r\n                                        <SearchFilter v-model=\"searchFilter\" class=\"flex-grow-1 mt-2 mt-sm-0 ml-sm-2\" />\r\n                                    </div>\r\n                                    <div class=\"col-xs-12 col-sm-4 d-flex justify-content-end\">\r\n                                        <div class=\"form-group mb-sm-0 btn-group\">\r\n                                            <RockButton v-if=\"!config.isNotesSectionHidden\"\r\n                                                        btnSize=\"sm\"\r\n                                                        :btnType=\"isNotesShown ? 'primary' : 'default'\"\r\n                                                        :disabled=\"!isAutoSaveOn\"\r\n                                                        @click=\"onShowNotesClicked()\"><i class=\"fa fa-pencil-alt\"></i> Add Note</RockButton>\r\n                                            <RockButton v-if=\"config.isRosterDownloadShown\"\r\n                                                        btnType=\"default\"\r\n                                                        btnSize=\"sm\"\r\n                                                        :disabled=\"!isAutoSaveOn\"\r\n                                                        @click=\"onPrintAttendanceRosterClicked()\"><i class=\"fa fa-file-download\"></i> Roster</RockButton>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <TransitionVerticalCollapse speed=\"fast\" v-if=\"!config.isNotesSectionHidden\">\r\n                                    <div v-show=\"isNotesShown\">\r\n                                        <TextBox\r\n                                                 v-model=\"notes\"\r\n                                                :disabled=\"!isAutoSaveOn\"\r\n                                                 :label=\"config.notesSectionLabel || 'Notes'\"\r\n                                                 :rows=\"3\"\r\n                                                 textMode=\"multiline\"\r\n                                                 @update:modelValue=\"autoUpdateNotes\" />\r\n                                    </div>\r\n                                </TransitionVerticalCollapse>\r\n\r\n                                <InitialsFilter\r\n                                                v-if=\"!isLongListDisabled\"\r\n                                                v-model=\"rosterFilter\"\r\n                                                :attendances=\"attendances\"\r\n                                                :isFilterByFirstNameInitial=\"false\"\r\n                                                :isMultiselect=\"false\" />\r\n\r\n                                <AttendanceRoster\r\n                                                  :attendances=\"attendances\"\r\n                                                  class=\"form-group\"\r\n                                                  :disabled=\"!isAutoSaveOn\"\r\n                                                  :filterBy=\"attendanceFilterByDelegate\"\r\n                                                  :groupBy=\"attendanceGroupByDelegate\"\r\n                                                  :isLongListDisabled=\"isLongListDisabled\"\r\n                                                  :sortBy=\"attendanceSortByDelegate\"\r\n                                                  @attendanceChanged=\"onAttendanceChanged($event)\" />\r\n\r\n                            </div>\r\n                        </TransitionVerticalCollapse>\r\n                    </div>\r\n                </TransitionVerticalCollapse>\r\n            </template>\r\n\r\n            <template #footerActions>\r\n                <RockButton v-if=\"!isBackButtonHidden\" @click=\"onBackClicked()\">Back</RockButton>\r\n            </template>\r\n        </Panel>\r\n    </div>\r\n    <Modal v-if=\"modalOptions\"\r\n           v-model=\"modalOptions.isOpen\"\r\n           :cancelText=\"modalOptions.cancelText\"\r\n           :saveText=\"modalOptions.saveText\"\r\n           @save=\"onModalSave\">{{ modalOptions.text }}</Modal>\r\n</template>\r\n\r\n<style scoped>\r\n.attendance-header {\r\n    padding: 15px;\r\n    background-color: #FBFBFB;\r\n    border-bottom: 1px solid #DFE0E1;\r\n}\r\n\r\n.attendance-footer {\r\n    margin-left: -15px;\r\n    margin-right: -15px;\r\n    border-top: 1px solid #DFE0E1;\r\n}\r\n</style>\r\n\r\n<script setup lang=\"ts\">\r\n    import { computed, nextTick, ref } from \"vue\";\r\n    import DidAttendFilter from \"./GroupAttendanceDetail/didAttendFilter.partial.obs\";\r\n    import InitialsFilter from \"./GroupAttendanceDetail/initialsFilter.partial.obs\";\r\n    import AttendanceRoster from \"./GroupAttendanceDetail/attendanceRoster.partial.obs\";\r\n    import CampusFilter from \"./GroupAttendanceDetail/campusFilter.partial.obs\";\r\n    import { sortByFirstName, sortByLastName, createEveryFilter as every, createSortBy, createSwitch, IAttendanceFilter, NoFilter, DidAttendFilter as DidAttend, createModalOptions } from \"./GroupAttendanceDetail/utils.partial\";\r\n    import GroupLocationPicker from \"./GroupAttendanceDetail/groupLocationPicker.partial.obs\";\r\n    import GroupLocationScheduleDatePicker from \"./GroupAttendanceDetail/groupLocationScheduleDatePicker.partial.obs\";\r\n    import GroupLocationSchedulePicker from \"./GroupAttendanceDetail/groupLocationSchedulePicker.partial.obs\";\r\n    import SearchFilter from \"./GroupAttendanceDetail/searchFilter.partial.obs\";\r\n    import { AttendanceSortByDelegate, AttendanceFilterByDelegate, AttendanceGroupByDelegate, ModalOptionsBag } from \"./GroupAttendanceDetail/types.partial\";\r\n    import NotificationBox from \"@Obsidian/Controls/notificationBox.obs\";\r\n    import DatePicker from \"@Obsidian/Controls/datePicker.obs\";\r\n    import InlineCheckBox from \"@Obsidian/Controls/inlineCheckBox\";\r\n    import Modal from \"@Obsidian/Controls/modal\";\r\n    import Panel from \"@Obsidian/Controls/panel\";\r\n    import PersonPicker from \"@Obsidian/Controls/personPicker\";\r\n    import RadioButtonList from \"@Obsidian/Controls/radioButtonList\";\r\n    import RockButton from \"@Obsidian/Controls/rockButton\";\r\n    import RockLabel from \"@Obsidian/Controls/rockLabel\";\r\n    import TextBox from \"@Obsidian/Controls/textBox\";\r\n    import TransitionVerticalCollapse from \"@Obsidian/Controls/transitionVerticalCollapse\";\r\n    import { GroupAttendanceDetailDateSelectionMode } from \"@Obsidian/Enums/Blocks/Group/GroupAttendanceDetail/groupAttendanceDetailDateSelectionMode\";\r\n    import { GroupAttendanceDetailLocationSelectionMode } from \"@Obsidian/Enums/Blocks/Group/GroupAttendanceDetail/groupAttendanceDetailLocationSelectionMode\";\r\n    import { GroupAttendanceDetailScheduleSelectionMode } from \"@Obsidian/Enums/Blocks/Group/GroupAttendanceDetail/groupAttendanceDetailScheduleSelectionMode\";\r\n    import { AttendanceStatus } from \"@Obsidian/Enums/Event/attendanceStatus\";\r\n    import { Guid } from \"@Obsidian/Types\";\r\n    import { onConfigurationValuesChanged, useConfigurationValues, useInvokeBlockAction, useReloadBlock } from \"@Obsidian/Utility/block\";\r\n    import { RockDateTime } from \"@Obsidian/Utility/rockDateTime\";\r\n    import { GroupAttendanceDetailAddPersonRequestBag } from \"@Obsidian/ViewModels/Blocks/Group/GroupAttendanceDetail/groupAttendanceDetailAddPersonRequestBag\";\r\n    import { GroupAttendanceDetailAddPersonResponseBag } from \"@Obsidian/ViewModels/Blocks/Group/GroupAttendanceDetail/groupAttendanceDetailAddPersonResponseBag\";\r\n    import { GroupAttendanceDetailAttendanceBag } from \"@Obsidian/ViewModels/Blocks/Group/GroupAttendanceDetail/groupAttendanceDetailAttendanceBag\";\r\n    import { GroupAttendanceDetailGetAttendanceRequestBag } from \"@Obsidian/ViewModels/Blocks/Group/GroupAttendanceDetail/groupAttendanceDetailGetAttendanceRequestBag\";\r\n    import { GroupAttendanceDetailGetOrCreateRequestBag } from \"@Obsidian/ViewModels/Blocks/Group/GroupAttendanceDetail/groupAttendanceDetailGetOrCreateRequestBag\";\r\n    import { GroupAttendanceDetailInitializationBox } from \"@Obsidian/ViewModels/Blocks/Group/GroupAttendanceDetail/groupAttendanceDetailInitializationBox\";\r\n    import { GroupAttendanceDetailMarkAttendanceRequestBag } from \"@Obsidian/ViewModels/Blocks/Group/GroupAttendanceDetail/groupAttendanceDetailMarkAttendanceRequestBag\";\r\n    import { GroupAttendanceDetailPrintRosterRequestBag } from \"@Obsidian/ViewModels/Blocks/Group/GroupAttendanceDetail/groupAttendanceDetailPrintRosterRequestBag\";\r\n    import { GroupAttendanceDetailPrintRosterResponseBag } from \"@Obsidian/ViewModels/Blocks/Group/GroupAttendanceDetail/groupAttendanceDetailPrintRosterResponseBag\";\r\n    import { GroupAttendanceDetailUpdateAttendanceOccurrenceTypeRequestBag } from \"@Obsidian/ViewModels/Blocks/Group/GroupAttendanceDetail/groupAttendanceDetailUpdateAttendanceOccurrenceTypeRequestBag\";\r\n    import { GroupAttendanceDetailUpdateDidNotOccurRequestBag } from \"@Obsidian/ViewModels/Blocks/Group/GroupAttendanceDetail/groupAttendanceDetailUpdateDidNotOccurRequestBag\";\r\n    import { GroupAttendanceDetailUpdateNotesRequestBag } from \"@Obsidian/ViewModels/Blocks/Group/GroupAttendanceDetail/groupAttendanceDetailUpdateNotesRequestBag\";\r\n    import { AttendanceOccurrenceUpdatedMessageBag } from \"@Obsidian/ViewModels/Event/attendanceOccurrenceUpdatedMessageBag\";\r\n    import { AttendanceUpdatedMessageBag } from \"@Obsidian/ViewModels/Event/attendanceUpdatedMessageBag\";\r\n    import { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\n    import { getTopic, ITopic, ServerFunctions } from \"@Obsidian/Utility/realTime\";\r\n    import { areEqual } from \"@Obsidian/Utility/guid\";\r\n    import { isPromise, PromiseCompletionSource } from \"@Obsidian/Utility/promiseUtils\";\r\n    import { debounce } from \"@Obsidian/Utility/util\";\r\n\r\n    const config = ref(useConfigurationValues<GroupAttendanceDetailInitializationBox>());\r\n    const invokeBlockAction = useInvokeBlockAction();\r\n\r\n    type NullableListItemBags = ListItemBag | ListItemBag[] | null;\r\n\r\n    type GroupAttendanceTopic = ITopic<ServerFunctions<unknown>> & {\r\n        attendanceOccurrenceGuid: Guid,\r\n        groupGuid: Guid\r\n    };\r\n\r\n    const autoMarkAttendanceSwitch = createSwitch();\r\n    const autoMarkAttendance = autoMarkAttendanceSwitch.connectToFunc(markAttendance);\r\n\r\n    const autoUpdateDidNotOccurSwitch = createSwitch();\r\n    const autoUpdateDidNotOccur = autoUpdateDidNotOccurSwitch.connectToFunc(updateDidNotOccur);\r\n\r\n    const autoUpdateAttendanceOccurrenceTypeSwitch = createSwitch();\r\n    const autoUpdateAttendanceOccurrenceType = autoUpdateAttendanceOccurrenceTypeSwitch.connectToFunc(updateAttendanceOccurrenceType);\r\n\r\n    const autoUpdateNotesSwitch = createSwitch();\r\n    const autoUpdateNotes = autoUpdateNotesSwitch.connectToFunc(debouncePromise(updateNotes, 1000));\r\n\r\n    //#region Values\r\n\r\n    const isAutoSaveOn = ref<boolean>(true);\r\n    const modalOptions = ref<ModalOptionsBag | null>(null);\r\n    const isPrintingRoster = ref<boolean>(false);\r\n    const printRosterWarning = ref<string>(\"\");\r\n    const errorMessage = ref<string>(\"\");\r\n    const searchFilter = ref<IAttendanceFilter>(NoFilter);\r\n    const campusFilter = ref<IAttendanceFilter>(NoFilter);\r\n    const rosterFilter = ref<IAttendanceFilter>(NoFilter);\r\n    const didAttendFilter = ref<IAttendanceFilter>(NoFilter);\r\n    const attendanceOccurrenceGuid = ref<string | null | undefined>(config.value.attendanceOccurrenceGuid);\r\n    const attendanceForDate = ref<RockDateTime>(\r\n        (config.value.attendanceOccurrenceDate\r\n         ? RockDateTime.parseISO(config.value.attendanceOccurrenceDate)\r\n         : null) ?? RockDateTime.now()\r\n    );\r\n    const attendanceOccurrenceTypeGuid = ref<Guid | undefined>(config.value.selectedAttendanceOccurrenceTypeValue ?? undefined);\r\n    const locationGuid = ref<Guid | undefined | null>(config.value.locationGuid);\r\n    const scheduleGuid = ref<Guid | undefined | null>(config.value.scheduleGuid);\r\n    const didNotOccur = ref<boolean>(config.value.isDidNotMeetChecked);\r\n    const isSavingDidNotOccur = ref<boolean>(false);\r\n    const campusGuid = ref<string | null | undefined>();\r\n    const notes = ref<string>(config.value.notes ?? \"\");\r\n    const topic = ref<GroupAttendanceTopic | null>();\r\n    const isNotesShown = ref<boolean>(false);\r\n    const addPersonSelection = ref<ListItemBag | undefined>();\r\n\r\n    //#endregion\r\n\r\n    //#region Computed Values\r\n\r\n    const isDidNotMeetShown = computed<boolean>(() => !config.value.isDidNotMeetDisabled || didNotOccur.value);\r\n    const dateFormat = computed(() => config.value.attendanceOccurrenceDateSelectionMode === GroupAttendanceDetailDateSelectionMode.DatePicker ? \"yyyy-MM-dd\" : \"dddd, MMMM d, yyyy\");\r\n    const attendanceForDateIsoString = computed<string | null>(() => attendanceForDate.value?.toISOString());\r\n    const attendanceForDateString = computed<string>(() => attendanceForDate.value.toASPString(dateFormat.value));\r\n    const addPersonAsLabel = computed(() => {\r\n        if (config.value.addPersonAs) {\r\n            return `Add Person As ${config.value.addPersonAs}`;\r\n        }\r\n        else {\r\n            return \"Add Person\";\r\n        }\r\n    });\r\n    const panelTitle = computed(() => config.value.groupName ? `${config.value.groupName} Attendance` : \"Group Attendance\");\r\n    const attendances = computed<GroupAttendanceDetailAttendanceBag[]>(() => config.value?.attendances ?? []);\r\n    const attendanceSortByDelegate = ref<AttendanceSortByDelegate>(createSortBy(sortByLastName, sortByFirstName));\r\n    const attendanceFilterByDelegate = computed<AttendanceFilterByDelegate | null>(() => {\r\n        const filtersToCheck = [campusFilter.value, searchFilter.value, rosterFilter.value, didAttendFilter.value];\r\n        const filters = filtersToCheck.filter(filterToCheck => !filterToCheck.isFilter(NoFilter));\r\n\r\n        if (filters.length === 0) {\r\n            return null;\r\n        }\r\n        else if (filters.length === 1) {\r\n            return filters[0].filter;\r\n        }\r\n        else {\r\n            return every(...filters).filter;\r\n        }\r\n    });\r\n    const attendanceGroupByDelegate = computed<AttendanceGroupByDelegate | null>(() => {\r\n        // Always group by last name regardless of sort.\r\n        return (attendance: GroupAttendanceDetailAttendanceBag) => attendance.lastName?.charAt(0) || \"?\";\r\n    });\r\n    const isBackButtonHidden = computed<boolean>(() => config.value.isBackButtonHidden || !config.value.backPageUrl);\r\n    const isLongListDisabled = computed<boolean>(() => config.value.isLongListDisabled || attendances.value.length <= 50);\r\n\r\n    //#endregion\r\n\r\n    //#region Event Handlers\r\n\r\n    /**\r\n     * Event handler for the \"Add Person As\" person being selected.\r\n     */\r\n    async function onAddPerson(personPickerSelection: NullableListItemBags): Promise<void> {\r\n        const personAliasGuid = (personPickerSelection as ListItemBag)?.value;\r\n\r\n        if (!personAliasGuid) {\r\n            // No person selected.\r\n            return;\r\n        }\r\n\r\n        const bag: GroupAttendanceDetailAddPersonRequestBag = {\r\n            attendanceOccurrenceGuid: attendanceOccurrenceGuid.value,\r\n            personAliasGuid: personAliasGuid\r\n        };\r\n\r\n        if (!attendanceOccurrenceGuid.value) {\r\n            // Create a new occurrence if it hasn't been saved yet.\r\n            await getOrCreateAttendanceOccurrence({\r\n                attendanceOccurrenceDate: attendanceForDateIsoString.value,\r\n                locationGuid: locationGuid.value,\r\n                scheduleGuid: scheduleGuid.value,\r\n\r\n                // This will ensure the expected attendance is updated on the existing or newly created occurrence.\r\n                addedPersonAliasGuid: bag.personAliasGuid,\r\n            });\r\n        }\r\n        else {\r\n            var result = await invokeBlockAction<GroupAttendanceDetailAddPersonResponseBag>(\"AddPerson\", { bag });\r\n\r\n            if (result?.data?.attendance) {\r\n                // Add the attendance to the array so it can be seen in the attendances list.\r\n                addToAttendancesArray(result?.data?.attendance);\r\n            }\r\n        }\r\n\r\n        // Clear person picker.\r\n        addPersonSelection.value = undefined;\r\n    }\r\n\r\n    /**\r\n     * Event handler for the \"Add Group Member\" button being clicked.\r\n     *\r\n     * Redirects to the \"Add Group Member\" page.\r\n     */\r\n    function onAddGroupMemberClicked(): void {\r\n        if (config.value.addGroupMemberPageUrl) {\r\n            location.href = config.value.addGroupMemberPageUrl;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Event handler for an attendance being clicked.\r\n     */\r\n    async function onAttendanceChanged(attendance: GroupAttendanceDetailAttendanceBag): Promise<void> {\r\n        await autoMarkAttendance({\r\n            attendanceOccurrenceGuid: attendanceOccurrenceGuid.value,\r\n            personAliasId: attendance.personAliasId,\r\n            didAttend: attendance.didAttend\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Event handler for the \"Attendance For\" date being updated.\r\n     */\r\n    async function onAttendanceForDateUpdated(dateString: string | null): Promise<void> {\r\n        attendanceForDate.value = (dateString ? RockDateTime.parseISO(dateString) : null) ?? RockDateTime.now();\r\n\r\n        await getAttendanceOccurrence({\r\n            attendanceOccurrenceDate: attendanceForDateIsoString.value,\r\n            locationGuid: locationGuid.value,\r\n            scheduleGuid: scheduleGuid.value\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Event handler for the Attendance Occurrence Type being changed.\r\n     */\r\n    async function onAttendanceOccurrenceTypeChanged(newAttendanceOccurrenceType: Guid): Promise<void> {\r\n        attendanceOccurrenceTypeGuid.value = newAttendanceOccurrenceType;\r\n        await autoUpdateAttendanceOccurrenceType({\r\n            attendanceOccurrenceGuid: attendanceOccurrenceGuid.value,\r\n            attendanceOccurrenceTypeGuid: newAttendanceOccurrenceType\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Event handler for the Back button being clicked.\r\n     */\r\n    function onBackClicked(): void {\r\n        if (config.value.backPageUrl) {\r\n            window.location.href = config.value.backPageUrl;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Event handler for the \"We did not meet\" button being clicked.\r\n     */\r\n    async function onDidNotOccurChanged(newDidNotOccur: boolean): Promise<void> {\r\n        if (config.value.isDidNotMeetDisabled) {\r\n            // Do not allow updates.\r\n            return;\r\n        }\r\n\r\n        if (didNotOccur.value === newDidNotOccur) {\r\n            // Ignore if value didn't change.\r\n            return;\r\n        }\r\n\r\n        // If there are attendances marked as DidAttend and the individual is checking \"We Did Not Meet\",\r\n        // then confirm with the individual before saving.\r\n        if (newDidNotOccur && attendances.value.some(DidAttend.filter)) {\r\n            modalOptions.value = createModalOptions({\r\n                saveText: \"Yes\",\r\n                cancelText: \"No\",\r\n                text: \"Attendance has already been taken for this occurrence. Continue?\",\r\n                onCancel(): void {\r\n                    didNotOccur.value = true;\r\n                    nextTick(() => didNotOccur.value = false);\r\n                },\r\n                async onSave(): Promise<void> {\r\n                    didNotOccur.value = newDidNotOccur;\r\n                    await autoUpdateDidNotOccur({\r\n                        attendanceOccurrenceGuid: attendanceOccurrenceGuid.value,\r\n                        didNotOccur: newDidNotOccur\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            didNotOccur.value = newDidNotOccur;\r\n            autoUpdateDidNotOccur({\r\n                attendanceOccurrenceGuid: attendanceOccurrenceGuid.value,\r\n                didNotOccur: newDidNotOccur\r\n            }).then(() => {/* do nothing */ });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Event handler for the config being changed.\r\n     */\r\n    function onConfigChanged(): void {\r\n        attendanceForDate.value = config.value.attendanceOccurrenceDate && RockDateTime.parseISO(config.value.attendanceOccurrenceDate) || RockDateTime.now();\r\n        locationGuid.value = config.value.locationGuid;\r\n        scheduleGuid.value = config.value.scheduleGuid;\r\n        attendanceOccurrenceGuid.value = config.value.attendanceOccurrenceGuid;\r\n        attendanceOccurrenceTypeGuid.value = config.value.selectedAttendanceOccurrenceTypeValue ?? undefined;\r\n        didNotOccur.value = config.value.isDidNotMeetChecked;\r\n        notes.value = config.value.notes ?? \"\";\r\n\r\n        // Start watching real-time events whenever the config (occurrence) changes.\r\n        startRealTime();\r\n    }\r\n\r\n    /**\r\n     * Event handler for the location picker being changed.\r\n     */\r\n    async function onGroupLocationPickerChanged(locationPickerSelection: NullableListItemBags): Promise<void> {\r\n        locationGuid.value = (locationPickerSelection as ListItemBag)?.value;\r\n\r\n        // Clear the selected schedule whenever the location changes.\r\n        scheduleGuid.value = null;\r\n\r\n        // Reset the attendance occurrence date if we are showing the scheduled date picker.\r\n        if (config.value.attendanceOccurrenceDateSelectionMode === GroupAttendanceDetailDateSelectionMode.ScheduledDatePicker) {\r\n            attendanceForDate.value = RockDateTime.now();\r\n        }\r\n\r\n        await getAttendanceOccurrence({\r\n            attendanceOccurrenceDate: attendanceForDateIsoString.value,\r\n            locationGuid: locationGuid.value,\r\n            scheduleGuid: scheduleGuid.value\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Event handler for the schedule+date picker being changed.\r\n     */\r\n    async function onGroupLocationScheduleDatePickerChanged(scheduleDatePickerSelection: NullableListItemBags): Promise<void> {\r\n        const selectedValue = (scheduleDatePickerSelection as ListItemBag)?.value;\r\n\r\n        if (selectedValue) {\r\n            const [date, guid] = selectedValue.split(\"|\");\r\n            attendanceForDate.value = RockDateTime.parseISO(date) ?? RockDateTime.now();\r\n            scheduleGuid.value = guid;\r\n        }\r\n\r\n        await getAttendanceOccurrence({\r\n            attendanceOccurrenceDate: attendanceForDateIsoString.value,\r\n            locationGuid: locationGuid.value,\r\n            scheduleGuid: scheduleGuid.value\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Event handler for the schedule picker being changed.\r\n     */\r\n    async function onGroupLocationSchedulePickerChanged(schedulePickerSelection: NullableListItemBags): Promise<void> {\r\n        scheduleGuid.value = (schedulePickerSelection as ListItemBag)?.value;\r\n\r\n        await getAttendanceOccurrence({\r\n            attendanceOccurrenceDate: attendanceForDateIsoString.value,\r\n            locationGuid: locationGuid.value,\r\n            scheduleGuid: scheduleGuid.value\r\n        });\r\n    }\r\n\r\n    async function onModalSave(): Promise<void> {\r\n        if (modalOptions.value) {\r\n            const result = modalOptions.value.onSave();\r\n            if (isPromise(result)) {\r\n                await result;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Event handler for the Notes button being clicked.\r\n     */\r\n    function onShowNotesClicked(): void {\r\n        isNotesShown.value = !isNotesShown.value;\r\n    }\r\n\r\n    /**\r\n     * Event handler for the Roster button being clicked.\r\n     */\r\n    async function onPrintAttendanceRosterClicked(): Promise<void> {\r\n        await printAttendanceRoster();\r\n    }\r\n\r\n    /**\r\n     * Event handler for attendance update being received from the server in real-time.\r\n     */\r\n    function onAttendanceUpdatedFromServer(message: AttendanceUpdatedMessageBag): void {\r\n        if (message.occurrenceGuid !== attendanceOccurrenceGuid.value) {\r\n            // Ignore if not for this occurrence.\r\n            return;\r\n        }\r\n\r\n        const attendance = attendances.value.find(attendance => areEqual(attendance.personGuid, message.personGuid));\r\n\r\n        if (attendance) {\r\n            attendance.didAttend = message.status === AttendanceStatus.DidAttend;\r\n        }\r\n        else {\r\n            const bag: GroupAttendanceDetailGetAttendanceRequestBag = {\r\n                attendanceGuid: message.attendanceGuid\r\n            };\r\n\r\n            // Attendance was added outside of this browser so add it here (it could have been added by an individual on another device).\r\n            invokeBlockAction<GroupAttendanceDetailAttendanceBag>(\"GetAttendance\", { bag })\r\n                .then(result => result?.data)\r\n                .then((attendance: GroupAttendanceDetailAttendanceBag | null) => {\r\n                    addToAttendancesArray(attendance);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds an attendance record to the array so it can be seen in the attendances list.\r\n     */\r\n    function addToAttendancesArray(attendance: GroupAttendanceDetailAttendanceBag | null): void {\r\n        if (!attendance) {\r\n            return;\r\n        }\r\n\r\n        // Check if the Attendance record already exists added before adding it.\r\n        const existingAttendance = attendances.value.find(a => areEqual(a.personGuid, attendance.personGuid));\r\n\r\n        if (existingAttendance) {\r\n            // Update the existing attendance \"did attend\" value to whatever was passed in.\r\n            existingAttendance.didAttend = attendance.didAttend;\r\n        }\r\n        else {\r\n            config.value.attendances = [...config.value.attendances ?? [], attendance];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Event handler for attendance update being received from the server in real-time.\r\n     */\r\n    function onAttendanceOccurrenceUpdatedFromServer(message: AttendanceOccurrenceUpdatedMessageBag): void {\r\n        if (message.occurrenceGuid !== attendanceOccurrenceGuid.value) {\r\n            // Ignore if not for this occurrence.\r\n            return;\r\n        }\r\n\r\n        if (message.didNotOccur !== didNotOccur.value) {\r\n            // Turn off auto-save before updating the value bound to our control.\r\n            autoUpdateDidNotOccurSwitch.off();\r\n\r\n            didNotOccur.value = !!message.didNotOccur;\r\n\r\n            // Turn on auto-save after the bindings are updated.\r\n            nextTick(() => autoUpdateDidNotOccurSwitch.on());\r\n\r\n            if (!message.didNotOccur) {\r\n                // Start auto-updating attendance if meeting did occur after the bindings are updated.\r\n                nextTick(() => autoMarkAttendanceSwitch.on());\r\n            }\r\n        }\r\n\r\n        if (message.attendanceOccurrenceTypeGuid !== attendanceOccurrenceTypeGuid.value) {\r\n            // Turn off auto-save before updating the value bound to our control.\r\n            autoUpdateAttendanceOccurrenceTypeSwitch.off();\r\n\r\n            attendanceOccurrenceTypeGuid.value = message.attendanceOccurrenceTypeGuid ?? undefined;\r\n\r\n            // Turn on auto-save after the bindings are updated.\r\n            nextTick(() => autoUpdateAttendanceOccurrenceTypeSwitch.on());\r\n        }\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Functions\r\n\r\n    /**\r\n     * Subscribes to the real-time GroupAttendanceTopic and returns it.\r\n     */\r\n    async function getGroupAttendanceTopic(groupGuid: Guid, attendanceOccurrenceGuid: Guid): Promise<GroupAttendanceTopic> {\r\n        const topic = await getTopic(\"Rock.RealTime.Topics.EntityUpdatedTopic\");\r\n\r\n        await invokeBlockAction(\"SubscribeToRealTime\", { connectionId: topic.connectionId, groupGuid });\r\n\r\n        // Associate the AttendanceOccurrence and Group unique identifiers to the topic so we don't have to keep passing them around.\r\n        Object.defineProperty(topic, \"attendanceOccurrenceGuid\", {\r\n            value: attendanceOccurrenceGuid,\r\n            writable: false\r\n        });\r\n\r\n        Object.defineProperty(topic, \"groupGuid\", {\r\n            value: groupGuid,\r\n            writable: false\r\n        });\r\n\r\n        return topic as GroupAttendanceTopic;\r\n    }\r\n\r\n    /**\r\n     * Gets the AttendanceOccurrence based on the currently selected date, location, and schedule.\r\n     * Note that the returned occurrence may not have been saved yet.\r\n     */\r\n    async function getAttendanceOccurrence(bag: GroupAttendanceDetailGetOrCreateRequestBag): Promise<void> {\r\n        autoSaveOff();\r\n\r\n        // Clear the error before calling get/create.\r\n        errorMessage.value = \"\";\r\n\r\n        const response = await invokeBlockAction<GroupAttendanceDetailInitializationBox>(\"Get\", { bag });\r\n\r\n        if (response?.data) {\r\n            config.value = response.data;\r\n            onConfigChanged();\r\n        }\r\n        else if (config) {\r\n            config.value.errorMessage = response?.errorMessage || \"An unexpected error occurred.\";\r\n        }\r\n\r\n        // Wait until the next tick to give the UI a chance to update values from the new config.\r\n        nextTick(() => autoSaveOn());\r\n    }\r\n\r\n    /**\r\n     * Gets or creates the AttendanceOccurrence based on the currently selected date, location, and schedule.\r\n     */\r\n    async function getOrCreateAttendanceOccurrence(bag: GroupAttendanceDetailGetOrCreateRequestBag): Promise<void> {\r\n        autoSaveOff();\r\n\r\n        // Clear the error before calling get/create.\r\n        errorMessage.value = \"\";\r\n\r\n        const response = await invokeBlockAction<GroupAttendanceDetailInitializationBox>(\"GetOrCreate\", { bag });\r\n\r\n        if (response?.data) {\r\n            config.value = response.data;\r\n            onConfigChanged();\r\n        }\r\n        else if (config) {\r\n            config.value.errorMessage = response?.errorMessage || \"An unexpected error occurred.\";\r\n        }\r\n\r\n        // Wait until the next tick to give the UI a chance to update values from the new config.\r\n        nextTick(() => autoSaveOn());\r\n    }\r\n\r\n    /**\r\n     * Updates the DidAttend value of a single Attendance.\r\n     */\r\n    async function markAttendance(bag: GroupAttendanceDetailMarkAttendanceRequestBag): Promise<void> {\r\n        if (!attendanceOccurrenceGuid.value) {\r\n            // Create a new occurrence if it hasn't been saved yet.\r\n            await getOrCreateAttendanceOccurrence({\r\n                attendanceOccurrenceDate: attendanceForDateIsoString.value,\r\n                locationGuid: locationGuid.value,\r\n                scheduleGuid: scheduleGuid.value,\r\n\r\n                // This will ensure the expected attendance is updated on the existing or newly created occurrence.\r\n                updatedAttendances: attendances.value.filter(attendance => attendance.personAliasId === bag.personAliasId),\r\n            });\r\n        }\r\n        else {\r\n            await invokeBlockAction(\"MarkAttendance\", { bag });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prints the Attendance roster.\r\n     */\r\n    async function printAttendanceRoster(): Promise<void> {\r\n        try {\r\n            isPrintingRoster.value = true;\r\n\r\n            if (!attendanceOccurrenceGuid.value) {\r\n                // The attendance occurrence hasn't been created yet for the selected date, location, and schedule.\r\n                // Create it before printing the roster.\r\n\r\n                await getOrCreateAttendanceOccurrence({\r\n                    attendanceOccurrenceDate: attendanceForDateIsoString.value,\r\n                    attendanceOccurrenceGuid: attendanceOccurrenceGuid.value,\r\n                    locationGuid: locationGuid.value,\r\n                    scheduleGuid: scheduleGuid.value\r\n                });\r\n            }\r\n\r\n            const bag: GroupAttendanceDetailPrintRosterRequestBag = {\r\n                attendanceOccurrenceDate: attendanceForDateIsoString.value,\r\n                attendanceOccurrenceGuid: attendanceOccurrenceGuid.value,\r\n                locationGuid: locationGuid.value,\r\n                scheduleGuid: scheduleGuid.value\r\n            };\r\n\r\n            var result = await invokeBlockAction<GroupAttendanceDetailPrintRosterResponseBag>(\"PrintRoster\", { bag });\r\n\r\n            if (result?.errorMessage) {\r\n                printRosterWarning.value = result.errorMessage;\r\n            }\r\n            else if (result?.data?.redirectUrl) {\r\n                window.location.href = result.data.redirectUrl;\r\n            }\r\n        }\r\n        finally {\r\n            isPrintingRoster.value = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the type of the current AttendanceOccurrence.\r\n     */\r\n    async function updateAttendanceOccurrenceType(bag: GroupAttendanceDetailUpdateAttendanceOccurrenceTypeRequestBag): Promise<void> {\r\n        if (!attendanceOccurrenceGuid.value) {\r\n            // Create a new occurrence if it hasn't been saved yet.\r\n            await getOrCreateAttendanceOccurrence({\r\n                attendanceOccurrenceDate: attendanceForDateIsoString.value,\r\n                locationGuid: locationGuid.value,\r\n                scheduleGuid: scheduleGuid.value,\r\n\r\n                // This will ensure the updated attendance occurrence type is set on the existing or newly created occurrence.\r\n                updatedAttendanceOccurrenceTypeGuid: bag.attendanceOccurrenceTypeGuid,\r\n            });\r\n        }\r\n        else {\r\n            await invokeBlockAction(\"UpdateAttendanceOccurrenceType\", { bag });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the AttendanceOccurrence DidNotOccur value.\r\n     */\r\n    async function updateDidNotOccur(bag: GroupAttendanceDetailUpdateDidNotOccurRequestBag): Promise<void> {\r\n        if (isSavingDidNotOccur.value) {\r\n            // Skip if \"did not occur\" is already being saved.\r\n            return;\r\n        }\r\n\r\n        if (bag.didNotOccur) {\r\n            // If the occurrence did not happen, then stop auto-saving attendances before we auto-save \"did occur\".\r\n            autoMarkAttendanceSwitch.off();\r\n        }\r\n\r\n        try {\r\n            isSavingDidNotOccur.value = true;\r\n\r\n            if (!attendanceOccurrenceGuid.value) {\r\n                // Create a new occurrence if it hasn't been saved yet.\r\n                await getOrCreateAttendanceOccurrence({\r\n                    attendanceOccurrenceDate: attendanceForDateIsoString.value,\r\n                    locationGuid: locationGuid.value,\r\n                    scheduleGuid: scheduleGuid.value,\r\n\r\n                    // This will ensure the updated did not occur flag is set on the existing or newly created occurrence.\r\n                    updatedDidNotOccur: bag.didNotOccur,\r\n                });\r\n            }\r\n            else {\r\n                await invokeBlockAction<void>(\"UpdateDidNotOccur\", { bag });\r\n            }\r\n        }\r\n        finally {\r\n            isSavingDidNotOccur.value = false;\r\n        }\r\n\r\n        if (!bag.didNotOccur) {\r\n            // If the occurrence did happen, then start auto-saving attendances after \"did occur\" is auto-saved.\r\n            autoMarkAttendanceSwitch.on();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Saves the AttendanceOccurrence notes.\r\n     */\r\n    async function updateNotes(): Promise<void> {\r\n        const bag: GroupAttendanceDetailUpdateNotesRequestBag = {\r\n            attendanceOccurrenceGuid: attendanceOccurrenceGuid.value,\r\n            notes: notes.value\r\n        };\r\n\r\n        if (!attendanceOccurrenceGuid.value) {\r\n            // Create a new occurrence if it hasn't been saved yet.\r\n            await getOrCreateAttendanceOccurrence({\r\n                attendanceOccurrenceDate: attendanceForDateIsoString.value,\r\n                locationGuid: locationGuid.value,\r\n                scheduleGuid: scheduleGuid.value,\r\n\r\n                // This will ensure the updated notes are set on the existing or newly created occurrence.\r\n                updatedNotes: bag.notes,\r\n            });\r\n        }\r\n        else {\r\n            await invokeBlockAction<void>(\"UpdateNotes\", { bag });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Subscribes to the topic using the current Group and AttendanceOccurrence unique identifiers.\r\n     */\r\n    async function startRealTime(): Promise<GroupAttendanceTopic> {\r\n        const groupGuid = config.value.groupGuid;\r\n        const occurrenceGuid = attendanceOccurrenceGuid.value;\r\n\r\n        if (topic.value && areEqual(topic.value.groupGuid, groupGuid) && areEqual(topic.value.attendanceOccurrenceGuid, occurrenceGuid)) {\r\n            // Skip if already subscribed.\r\n            return topic.value;\r\n        }\r\n\r\n        if (!attendanceOccurrenceGuid.value || !config.value.groupGuid) {\r\n            throw \"Unable to start real-time\";\r\n        }\r\n\r\n        const groupAttendanceTopic = await getGroupAttendanceTopic(config.value.groupGuid, attendanceOccurrenceGuid.value);\r\n\r\n        groupAttendanceTopic.onDisconnected(async () => {\r\n            await startRealTime();\r\n        });\r\n\r\n        groupAttendanceTopic.on(\"attendanceUpdated\", onAttendanceUpdatedFromServer);\r\n        groupAttendanceTopic.on(\"attendanceOccurrenceUpdated\", onAttendanceOccurrenceUpdatedFromServer);\r\n\r\n        return groupAttendanceTopic;\r\n    }\r\n\r\n    /**\r\n     * Turns off auto-save functionality by turning off all auto-save switches.\r\n     */\r\n    function autoSaveOff(): void {\r\n        autoMarkAttendanceSwitch.off();\r\n        autoUpdateDidNotOccurSwitch.off();\r\n        autoUpdateAttendanceOccurrenceTypeSwitch.off();\r\n        autoUpdateNotesSwitch.off();\r\n        isAutoSaveOn.value = false;\r\n    }\r\n\r\n    /**\r\n     * Turns on auto-save functionality by turning on all auto-save switches.\r\n     */\r\n    function autoSaveOn(): void {\r\n        autoMarkAttendanceSwitch.on();\r\n        autoUpdateDidNotOccurSwitch.on();\r\n        autoUpdateAttendanceOccurrenceTypeSwitch.on();\r\n        autoUpdateNotesSwitch.on();\r\n        isAutoSaveOn.value = true;\r\n    }\r\n\r\n    /**\r\n     * Debounces the execution of a Promise.\r\n     */\r\n    function debouncePromise(func: () => Promise<void>, delayMs: number): () => Promise<void> {\r\n        const promise = new PromiseCompletionSource();\r\n\r\n        const internalDebounce = debounce(() => func().then(() => promise.resolve()), delayMs);\r\n\r\n        return async () => {\r\n            internalDebounce();\r\n            await promise.promise;\r\n        };\r\n    }\r\n\r\n    //#endregion\r\n\r\n    // Auto-save can be disabled by disabling all auto-save switches.\r\n    // autoMarkAttendanceSwitch.disable();\r\n    // autoUpdateAttendanceOccurrenceTypeSwitch.disable();\r\n    // autoUpdateDidNotOccurSwitch.disable();\r\n    // autoUpdateNotesSwitch.disable();\r\n\r\n    // Turn on auto-save right away.\r\n    autoSaveOn();\r\n\r\n    if (config.value.attendanceOccurrenceGuid) {\r\n        startRealTime();\r\n    }\r\n\r\n    onConfigurationValuesChanged(useReloadBlock());\r\n\r\n</script>\r\n"],"names":["bindThis","attendanceFilter","filter","bind","hasFilter","isFilter","createFilter","hasSameFilter","isSameFilter","createAggregateFilter","filters","aggregateAttendanceFilter","attendance","NoFilter","_","DidAttendFilter","didAttend","lastNameStartsWithFilters","getOrCreateLastNameStartsWithFilter","lastNameInitial","lastNameStartsWithFilter","_attendance$lastName","lastName","startsWith","firstNameStartsWithFilters","getOrCreateFirstNameStartsWithFilter","firstNameInitial","firstNameStartsWithFilter","_attendance$nickName","nickName","createSomeFilter","_len","arguments","length","attendanceFilters","Array","_key","some","createEveryFilter","_len2","_key2","every","attendanceFilter1","attendanceFilter2","isAggregateAttendanceFilter","f","createSortBy","firstBy","_len3","thenBys","_key3","attendance1","attendance2","comparison","thenByIndex","thenBy","sortByFirstName","compareStrings","sortByLastName","str1","str2","localeCompare","createSwitch","position","isDisabled","isOn","enable","disable","on","off","connectToFunc","func","_this","_ref","_asyncToGenerator","r","_x","apply","createModalOptions","options","isOpen","isCanceled","cancelText","saveText","text","newIsOpen","wasOpen","onCancel","result","isPromise","then","onSave","_this2","getAttendanceFullName","concat","didAttendFilterOrDefault","ref","props","modelValue","defaultFilter","allFilters","computed","get","set","newValue","emit","didAttendCount","attendances","getBtnType","isSelected","selectedBtnType","unselectedBtnType","setDefaultOrDidAttendFilter","value","notifyFiltersUpdated","watch","standardFieldProps","useStandardRockFormFieldProps","isScrollSupported","initialButtonsContainerElement","leftScrollButtonElement","rightScrollButtonElement","initialComponents","overflowingLeftInitialComponents","overflowingRightInitialComponents","initialsFilters","isAnyInitialFilterOverflowingToLeft","isAnyInitialFilterOverflowingToRight","isAnyActiveInitialFilterOverflowingToLeft","map","c","initialFilter","isAnyActiveInitialFilterOverflowingToRight","initials","isFilterByFirstNameInitial","a","charAt","toLocaleUpperCase","item","index","arr","indexOf","sort","onInitialFilterClicked","addOrRemoveInitialsFilter","onScrollLeftClicked","containerElement","scrollBy","left","offsetWidth","onScrollRightClicked","setInitialComponent","element","initial","getOrCreateInitialFilter","hasNoLastNameStartsWithFilters","isFilterSelected","isMultiselect","push","checkIfInitialsFilterButtonsAreOverflowing","isElementLeftOfElement","targetElement","targetElementLeftOffset","_element$getBoundingC","getBoundingClientRect","elementLeft","_targetElement$getBou","parentLeft","isElementRightOfElement","targetElementRightOffset","_element$getBoundingC2","elementRight","right","_targetElement$getBou2","parentRight","nextTick","checkIfInitialsFilterButtonsAreOverflowingToLeft","checkIfInitialsFilterButtonsAreOverflowingToRight","_leftScrollButtonElem","parentElement","components","leftOffset","overflowingComponents","initialComponent","existingOverflowingComponents","_rightScrollButtonEle","_rightScrollButtonEle2","rightOffset","debouncedScrollCheck","debounce","window","ResizeObserver","initialsFilterOverflowObserver","entries","forEach","onMounted","observe","onUnmounted","disconnect","styleInject","css","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","internalValue","useVModelPassthrough","internalCardCheckBoxClasses","cardCheckBoxClasses","controlWrapperClasses","sortedAttendances","sortByDelegate","sortBy","filteredAttendances","filterByDelegate","filterBy","attendanceGroups","groupBy","shouldGroup","isLongListDisabled","dictionary","keys","groupLabel","sortedDictionary","key","hasMultipleGroups","Object","onInternalAttendanceChanged","changed","campusPickerValue","campusGuid","_campusPickerValue$va","attendee","areEqual","invokeBlockAction","useInvokeBlockAction","standardProps","useStandardAsyncPickerProps","loadedItems","actualItems","loadOptions","isHidden","hideIfEmpty","_ref2","bag","groupGuid","isSuccess","data","_result$errorMessage","console","error","errorMessage","_props$date","locationGuid","numberOfPreviousDaysToShow","occurrenceDate","date","toISOString","shouldLoadItemsWhetherValuesAreSet","shouldLogNotFoundError","isoDateString","isRegex","debouncedUpdateSearchFilter","updateSearchFilter","internalSearchText","searchText","createNameContainsFilter","toLocaleLowerCase","createNameMatchesRegexFilter","regex","test","match","RegExp","_unused","config","useConfigurationValues","autoMarkAttendanceSwitch","autoMarkAttendance","markAttendance","autoUpdateDidNotOccurSwitch","autoUpdateDidNotOccur","updateDidNotOccur","autoUpdateAttendanceOccurrenceTypeSwitch","autoUpdateAttendanceOccurrenceType","updateAttendanceOccurrenceType","autoUpdateNotesSwitch","autoUpdateNotes","debouncePromise","updateNotes","isAutoSaveOn","modalOptions","isPrintingRoster","printRosterWarning","searchFilter","campusFilter","rosterFilter","didAttendFilter","attendanceOccurrenceGuid","attendanceForDate","attendanceOccurrenceDate","RockDateTime","parseISO","now","attendanceOccurrenceTypeGuid","_config$value$selecte","selectedAttendanceOccurrenceTypeValue","undefined","scheduleGuid","didNotOccur","isDidNotMeetChecked","isSavingDidNotOccur","notes","_config$value$notes","topic","isNotesShown","addPersonSelection","isDidNotMeetShown","isDidNotMeetDisabled","dateFormat","attendanceOccurrenceDateSelectionMode","GroupAttendanceDetailDateSelectionMode","DatePicker","attendanceForDateIsoString","_attendanceForDate$va","attendanceForDateString","toASPString","addPersonAsLabel","addPersonAs","panelTitle","groupName","_config$value$attenda","_config$value","attendanceSortByDelegate","attendanceFilterByDelegate","filtersToCheck","filterToCheck","attendanceGroupByDelegate","isBackButtonHidden","backPageUrl","onAddPerson","_onAddPerson","personPickerSelection","personAliasGuid","getOrCreateAttendanceOccurrence","addedPersonAliasGuid","_result$data","_result$data2","addToAttendancesArray","onAddGroupMemberClicked","addGroupMemberPageUrl","location","href","onAttendanceChanged","_x2","_onAttendanceChanged","personAliasId","onAttendanceForDateUpdated","_x3","_onAttendanceForDateUpdated","dateString","_ref3","getAttendanceOccurrence","onAttendanceOccurrenceTypeChanged","_x4","_onAttendanceOccurrenceTypeChanged","newAttendanceOccurrenceType","onBackClicked","onDidNotOccurChanged","_x5","_onDidNotOccurChanged","newDidNotOccur","DidAttend","onConfigChanged","_config$value$selecte2","_config$value$notes2","startRealTime","onGroupLocationPickerChanged","_x6","_onGroupLocationPickerChanged","locationPickerSelection","ScheduledDatePicker","onGroupLocationScheduleDatePickerChanged","_x7","_onGroupLocationScheduleDatePickerChanged","scheduleDatePickerSelection","selectedValue","_RockDateTime$parseIS","_selectedValue$split","split","_selectedValue$split2","_slicedToArray","guid","onGroupLocationSchedulePickerChanged","_x8","_onGroupLocationSchedulePickerChanged","schedulePickerSelection","onModalSave","_onModalSave","onShowNotesClicked","onPrintAttendanceRosterClicked","_onPrintAttendanceRosterClicked","printAttendanceRoster","onAttendanceUpdatedFromServer","message","occurrenceGuid","find","personGuid","status","AttendanceStatus","attendanceGuid","existingAttendance","_config$value$attenda2","onAttendanceOccurrenceUpdatedFromServer","_message$attendanceOc","getGroupAttendanceTopic","_x9","_x10","_getGroupAttendanceTopic","getTopic","connectionId","defineProperty","writable","_x11","_getAttendanceOccurrence","autoSaveOff","response","autoSaveOn","_x12","_getOrCreateAttendanceOccurrence","_x13","_markAttendance","updatedAttendances","_printAttendanceRoster","_result$data3","redirectUrl","_x14","_updateAttendanceOccurrenceType","updatedAttendanceOccurrenceTypeGuid","_x15","_updateDidNotOccur","updatedDidNotOccur","_updateNotes","updatedNotes","_startRealTime","groupAttendanceTopic","onDisconnected","delayMs","promise","PromiseCompletionSource","internalDebounce","resolve","onConfigurationValuesChanged","useReloadBlock"],"mappings":"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"}