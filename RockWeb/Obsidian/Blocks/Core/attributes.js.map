{"version":3,"file":"attributes.js","sources":["../../src/Core/attributes.ts"],"sourcesContent":["// <copyright>\r\n// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { Guid } from \"@Obsidian/Types\";\r\nimport { computed, defineComponent, ref, watch } from \"vue\";\r\nimport AttributeEditor from \"@Obsidian/Controls/attributeEditor\";\r\nimport Modal from \"@Obsidian/Controls/modal\";\r\nimport RockField from \"@Obsidian/Controls/rockField\";\r\nimport RockForm from \"@Obsidian/Controls/rockForm\";\r\nimport NotificationBox from \"@Obsidian/Controls/notificationBox.obs\";\r\nimport DropDownList from \"@Obsidian/Controls/dropDownList\";\r\nimport Block from \"@Obsidian/Templates/block\";\r\nimport RockButton from \"@Obsidian/Controls/rockButton\";\r\nimport TextBox from \"@Obsidian/Controls/textBox\";\r\nimport { FieldType } from \"@Obsidian/SystemGuids/fieldType\";\r\nimport { useConfigurationValues, useInvokeBlockAction } from \"@Obsidian/Utility/block\";\r\nimport { alert, confirmDelete } from \"@Obsidian/Utility/dialogs\";\r\nimport { normalize as normalizeGuid } from \"@Obsidian/Utility/guid\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport { PublicAttributeBag } from \"@Obsidian/ViewModels/Utility/publicAttributeBag\";\r\nimport { PublicEditableAttributeBag } from \"@Obsidian/ViewModels/Utility/publicEditableAttributeBag\";\r\n\r\ntype BlockConfiguration = {\r\n    attributeEntityTypeId: number;\r\n\r\n    entityTypeGuid?: Guid;\r\n\r\n    entityTypes?: ListItemBag[];\r\n\r\n    hideColumns: boolean;\r\n\r\n    enableShowInGrid: boolean;\r\n\r\n    allowSettingOfValues: boolean;\r\n\r\n    attributes: GridRow[];\r\n};\r\n\r\ntype EditAttribute = {\r\n    entityTypeQualifierColumn?: string | null;\r\n\r\n    entityTypeQualifierValue?: string | null;\r\n\r\n    attribute: PublicEditableAttributeBag;\r\n};\r\n\r\ntype GridRow = {\r\n    guid: Guid;\r\n\r\n    id: number;\r\n\r\n    name: string;\r\n\r\n    qualifier: string;\r\n\r\n    categories: string;\r\n\r\n    isActive: boolean;\r\n\r\n    attribute: PublicAttributeBag;\r\n\r\n    value: string;\r\n\r\n    isDeleteEnabled: boolean;\r\n\r\n    isSecurityEnabled: boolean;\r\n};\r\n\r\nexport default defineComponent({\r\n    name: \"Core.Attributes\",\r\n\r\n    components: {\r\n        NotificationBox,\r\n        AttributeEditor,\r\n        Block,\r\n        DropDownList,\r\n        Modal,\r\n        RockButton,\r\n        RockField,\r\n        RockForm,\r\n        TextBox\r\n    },\r\n\r\n    setup() {\r\n        const config = useConfigurationValues<BlockConfiguration>();\r\n        const invokeBlockAction = useInvokeBlockAction();\r\n\r\n        /** True if the entity type picker should be visible on the page. */\r\n        const showEntityTypePicker = computed(() => !config.entityTypeGuid);\r\n\r\n        /** The currently selected entity type by the user. */\r\n        const entityTypeGuid = ref(\"\");\r\n\r\n        /** The list of entity types to show in the entity type picker. */\r\n        const entityTypeOptions = computed(() => config.entityTypes ?? []);\r\n\r\n        /** True if we have a valid entity type selected or via configuration. */\r\n        const entityTypeSelectionIsValid = computed(() => !!config.entityTypeGuid || entityTypeGuid.value !== \"\");\r\n\r\n        /** True if the entity type qualifier text boxes should be shown. */\r\n        const showEntityTypeQualifier = computed(() => !config.entityTypeGuid);\r\n\r\n        /** The current value of the entity type qualifier column. */\r\n        const entityTypeQualifierColumn = ref(\"\");\r\n\r\n        /** The current value of the entity type qualifier value. */\r\n        const entityTypeQualifierValue = ref(\"\");\r\n\r\n        /** The attributes currently displayed in the pseudo-grid. */\r\n        const attributes = ref<GridRow[]>(config.attributes);\r\n\r\n        // #region Attribute Editing\r\n\r\n        /** The current attribute in an editable format. */\r\n        const editableAttribute = ref<PublicEditableAttributeBag | null>(null);\r\n\r\n        /** True if the edit attribute modal should be visible. */\r\n        const showEditAttributeModal = ref<boolean>(false);\r\n\r\n        /** True if the edit attribute form should attempt to submit it's data. */\r\n        const submitEditAttribute = ref<boolean>(false);\r\n\r\n        /** The title to display in the edit attribute modal. */\r\n        const editAttributeModalTitle = computed((): string => {\r\n            if (editableAttribute.value) {\r\n                return `Edit ${editableAttribute.value.name}`;\r\n            }\r\n\r\n            return \"\";\r\n        });\r\n\r\n        /**\r\n         * Start editing an attribute on the given row.\r\n         *\r\n         * @param row The row that represents the attribute.\r\n         */\r\n        const onEditAttribute = async (row: GridRow): Promise<void> => {\r\n            const result = await invokeBlockAction<EditAttribute>(\"GetEditAttribute\", {\r\n                attributeGuid: row.guid\r\n            });\r\n\r\n            if (!result.isSuccess || !result.data) {\r\n                return alert(result.errorMessage ?? \"Unable to edit attribute.\");\r\n            }\r\n\r\n            entityTypeQualifierColumn.value = result.data.entityTypeQualifierColumn ?? \"\";\r\n            entityTypeQualifierValue.value = result.data.entityTypeQualifierValue ?? \"\";\r\n            editableAttribute.value = result.data.attribute;\r\n            showEditAttributeModal.value = true;\r\n        };\r\n\r\n        /**\r\n         * Start the save operation by requesting the edit attribute form to\r\n         * validation and then trigger the submit event.\r\n         */\r\n        const startSaveEditAttribute = (): void => {\r\n            submitEditAttribute.value = true;\r\n        };\r\n\r\n        /**\r\n         * Save the attribute information to the server.\r\n         */\r\n        const saveEditAttribute = async (): Promise<void> => {\r\n            const result = await invokeBlockAction<GridRow>(\"SaveEditAttribute\", {\r\n                entityTypeGuid: entityTypeGuid.value,\r\n                entityTypeQualifierColumn: entityTypeQualifierColumn.value,\r\n                entityTypeQualifierValue: entityTypeQualifierValue.value,\r\n                attribute: editableAttribute.value\r\n            });\r\n\r\n            if (!result.isSuccess || !result.data) {\r\n                return alert(result.errorMessage ?? \"Unable to save attribute.\");\r\n            }\r\n\r\n            const index = attributes.value.findIndex(a => a.guid === result.data?.guid);\r\n\r\n            if (index !== -1) {\r\n                attributes.value.splice(index, 1, result.data);\r\n            }\r\n            else {\r\n                attributes.value.push(result.data);\r\n            }\r\n\r\n            editableAttribute.value = null;\r\n            showEditAttributeModal.value = false;\r\n        };\r\n\r\n        /**\r\n         * Event handler for when the add attribute button is clicked.\r\n         */\r\n        const onAddAttribute = (): void => {\r\n            editableAttribute.value = {\r\n                isActive: true,\r\n                fieldTypeGuid: normalizeGuid(FieldType.Text),\r\n                isPublic: false,\r\n                isSystem: false,\r\n                isRequired: false,\r\n                isShowInGrid: false,\r\n                isShowOnBulk: false,\r\n                isAnalytic: false,\r\n                isAllowSearch: false,\r\n                isAnalyticHistory: false,\r\n                isEnableHistory: false,\r\n                isIndexEnabled: false\r\n            };\r\n            showEditAttributeModal.value = true;\r\n            entityTypeQualifierColumn.value = \"\";\r\n            entityTypeQualifierValue.value = \"\";\r\n        };\r\n\r\n        /**\r\n         * Event handler for when a delete button on a row is clicked.\r\n         *\r\n         * @param row The row on which the delete button was clicked.\r\n         */\r\n        const onDeleteAttribute = async (row: GridRow): Promise<void> => {\r\n            const status = await confirmDelete(\"Attribute\");\r\n\r\n            if (!status) {\r\n                return;\r\n            }\r\n\r\n            const result = await invokeBlockAction<GridRow>(\"DeleteAttribute\", {\r\n                attributeGuid: row.guid\r\n            });\r\n\r\n            if (!result.isSuccess) {\r\n                return alert(result.errorMessage || \"Unable to delete attribute.\");\r\n            }\r\n\r\n            const index = attributes.value.findIndex(a => a.guid === row.guid);\r\n\r\n            if (index !== -1) {\r\n                attributes.value.splice(index, 1);\r\n            }\r\n        };\r\n\r\n        // #endregion\r\n\r\n        // #region Attribute Value Editing\r\n\r\n        /** The current attribute value in an editable format. */\r\n        const editAttributeValue = ref(\"\");\r\n        const editAttribute = ref<PublicAttributeBag | null>(null);\r\n\r\n        /** True if the edit attribute value modal should be visible. */\r\n        const showEditAttributeValueModal = ref<boolean>(false);\r\n\r\n        /** True if the edit attribute value form should attempt to submit it's data. */\r\n        const submitEditAttributeValue = ref<boolean>(false);\r\n\r\n        /** The title to display in the edit attribute value modal. */\r\n        const editAttributeValueModalTitle = computed((): string => {\r\n            if (editAttribute.value) {\r\n                return `${editAttribute.value.name} Value`;\r\n            }\r\n\r\n            return \"\";\r\n        });\r\n\r\n        /**\r\n         * Begins editing an attribute's value.\r\n         *\r\n         * @param row The row that initiated the action.\r\n         */\r\n        const onEditAttributeValue = async (row: GridRow): Promise<void> => {\r\n            if (!config.allowSettingOfValues) {\r\n                return;\r\n            }\r\n\r\n            const result = await invokeBlockAction<{ attribute: PublicAttributeBag, value: string }>(\"GetEditAttributeValue\", {\r\n                attributeGuid: row.guid\r\n            });\r\n\r\n            if (!result.isSuccess || !result.data) {\r\n                return alert(result.errorMessage ?? \"Unable to edit attribute value.\");\r\n            }\r\n\r\n            editAttribute.value = result.data.attribute;\r\n            editAttributeValue.value = result.data.value;\r\n            showEditAttributeValueModal.value = true;\r\n        };\r\n\r\n        /**\r\n         * Request that the edit value form attempt to validate and submit.\r\n         */\r\n        const startSaveEditAttributeValue = (): void => {\r\n            submitEditAttributeValue.value = true;\r\n        };\r\n\r\n        /**\r\n         * Performs the save operation for editing an attribute value.\r\n         */\r\n        const saveEditAttributeValue = async (): Promise<void> => {\r\n            const result = await invokeBlockAction<GridRow>(\"SaveEditAttributeValue\", {\r\n                attributeGuid: editAttribute.value?.attributeGuid,\r\n                value: editAttributeValue.value\r\n            });\r\n\r\n            if (!result.isSuccess || !result.data) {\r\n                return alert(result.errorMessage ?? \"Unable to save attribute value.\");\r\n            }\r\n\r\n            const index = attributes.value.findIndex(a => a.guid === result.data?.guid);\r\n\r\n            if (index !== -1) {\r\n                attributes.value.splice(index, 1, result.data);\r\n            }\r\n\r\n            editAttribute.value = null;\r\n            editAttributeValue.value = \"\";\r\n            showEditAttributeValueModal.value = false;\r\n        };\r\n\r\n        // #endregion\r\n\r\n        /**\r\n         * Gets the CSS classes to be applied to the delete button.\r\n         *\r\n         * @param row The row containing the delete button.\r\n         *\r\n         * @returns An array of class names.\r\n         */\r\n        const getDeleteButtonClass = (row: GridRow): string[] => {\r\n            const classes: string[] = [\"btn\", \"btn-danger\", \"btn-sm\", \"grid-delete-button\"];\r\n\r\n            if (!row.isDeleteEnabled) {\r\n                classes.push(\"disabled\");\r\n            }\r\n\r\n            return classes;\r\n        };\r\n\r\n        /**\r\n         * Gets the CSS classes to be applied to the data cell of a row.\r\n         *\r\n         * @param _row The row containing the data cell.\r\n         *\r\n         * @returns An array of class names.\r\n         */\r\n        const getDataCellClass = (_row: GridRow): string[] => {\r\n            if (config.allowSettingOfValues) {\r\n                return [\"grid-select-cell\"];\r\n            }\r\n            else {\r\n                return [\"grid-cell\"];\r\n            }\r\n        };\r\n\r\n        // Watch for changes to the user-selection of the entity type and update\r\n        // the list of attributes in the grid.\r\n        watch(entityTypeGuid, async () => {\r\n            if (entityTypeGuid.value === \"\") {\r\n                attributes.value = [];\r\n                return;\r\n            }\r\n\r\n            const result = await invokeBlockAction<GridRow[]>(\"GetAttributes\", {\r\n                entityTypeGuid: entityTypeGuid.value,\r\n            });\r\n\r\n            if (!result.isSuccess || !result.data) {\r\n                return;\r\n            }\r\n\r\n            attributes.value = result.data;\r\n        });\r\n\r\n        return {\r\n            attributes,\r\n            editableAttribute,\r\n            editAttribute,\r\n            editAttributeModalTitle,\r\n            editAttributeValue,\r\n            editAttributeValueModalTitle,\r\n            entityTypeGuid,\r\n            entityTypeOptions,\r\n            entityTypeQualifierColumn,\r\n            entityTypeQualifierValue,\r\n            getDataCellClass,\r\n            getDeleteButtonClass,\r\n            saveEditAttribute,\r\n            saveEditAttributeValue,\r\n            entityTypeSelectionIsValid,\r\n            onAddAttribute,\r\n            onDeleteAttribute,\r\n            onEditAttribute,\r\n            onEditAttributeValue,\r\n            onIgnore: () => { /* Intentionally blank */ },\r\n            showEditAttributeModal,\r\n            showEditAttributeValueModal,\r\n            showEntityTypeQualifier,\r\n            showEntityTypePicker,\r\n            startSaveEditAttribute,\r\n            startSaveEditAttributeValue,\r\n            submitEditAttribute,\r\n            submitEditAttributeValue\r\n        };\r\n    },\r\n\r\n    template: `\r\n<NotificationBox alertType=\"warning\">\r\n    This is an experimental block and should not be used in production.\r\n</NotificationBox>\r\n\r\n<Block title=\"Attribute List\">\r\n    <template #headerActions>\r\n        <div v-if=\"showEntityTypePicker\" class=\"form-inline panel-labels\">\r\n            <DropDownList v-model=\"entityTypeGuid\"\r\n                label=\"Entity Type\"\r\n                grouped\r\n                enhanceForLongLists\r\n                :items=\"entityTypeOptions\" />\r\n        </div>\r\n    </template>\r\n\r\n    <template #default>\r\n        <div v-if=\"entityTypeSelectionIsValid\" class=\"grid grid-panel\">\r\n            <div class=\"grid-actions border-bottom border-panel\">\r\n                <RockButton class=\"btn-add btn-grid-action\" btnType=\"link\" @click=\"onAddAttribute\"><i class=\"fa fa-plus-circle fa-fw\"></i></RockButton>\r\n            </div>\r\n\r\n            <div class=\"table-responsive\">\r\n                <table class=\"grid-table table table-bordered table-striped table-hover\">\r\n                    <thead>\r\n                        <tr align=\"left\">\r\n                            <th data-priority=\"1\" scope=\"col\" align=\"right\">Id</th>\r\n                            <th data-priority=\"1\" scope=\"col\">Qualifier</th>\r\n                            <th data-priority=\"1\" scope=\"col\">Name</th>\r\n                            <th data-priority=\"1\" scope=\"col\">Categories</th>\r\n                            <th data-priority=\"1\" scope=\"col\">Value</th>\r\n                            <th class=\"grid-columncommand\" data-priority=\"1\" scope=\"col\">&nbsp;</th>\r\n                            <th class=\"grid-columncommand\" data-priority=\"1\" scope=\"col\">&nbsp;</th>\r\n                            <th class=\"grid-columncommand\" data-priority=\"1\" scope=\"col\">&nbsp;</th>\r\n                        </tr>\r\n                    </thead>\r\n\r\n                    <tbody>\r\n                        <tr v-for=\"attribute in attributes\" :key=\"attribute.id\" align=\"left\" @click.stop=\"onEditAttributeValue(attribute)\">\r\n                            <td :class=\"getDataCellClass(attribute)\" data-priority=\"1\" style=\"white-space: nowrap;\" align=\"right\">{{ attribute.id }}</td>\r\n                            <td :class=\"getDataCellClass(attribute)\" data-priority=\"1\" style=\"white-space: nowrap;\">{{ attribute.qualifier }}</td>\r\n                            <td :class=\"getDataCellClass(attribute)\" data-priority=\"1\">{{ attribute.name }}</td>\r\n                            <td :class=\"getDataCellClass(attribute)\" data-priority=\"1\">{{ attribute.categories }}</td>\r\n                            <td :class=\"getDataCellClass(attribute)\" data-priority=\"1\">\r\n                                <RockField :modelValue=\"attribute.value\" :attribute=\"attribute.attribute\" :showLabel=\"false\" isCondensed />\r\n                            </td>\r\n                            <td class=\"grid-columncommand\" data-priority=\"1\" align=\"center\" @click.stop=\"onIgnore\">\r\n                                <a title=\"Edit\" class=\"btn btn-default btn-sm\" @click.prevent.stop=\"onEditAttribute(attribute)\"><i class=\"fa fa-pencil\"></i></a>\r\n                            </td>\r\n                            <td class=\"grid-columncommand\" data-priority=\"1\" align=\"center\" @click.stop=\"onIgnore\">\r\n                                <a title=\"Security\" class=\"btn btn-security btn-sm disabled\"><i class=\"fa fa-lock\"></i></a>\r\n                            </td>\r\n                            <td class=\"grid-columncommand\" data-priority=\"1\" align=\"center\" @click.stop=\"onIgnore\">\r\n                                <a title=\"Delete\" :class=\"getDeleteButtonClass(attribute)\" @click.prevent.stop=\"onDeleteAttribute(attribute)\"><i class=\"fa fa-times\"></i></a>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n        <NotificationBox v-else alertType=\"warning\">\r\n            Please select an entity to display attributes for.\r\n        </NotificationBox>\r\n    </template>\r\n</Block>\r\n\r\n<Modal v-model=\"showEditAttributeValueModal\" :title=\"editAttributeValueModalTitle\">\r\n    <RockForm v-model:submit=\"submitEditAttributeValue\" @submit=\"saveEditAttributeValue\">\r\n        <RockField v-model=\"editAttributeValue\" :attribute=\"editAttribute\" isEditMode />\r\n    </RockForm>\r\n\r\n    <template #customButtons>\r\n        <RockButton btnType=\"primary\" @click=\"startSaveEditAttributeValue\">Save</RockButton>\r\n    </template>\r\n</Modal>\r\n\r\n<Modal v-model=\"showEditAttributeModal\" :title=\"editAttributeModalTitle\">\r\n    <RockForm v-model:submit=\"submitEditAttribute\" @submit=\"saveEditAttribute\">\r\n        <div v-if=\"showEntityTypeQualifier\" class=\"well\">\r\n            <div class=\"row\">\r\n                <div class=\"col-md-6\">\r\n                    <TextBox v-model=\"entityTypeQualifierColumn\" label=\"Qualifier Field\" />\r\n                </div>\r\n\r\n                <div class=\"col-md-6\">\r\n                    <TextBox v-model=\"entityTypeQualifierValue\" label=\"Qualifier Value\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <AttributeEditor v-model=\"editableAttribute\" />\r\n    </RockForm>\r\n\r\n    <template #customButtons>\r\n        <RockButton btnType=\"primary\" @click=\"startSaveEditAttribute\">Save</RockButton>\r\n    </template>\r\n</Modal>\r\n`\r\n});\r\n"],"names":["defineComponent","name","components","NotificationBox","AttributeEditor","Block","DropDownList","Modal","RockButton","RockField","RockForm","TextBox","setup","config","useConfigurationValues","invokeBlockAction","useInvokeBlockAction","showEntityTypePicker","computed","entityTypeGuid","ref","entityTypeOptions","_config$entityTypes","entityTypes","entityTypeSelectionIsValid","value","showEntityTypeQualifier","entityTypeQualifierColumn","entityTypeQualifierValue","attributes","editableAttribute","showEditAttributeModal","submitEditAttribute","editAttributeModalTitle","concat","onEditAttribute","_ref","_asyncToGenerator","row","_result$data$entityTy","_result$data$entityTy2","result","attributeGuid","guid","isSuccess","data","_result$errorMessage","alert","errorMessage","attribute","_x","apply","arguments","startSaveEditAttribute","saveEditAttribute","_ref2","_result$errorMessage2","index","findIndex","a","_result$data","splice","push","onAddAttribute","isActive","fieldTypeGuid","normalizeGuid","FieldType","Text","isPublic","isSystem","isRequired","isShowInGrid","isShowOnBulk","isAnalytic","isAllowSearch","isAnalyticHistory","isEnableHistory","isIndexEnabled","onDeleteAttribute","_ref3","status","confirmDelete","_x2","editAttributeValue","editAttribute","showEditAttributeValueModal","submitEditAttributeValue","editAttributeValueModalTitle","onEditAttributeValue","_ref4","allowSettingOfValues","_result$errorMessage3","_x3","startSaveEditAttributeValue","saveEditAttributeValue","_ref5","_editAttribute$value","_result$errorMessage4","_result$data2","getDeleteButtonClass","classes","isDeleteEnabled","getDataCellClass","_row","watch","onIgnore","template"],"mappings":"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"}