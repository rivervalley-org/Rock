{"version":3,"file":"comparisonTypeOptions.js","sources":["../../../../Framework/Core/Reporting/comparisonTypeOptions.ts"],"sourcesContent":["// Copyright by the Spark Development Network\r\n//\r\n// Licensed under the Rock Community License (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.rockrms.com/license\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// </copyright>\r\n//\r\n\r\nimport { toNumber } from \"@Obsidian/Utility/numberUtils\";\r\nimport { ListItemBag } from \"@Obsidian/ViewModels/Utility/listItemBag\";\r\nimport { getComparisonName } from \"./comparisonType\";\r\nimport { ComparisonType } from \"@Obsidian/Enums/Reporting/comparisonType\";\r\n\r\n/**\r\n * The full list of comparison type options that can be used in pickers.\r\n */\r\nexport const comparisonTypeOptions: ListItemBag[] = [\r\n    {\r\n        value: ComparisonType.EqualTo.toString(),\r\n        text: getComparisonName(ComparisonType.EqualTo)\r\n    },\r\n    {\r\n        value: ComparisonType.NotEqualTo.toString(),\r\n        text: getComparisonName(ComparisonType.NotEqualTo)\r\n    },\r\n    {\r\n        value: ComparisonType.Contains.toString(),\r\n        text: getComparisonName(ComparisonType.Contains)\r\n    },\r\n    {\r\n        value: ComparisonType.DoesNotContain.toString(),\r\n        text: getComparisonName(ComparisonType.DoesNotContain)\r\n    },\r\n    {\r\n        value: ComparisonType.IsBlank.toString(),\r\n        text: getComparisonName(ComparisonType.IsBlank)\r\n    },\r\n    {\r\n        value: ComparisonType.IsNotBlank.toString(),\r\n        text: getComparisonName(ComparisonType.IsNotBlank)\r\n    },\r\n    {\r\n        value: ComparisonType.GreaterThan.toString(),\r\n        text: getComparisonName(ComparisonType.GreaterThan)\r\n    },\r\n    {\r\n        value: ComparisonType.GreaterThanOrEqualTo.toString(),\r\n        text: getComparisonName(ComparisonType.GreaterThanOrEqualTo)\r\n    },\r\n    {\r\n        value: ComparisonType.LessThan.toString(),\r\n        text: getComparisonName(ComparisonType.LessThan)\r\n    },\r\n    {\r\n        value: ComparisonType.LessThanOrEqualTo.toString(),\r\n        text: getComparisonName(ComparisonType.LessThanOrEqualTo)\r\n    },\r\n    {\r\n        value: ComparisonType.StartsWith.toString(),\r\n        text: getComparisonName(ComparisonType.StartsWith)\r\n    },\r\n    {\r\n        value: ComparisonType.EndsWith.toString(),\r\n        text: getComparisonName(ComparisonType.EndsWith)\r\n    },\r\n    {\r\n        value: ComparisonType.Between.toString(),\r\n        text: getComparisonName(ComparisonType.Between)\r\n    },\r\n    {\r\n        value: ComparisonType.RegularExpression.toString(),\r\n        text: getComparisonName(ComparisonType.RegularExpression)\r\n    }\r\n];\r\n\r\n/**\r\n * Gets the comparison type options that match the provides comparison type values.\r\n *\r\n * @param comparisonTypes The comparison type values to include in the list of options.\r\n *\r\n * @returns A filtered collection of ListItem objects that contain only the comparison types specified.\r\n */\r\nexport function getFilteredComparisonTypeOptions(...comparisonTypes: ComparisonType[]): ListItemBag[] {\r\n    let realComparisonTypes: ComparisonType = 0;\r\n\r\n    for (const comparisonType of comparisonTypes) {\r\n        realComparisonTypes |= comparisonType;\r\n    }\r\n\r\n    return comparisonTypeOptions.filter(c => {\r\n        return (realComparisonTypes & toNumber(c.value)) !== 0;\r\n    });\r\n}\r\n"],"names":["comparisonTypeOptions","value","ComparisonType","EqualTo","toString","text","getComparisonName","NotEqualTo","Contains","DoesNotContain","IsBlank","IsNotBlank","GreaterThan","GreaterThanOrEqualTo","LessThan","LessThanOrEqualTo","StartsWith","EndsWith","Between","RegularExpression","getFilteredComparisonTypeOptions","realComparisonTypes","_len","arguments","length","comparisonTypes","Array","_key","_i","_comparisonTypes","comparisonType","filter","c","toNumber"],"mappings":";;;;;;;;;;;;;;;AAwBO,gBAAMA,qBAAoC,oCAAG,CAChD;YACIC,EAAAA,KAAK,EAAEC,cAAc,CAACC,OAAO,CAACC,QAAQ,EAAE;YACxCC,EAAAA,IAAI,EAAEC,iBAAiB,CAACJ,cAAc,CAACC,OAAO,CAAA;YAClD,CAAC,EACD;YACIF,EAAAA,KAAK,EAAEC,cAAc,CAACK,UAAU,CAACH,QAAQ,EAAE;YAC3CC,EAAAA,IAAI,EAAEC,iBAAiB,CAACJ,cAAc,CAACK,UAAU,CAAA;YACrD,CAAC,EACD;YACIN,EAAAA,KAAK,EAAEC,cAAc,CAACM,QAAQ,CAACJ,QAAQ,EAAE;YACzCC,EAAAA,IAAI,EAAEC,iBAAiB,CAACJ,cAAc,CAACM,QAAQ,CAAA;YACnD,CAAC,EACD;YACIP,EAAAA,KAAK,EAAEC,cAAc,CAACO,cAAc,CAACL,QAAQ,EAAE;YAC/CC,EAAAA,IAAI,EAAEC,iBAAiB,CAACJ,cAAc,CAACO,cAAc,CAAA;YACzD,CAAC,EACD;YACIR,EAAAA,KAAK,EAAEC,cAAc,CAACQ,OAAO,CAACN,QAAQ,EAAE;YACxCC,EAAAA,IAAI,EAAEC,iBAAiB,CAACJ,cAAc,CAACQ,OAAO,CAAA;YAClD,CAAC,EACD;YACIT,EAAAA,KAAK,EAAEC,cAAc,CAACS,UAAU,CAACP,QAAQ,EAAE;YAC3CC,EAAAA,IAAI,EAAEC,iBAAiB,CAACJ,cAAc,CAACS,UAAU,CAAA;YACrD,CAAC,EACD;YACIV,EAAAA,KAAK,EAAEC,cAAc,CAACU,WAAW,CAACR,QAAQ,EAAE;YAC5CC,EAAAA,IAAI,EAAEC,iBAAiB,CAACJ,cAAc,CAACU,WAAW,CAAA;YACtD,CAAC,EACD;YACIX,EAAAA,KAAK,EAAEC,cAAc,CAACW,oBAAoB,CAACT,QAAQ,EAAE;YACrDC,EAAAA,IAAI,EAAEC,iBAAiB,CAACJ,cAAc,CAACW,oBAAoB,CAAA;YAC/D,CAAC,EACD;YACIZ,EAAAA,KAAK,EAAEC,cAAc,CAACY,QAAQ,CAACV,QAAQ,EAAE;YACzCC,EAAAA,IAAI,EAAEC,iBAAiB,CAACJ,cAAc,CAACY,QAAQ,CAAA;YACnD,CAAC,EACD;YACIb,EAAAA,KAAK,EAAEC,cAAc,CAACa,iBAAiB,CAACX,QAAQ,EAAE;YAClDC,EAAAA,IAAI,EAAEC,iBAAiB,CAACJ,cAAc,CAACa,iBAAiB,CAAA;YAC5D,CAAC,EACD;YACId,EAAAA,KAAK,EAAEC,cAAc,CAACc,UAAU,CAACZ,QAAQ,EAAE;YAC3CC,EAAAA,IAAI,EAAEC,iBAAiB,CAACJ,cAAc,CAACc,UAAU,CAAA;YACrD,CAAC,EACD;YACIf,EAAAA,KAAK,EAAEC,cAAc,CAACe,QAAQ,CAACb,QAAQ,EAAE;YACzCC,EAAAA,IAAI,EAAEC,iBAAiB,CAACJ,cAAc,CAACe,QAAQ,CAAA;YACnD,CAAC,EACD;YACIhB,EAAAA,KAAK,EAAEC,cAAc,CAACgB,OAAO,CAACd,QAAQ,EAAE;YACxCC,EAAAA,IAAI,EAAEC,iBAAiB,CAACJ,cAAc,CAACgB,OAAO,CAAA;YAClD,CAAC,EACD;YACIjB,EAAAA,KAAK,EAAEC,cAAc,CAACiB,iBAAiB,CAACf,QAAQ,EAAE;YAClDC,EAAAA,IAAI,EAAEC,iBAAiB,CAACJ,cAAc,CAACiB,iBAAiB,CAAA;YAC5D,CAAC,GACJ;YASM,SAASC,gCAAgCA,GAAsD;cAClG,IAAIC,mBAAmC,GAAG,CAAC,CAAA;YAAC,EAAA,KAAA,IAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EADIC,eAAe,GAAAC,IAAAA,KAAA,CAAAJ,IAAA,GAAAK,IAAA,GAAA,CAAA,EAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA,EAAA,EAAA;YAAfF,IAAAA,eAAe,CAAAE,IAAA,CAAAJ,GAAAA,SAAA,CAAAI,IAAA,CAAA,CAAA;YAAA,GAAA;YAG/D,EAAA,KAAA,IAAAC,EAAA,GAAA,CAAA,EAAAC,gBAAA,GAA6BJ,eAAe,EAAAG,EAAA,GAAAC,gBAAA,CAAAL,MAAA,EAAAI,EAAA,EAAE,EAAA;YAAzC,IAAA,IAAME,cAAc,GAAAD,gBAAA,CAAAD,EAAA,CAAA,CAAA;YACrBP,IAAAA,mBAAmB,IAAIS,cAAc,CAAA;YACzC,GAAA;YAEA,EAAA,OAAO9B,qBAAqB,CAAC+B,MAAM,CAACC,CAAC,IAAI;gBACrC,OAAO,CAACX,mBAAmB,GAAGY,QAAQ,CAACD,CAAC,CAAC/B,KAAK,CAAC,MAAM,CAAC,CAAA;YAC1D,GAAC,CAAC,CAAA;YACN;;;;;;;;"}